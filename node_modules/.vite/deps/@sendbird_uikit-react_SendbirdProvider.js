import {
  USER_ACTIONS
} from "./chunk-5OTCRE3N.js";
import {
  GlobalModalProvider,
  VoicePlayerProvider,
  VoiceRecorderProvider,
  bn
} from "./chunk-THAKGUBC.js";
import {
  $e,
  A,
  Ao,
  Ar,
  Ce,
  Co,
  De,
  Er,
  F,
  Fr,
  Fr2,
  Go,
  H,
  He,
  Ho,
  I,
  K2 as K,
  Kn,
  L2 as L,
  Ln,
  LocalizationProvider,
  MediaQueryProvider,
  Oe,
  On,
  Oo,
  Pr,
  Qn,
  Re,
  S,
  Sn,
  So,
  T2 as T,
  Tt,
  U2 as U,
  Un,
  Ur,
  Ve,
  Vn,
  Vo,
  Wn,
  Ze,
  dr,
  f2 as f,
  g,
  g2,
  getCaseResolvedReplyType,
  getCaseResolvedThreadReplySelectType,
  getStringSet,
  ie,
  isTextuallyNull,
  it,
  jr,
  k,
  kn,
  le,
  m,
  n,
  ne,
  noop,
  o,
  pn,
  qr,
  r,
  require_prop_types,
  s,
  t,
  t2,
  te,
  ue,
  useMediaQueryContext,
  uuidv4,
  v,
  v3 as v2,
  vr,
  w,
  xn,
  xr,
  ys,
  ze,
  zo
} from "./chunk-SC6Q4D3X.js";
import {
  SendbirdSdkContext,
  __assign,
  __awaiter,
  __generator,
  __spreadArray,
  useSendbirdStateContext
} from "./chunk-JYKYS726.js";
import {
  DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT,
  VOICE_RECORDER_DEFAULT_MAX,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-ZUUM5UVF.js";
import {
  require_react_dom
} from "./chunk-OCHDJWGW.js";
import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@sendbird/uikit-react/SendbirdProvider.js
var import_react3 = __toESM(require_react());

// node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/context.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-tools/dist/esm/constants/applicationAttributes.js
var applicationAttributes = {
  reactions: "reactions",
  message_search_v3: "message_search_v3",
  enable_og_tag: "enable_og_tag",
  enable_message_threading: "enable_message_threading",
  allow_broadcast_channel: "allow_broadcast_channel",
  allow_super_group_channel: "allow_super_group_channel"
};

// node_modules/@sendbird/uikit-tools/dist/esm/hooks/usePreservedCallback.js
var import_react = __toESM(require_react(), 1);
function usePreservedCallback(callback) {
  const callbackRef = (0, import_react.useRef)(callback);
  (0, import_react.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react.useCallback)((...args) => callbackRef.current(...args), [callbackRef]);
}

// node_modules/@sendbird/uikit-tools/dist/esm/utils/snakeToCamel.js
function snakeToCamel(obj) {
  if (typeof obj !== "object" || obj === null) {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((item) => snakeToCamel(item));
  }
  const result = {};
  Object.keys(obj).forEach((key) => {
    const camelKey = key.replace(/_\w/g, (m2) => m2[1].toUpperCase());
    result[camelKey] = snakeToCamel(obj[key]);
  });
  return result;
}

// node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/initialConfig.js
var initialConfig = {
  common: {
    enableUsingDefaultUserProfile: false
  },
  groupChannel: {
    channel: {
      enableMention: false,
      enableOgtag: true,
      enableReactions: true,
      enableTypingIndicator: true,
      enableVoiceMessage: false,
      input: {
        camera: {
          enablePhoto: true,
          enableVideo: true
        },
        enableDocument: true,
        gallery: {
          enablePhoto: true,
          enableVideo: true
        }
      },
      replyType: "quote_reply",
      threadReplySelectType: "thread"
    },
    channelList: {
      enableMessageReceiptStatus: false,
      enableTypingIndicator: false
    },
    setting: {
      enableMessageSearch: false
    }
  },
  openChannel: {
    channel: {
      enableOgtag: true,
      input: {
        camera: {
          enablePhoto: true,
          enableVideo: true
        },
        enableDocument: true,
        gallery: {
          enablePhoto: true,
          enableVideo: true
        }
      }
    }
  }
};

// node_modules/@sendbird/uikit-tools/dist/esm/utils/isSameType.js
function isSameType(a, b) {
  return Object.prototype.toString.call(a) === Object.prototype.toString.call(b);
}

// node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/utils.js
function getConfigsByPriority(localConfigs, remoteConfigs) {
  const prioritizedConfigs = Object.assign({}, remoteConfigs);
  Object.keys(localConfigs).forEach((key) => {
    if (Object.prototype.hasOwnProperty.call(prioritizedConfigs, key) && isSameType(localConfigs[key], prioritizedConfigs[key])) {
      if (typeof localConfigs[key] === "object") {
        prioritizedConfigs[key] = getConfigsByPriority(localConfigs[key], prioritizedConfigs[key]);
      } else {
        prioritizedConfigs[key] = localConfigs[key];
      }
    }
  });
  return prioritizedConfigs;
}
function isRawSBUConfigPayload(json) {
  return typeof json === "object" && "configuration" in json && "updated_at" in json;
}

// node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/configManager.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MemoryStorage = {
  items: {},
  getItem(key) {
    var _a;
    return __awaiter2(this, void 0, void 0, function* () {
      return (_a = MemoryStorage.items[key]) !== null && _a !== void 0 ? _a : null;
    });
  },
  setItem(key, value) {
    return __awaiter2(this, void 0, void 0, function* () {
      MemoryStorage.items[key] = value;
    });
  }
};
var UIKitConfigManager = class {
  constructor(storage) {
    this.storage = storage !== null && storage !== void 0 ? storage : MemoryStorage;
  }
  init(appId) {
    this.key = `sbu@${appId}.uikitConfiguration`;
    return this.get();
  }
  get safeKey() {
    if (!this.key)
      throw new Error("Please UIKitConfigManager.init() first");
    return this.key;
  }
  update(remoteConfigPayload) {
    return __awaiter2(this, void 0, void 0, function* () {
      const storedConfigPayload = yield this.get();
      const mergedConfigPayload = {
        updatedAt: remoteConfigPayload.updatedAt,
        configuration: getConfigsByPriority(remoteConfigPayload.configuration, storedConfigPayload.configuration)
      };
      yield this.storage.setItem(this.safeKey, JSON.stringify(mergedConfigPayload));
      return mergedConfigPayload;
    });
  }
  get() {
    return __awaiter2(this, void 0, void 0, function* () {
      const initialPayload = {
        updatedAt: 0,
        configuration: initialConfig
      };
      try {
        const storedConfig = yield this.storage.getItem(this.safeKey);
        if (storedConfig) {
          return JSON.parse(storedConfig);
        } else {
          return initialPayload;
        }
      } catch (_a) {
        return initialPayload;
      }
    });
  }
};

// node_modules/@sendbird/uikit-tools/dist/esm/uikitConfiguration/internal/context.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getApplicationAttributes(sdk) {
  var _a, _b;
  return (_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes) !== null && _b !== void 0 ? _b : [];
}
var UIKitConfigContext = (0, import_react2.createContext)({
  initDashboardConfigs: () => Promise.resolve(),
  configs: initialConfig,
  configsWithAppAttr: () => initialConfig
});
var UIKitConfigProvider = ({ storage, children, localConfigs = {} }) => {
  const [remoteConfigs, setRemoteConfigs] = (0, import_react2.useState)(initialConfig);
  const [manager] = (0, import_react2.useState)(() => new UIKitConfigManager(storage));
  const initDashboardConfigs = (0, import_react2.useCallback)((sdk) => __awaiter3(void 0, void 0, void 0, function* () {
    const storedConfigPayload = yield manager.init(sdk.appId);
    if (sdk.appInfo && sdk.appInfo.uikitConfigInfo.lastUpdatedAt === storedConfigPayload.updatedAt) {
      setRemoteConfigs(storedConfigPayload.configuration);
    } else {
      try {
        const response = yield sdk.getUIKitConfiguration();
        if (isRawSBUConfigPayload(response.json)) {
          const remoteConfigPayload = snakeToCamel(response.json);
          const updatedConfigPayload = yield manager.update(remoteConfigPayload);
          setRemoteConfigs(updatedConfigPayload.configuration);
        }
      } catch (_a) {
        setRemoteConfigs(storedConfigPayload.configuration);
      }
    }
  }), [manager]);
  const configs = getConfigsByPriority(localConfigs, remoteConfigs);
  const configsWithAppAttr = usePreservedCallback((sdk) => ({
    groupChannel: {
      channel: {
        get enableReactions() {
          return configs.groupChannel.channel.enableReactions && getApplicationAttributes(sdk).includes(applicationAttributes.reactions);
        },
        get enableOgtag() {
          return configs.groupChannel.channel.enableOgtag && getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag);
        }
      },
      setting: {
        get enableMessageSearch() {
          return configs.groupChannel.setting.enableMessageSearch && getApplicationAttributes(sdk).includes(applicationAttributes.message_search_v3);
        }
      }
    },
    openChannel: {
      channel: {
        get enableOgtag() {
          return configs.openChannel.channel.enableOgtag && getApplicationAttributes(sdk).includes(applicationAttributes.enable_og_tag);
        }
      }
    }
  }));
  return import_react2.default.createElement(UIKitConfigContext.Provider, { value: { initDashboardConfigs, configs, configsWithAppAttr } }, children);
};
var useUIKitConfig = () => (0, import_react2.useContext)(UIKitConfigContext);

// node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function getUrls(urls) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var settings = {
    mimeType: options.mimeType || null,
    onBeforeSend: options.onBeforeSend || Function.prototype,
    onSuccess: options.onSuccess || Function.prototype,
    onError: options.onError || Function.prototype,
    onComplete: options.onComplete || Function.prototype
  };
  var urlArray = Array.isArray(urls) ? urls : [urls];
  var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {
    return null;
  });
  function isValidCss(text) {
    var isString = typeof text === "string";
    var isHTML = isString && text.trim().charAt(0) === "<";
    return isString && !isHTML;
  }
  function onError2(xhr, urlIndex) {
    settings.onError(xhr, urlArray[urlIndex], urlIndex);
  }
  function onSuccess2(responseText, urlIndex) {
    var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);
    responseText = returnVal === false ? "" : returnVal || responseText;
    urlQueue[urlIndex] = responseText;
    if (urlQueue.indexOf(null) === -1) {
      settings.onComplete(urlQueue);
    }
  }
  var parser = document.createElement("a");
  urlArray.forEach(function(url, i) {
    parser.setAttribute("href", url);
    parser.href = String(parser.href);
    var isIElte9 = Boolean(document.all && !window.atob);
    var isIElte9CORS = isIElte9 && parser.host.split(":")[0] !== location.host.split(":")[0];
    if (isIElte9CORS) {
      var isSameProtocol = parser.protocol === location.protocol;
      if (isSameProtocol) {
        var xdr = new XDomainRequest();
        xdr.open("GET", url);
        xdr.timeout = 0;
        xdr.onprogress = Function.prototype;
        xdr.ontimeout = Function.prototype;
        xdr.onload = function() {
          var text = xdr.responseText;
          if (isValidCss(text)) {
            onSuccess2(text, i);
          } else {
            onError2(xdr, i);
          }
        };
        xdr.onerror = function(err) {
          onError2(xdr, i);
        };
        setTimeout(function() {
          xdr.send();
        }, 0);
      } else {
        console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(url, ")"));
        onError2(null, i);
      }
    } else {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      if (settings.mimeType && xhr.overrideMimeType) {
        xhr.overrideMimeType(settings.mimeType);
      }
      settings.onBeforeSend(xhr, url, i);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          var text = xhr.responseText;
          if (xhr.status < 400 && isValidCss(text)) {
            onSuccess2(text, i);
          } else if (xhr.status === 0 && isValidCss(text)) {
            onSuccess2(text, i);
          } else {
            onError2(xhr, i);
          }
        }
      };
      xhr.send();
    }
  });
}
function getCssData(options) {
  var regex2 = {
    cssComments: /\/\*[\s\S]+?\*\//g,
    cssImports: /(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g
  };
  var settings = {
    rootElement: options.rootElement || document,
    include: options.include || 'style,link[rel="stylesheet"]',
    exclude: options.exclude || null,
    filter: options.filter || null,
    skipDisabled: options.skipDisabled !== false,
    useCSSOM: options.useCSSOM || false,
    onBeforeSend: options.onBeforeSend || Function.prototype,
    onSuccess: options.onSuccess || Function.prototype,
    onError: options.onError || Function.prototype,
    onComplete: options.onComplete || Function.prototype
  };
  var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {
    return !matchesSelector(node, settings.exclude);
  });
  var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {
    return null;
  });
  function handleComplete() {
    var isComplete = cssArray.indexOf(null) === -1;
    if (isComplete) {
      cssArray.reduce(function(skipIndices, value, i) {
        if (value === "") {
          skipIndices.push(i);
        }
        return skipIndices;
      }, []).reverse().forEach(function(skipIndex) {
        return [sourceNodes, cssArray].forEach(function(arr) {
          return arr.splice(skipIndex, 1);
        });
      });
      var cssText = cssArray.join("");
      settings.onComplete(cssText, cssArray, sourceNodes);
    }
  }
  function handleSuccess(cssText, cssIndex, node, sourceUrl) {
    var returnVal = settings.onSuccess(cssText, node, sourceUrl);
    cssText = returnVal !== void 0 && Boolean(returnVal) === false ? "" : returnVal || cssText;
    resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {
      if (cssArray[cssIndex] === null) {
        errorData.forEach(function(data) {
          return settings.onError(data.xhr, node, data.url);
        });
        if (!settings.filter || settings.filter.test(resolvedCssText)) {
          cssArray[cssIndex] = resolvedCssText;
        } else {
          cssArray[cssIndex] = "";
        }
        handleComplete();
      }
    });
  }
  function parseImportData(cssText, baseUrl) {
    var ignoreRules = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    var importData = {};
    importData.rules = (cssText.replace(regex2.cssComments, "").match(regex2.cssImports) || []).filter(function(rule) {
      return ignoreRules.indexOf(rule) === -1;
    });
    importData.urls = importData.rules.map(function(rule) {
      return rule.replace(regex2.cssImports, "$1");
    });
    importData.absoluteUrls = importData.urls.map(function(url) {
      return getFullUrl$1(url, baseUrl);
    });
    importData.absoluteRules = importData.rules.map(function(rule, i) {
      var oldUrl = importData.urls[i];
      var newUrl = getFullUrl$1(importData.absoluteUrls[i], baseUrl);
      return rule.replace(oldUrl, newUrl);
    });
    return importData;
  }
  function resolveImports(cssText, node, baseUrl, callbackFn) {
    var __errorData = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : [];
    var __errorRules = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
    var importData = parseImportData(cssText, baseUrl, __errorRules);
    if (importData.rules.length) {
      getUrls(importData.absoluteUrls, {
        onBeforeSend: function onBeforeSend2(xhr, url, urlIndex) {
          settings.onBeforeSend(xhr, node, url);
        },
        onSuccess: function onSuccess2(cssText2, url, urlIndex) {
          var returnVal = settings.onSuccess(cssText2, node, url);
          cssText2 = returnVal === false ? "" : returnVal || cssText2;
          var responseImportData = parseImportData(cssText2, url, __errorRules);
          responseImportData.rules.forEach(function(rule, i) {
            cssText2 = cssText2.replace(rule, responseImportData.absoluteRules[i]);
          });
          return cssText2;
        },
        onError: function onError2(xhr, url, urlIndex) {
          __errorData.push({
            xhr,
            url
          });
          __errorRules.push(importData.rules[urlIndex]);
          resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
        },
        onComplete: function onComplete2(responseArray) {
          responseArray.forEach(function(importText, i) {
            cssText = cssText.replace(importData.rules[i], importText);
          });
          resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
        }
      });
    } else {
      callbackFn(cssText, __errorData);
    }
  }
  if (sourceNodes.length) {
    sourceNodes.forEach(function(node, i) {
      var linkHref = node.getAttribute("href");
      var linkRel = node.getAttribute("rel");
      var isLink = node.nodeName.toLowerCase() === "link" && linkHref && linkRel && linkRel.toLowerCase().indexOf("stylesheet") !== -1;
      var isSkip = settings.skipDisabled === false ? false : node.disabled;
      var isStyle = node.nodeName.toLowerCase() === "style";
      if (isLink && !isSkip) {
        var isURIScheme = linkHref.indexOf("data:text/css") !== -1;
        if (isURIScheme) {
          var cssText = decodeURIComponent(linkHref.substring(linkHref.indexOf(",") + 1));
          if (settings.useCSSOM) {
            cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {
              return rule.cssText;
            }).join("");
          }
          handleSuccess(cssText, i, node, location.href);
        } else {
          getUrls(linkHref, {
            mimeType: "text/css",
            onBeforeSend: function onBeforeSend2(xhr, url, urlIndex) {
              settings.onBeforeSend(xhr, node, url);
            },
            onSuccess: function onSuccess2(cssText2, url, urlIndex) {
              var sourceUrl = getFullUrl$1(linkHref);
              handleSuccess(cssText2, i, node, sourceUrl);
            },
            onError: function onError2(xhr, url, urlIndex) {
              cssArray[i] = "";
              settings.onError(xhr, node, url);
              handleComplete();
            }
          });
        }
      } else if (isStyle && !isSkip) {
        var _cssText = node.textContent;
        if (settings.useCSSOM) {
          _cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {
            return rule.cssText;
          }).join("");
        }
        handleSuccess(_cssText, i, node, location.href);
      } else {
        cssArray[i] = "";
        handleComplete();
      }
    });
  } else {
    settings.onComplete("", []);
  }
}
function getFullUrl$1(url, base) {
  var d = document.implementation.createHTMLDocument("");
  var b = d.createElement("base");
  var a = d.createElement("a");
  d.head.appendChild(b);
  d.body.appendChild(a);
  b.href = base || document.baseURI || (document.querySelector("base") || {}).href || location.href;
  a.href = url;
  return a.href;
}
function matchesSelector(elm, selector) {
  var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;
  return matches.call(elm, selector);
}
var balancedMatch = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp)
    a = maybeMatch(a, str);
  if (b instanceof RegExp)
    b = maybeMatch(b, str);
  var r2 = range(a, b, str);
  return r2 && {
    start: r2[0],
    end: r2[1],
    pre: str.slice(0, r2[0]),
    body: str.slice(r2[0] + a.length, r2[1]),
    post: str.slice(r2[1] + b.length)
  };
}
function maybeMatch(reg, str) {
  var m2 = str.match(reg);
  return m2 ? m2[0] : null;
}
balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;
  if (ai >= 0 && bi > 0) {
    if (a === b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;
    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [begs.pop(), bi];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }
        bi = str.indexOf(b, i + 1);
      }
      i = ai < bi && ai >= 0 ? ai : bi;
    }
    if (begs.length) {
      result = [left, right];
    }
  }
  return result;
}
function parseCss(css) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var defaults2 = {
    preserveStatic: true,
    removeComments: false
  };
  var settings = _extends({}, defaults2, options);
  var errors = [];
  function error(msg) {
    throw new Error("CSS parse error: ".concat(msg));
  }
  function match(re) {
    var m2 = re.exec(css);
    if (m2) {
      css = css.slice(m2[0].length);
      return m2;
    }
  }
  function open() {
    return match(/^{\s*/);
  }
  function close() {
    return match(/^}/);
  }
  function whitespace() {
    match(/^\s*/);
  }
  function comment() {
    whitespace();
    if (css[0] !== "/" || css[1] !== "*") {
      return;
    }
    var i = 2;
    while (css[i] && (css[i] !== "*" || css[i + 1] !== "/")) {
      i++;
    }
    if (!css[i]) {
      return error("end of comment is missing");
    }
    var str = css.slice(2, i);
    css = css.slice(i + 2);
    return {
      type: "comment",
      comment: str
    };
  }
  function comments() {
    var cmnts = [];
    var c;
    while (c = comment()) {
      cmnts.push(c);
    }
    return settings.removeComments ? [] : cmnts;
  }
  function selector() {
    whitespace();
    while (css[0] === "}") {
      error("extra closing bracket");
    }
    var m2 = match(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);
    if (m2) {
      var _selector = m2[0].trim();
      var selectorItems;
      var hasComment = /\/\*/.test(_selector);
      if (hasComment) {
        _selector = _selector.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "");
      }
      var hasCommaInQuotes = /["']\w*,\w*["']/.test(_selector);
      if (hasCommaInQuotes) {
        _selector = _selector.replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m3) {
          return m3.replace(/,/g, "‌");
        });
      }
      var hasMultipleSelectors = /,/.test(_selector);
      if (hasMultipleSelectors) {
        selectorItems = _selector.split(/\s*(?![^(]*\)),\s*/);
      } else {
        selectorItems = [_selector];
      }
      if (hasCommaInQuotes) {
        selectorItems = selectorItems.map(function(s2) {
          return s2.replace(/\u200C/g, ",");
        });
      }
      return selectorItems;
    }
  }
  function declaration() {
    if (css[0] === "@") {
      return at_rule();
    }
    match(/^([;\s]*)+/);
    var comment_regexp = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var prop = match(/^(\*?[-#/*\\\w.]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!prop) {
      return;
    }
    prop = prop[0].trim();
    if (!match(/^:\s*/)) {
      return error("property missing ':'");
    }
    var val = match(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/);
    var ret = {
      type: "declaration",
      property: prop.replace(comment_regexp, ""),
      value: val ? val[0].replace(comment_regexp, "").trim() : ""
    };
    match(/^[;\s]*/);
    return ret;
  }
  function declarations() {
    if (!open()) {
      return error("missing '{'");
    }
    var d;
    var decls = comments();
    while (d = declaration()) {
      decls.push(d);
      decls = decls.concat(comments());
    }
    if (!close()) {
      return error("missing '}'");
    }
    return decls;
  }
  function keyframe() {
    whitespace();
    var vals = [];
    var m2;
    while (m2 = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
      vals.push(m2[1]);
      match(/^,\s*/);
    }
    if (vals.length) {
      return {
        type: "keyframe",
        values: vals,
        declarations: declarations()
      };
    }
  }
  function at_keyframes() {
    var m2 = match(/^@([-\w]+)?keyframes\s*/);
    if (!m2) {
      return;
    }
    var vendor = m2[1];
    m2 = match(/^([-\w]+)\s*/);
    if (!m2) {
      return error("@keyframes missing name");
    }
    var name = m2[1];
    if (!open()) {
      return error("@keyframes missing '{'");
    }
    var frame;
    var frames = comments();
    while (frame = keyframe()) {
      frames.push(frame);
      frames = frames.concat(comments());
    }
    if (!close()) {
      return error("@keyframes missing '}'");
    }
    return {
      type: "keyframes",
      name,
      vendor,
      keyframes: frames
    };
  }
  function at_page() {
    var m2 = match(/^@page */);
    if (m2) {
      var sel = selector() || [];
      return {
        type: "page",
        selectors: sel,
        declarations: declarations()
      };
    }
  }
  function at_page_margin_box() {
    var m2 = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);
    if (m2) {
      var name = "".concat(m2[1], "-").concat(m2[2]) + (m2[3] ? "-".concat(m2[3]) : "");
      return {
        type: "page-margin-box",
        name,
        declarations: declarations()
      };
    }
  }
  function at_fontface() {
    var m2 = match(/^@font-face\s*/);
    if (m2) {
      return {
        type: "font-face",
        declarations: declarations()
      };
    }
  }
  function at_supports() {
    var m2 = match(/^@supports *([^{]+)/);
    if (m2) {
      return {
        type: "supports",
        supports: m2[1].trim(),
        rules: rules()
      };
    }
  }
  function at_host() {
    var m2 = match(/^@host\s*/);
    if (m2) {
      return {
        type: "host",
        rules: rules()
      };
    }
  }
  function at_media() {
    var m2 = match(/^@media([^{]+)*/);
    if (m2) {
      return {
        type: "media",
        media: (m2[1] || "").trim(),
        rules: rules()
      };
    }
  }
  function at_custom_m() {
    var m2 = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (m2) {
      return {
        type: "custom-media",
        name: m2[1].trim(),
        media: m2[2].trim()
      };
    }
  }
  function at_document() {
    var m2 = match(/^@([-\w]+)?document *([^{]+)/);
    if (m2) {
      return {
        type: "document",
        document: m2[2].trim(),
        vendor: m2[1] ? m2[1].trim() : null,
        rules: rules()
      };
    }
  }
  function at_x() {
    var m2 = match(/^@(import|charset|namespace)\s*([^;]+);/);
    if (m2) {
      return {
        type: m2[1],
        name: m2[2].trim()
      };
    }
  }
  function at_rule() {
    whitespace();
    if (css[0] === "@") {
      var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();
      if (ret && !settings.preserveStatic) {
        var hasVarFunc = false;
        if (ret.declarations) {
          hasVarFunc = ret.declarations.some(function(decl) {
            return /var\(/.test(decl.value);
          });
        } else {
          var arr = ret.keyframes || ret.rules || [];
          hasVarFunc = arr.some(function(obj) {
            return (obj.declarations || []).some(function(decl) {
              return /var\(/.test(decl.value);
            });
          });
        }
        return hasVarFunc ? ret : {};
      }
      return ret;
    }
  }
  function rule() {
    if (!settings.preserveStatic) {
      var balancedMatch$1 = balancedMatch("{", "}", css);
      if (balancedMatch$1) {
        var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\S*\s*:/.test(balancedMatch$1.body);
        var hasVarFunc = /var\(/.test(balancedMatch$1.body);
        if (!hasVarDecl && !hasVarFunc) {
          css = css.slice(balancedMatch$1.end + 1);
          return {};
        }
      }
    }
    var sel = selector() || [];
    var decls = settings.preserveStatic ? declarations() : declarations().filter(function(decl) {
      var hasVarDecl2 = sel.some(function(s2) {
        return /:(?:root|host)(?![.:#(])/.test(s2);
      }) && /^--\S/.test(decl.property);
      var hasVarFunc2 = /var\(/.test(decl.value);
      return hasVarDecl2 || hasVarFunc2;
    });
    if (!sel.length) {
      error("selector missing");
    }
    return {
      type: "rule",
      selectors: sel,
      declarations: decls
    };
  }
  function rules(core) {
    if (!core && !open()) {
      return error("missing '{'");
    }
    var node;
    var rules2 = comments();
    while (css.length && (core || css[0] !== "}") && (node = at_rule() || rule())) {
      if (node.type) {
        rules2.push(node);
      }
      rules2 = rules2.concat(comments());
    }
    if (!core && !close()) {
      return error("missing '}'");
    }
    return rules2;
  }
  return {
    type: "stylesheet",
    stylesheet: {
      rules: rules(true),
      errors
    }
  };
}
function parseVars(cssData) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var defaults2 = {
    parseHost: false,
    store: {},
    onWarning: function onWarning2() {
    }
  };
  var settings = _extends({}, defaults2, options);
  var reVarDeclSelectors = new RegExp(":".concat(settings.parseHost ? "host" : "root", "$"));
  if (typeof cssData === "string") {
    cssData = parseCss(cssData, settings);
  }
  cssData.stylesheet.rules.forEach(function(rule) {
    if (rule.type !== "rule" || !rule.selectors.some(function(s2) {
      return reVarDeclSelectors.test(s2);
    })) {
      return;
    }
    rule.declarations.forEach(function(decl, i) {
      var prop = decl.property;
      var value = decl.value;
      if (prop && prop.indexOf("--") === 0) {
        settings.store[prop] = value;
      }
    });
  });
  return settings.store;
}
function stringifyCss(tree) {
  var delim = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var cb = arguments.length > 2 ? arguments[2] : void 0;
  var renderMethods = {
    charset: function charset(node) {
      return "@charset " + node.name + ";";
    },
    comment: function comment(node) {
      return node.comment.indexOf("__CSSVARSPONYFILL") === 0 ? "/*" + node.comment + "*/" : "";
    },
    "custom-media": function customMedia(node) {
      return "@custom-media " + node.name + " " + node.media + ";";
    },
    declaration: function declaration(node) {
      return node.property + ":" + node.value + ";";
    },
    document: function document2(node) {
      return "@" + (node.vendor || "") + "document " + node.document + "{" + visit(node.rules) + "}";
    },
    "font-face": function fontFace(node) {
      return "@font-face{" + visit(node.declarations) + "}";
    },
    host: function host(node) {
      return "@host{" + visit(node.rules) + "}";
    },
    import: function _import(node) {
      return "@import " + node.name + ";";
    },
    keyframe: function keyframe(node) {
      return node.values.join(",") + "{" + visit(node.declarations) + "}";
    },
    keyframes: function keyframes(node) {
      return "@" + (node.vendor || "") + "keyframes " + node.name + "{" + visit(node.keyframes) + "}";
    },
    media: function media(node) {
      return "@media " + node.media + "{" + visit(node.rules) + "}";
    },
    namespace: function namespace(node) {
      return "@namespace " + node.name + ";";
    },
    page: function page(node) {
      return "@page " + (node.selectors.length ? node.selectors.join(", ") : "") + "{" + visit(node.declarations) + "}";
    },
    "page-margin-box": function pageMarginBox(node) {
      return "@" + node.name + "{" + visit(node.declarations) + "}";
    },
    rule: function rule(node) {
      var decls = node.declarations;
      if (decls.length) {
        return node.selectors.join(",") + "{" + visit(decls) + "}";
      }
    },
    supports: function supports(node) {
      return "@supports " + node.supports + "{" + visit(node.rules) + "}";
    }
  };
  function visit(nodes) {
    var buf = "";
    for (var i = 0; i < nodes.length; i++) {
      var n2 = nodes[i];
      if (cb) {
        cb(n2);
      }
      var txt = renderMethods[n2.type](n2);
      if (txt) {
        buf += txt;
        if (txt.length && n2.selectors) {
          buf += delim;
        }
      }
    }
    return buf;
  }
  return visit(tree.stylesheet.rules);
}
function walkCss(node, fn) {
  node.rules.forEach(function(rule) {
    if (rule.rules) {
      walkCss(rule, fn);
      return;
    }
    if (rule.keyframes) {
      rule.keyframes.forEach(function(keyframe) {
        if (keyframe.type === "keyframe") {
          fn(keyframe.declarations, rule);
        }
      });
      return;
    }
    if (!rule.declarations) {
      return;
    }
    fn(rule.declarations, node);
  });
}
var VAR_PROP_IDENTIFIER = "--";
var VAR_FUNC_IDENTIFIER = "var";
function transformCss(cssData) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var defaults2 = {
    preserveStatic: true,
    preserveVars: false,
    variables: {},
    onWarning: function onWarning2() {
    }
  };
  var settings = _extends({}, defaults2, options);
  if (typeof cssData === "string") {
    cssData = parseCss(cssData, settings);
  }
  walkCss(cssData.stylesheet, function(declarations, node) {
    for (var i = 0; i < declarations.length; i++) {
      var decl = declarations[i];
      var type = decl.type;
      var prop = decl.property;
      var value = decl.value;
      if (type !== "declaration") {
        continue;
      }
      if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {
        declarations.splice(i, 1);
        i--;
        continue;
      }
      if (value.indexOf(VAR_FUNC_IDENTIFIER + "(") !== -1) {
        var resolvedValue = resolveValue(value, settings);
        if (resolvedValue !== decl.value) {
          resolvedValue = fixNestedCalc(resolvedValue);
          if (!settings.preserveVars) {
            decl.value = resolvedValue;
          } else {
            declarations.splice(i, 0, {
              type,
              property: prop,
              value: resolvedValue
            });
            i++;
          }
        }
      }
    }
  });
  return stringifyCss(cssData);
}
function fixNestedCalc(value) {
  var reCalcVal = /calc\(([^)]+)\)/g;
  (value.match(reCalcVal) || []).forEach(function(match) {
    var newVal = "calc".concat(match.split("calc").join(""));
    value = value.replace(match, newVal);
  });
  return value;
}
function resolveValue(value) {
  var settings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var __recursiveFallback = arguments.length > 2 ? arguments[2] : void 0;
  if (value.indexOf("var(") === -1) {
    return value;
  }
  var valueData = balancedMatch("(", ")", value);
  function resolveFunc(value2) {
    var name = value2.split(",")[0].replace(/[\s\n\t]/g, "");
    var fallback = (value2.match(/(?:\s*,\s*){1}(.*)?/) || [])[1];
    var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : void 0;
    var replacement = match || (fallback ? String(fallback) : void 0);
    var unresolvedFallback = __recursiveFallback || value2;
    if (!match) {
      settings.onWarning('variable "'.concat(name, '" is undefined'));
    }
    if (replacement && replacement !== "undefined" && replacement.length > 0) {
      return resolveValue(replacement, settings, unresolvedFallback);
    } else {
      return "var(".concat(unresolvedFallback, ")");
    }
  }
  if (!valueData) {
    if (value.indexOf("var(") !== -1) {
      settings.onWarning('missing closing ")" in the value "'.concat(value, '"'));
    }
    return value;
  } else if (valueData.pre.slice(-3) === "var") {
    var isEmptyVarFunc = valueData.body.trim().length === 0;
    if (isEmptyVarFunc) {
      settings.onWarning("var() must contain a non-whitespace string");
      return value;
    } else {
      return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);
    }
  } else {
    return valueData.pre + "(".concat(resolveValue(valueData.body, settings), ")") + resolveValue(valueData.post, settings);
  }
}
var isBrowser = typeof window !== "undefined";
var isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports("(--a: 0)");
var counters = {
  group: 0,
  job: 0
};
var defaults = {
  rootElement: isBrowser ? document : null,
  shadowDOM: false,
  include: "style,link[rel=stylesheet]",
  exclude: "",
  variables: {},
  onlyLegacy: true,
  preserveStatic: true,
  preserveVars: false,
  silent: false,
  updateDOM: true,
  updateURLs: true,
  watch: null,
  onBeforeSend: function onBeforeSend() {
  },
  onError: function onError() {
  },
  onWarning: function onWarning() {
  },
  onSuccess: function onSuccess() {
  },
  onComplete: function onComplete() {
  },
  onFinally: function onFinally() {
  }
};
var regex = {
  cssComments: /\/\*[\s\S]+?\*\//g,
  cssKeyframes: /@(?:-\w*-)?keyframes/,
  cssMediaQueries: /@media[^{]+\{([\s\S]+?})\s*}/g,
  cssUrls: /url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,
  cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,
  cssVarDecls: /(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,
  cssVarFunc: /var\(\s*--[\w-]/,
  cssVars: /(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/
};
var variableStore = {
  dom: {},
  job: {},
  user: {}
};
var cssVarsIsRunning = false;
var cssVarsObserver = null;
var cssVarsSrcNodeCount = 0;
var debounceTimer = null;
var isShadowDOMReady = false;
function cssVars() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var msgPrefix = "cssVars(): ";
  var settings = _extends({}, defaults, options);
  function handleError(message, sourceNode, xhr, url) {
    if (!settings.silent && window.console) {
      console.error("".concat(msgPrefix).concat(message, "\n"), sourceNode);
    }
    settings.onError(message, sourceNode, xhr, url);
  }
  function handleWarning(message) {
    if (!settings.silent && window.console) {
      console.warn("".concat(msgPrefix).concat(message));
    }
    settings.onWarning(message);
  }
  function handleFinally(hasChanged) {
    settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);
  }
  if (!isBrowser) {
    return;
  }
  if (settings.watch) {
    settings.watch = defaults.watch;
    addMutationObserver(settings);
    cssVars(settings);
    return;
  } else if (settings.watch === false && cssVarsObserver) {
    cssVarsObserver.disconnect();
    cssVarsObserver = null;
  }
  if (!settings.__benchmark) {
    if (cssVarsIsRunning === settings.rootElement) {
      cssVarsDebounced(options);
      return;
    }
    var srcNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])'));
    settings.__benchmark = getTimeStamp();
    settings.exclude = [cssVarsObserver ? '[data-cssvars]:not([data-cssvars=""])' : '[data-cssvars="out"]', "link[disabled]:not([data-cssvars])", settings.exclude].filter(function(selector) {
      return selector;
    }).join(",");
    settings.variables = fixVarNames(settings.variables);
    srcNodes.forEach(function(srcNode) {
      var hasStyleCache = srcNode.nodeName.toLowerCase() === "style" && srcNode.__cssVars.text;
      var hasStyleChanged = hasStyleCache && srcNode.textContent !== srcNode.__cssVars.text;
      if (hasStyleCache && hasStyleChanged) {
        srcNode.sheet && (srcNode.sheet.disabled = false);
        srcNode.setAttribute("data-cssvars", "");
      }
    });
    if (!cssVarsObserver) {
      var outNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars="out"]'));
      outNodes.forEach(function(outNode) {
        var dataGroup = outNode.getAttribute("data-cssvars-group");
        var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(dataGroup, '"]')) : null;
        if (!srcNode) {
          outNode.parentNode.removeChild(outNode);
        }
      });
      if (cssVarsSrcNodeCount && srcNodes.length < cssVarsSrcNodeCount) {
        cssVarsSrcNodeCount = srcNodes.length;
        variableStore.dom = {};
      }
    }
  }
  if (document.readyState !== "loading") {
    if (isNativeSupport && settings.onlyLegacy) {
      var hasVarChange = false;
      if (settings.updateDOM) {
        var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);
        Object.keys(settings.variables).forEach(function(key) {
          var varValue = settings.variables[key];
          hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);
          targetElm.style.setProperty(key, varValue);
        });
      }
      handleFinally(hasVarChange);
    } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {
      getCssData({
        rootElement: defaults.rootElement,
        include: defaults.include,
        exclude: settings.exclude,
        skipDisabled: false,
        onSuccess: function onSuccess2(cssText, node, url) {
          var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;
          if (isUserDisabled) {
            return false;
          }
          cssText = cssText.replace(regex.cssComments, "").replace(regex.cssMediaQueries, "");
          cssText = (cssText.match(regex.cssVarDeclRules) || []).join("");
          return cssText || false;
        },
        onComplete: function onComplete2(cssText, cssArray, nodeArray) {
          parseVars(cssText, {
            store: variableStore.dom,
            onWarning: handleWarning
          });
          isShadowDOMReady = true;
          cssVars(settings);
        }
      });
    } else {
      cssVarsIsRunning = settings.rootElement;
      getCssData({
        rootElement: settings.rootElement,
        include: settings.include,
        exclude: settings.exclude,
        skipDisabled: false,
        onBeforeSend: settings.onBeforeSend,
        onError: function onError2(xhr, node, url) {
          var responseUrl = xhr.responseURL || getFullUrl(url, location.href);
          var statusText = xhr.statusText ? "(".concat(xhr.statusText, ")") : "Unspecified Error" + (xhr.status === 0 ? " (possibly CORS related)" : "");
          var errorMsg = "CSS XHR Error: ".concat(responseUrl, " ").concat(xhr.status, " ").concat(statusText);
          handleError(errorMsg, node, xhr, responseUrl);
        },
        onSuccess: function onSuccess2(cssText, node, url) {
          var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;
          if (isUserDisabled) {
            return false;
          }
          var isLink = node.nodeName.toLowerCase() === "link";
          var isStyleImport = node.nodeName.toLowerCase() === "style" && cssText !== node.textContent;
          var returnVal = settings.onSuccess(cssText, node, url);
          cssText = returnVal !== void 0 && Boolean(returnVal) === false ? "" : returnVal || cssText;
          if (settings.updateURLs && (isLink || isStyleImport)) {
            cssText = fixRelativeCssUrls(cssText, url);
          }
          return cssText;
        },
        onComplete: function onComplete2(cssText, cssArray) {
          var nodeArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
          var currentVars = _extends({}, variableStore.dom, variableStore.user);
          var hasVarChange2 = false;
          variableStore.job = {};
          nodeArray.forEach(function(node, i2) {
            var nodeCSS = cssArray[i2];
            node.__cssVars = node.__cssVars || {};
            node.__cssVars.text = nodeCSS;
            if (regex.cssVars.test(nodeCSS)) {
              try {
                var cssTree = parseCss(nodeCSS, {
                  preserveStatic: settings.preserveStatic,
                  removeComments: true
                });
                parseVars(cssTree, {
                  parseHost: Boolean(settings.rootElement.host),
                  store: variableStore.dom,
                  onWarning: handleWarning
                });
                node.__cssVars.tree = cssTree;
              } catch (err) {
                handleError(err.message, node);
              }
            }
          });
          _extends(variableStore.job, variableStore.dom);
          if (settings.updateDOM) {
            _extends(variableStore.user, settings.variables);
            _extends(variableStore.job, variableStore.user);
          } else {
            _extends(variableStore.job, variableStore.user, settings.variables);
            _extends(currentVars, settings.variables);
          }
          hasVarChange2 = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some(function(key) {
            return variableStore.job[key] !== currentVars[key];
          })));
          if (hasVarChange2) {
            resetCssNodes(settings.rootElement);
            cssVars(settings);
          } else {
            var outCssArray = [];
            var outNodeArray = [];
            var hasKeyframesWithVars = false;
            if (settings.updateDOM) {
              counters.job++;
            }
            nodeArray.forEach(function(node, i2) {
              var isSkip = !node.__cssVars.tree;
              if (node.__cssVars.tree) {
                try {
                  transformCss(node.__cssVars.tree, _extends({}, settings, {
                    variables: variableStore.job,
                    onWarning: handleWarning
                  }));
                  var outCss = stringifyCss(node.__cssVars.tree);
                  if (settings.updateDOM) {
                    var nodeCSS = cssArray[i2];
                    var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);
                    if (!node.getAttribute("data-cssvars")) {
                      node.setAttribute("data-cssvars", "src");
                    }
                    if (outCss.length && hasCSSVarFunc) {
                      var dataGroup = node.getAttribute("data-cssvars-group") || ++counters.group;
                      var outCssNoSpaces = outCss.replace(/\s/g, "");
                      var outNode = settings.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(dataGroup, '"]')) || document.createElement("style");
                      hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);
                      if (settings.preserveStatic) {
                        node.sheet && (node.sheet.disabled = true);
                      }
                      if (!outNode.hasAttribute("data-cssvars")) {
                        outNode.setAttribute("data-cssvars", "out");
                      }
                      if (outCssNoSpaces === node.textContent.replace(/\s/g, "")) {
                        isSkip = true;
                        if (outNode && outNode.parentNode) {
                          node.removeAttribute("data-cssvars-group");
                          outNode.parentNode.removeChild(outNode);
                        }
                      } else if (outCssNoSpaces !== outNode.textContent.replace(/\s/g, "")) {
                        [node, outNode].forEach(function(n2) {
                          n2.setAttribute("data-cssvars-job", counters.job);
                          n2.setAttribute("data-cssvars-group", dataGroup);
                        });
                        outNode.textContent = outCss;
                        outCssArray.push(outCss);
                        outNodeArray.push(outNode);
                        if (!outNode.parentNode) {
                          node.parentNode.insertBefore(outNode, node.nextSibling);
                        }
                      }
                    }
                  } else {
                    if (node.textContent.replace(/\s/g, "") !== outCss) {
                      outCssArray.push(outCss);
                    }
                  }
                } catch (err) {
                  handleError(err.message, node);
                }
              }
              if (isSkip) {
                node.setAttribute("data-cssvars", "skip");
              }
              if (!node.hasAttribute("data-cssvars-job")) {
                node.setAttribute("data-cssvars-job", counters.job);
              }
            });
            cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length;
            if (settings.shadowDOM) {
              var elms = [].concat(settings.rootElement).concat([].slice.call(settings.rootElement.querySelectorAll("*")));
              for (var i = 0, elm; elm = elms[i]; ++i) {
                if (elm.shadowRoot && elm.shadowRoot.querySelector("style")) {
                  var shadowSettings = _extends({}, settings, {
                    rootElement: elm.shadowRoot
                  });
                  cssVars(shadowSettings);
                }
              }
            }
            if (settings.updateDOM && hasKeyframesWithVars) {
              fixKeyframes(settings.rootElement);
            }
            cssVarsIsRunning = false;
            settings.onComplete(outCssArray.join(""), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);
            handleFinally(outNodeArray.length);
          }
        }
      });
    }
  } else {
    document.addEventListener("DOMContentLoaded", function init(evt) {
      cssVars(options);
      document.removeEventListener("DOMContentLoaded", init);
    });
  }
}
cssVars.reset = function() {
  counters.job = 0;
  counters.group = 0;
  cssVarsIsRunning = false;
  if (cssVarsObserver) {
    cssVarsObserver.disconnect();
    cssVarsObserver = null;
  }
  cssVarsSrcNodeCount = 0;
  debounceTimer = null;
  isShadowDOMReady = false;
  for (var prop in variableStore) {
    variableStore[prop] = {};
  }
};
function addMutationObserver(settings) {
  function isDisabled(node) {
    var isDisabledAttr = isLink(node) && node.hasAttribute("disabled");
    var isDisabledSheet = (node.sheet || {}).disabled;
    return isDisabledAttr || isDisabledSheet;
  }
  function isLink(node) {
    var isStylesheet = node.nodeName.toLowerCase() === "link" && (node.getAttribute("rel") || "").indexOf("stylesheet") !== -1;
    return isStylesheet;
  }
  function isStyle(node) {
    return node.nodeName.toLowerCase() === "style";
  }
  function isValidAttributeMutation(mutation) {
    var isValid = false;
    if (mutation.type === "attributes" && isLink(mutation.target) && !isDisabled(mutation.target)) {
      var isEnabledMutation = mutation.attributeName === "disabled";
      var isHrefMutation = mutation.attributeName === "href";
      var isSkipNode = mutation.target.getAttribute("data-cssvars") === "skip";
      var isSrcNode = mutation.target.getAttribute("data-cssvars") === "src";
      if (isEnabledMutation) {
        isValid = !isSkipNode && !isSrcNode;
      } else if (isHrefMutation) {
        if (isSkipNode) {
          mutation.target.setAttribute("data-cssvars", "");
        } else if (isSrcNode) {
          resetCssNodes(settings.rootElement, true);
        }
        isValid = true;
      }
    }
    return isValid;
  }
  function isValidStyleTextMutation(mutation) {
    var isValid = false;
    if (mutation.type === "childList") {
      var isStyleElm = isStyle(mutation.target);
      var isOutNode = mutation.target.getAttribute("data-cssvars") === "out";
      isValid = isStyleElm && !isOutNode;
    }
    return isValid;
  }
  function isValidAddMutation(mutation) {
    var isValid = false;
    if (mutation.type === "childList") {
      isValid = [].slice.call(mutation.addedNodes).some(function(node) {
        var isElm = node.nodeType === 1;
        var hasAttr = isElm && node.hasAttribute("data-cssvars");
        var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);
        var isValid2 = !hasAttr && (isLink(node) || isStyleWithVars);
        return isValid2 && !isDisabled(node);
      });
    }
    return isValid;
  }
  function isValidRemoveMutation(mutation) {
    var isValid = false;
    if (mutation.type === "childList") {
      isValid = [].slice.call(mutation.removedNodes).some(function(node) {
        var isElm = node.nodeType === 1;
        var isOutNode = isElm && node.getAttribute("data-cssvars") === "out";
        var isSrcNode = isElm && node.getAttribute("data-cssvars") === "src";
        var isValid2 = isSrcNode;
        if (isSrcNode || isOutNode) {
          var dataGroup = node.getAttribute("data-cssvars-group");
          var orphanNode = settings.rootElement.querySelector('[data-cssvars-group="'.concat(dataGroup, '"]'));
          if (isSrcNode) {
            resetCssNodes(settings.rootElement, true);
          }
          if (orphanNode) {
            orphanNode.parentNode.removeChild(orphanNode);
          }
        }
        return isValid2;
      });
    }
    return isValid;
  }
  if (!window.MutationObserver) {
    return;
  }
  if (cssVarsObserver) {
    cssVarsObserver.disconnect();
    cssVarsObserver = null;
  }
  cssVarsObserver = new MutationObserver(function(mutations) {
    var hasValidMutation = mutations.some(function(mutation) {
      return isValidAttributeMutation(mutation) || isValidStyleTextMutation(mutation) || isValidAddMutation(mutation) || isValidRemoveMutation(mutation);
    });
    if (hasValidMutation) {
      cssVars(settings);
    }
  });
  cssVarsObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["disabled", "href"],
    childList: true,
    subtree: true
  });
}
function cssVarsDebounced(settings) {
  var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(function() {
    settings.__benchmark = null;
    cssVars(settings);
  }, delay);
}
function fixKeyframes(rootElement) {
  var animationNameProp = ["animation-name", "-moz-animation-name", "-webkit-animation-name"].filter(function(prop) {
    return getComputedStyle(document.body)[prop];
  })[0];
  if (animationNameProp) {
    var allNodes = [].slice.call(rootElement.querySelectorAll("*"));
    var keyframeNodes = [];
    var nameMarker = "__CSSVARSPONYFILL-KEYFRAMES__";
    for (var i = 0, len = allNodes.length; i < len; i++) {
      var node = allNodes[i];
      var animationName = getComputedStyle(node)[animationNameProp];
      if (animationName !== "none") {
        node.style[animationNameProp] += nameMarker;
        keyframeNodes.push(node);
      }
    }
    void document.body.offsetHeight;
    for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {
      var nodeStyle = keyframeNodes[_i].style;
      nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, "");
    }
  }
}
function fixRelativeCssUrls(cssText, baseUrl) {
  var cssUrls = cssText.replace(regex.cssComments, "").match(regex.cssUrls) || [];
  cssUrls.forEach(function(cssUrl) {
    var oldUrl = cssUrl.replace(regex.cssUrls, "$1");
    var newUrl = getFullUrl(oldUrl, baseUrl);
    cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));
  });
  return cssText;
}
function fixVarNames() {
  var varObj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var reLeadingHyphens = /^-{2}/;
  return Object.keys(varObj).reduce(function(obj, value) {
    var key = reLeadingHyphens.test(value) ? value : "--".concat(value.replace(/^-+/, ""));
    obj[key] = varObj[value];
    return obj;
  }, {});
}
function getFullUrl(url) {
  var base = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : location.href;
  var d = document.implementation.createHTMLDocument("");
  var b = d.createElement("base");
  var a = d.createElement("a");
  d.head.appendChild(b);
  d.body.appendChild(a);
  b.href = base;
  a.href = url;
  return a.href;
}
function getTimeStamp() {
  return isBrowser && (window.performance || {}).now ? window.performance.now() : (/* @__PURE__ */ new Date()).getTime();
}
function resetCssNodes(rootElement) {
  var resetDOMVariableStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var resetNodes = [].slice.call(rootElement.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]'));
  resetNodes.forEach(function(node) {
    return node.setAttribute("data-cssvars", "");
  });
  if (resetDOMVariableStore) {
    variableStore.dom = {};
  }
}

// node_modules/@sendbird/chat/openChannel.js
var le2 = function(r2) {
  function a() {
    var e = null !== r2 && r2.apply(this, arguments) || this;
    return e._channels = /* @__PURE__ */ new Map(), e._enteredChannelUrls = [], e;
  }
  return t(a, r2), Object.defineProperty(a.prototype, "enteredChannels", { get: function() {
    var e = this;
    return this._enteredChannelUrls.map(function(n2) {
      return e._channels.get(n2);
    }).filter(function(e2) {
      return !!e2;
    });
  }, enumerable: false, configurable: true }), a.prototype.isEnteredChannel = function(e) {
    return this._enteredChannelUrls.includes(e);
  }, a.prototype.enter = function(e) {
    this._enteredChannelUrls.indexOf(e) < 0 && this._enteredChannelUrls.push(e);
  }, a.prototype.exit = function(e) {
    var n2 = this._enteredChannelUrls.indexOf(e);
    n2 >= 0 && this._enteredChannelUrls.splice(n2, 1);
  }, a.prototype.exitAll = function() {
    this._enteredChannelUrls = [];
  }, a.prototype.get = function(e) {
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        return [2, this._channels.get(e)];
      });
    });
  }, a.prototype.upsert = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3 = this;
      return o(this, function(t3) {
        return n2 = [], e.forEach(function(e2) {
          if (r3._channels.has(e2.url)) {
            var t4 = r3._channels.get(e2.url);
            Object.assign(t4, e2), n2.push(t4);
          } else
            r3._channels.set(e2.url, e2), n2.push(e2);
        }), [2, n2];
      });
    });
  }, a.prototype.remove = function(e) {
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        return this._channels.delete(e), this.exit(e), [2];
      });
    });
  }, a.prototype.clear = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(e) {
        return this._channels.clear(), this._enteredChannelUrls = [], [2];
      });
    });
  }, a;
}(Ar);
var he = { channelUrl: void 0, name: void 0, coverUrlOrImage: void 0, data: void 0, customType: void 0, operatorUserIds: void 0, isEphemeral: void 0 };
var de = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl, r2 = e.isInternalCall, a = n2.call(this) || this;
    return a.method = ie.GET, a.path = "".concat(r2 ? le : ue, "/").concat(encodeURIComponent(t4)), a;
  }
  return t(t3, n2), t3;
}(Ce);
var pe = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new Pe(e, t4), r2;
  }
  return t(t3, n2), t3;
}(Oe);
var fe = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a = e.coverUrlOrImage, u = e.name, l = e.data, h = e.customType, f2 = e.operatorUserIds, v3 = e.isEphemeral;
    return (t4 = n2.call(this) || this).method = ie.POST, t4.path = ue, t4.params = te(ne({ channel_url: r2, cover_url: w("string", a) ? a : null, cover_file: k(a) ? a : null, name: u, data: l, custom_type: h, operators: f2, is_ephemeral: v3 })), t4;
  }
  return t(t3, n2), t3;
}(Ce);
!function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new Pe(e, t4), r2;
  }
  t(t3, n2);
}(Oe);
var ve = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl;
    return n2.call(this, { code: "ENTR", payload: { channel_url: t4 }, ackRequired: true }) || this;
  }
  return t(t3, n2), t3;
}(De);
var Ce2 = function(n2) {
  function t3(e, t4, r2) {
    var a, o2, i = this;
    return i = n2.call(this, e, "SYEV", r2) || this, r2.data && (i.participantCount = null !== (a = r2.data.participant_count) && void 0 !== a ? a : 0, i.user = new Fr(e, r2.data), i.ts = null !== (o2 = r2.data.edge_ts) && void 0 !== o2 ? o2 : 0), i;
  }
  return t(t3, n2), t3;
}(f);
var _e = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl;
    return n2.call(this, { code: "EXIT", payload: { channel_url: t4 }, ackRequired: true }) || this;
  }
  return t(t3, n2), t3;
}(De);
var ye = function(n2) {
  function t3(e, t4, r2) {
    var a, o2, i = this;
    return i = n2.call(this, e, "EXIT", r2) || this, r2.data && (i.participantCount = null !== (a = r2.data.participant_count) && void 0 !== a ? a : 0, i.user = new Fr(e, r2.data), i.ts = null !== (o2 = r2.data.edge_ts) && void 0 !== o2 ? o2 : 0), i;
  }
  return t(t3, n2), t3;
}(f);
var me = {};
var Ue = function(r2) {
  function s2(e, a) {
    var o2 = r2.call(this, e, n(n({}, a), { channelType: F.OPEN })) || this;
    return o2.subscribeChannelEvent = Ze, o2.unsubscribeChannelEvent = Ze, o2.refreshChannel = function() {
      return r(o2, void 0, void 0, function() {
        return o(this, function(e2) {
          return [2, Ze()];
        });
      });
    }, o2._openChannelCache = new le2(e), o2._openChannelHandlers = /* @__PURE__ */ new Map(), o2._dispatcher.on(function(e2) {
      var n2, t3;
      if (e2 instanceof Re)
        o2._handleEvent(e2);
      else if (e2 instanceof Er && e2.stateType === dr.CONNECTED) {
        var r3 = o2._openChannelCache.enteredChannels;
        try {
          for (var a2 = s(r3), i = a2.next(); !i.done; i = a2.next()) {
            i.value.enter();
          }
        } catch (e3) {
          n2 = { error: e3 };
        } finally {
          try {
            i && !i.done && (t3 = a2.return) && t3.call(a2);
          } finally {
            if (n2)
              throw n2.error;
          }
        }
      }
    }), me[e] || (me[e] = o2), o2;
  }
  return t(s2, r2), s2.of = function(e) {
    return me[e];
  }, s2.prototype.buildOpenChannelFromSerializedData = function(e) {
    var n2 = Ur(e);
    return new Pe(this._iid, Pe.payloadify(n2));
  }, s2.prototype.getChannelFromCache = function(e) {
    var r3;
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._openChannelCache.get(e)];
          case 1:
            return [2, null !== (r3 = n2.sent()) && void 0 !== r3 ? r3 : null];
        }
      });
    });
  }, s2.prototype.upsertChannelsToCache = function(e) {
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._openChannelCache.upsert(e)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, s2.prototype.removeChannelsFromCache = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, a, o2, i, s3;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            t3.trys.push([0, 5, 6, 7]), n2 = s(e), r3 = n2.next(), t3.label = 1;
          case 1:
            return r3.done ? [3, 4] : (a = r3.value, [4, this._openChannelCache.remove(a)]);
          case 2:
            t3.sent(), t3.label = 3;
          case 3:
            return r3 = n2.next(), [3, 1];
          case 4:
            return [3, 7];
          case 5:
            return o2 = t3.sent(), i = { error: o2 }, [3, 7];
          case 6:
            try {
              r3 && !r3.done && (s3 = n2.return) && s3.call(n2);
            } finally {
              if (i)
                throw i.error;
            }
            return [7];
          case 7:
            return [2];
        }
      });
    });
  }, s2.prototype.setEnteredToCache = function(e) {
    this._openChannelCache.enter(e.url);
  }, s2.prototype.setExitedToCache = function(e) {
    this._openChannelCache.exit(e.url);
  }, s2.prototype._handleEvent = function(e) {
    return r(this, void 0, void 0, function() {
      var r3, a, o2, i, s3, u, c, l, h, d, p, f2, v3, C, _, m2, U2, g3, E, D, O, x, I2, A2, L2, R, Y, Z, $, ee, ce, le3, he2, de2, pe2, fe2, ve2, _e2, me2, Ue2, ge2, Ee2, we2, Me2, Te2, be2, Ne2, Pe2, De3, Oe3, He3, xe2, Ie2, Ae, Le, Re2, Fe, ke, Se, ze2, qe, Qe, Ke, Ve2, Be, We, je, Ge, Xe = this;
      return o(this, function(Ye) {
        switch (Ye.label) {
          case 0:
            switch (Ye.trys.push([0, 57, , 58]), e.code) {
              case "MESG":
              case "FILE":
              case "ADMM":
              case "BRDM":
                return [3, 1];
              case "MEDI":
              case "FEDI":
              case "AEDI":
                return [3, 4];
              case "DELM":
                return [3, 7];
              case "MRCT":
                return [3, 10];
              case "MTHD":
                return [3, 13];
              case "MCNT":
                return [3, 16];
              case "PEDI":
                return [3, 27];
              case "VOTE":
                return [3, 30];
              case "SYEV":
                return [3, 33];
            }
            return [3, 56];
          case 1:
            return i = null, "MESG" === e.code ? i = e.as(Kn) : "FILE" === e.code ? i = e.as(it) : "ADMM" !== e.code && "BRDM" != e.code || (i = e.as(T)), i ? (r3 = i.message, a = i.isMentioned, r3.channelType !== F.OPEN ? [3, 3] : [4, this.getChannel(r3.channelUrl, true)]) : [3, 3];
          case 2:
            o2 = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, i2, s4, u2;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      i2 = n2.value, this._openChannelCache.isEnteredChannel(o2.url) && (i2.onMessageReceived && i2.onMessageReceived(o2, r3), a && i2.onMentionReceived && i2.onMentionReceived(o2, r3));
                  } catch (e3) {
                    s4 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (u2 = e2.return) && u2.call(e2);
                    } finally {
                      if (s4)
                        throw s4.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 3;
          case 3:
            return [3, 56];
          case 4:
            return i = null, "MEDI" === e.code ? i = e.as(Qn) : "FEDI" === e.code ? i = e.as(Vn) : "AEDI" === e.code && (i = e.as(H)), i ? (s3 = i.message, u = i.mentionCountChange, s3.channelType !== F.OPEN ? [3, 6] : [4, this.getChannel(s3.channelUrl, true)]) : [3, 6];
          case 5:
            c = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(c.url) && (r4.onMessageUpdated && r4.onMessageUpdated(c, s3), u > 0 && r4.onMentionReceived && r4.onMentionReceived(c, s3));
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 6;
          case 6:
            return [3, 56];
          case 7:
            return l = e.as(Wn), ce = l.channelUrl, le3 = l.channelType, h = l.messageId, le3 !== F.OPEN ? [3, 9] : [4, this.getChannel(ce, true)];
          case 8:
            d = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(d.url) && r4.onMessageDeleted && r4.onMessageDeleted(d, h);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 9;
          case 9:
            return [3, 56];
          case 10:
            return p = e.as(L), ce = p.channelUrl, le3 = p.channelType, f2 = p.event, le3 !== F.OPEN ? [3, 12] : [4, this.getChannel(ce, true)];
          case 11:
            v3 = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(v3.url) && r4.onReactionUpdated && r4.onReactionUpdated(v3, f2);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 12;
          case 12:
            return [3, 56];
          case 13:
            return (C = e.as(g2).event).channelType !== F.OPEN ? [3, 15] : [4, this.getChannel(C.channelUrl, true)];
          case 14:
            _ = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(_.url) && r4.onThreadInfoUpdated && r4.onThreadInfoUpdated(_, C);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 15;
          case 15:
            return [3, 56];
          case 16:
            m2 = e.as(U).openChannelMemberCounts, U2 = [], Ye.label = 17;
          case 17:
            Ye.trys.push([17, 22, 23, 24]), g3 = s(m2), E = g3.next(), Ye.label = 18;
          case 18:
            return E.done ? [3, 21] : (D = E.value, ce = D.channelUrl, ge2 = D.participantCount, O = D.updatedAt, [4, this.getChannelFromCache(ce)]);
          case 19:
            (x = Ye.sent()) && x._updateParticipantCount(ge2, O) && U2.push(x), Ye.label = 20;
          case 20:
            return E = g3.next(), [3, 18];
          case 21:
            return [3, 24];
          case 22:
            return I2 = Ye.sent(), je = { error: I2 }, [3, 24];
          case 23:
            try {
              E && !E.done && (Ge = g3.return) && Ge.call(g3);
            } finally {
              if (je)
                throw je.error;
            }
            return [7];
          case 24:
            return U2.length > 0 ? [4, this.upsertChannelsToCache(U2)] : [3, 26];
          case 25:
            A2 = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onChannelMemberCountChanged && r4.onChannelMemberCountChanged(A2);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 26;
          case 26:
            return [3, 56];
          case 27:
            return L2 = e.as(I), R = L2.event, Y = L2.status, ce = L2.channelUrl, le3 = L2.channelType, ce && le3 === F.OPEN ? [4, this.getChannel(ce, true)] : [3, 29];
          case 28:
            Z = Ye.sent(), this._dispatcher.dispatch(new zo({ event: R, source: Co.EVENT_POLL_UPDATED })), jr(Y === Oo ? function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollDeleted && r4.onPollDeleted(Z, R.pollId);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            } : function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollUpdated && r4.onPollUpdated(Z, R);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 29;
          case 29:
            return [3, 56];
          case 30:
            return $ = e.as(vr), ee = $.event, ce = $.channelUrl, le3 = $.channelType, ce && le3 === F.OPEN ? [4, this.getChannel(ce, true)] : [3, 32];
          case 31:
            he2 = Ye.sent(), this._dispatcher.dispatch(new Vo({ event: ee, source: Co.EVENT_POLL_VOTED })), jr(function() {
              return r(Xe, void 0, void 0, function() {
                var e2, n2, r4, a2, o3;
                return o(this, function(t3) {
                  try {
                    for (e2 = s(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollVoted && r4.onPollVoted(he2, ee);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (o3 = e2.return) && o3.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), Ye.label = 32;
          case 32:
            return [3, 56];
          case 33:
            if (!(de2 = e.as(f).event).isOpenChannelEvent)
              return [3, 55];
            switch (de2.category) {
              case A.CHANNEL_ENTER:
                return [3, 34];
              case A.CHANNEL_EXIT:
                return [3, 36];
              case A.CHANNEL_OPERATOR_UPDATE:
                return [3, 38];
              case A.USER_CHANNEL_MUTE:
              case A.USER_CHANNEL_UNMUTE:
                return [3, 40];
              case A.USER_CHANNEL_BAN:
              case A.USER_CHANNEL_UNBAN:
                return [3, 42];
              case A.CHANNEL_FREEZE:
              case A.CHANNEL_UNFREEZE:
                return [3, 44];
              case A.CHANNEL_DELETED:
                return [3, 46];
              case A.CHANNEL_PROP_CHANGED:
                return [3, 49];
              case A.CHANNEL_META_DATA_CHANGED:
                return [3, 51];
              case A.CHANNEL_META_COUNTERS_CHANGED:
                return [3, 53];
            }
            return [3, 55];
          case 34:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 35:
            return pe2 = Ye.sent(), fe2 = e.as(Ce2), ge2 = fe2.participantCount, ve2 = fe2.user, _e2 = pe2._updateParticipantCount(ge2, de2.ts), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onUserEntered && e3.onUserEntered(pe2, ve2), _e2 && e3.onChannelParticipantCountChanged && e3.onChannelParticipantCountChanged(pe2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 36:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 37:
            return me2 = Ye.sent(), Ue2 = e.as(ye), ge2 = Ue2.participantCount, Ee2 = Ue2.user, we2 = me2._updateParticipantCount(ge2, de2.ts), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onUserExited && e3.onUserExited(me2, Ee2), we2 && e3.onChannelParticipantCountChanged && e3.onChannelParticipantCountChanged(me2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 38:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 39:
            return Me2 = Ye.sent(), Te2 = e.as(m).operators, Me2.operators = Te2, this.upsertChannelsToCache([Me2]), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onOperatorUpdated && e3.onOperatorUpdated(Me2, Te2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 40:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 41:
            return be2 = Ye.sent(), Ne2 = de2.category === A.USER_CHANNEL_MUTE, Pe2 = e.as(Ne2 ? Un : On).user, jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Ne2 ? e3.onUserMuted && e3.onUserMuted(be2, Pe2) : e3.onUserUnmuted && e3.onUserUnmuted(be2, Pe2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 42:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 43:
            return De3 = Ye.sent(), Oe3 = de2.category === A.USER_CHANNEL_BAN, He3 = e.as(Oe3 ? kn : xn).user, jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Oe3 ? e3.onUserBanned && e3.onUserBanned(De3, He3) : e3.onUserUnbanned && e3.onUserUnbanned(De3, He3);
                  }), [2];
                });
              });
            }), [3, 55];
          case 44:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 45:
            return xe2 = Ye.sent(), Ie2 = e.as(Ln).freeze, xe2.isFrozen = Ie2, this.upsertChannelsToCache([xe2]), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Ie2 ? e3.onChannelFrozen && e3.onChannelFrozen(xe2) : e3.onChannelUnfrozen && e3.onChannelUnfrozen(xe2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 46:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 47:
            return Ae = Ye.sent(), [4, this.removeChannelsFromCache([Ae.url])];
          case 48:
            return Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onChannelDeleted && e3.onChannelDeleted(Ae.url, Ae.channelType);
                  }), [2];
                });
              });
            }), [3, 55];
          case 49:
            return [4, this.getChannelWithoutCache(de2.channelUrl, true)];
          case 50:
            return Le = Ye.sent(), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onChannelChanged && e3.onChannelChanged(Le);
                  }), [2];
                });
              });
            }), [3, 55];
          case 51:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 52:
            return Re2 = Ye.sent(), Fe = e.as(pn), ke = Fe.created, Se = Fe.updated, ze2 = Fe.deleted, ke && Re2._upsertCachedMetaData(ke, de2.ts), Se && Re2._upsertCachedMetaData(Se, de2.ts), ze2 && Re2._removeFromCachedMetaData(ze2, de2.ts), jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    ke && e3.onMetaDataCreated && e3.onMetaDataCreated(Re2, ke), Se && e3.onMetaDataUpdated && e3.onMetaDataUpdated(Re2, Se), ze2 && e3.onMetaDataDeleted && e3.onMetaDataDeleted(Re2, ze2);
                  }), [2];
                });
              });
            }), [3, 55];
          case 53:
            return [4, this.getChannel(de2.channelUrl, true)];
          case 54:
            return qe = Ye.sent(), Qe = e.as(Sn), Ke = Qe.created, Ve2 = Qe.updated, Be = Qe.deleted, jr(function() {
              return r(Xe, void 0, void 0, function() {
                return o(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Ke && e3.onMetaCounterCreated && e3.onMetaCounterCreated(qe, Ke), Ve2 && e3.onMetaCounterUpdated && e3.onMetaCounterUpdated(qe, Ve2), Be && e3.onMetaCounterDeleted && e3.onMetaCounterDeleted(qe, Be);
                  }), [2];
                });
              });
            }), [3, 55];
          case 55:
            return [3, 56];
          case 56:
            return [3, 58];
          case 57:
            if (We = Ye.sent(), v(We))
              throw We;
            return [3, 58];
          case 58:
            return [2];
        }
      });
    });
  }, s2.prototype.addHandler = function(e, n2) {
    this._openChannelHandlers.set(e, n2);
  }, s2.prototype.removeHandler = function(e) {
    this._openChannelHandlers.delete(e);
  }, s2.prototype.clearHandler = function() {
    this._openChannelHandlers.clear();
  }, s2.prototype.getChannel = function(e, r3) {
    return r(this, void 0, void 0, function() {
      var n2;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            Pr(w("string", e)).throw(g.invalidParameters), t3.label = 1;
          case 1:
            return t3.trys.push([1, 3, , 4]), [4, this.getChannelFromCache(e)];
          case 2:
            return (n2 = t3.sent()) ? [2, n2] : [3, 4];
          case 3:
            return t3.sent(), [3, 4];
          case 4:
            return [4, this.getChannelWithoutCache(e)];
          case 5:
            return [2, t3.sent()];
        }
      });
    });
  }, s2.prototype.getChannelWithoutCache = function(e, r3) {
    return void 0 === r3 && (r3 = false), r(this, void 0, void 0, function() {
      var n2, a, i;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return Pr(w("string", e)).throw(g.invalidParameters), n2 = new de({ channelUrl: e, isInternalCall: r3 }), [4, this._requestQueue.send(n2)];
          case 1:
            return a = t3.sent(), i = a.as(pe).channel, [4, this.upsertChannelsToCache([i])];
          case 2:
            return [2, t3.sent()[0]];
        }
      });
    });
  }, s2.prototype.createChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, s3, u;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return n2 = n(n({}, he), e), Pr(function(e2) {
              return S("string", e2.operatorUserIds, true) && (w("string", e2.coverUrlOrImage, true) || k(e2.coverUrlOrImage, true)) && w("string", e2.name, true) && w("string", e2.data, true) && w("string", e2.customType, true) && (w("string", e2.channelUrl) && /^\w+$/.test(e2.channelUrl) || null === e2.channelUrl || void 0 === e2.channelUrl) && w("boolean", e2.isEphemeral, true);
            }(n2)).throw(g.invalidParameters), r3 = new fe(n2), [4, this._requestQueue.send(r3)];
          case 1:
            return s3 = t3.sent(), u = s3.as(pe).channel, this.upsertChannelsToCache([u]), [2, u];
        }
      });
    });
  }, s2;
}(v2);
var ge = { name: void 0, coverUrlOrImage: void 0, data: void 0, customType: void 0, operatorUserIds: void 0 };
var Ee = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a = e.token, o2 = e.limit;
    return (t4 = n2.call(this) || this).method = ie.GET, t4.path = "".concat(ue, "/").concat(encodeURIComponent(r2), "/participants"), t4.params = { token: a, limit: o2 }, t4;
  }
  return t(t3, n2), t3;
}(Ce);
var we = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    r2.participants = [];
    var a = t4.next, o2 = t4.participants;
    return r2.token = a, r2.participants = o2.map(function(n3) {
      return new Tt(e, n3);
    }), r2;
  }
  return t(t3, n2), t3;
}(Oe);
var Me = function(r2) {
  function a(e, n2, t3) {
    return r2.call(this, e, n2, F.OPEN, t3) || this;
  }
  return t(a, r2), a.prototype._validate = function() {
    return r2.prototype._validate.call(this);
  }, a.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a2, o2, i;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : this._hasNext ? (this._isLoading = true, e = So.of(this._iid).requestQueue, n2 = new Ee(n(n({}, this), { token: this._token })), [4, e.send(n2)]) : [3, 2] : [3, 5];
          case 1:
            return r3 = t3.sent(), a2 = r3.as(we), o2 = a2.participants, i = a2.token, this._token = i, this._hasNext = !!i, this._isLoading = false, [2, o2];
          case 2:
            return [2, []];
          case 3:
            throw g.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw g.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, a;
}(Go);
var Te = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a = e.coverUrlOrImage, u = e.name, l = e.data, h = e.customType, f2 = e.operatorUserIds;
    return (t4 = n2.call(this) || this).method = ie.PUT, t4.path = "".concat(ue, "/").concat(encodeURIComponent(r2)), t4.params = te(ne({ cover_url: w("string", a) ? a : null, cover_file: k(a) ? a : null, name: u, data: l, custom_type: h, operators: f2 })), t4;
  }
  return t(t3, n2), t3;
}(Ce);
var be = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new Pe(e, t4), r2;
  }
  return t(t3, n2), t3;
}(Oe);
var Ne = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl;
    return (t4 = n2.call(this) || this).method = ie.DELETE, t4.path = "".concat(ue, "/").concat(encodeURIComponent(r2)), t4;
  }
  return t(t3, n2), t3;
}(Ce);
!function(n2) {
  function t3(e, t4) {
    return n2.call(this, e, t4) || this;
  }
  t(t3, n2);
}(Oe);
var Pe = function(r2) {
  function s2(e, n2) {
    var t3, a = this;
    return (a = r2.call(this, e, n2) || this)._lastParticipantCountUpdated = 0, a.participantCount = 0, a.operators = [], a.channelType = F.OPEN, a.participantCount = null !== (t3 = n2.participant_count) && void 0 !== t3 ? t3 : 0, a.operators = Array.isArray(n2.operators) ? n2.operators.map(function(n3) {
      return new Fr(e, n3);
    }) : [], a;
  }
  return t(s2, r2), s2.payloadify = function(e) {
    return te(ne(n(n({}, Fr2.payloadify(e)), { participant_count: e.participantCount, operators: e.operators.map(function(e2) {
      return Fr.payloadify(e2);
    }) })));
  }, s2.prototype.serialize = function() {
    return xr(this);
  }, s2.prototype.isOperator = function(e) {
    return e instanceof Fr ? this.isOperator(e.userId) : this.operators.some(function(n2) {
      return n2.userId === e;
    });
  }, s2.prototype._updateParticipantCount = function(e, n2) {
    return n2 > this._lastParticipantCountUpdated && (this.participantCount = e, this._lastParticipantCountUpdated = n2, true);
  }, s2.prototype.createParticipantListQuery = function(e) {
    return new Me(this._iid, this.url, e);
  }, s2.prototype.refresh = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, Ue.of(this._iid).getChannelWithoutCache(this.url)];
          case 1:
            return [2, e.sent()];
        }
      });
    });
  }, s2.prototype.enter = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a, o2, i;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = So.of(this._iid).requestQueue, n2 = new ve({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return r3 = t3.sent(), a = r3.as(Ce2), o2 = a.participantCount, i = a.ts, this._updateParticipantCount(o2, i), Ue.of(this._iid).setEnteredToCache(this), [2];
        }
      });
    });
  }, s2.prototype.exit = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a, o2, i;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = So.of(this._iid).requestQueue, n2 = new _e({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return r3 = t3.sent(), a = r3.as(ye), o2 = a.participantCount, i = a.ts, this._updateParticipantCount(o2, i), Ue.of(this._iid).setExitedToCache(this), ys.of(this._iid).fileMessageQueue.cancel(this), [2];
        }
      });
    });
  }, s2.prototype.updateChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, s3, u, c;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return n2 = n(n({}, ge), e), Pr(function(e2) {
              return S("string", e2.operatorUserIds, true) && (w("string", e2.coverUrlOrImage) || k(e2.coverUrlOrImage) || null === e2.coverUrlOrImage) && w("string", e2.name, true) && w("string", e2.data, true) && w("string", e2.customType, true);
            }(n2)).throw(g.invalidParameters), r3 = So.of(this._iid).requestQueue, s3 = new Te(n({ channelUrl: this.url }, n2)), [4, r3.send(s3)];
          case 1:
            return u = t3.sent(), c = u.as(be).channel, this._update(c), [4, Ue.of(this._iid).upsertChannelsToCache([c])];
          case 2:
            return t3.sent(), [2, this];
        }
      });
    });
  }, s2.prototype.updateChannelWithOperatorUserIds = function(e, r3, a, o2, i) {
    return r(this, void 0, void 0, function() {
      var n2;
      return o(this, function(t3) {
        return n2 = n(n({}, ge), { name: e, coverUrlOrImage: r3, data: a, operatorUserIds: o2, customType: i }), [2, this.updateChannel(n2)];
      });
    });
  }, s2.prototype.delete = function() {
    return r(this, void 0, void 0, function() {
      var e, n2;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = So.of(this._iid).requestQueue, n2 = new Ne({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return t3.sent(), [4, Ue.of(this._iid).removeChannelsFromCache([this.url])];
          case 2:
            return t3.sent(), [2];
        }
      });
    });
  }, s2.prototype.sendUserMessage = function(e) {
    return Pr(!e.isPinnedMessage).throw(g.notSupportedError), r2.prototype.sendUserMessage.call(this, e);
  }, s2.prototype.sendFileMessage = function(e) {
    return Pr(!e.isPinnedMessage).throw(g.notSupportedError), r2.prototype.sendFileMessage.call(this, e);
  }, s2;
}(Fr2);
var De2 = function(n2) {
  function t3(e) {
    void 0 === e && (e = {});
    var t4 = n2.call(this) || this;
    return Object.keys(e).forEach(function(n3) {
      t4.hasOwnProperty(n3) && (t4[n3] = e[n3]);
    }), t4;
  }
  return t(t3, n2), t3;
}(function(n2) {
  function t3() {
    var e = null !== n2 && n2.apply(this, arguments) || this;
    return e.onUserEntered = Ze, e.onUserExited = Ze, e.onChannelParticipantCountChanged = Ze, e.onPollUpdated = Ze, e.onPollVoted = Ze, e.onPollDeleted = Ze, e;
  }
  return t(t3, n2), t3;
}(t2));
var Oe2 = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.token, a = e.limit, o2 = e.nameKeyword, i = e.urlKeyword, u = e.customTypes, l = e.includeFrozen, h = e.includeMetaData;
    return (t4 = n2.call(this) || this).method = ie.GET, t4.path = ue, t4.params = te({ token: r2, limit: a, name_contains: o2, url_contains: i, custom_types: u, show_frozen: l, show_metadata: h }), t4;
  }
  return t(t3, n2), t3;
}(Ce);
var He2 = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    r2.channels = [];
    var a = t4.next, o2 = t4.channels, i = t4.ts;
    return r2.token = a, o2 && o2.length > 0 && (r2.channels = o2.map(function(n3) {
      return new Pe(e, n3);
    })), r2.ts = "number" == typeof i ? i : null, r2;
  }
  return t(t3, n2), t3;
}(Oe);
var xe = function(r2) {
  function i(e, n2) {
    var t3, a, o2, i2, s2, u = this;
    return (u = r2.call(this, e, n2) || this).includeFrozen = true, u.includeMetaData = true, u.nameKeyword = null, u.urlKeyword = null, u.customTypes = null, u.includeFrozen = null === (t3 = n2.includeFrozen) || void 0 === t3 || t3, u.includeMetaData = null === (a = n2.includeMetaData) || void 0 === a || a, u.nameKeyword = null !== (o2 = n2.nameKeyword) && void 0 !== o2 ? o2 : null, u.urlKeyword = null !== (i2 = n2.urlKeyword) && void 0 !== i2 ? i2 : null, u.customTypes = null !== (s2 = n2.customTypes) && void 0 !== s2 ? s2 : null, u;
  }
  return t(i, r2), i.prototype._validate = function() {
    return r2.prototype._validate.call(this) && w("boolean", this.includeFrozen) && w("boolean", this.includeMetaData) && w("string", this.nameKeyword, true) && w("string", this.urlKeyword, true) && S("string", this.customTypes, true);
  }, i.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a, o2, i2;
      return o(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 4] : this._hasNext ? (this._isLoading = true, e = So.of(this._iid).requestQueue, n2 = new Oe2(ne(n(n({}, this), { token: this._token }))), [4, e.send(n2)]) : [3, 3] : [3, 6];
          case 1:
            return r3 = t3.sent(), a = r3.as(He2), o2 = a.channels, i2 = a.token, this._token = i2, this._hasNext = !!i2, [4, Ue.of(this._iid).upsertChannelsToCache(o2)];
          case 2:
            return t3.sent(), this._isLoading = false, [2, o2];
          case 3:
            return [2, []];
          case 4:
            throw g.queryInProgress;
          case 5:
            return [3, 7];
          case 6:
            throw g.invalidParameters;
          case 7:
            return [2];
        }
      });
    });
  }, i;
}(Ho);
var Ie = function(r2) {
  function a() {
    var e = null !== r2 && r2.apply(this, arguments) || this;
    return e.name = "openChannel", e;
  }
  return t(a, r2), a.prototype.init = function(e, n2) {
    var t3 = n2.sdkState, a2 = n2.dispatcher, o2 = n2.sessionManager, i = n2.requestQueue, s2 = n2.logger, u = n2.onlineDetector, c = n2.cacheContext;
    r2.prototype.init.call(this, e, { sdkState: t3, dispatcher: a2, sessionManager: o2, requestQueue: i, logger: s2, onlineDetector: u, cacheContext: c }), this._manager = new Ue(e, { sdkState: t3, dispatcher: a2, requestQueue: i, logger: s2, cacheContext: c, sessionManager: o2 });
  }, a.prototype.createOpenChannelListQuery = function(e) {
    return void 0 === e && (e = {}), new xe(this._iid, e);
  }, a.prototype.addOpenChannelHandler = function(e, n2) {
    this._manager.addHandler(e, n2);
  }, a.prototype.removeOpenChannelHandler = function(e) {
    this._manager.removeHandler(e);
  }, a.prototype.removeAllOpenChannelHandlers = function() {
    this._manager.clearHandler();
  }, a.prototype.buildOpenChannelFromSerializedData = function(e) {
    return this._manager.buildOpenChannelFromSerializedData(e);
  }, a.prototype.getChannel = function(e) {
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        return [2, this._manager.getChannel(e)];
      });
    });
  }, a.prototype.getChannelWithoutCache = function(e) {
    return r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        return [2, this._manager.getChannelWithoutCache(e)];
      });
    });
  }, a.prototype.createChannel = function(e) {
    return void 0 === e && (e = {}), r(this, void 0, void 0, function() {
      return o(this, function(n2) {
        return [2, this._manager.createChannel(e)];
      });
    });
  }, a.prototype.createChannelWithOperatorUserIds = function(e, r3, a2, o2, i) {
    return r(this, void 0, void 0, function() {
      var n2;
      return o(this, function(t3) {
        return (n2 = n({}, he)).name = e, n2.coverUrlOrImage = r3, n2.data = a2, n2.operatorUserIds = o2, n2.customType = i, [2, this._manager.createChannel(n2)];
      });
    });
  }, a;
}(Ao);

// node_modules/@sendbird/uikit-react/SendbirdProvider.js
var import_react_dom = __toESM(require_react_dom());
var import_prop_types = __toESM(require_prop_types());
var isEmpty = function(obj) {
  if (obj === null || obj === void 0) {
    return true;
  }
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return JSON.stringify(obj) === JSON.stringify({});
};
var useTheme = function(overrides) {
  (0, import_react3.useLayoutEffect)(function() {
    if (!isEmpty(overrides)) {
      cssVars({
        variables: __assign({
          "--sendbird-dark-primary-500": "#4d2aa6",
          "--sendbird-dark-primary-400": "#6440C4",
          "--sendbird-dark-primary-300": "#7B53EF",
          "--sendbird-dark-primary-200": "#9E8CF5",
          "--sendbird-dark-primary-100": "#E2DFFF",
          "--sendbird-dark-secondary-500": "#007A7A",
          "--sendbird-dark-secondary-400": "#189A8D",
          "--sendbird-dark-secondary-300": "#2EBA9F",
          "--sendbird-dark-secondary-200": "#6FD6BE",
          "--sendbird-dark-secondary-100": "#AEF2DC",
          "--sendbird-dark-information-100": "#b2d9ff",
          "--sendbird-dark-error-500": "#A30E2D",
          "--sendbird-dark-error-400": "#C11F41",
          "--sendbird-dark-error-300": "#E53157",
          "--sendbird-dark-error-200": "#FF6183",
          "--sendbird-dark-error-100": "#FFABBD",
          "--sendbird-dark-background-700": "#000000",
          "--sendbird-dark-background-600": "#161616",
          "--sendbird-dark-background-500": "#2C2C2C",
          "--sendbird-dark-background-400": "#393939",
          "--sendbird-dark-background-300": "#A8A8A8",
          "--sendbird-dark-background-200": "#D9D9D9",
          "--sendbird-dark-background-100": "#F0F0F0",
          "--sendbird-dark-background-50": "#FFFFFF",
          "--sendbird-dark-overlay": "rgba(0, 0, 0, 0.32)",
          "--sendbird-dark-onlight-01": "rgba(0, 0, 0, 0.88)",
          "--sendbird-dark-onlight-02": "rgba(0, 0, 0, 0.50)",
          "--sendbird-dark-onlight-03": "rgba(0, 0, 0, 0.38)",
          "--sendbird-dark-onlight-04": "rgba(0, 0, 0, 0.12)",
          "--sendbird-dark-ondark-01": "rgba(255, 255, 255, 0.88)",
          "--sendbird-dark-ondark-02": "rgba(255, 255, 255, 0.50)",
          "--sendbird-dark-ondark-03": "rgba(255, 255, 255, 0.38)",
          "--sendbird-dark-ondark-04": "rgba(255, 255, 255, 0.12)",
          "--sendbird-dark-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
          "--sendbird-dark-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
          "--sendbird-dark-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
          "--sendbird-dark-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
          "--sendbird-dark-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)",
          "--sendbird-light-primary-500": "#4d2aa6",
          "--sendbird-light-primary-400": "#6440C4",
          "--sendbird-light-primary-300": "#7B53EF",
          "--sendbird-light-primary-200": "#9E8CF5",
          "--sendbird-light-primary-100": "#E2DFFF",
          "--sendbird-light-secondary-500": "#007A7A",
          "--sendbird-light-secondary-400": "#189A8D",
          "--sendbird-light-secondary-300": "#2EBA9F",
          "--sendbird-light-secondary-200": "#6FD6BE",
          "--sendbird-light-secondary-100": "#AEF2DC",
          "--sendbird-light-information-100": "#b2d9ff",
          "--sendbird-light-error-500": "#A30E2D",
          "--sendbird-light-error-400": "#C11F41",
          "--sendbird-light-error-300": "#E53157",
          "--sendbird-light-error-200": "#FF6183",
          "--sendbird-light-error-100": "#FFABBD",
          "--sendbird-light-background-700": "#000000",
          "--sendbird-light-background-600": "#161616",
          "--sendbird-light-background-500": "#2C2C2C",
          "--sendbird-light-background-400": "#393939",
          "--sendbird-light-background-300": "#A8A8A8",
          "--sendbird-light-background-200": "#D9D9D9",
          "--sendbird-light-background-100": "#F0F0F0",
          "--sendbird-light-background-50": " #FFFFFF",
          "--sendbird-light-overlay": "rgba(0, 0, 0, 0.32)",
          "--sendbird-light-onlight-01": "rgba(0, 0, 0, 0.88)",
          "--sendbird-light-onlight-02": "rgba(0, 0, 0, 0.50)",
          "--sendbird-light-onlight-03": "rgba(0, 0, 0, 0.38)",
          "--sendbird-light-onlight-04": "rgba(0, 0, 0, 0.12)",
          "--sendbird-light-ondark-01": "rgba(255, 255, 255, 0.88)",
          "--sendbird-light-ondark-02": "rgba(255, 255, 255, 0.50)",
          "--sendbird-light-ondark-03": "rgba(255, 255, 255, 0.38)",
          "--sendbird-light-ondark-04": "rgba(255, 255, 255, 0.12)",
          "--sendbird-light-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
          "--sendbird-light-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
          "--sendbird-light-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
          "--sendbird-light-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
          "--sendbird-light-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)"
        }, overrides)
      });
    }
  }, [overrides]);
};
var SDK_ACTIONS = {
  INIT_SDK: "INIT_SDK",
  SET_SDK_LOADING: "SET_SDK_LOADING",
  RESET_SDK: "RESET_SDK",
  SDK_ERROR: "SDK_ERROR"
};
var initialState$1 = {
  initialized: false,
  loading: false,
  sdk: {},
  error: false
};
function reducer$1(state, action) {
  return K(action).with({
    type: SDK_ACTIONS.SET_SDK_LOADING
  }, function(_a) {
    var payload = _a.payload;
    return __assign(__assign({}, state), {
      initialized: false,
      loading: payload
    });
  }).with({
    type: SDK_ACTIONS.SDK_ERROR
  }, function() {
    return __assign(__assign({}, state), {
      initialized: false,
      loading: false,
      error: true
    });
  }).with({
    type: SDK_ACTIONS.INIT_SDK
  }, function(_a) {
    var payload = _a.payload;
    return {
      sdk: payload,
      initialized: true,
      loading: false,
      error: false
    };
  }).with({
    type: SDK_ACTIONS.RESET_SDK
  }, function() {
    return initialState$1;
  }).otherwise(function() {
    return state;
  });
}
var initialState = {
  initialized: false,
  loading: false,
  user: {}
};
function reducer(state, action) {
  return K(action).with({
    type: USER_ACTIONS.INIT_USER
  }, function(_a) {
    var payload = _a.payload;
    return {
      initialized: true,
      loading: false,
      user: payload
    };
  }).with({
    type: USER_ACTIONS.RESET_USER
  }, function() {
    return initialState;
  }).with({
    type: USER_ACTIONS.UPDATE_USER_INFO
  }, function(_a) {
    var payload = _a.payload;
    return __assign(__assign({}, state), {
      user: payload
    });
  }).otherwise(function() {
    return state;
  });
}
function useOnlineStatus(sdk, logger) {
  var _a, _b;
  var _c = (0, import_react3.useState)((_b = (_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.onLine) !== null && _b !== void 0 ? _b : true), isOnline = _c[0], setIsOnline = _c[1];
  (0, import_react3.useEffect)(function() {
    var uniqueHandlerId = uuidv4();
    try {
      logger.warning("sdk changed", uniqueHandlerId);
      var handler = new qr({
        onDisconnected: function() {
          setIsOnline(false);
          logger.warning("onDisconnected", {
            isOnline
          });
        },
        onReconnectStarted: function() {
          setIsOnline(false);
          logger.warning("onReconnectStarted", {
            isOnline
          });
        },
        onReconnectSucceeded: function() {
          setIsOnline(true);
          logger.warning("onReconnectSucceeded", {
            isOnline
          });
        },
        onReconnectFailed: function() {
          sdk.reconnect();
          logger.warning("onReconnectFailed");
        }
      });
      if (sdk === null || sdk === void 0 ? void 0 : sdk.addConnectionHandler) {
        sdk.addConnectionHandler(uniqueHandlerId, handler);
        logger.info("Added ConnectionHandler", uniqueHandlerId);
      }
    } catch (_a2) {
    }
    return function() {
      try {
        sdk.removeConnectionHandler(uniqueHandlerId);
        logger.info("Removed ConnectionHandler", uniqueHandlerId);
      } catch (_a2) {
      }
    };
  }, [sdk]);
  (0, import_react3.useEffect)(function() {
    var tryReconnect = function() {
      try {
        logger.warning("Try reconnecting SDK");
        if (sdk.connectionState !== "OPEN") {
          sdk.reconnect();
        }
      } catch (_a2) {
      }
    };
    window.addEventListener("online", tryReconnect);
    return function() {
      window.removeEventListener("online", tryReconnect);
    };
  }, [sdk]);
  (0, import_react3.useEffect)(function() {
    var body = document.querySelector("body");
    if (!isOnline) {
      try {
        body.classList.add("sendbird__offline");
        logger.info("Added class sendbird__offline to body");
      } catch (e) {
      }
    } else {
      try {
        body.classList.remove("sendbird__offline");
        logger.info("Removed class sendbird__offline from body");
      } catch (e) {
      }
    }
  }, [isOnline]);
  return isOnline;
}
function disconnectSdk(_a) {
  var sdkDispatcher = _a.sdkDispatcher, userDispatcher = _a.userDispatcher, sdk = _a.sdk;
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_b) {
      return [2, new Promise(function(resolve) {
        sdkDispatcher({
          type: SDK_ACTIONS.SET_SDK_LOADING,
          payload: true
        });
        if (sdk === null || sdk === void 0 ? void 0 : sdk.disconnect) {
          sdk.disconnect().then(function() {
            sdkDispatcher({
              type: SDK_ACTIONS.RESET_SDK
            });
            userDispatcher({
              type: USER_ACTIONS.RESET_USER
            });
          }).finally(function() {
            resolve(true);
          });
        } else {
          resolve(true);
        }
      })];
    });
  });
}
var APP_VERSION_STRING = "3.7.0";
var INIT_SDK = SDK_ACTIONS.INIT_SDK;
var SET_SDK_LOADING = SDK_ACTIONS.SET_SDK_LOADING;
var RESET_SDK = SDK_ACTIONS.RESET_SDK;
var SDK_ERROR = SDK_ACTIONS.SDK_ERROR;
var INIT_USER = USER_ACTIONS.INIT_USER;
var UPDATE_USER_INFO = USER_ACTIONS.UPDATE_USER_INFO;
var RESET_USER = USER_ACTIONS.RESET_USER;
function getMissingParamError(_a) {
  var userId = _a.userId, appId = _a.appId;
  return "SendbirdProvider | useConnect/setupConnection/Connection failed UserId: ".concat(userId, " or appId: ").concat(appId, " missing");
}
function getConnectSbError(error) {
  return "SendbirdProvider | useConnect/setupConnection/Connection failed. ".concat((error === null || error === void 0 ? void 0 : error.code) || "", " ").concat((error === null || error === void 0 ? void 0 : error.message) || "");
}
function setUpParams(_a) {
  var appId = _a.appId, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, sdkInitParams = _a.sdkInitParams;
  var params = __assign(__assign({
    modules: [new $e(), new Ie()],
    newInstance: true
  }, sdkInitParams !== null && sdkInitParams !== void 0 ? sdkInitParams : {}), {
    // appId shouldn't be overrided
    appId
  });
  if (customApiHost) {
    params["customApiHost"] = customApiHost;
  }
  if (customWebSocketHost) {
    params["customWebSocketHost"] = customWebSocketHost;
  }
  var newSdk = bn.init(params);
  return newSdk;
}
function setUpConnection(_a) {
  var logger = _a.logger, sdkDispatcher = _a.sdkDispatcher, userDispatcher = _a.userDispatcher, initDashboardConfigs = _a.initDashboardConfigs, userId = _a.userId, appId = _a.appId, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, configureSession = _a.configureSession, nickname = _a.nickname, profileUrl = _a.profileUrl, accessToken = _a.accessToken, isUserIdUsedForNickname = _a.isUserIdUsedForNickname, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, _b = _a.isMobile, isMobile = _b === void 0 ? false : _b;
  return __awaiter(this, void 0, void 0, function() {
    var _this = this;
    return __generator(this, function(_c) {
      return [2, new Promise(function(resolve, reject) {
        var _a2, _b2, _c2, _d, _e2, _f, _g, _h, _j, _k;
        (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "SendbirdProvider | useConnect/setupConnection/init", {
          userId,
          appId
        });
        sdkDispatcher({
          type: SET_SDK_LOADING,
          payload: true
        });
        if (userId && appId) {
          var newSdk_1 = setUpParams({
            appId,
            customApiHost,
            customWebSocketHost,
            sdkInitParams
          });
          if (configureSession && typeof configureSession === "function") {
            var sessionHandler = configureSession(newSdk_1);
            (_b2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _b2 === void 0 ? void 0 : _b2.call(logger, "SendbirdProvider | useConnect/setupConnection/configureSession", sessionHandler);
            newSdk_1.setSessionHandler(sessionHandler);
          }
          (_c2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _c2 === void 0 ? void 0 : _c2.call(logger, "SendbirdProvider | useConnect/setupConnection/setVersion", {
            version: APP_VERSION_STRING
          });
          (_d = newSdk_1 === null || newSdk_1 === void 0 ? void 0 : newSdk_1.addSendbirdExtensions) === null || _d === void 0 ? void 0 : _d.call(newSdk_1, [{
            product: (_e2 = ze === null || ze === void 0 ? void 0 : ze.UIKIT_CHAT) !== null && _e2 !== void 0 ? _e2 : "uikit-chat",
            version: APP_VERSION_STRING,
            platform: (_f = Ve === null || Ve === void 0 ? void 0 : Ve.JS) !== null && _f !== void 0 ? _f : "js"
          }], {
            platform: isMobile ? (_g = He === null || He === void 0 ? void 0 : He.MOBILE_WEB) !== null && _g !== void 0 ? _g : "mobile_web" : (_h = He === null || He === void 0 ? void 0 : He.WEB) !== null && _h !== void 0 ? _h : "web"
          }, customExtensionParams);
          newSdk_1.addExtension("sb_uikit", APP_VERSION_STRING);
          var connectCbSucess_1 = function(user) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a3, _b3;
              return __generator(this, function(_c3) {
                (_a3 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "SendbirdProvider | useConnect/setupConnection/connectCbSucess", user);
                sdkDispatcher({
                  type: INIT_SDK,
                  payload: newSdk_1
                });
                userDispatcher({
                  type: INIT_USER,
                  payload: user
                });
                initDashboardConfigs(newSdk_1).then(function(config) {
                  var _a4;
                  (_a4 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a4 === void 0 ? void 0 : _a4.call(logger, "SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration success", {
                    config
                  });
                }).catch(function(error) {
                  var _a4;
                  (_a4 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a4 === void 0 ? void 0 : _a4.call(logger, "SendbirdProvider | useConnect/setupConnection/getUIKitConfiguration failed", {
                    error
                  });
                });
                if ((nickname !== user.nickname || profileUrl !== user.profileUrl) && !(isTextuallyNull(nickname) && isTextuallyNull(profileUrl))) {
                  (_b3 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _b3 === void 0 ? void 0 : _b3.call(logger, "SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo", {
                    nickname,
                    profileUrl
                  });
                  newSdk_1.updateCurrentUserInfo({
                    nickname: nickname || user.nickname || (isUserIdUsedForNickname ? user.userId : ""),
                    profileUrl: profileUrl || user.profileUrl
                  }).then(function(namedUser) {
                    var _a4;
                    (_a4 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a4 === void 0 ? void 0 : _a4.call(logger, "SendbirdProvider | useConnect/setupConnection/updateCurrentUserInfo success", {
                      nickname,
                      profileUrl
                    });
                    userDispatcher({
                      type: UPDATE_USER_INFO,
                      payload: namedUser
                    });
                  }).finally(function() {
                    resolve();
                  });
                } else {
                  resolve();
                }
                return [
                  2
                  /*return*/
                ];
              });
            });
          };
          var connectCbError_1 = function(e) {
            var _a3;
            var errorMessage2 = getConnectSbError(e);
            (_a3 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a3 === void 0 ? void 0 : _a3.call(logger, errorMessage2, {
              e,
              appId,
              userId
            });
            sdkDispatcher({
              type: RESET_SDK
            });
            userDispatcher({
              type: RESET_USER
            });
            sdkDispatcher({
              type: SDK_ERROR
            });
            reject(errorMessage2);
          };
          (_j = logger === null || logger === void 0 ? void 0 : logger.info) === null || _j === void 0 ? void 0 : _j.call(logger, "SendbirdProvider | useConnect/setupConnection/connect connecting using ".concat(accessToken !== null && accessToken !== void 0 ? accessToken : userId));
          newSdk_1.connect(userId, accessToken).then(function(res) {
            return connectCbSucess_1(res);
          }).catch(function(err) {
            return connectCbError_1(err);
          });
        } else {
          var errorMessage = getMissingParamError({
            userId,
            appId
          });
          sdkDispatcher({
            type: SDK_ERROR
          });
          (_k = logger === null || logger === void 0 ? void 0 : logger.error) === null || _k === void 0 ? void 0 : _k.call(logger, errorMessage);
          reject(errorMessage);
        }
      })];
    });
  });
}
function connect(_a) {
  var logger = _a.logger, sdkDispatcher = _a.sdkDispatcher, userDispatcher = _a.userDispatcher, initDashboardConfigs = _a.initDashboardConfigs, userId = _a.userId, appId = _a.appId, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, configureSession = _a.configureSession, nickname = _a.nickname, profileUrl = _a.profileUrl, accessToken = _a.accessToken, sdk = _a.sdk, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, isMobile = _a.isMobile;
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, disconnectSdk({
            logger,
            sdkDispatcher,
            userDispatcher,
            sdk
          })];
        case 1:
          _b.sent();
          return [4, setUpConnection({
            logger,
            sdkDispatcher,
            userDispatcher,
            initDashboardConfigs,
            userId,
            appId,
            customApiHost,
            customWebSocketHost,
            configureSession,
            nickname,
            profileUrl,
            accessToken,
            sdkInitParams,
            customExtensionParams,
            isMobile
          })];
        case 2:
          _b.sent();
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function useConnect(triggerTypes, staticTypes) {
  var _a;
  var userId = triggerTypes.userId, appId = triggerTypes.appId, accessToken = triggerTypes.accessToken, isMobile = triggerTypes.isMobile, isUserIdUsedForNickname = triggerTypes.isUserIdUsedForNickname;
  var logger = staticTypes.logger, nickname = staticTypes.nickname, profileUrl = staticTypes.profileUrl, configureSession = staticTypes.configureSession, customApiHost = staticTypes.customApiHost, customWebSocketHost = staticTypes.customWebSocketHost, sdk = staticTypes.sdk, sdkDispatcher = staticTypes.sdkDispatcher, userDispatcher = staticTypes.userDispatcher, initDashboardConfigs = staticTypes.initDashboardConfigs, sdkInitParams = staticTypes.sdkInitParams, customExtensionParams = staticTypes.customExtensionParams;
  (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, "SendbirdProvider | useConnect", __assign(__assign({}, triggerTypes), staticTypes));
  (0, import_react3.useEffect)(function() {
    var _a2, _b;
    (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "SendbirdProvider | useConnect/useEffect", {
      userId,
      appId,
      accessToken
    });
    try {
      connect({
        userId,
        appId,
        accessToken,
        logger,
        nickname,
        profileUrl,
        configureSession,
        customApiHost,
        customWebSocketHost,
        sdk,
        sdkDispatcher,
        userDispatcher,
        initDashboardConfigs,
        isUserIdUsedForNickname,
        sdkInitParams,
        customExtensionParams,
        isMobile
      });
    } catch (error) {
      (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, "SendbirdProvider | useConnect/useEffect", error);
    }
  }, [userId, appId, accessToken]);
  var reconnect = (0, import_react3.useCallback)(function() {
    var _a2, _b;
    (_a2 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "SendbirdProvider | useConnect/reconnect/useCallback", {
      sdk
    });
    try {
      connect({
        userId,
        appId,
        accessToken,
        logger,
        nickname,
        profileUrl,
        configureSession,
        customApiHost,
        customWebSocketHost,
        sdk,
        sdkDispatcher,
        userDispatcher,
        initDashboardConfigs,
        isUserIdUsedForNickname,
        sdkInitParams,
        customExtensionParams,
        isMobile
      });
    } catch (error) {
      (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, "SendbirdProvider | useConnect/reconnect/useCallback", error);
    }
  }, [sdk]);
  return reconnect;
}
var LOG_LEVELS = {
  DEBUG: "debug",
  WARNING: "warning",
  ERROR: "error",
  INFO: "info",
  ALL: "all"
};
var colorLog = function(level) {
  switch (level) {
    case LOG_LEVELS.WARNING:
      return "color: Orange";
    case LOG_LEVELS.ERROR:
      return "color: Red";
    default:
      return "color: Gray";
  }
};
var printLog = function(_a) {
  var level = _a.level, title = _a.title, _b = _a.description, description = _b === void 0 ? "" : _b, _c = _a.payload, payload = _c === void 0 ? [] : _c;
  console.log.apply(console, __spreadArray(["%c SendbirdUIKit | ".concat(level, " | ").concat((/* @__PURE__ */ new Date()).toISOString(), " | ").concat(title, " ").concat(description && "|"), colorLog(level), description], payload, false));
};
var getDefaultLogger = function() {
  return {
    info: noop,
    error: noop,
    warning: noop
  };
};
var LoggerFactory = function(lvl, customInterface) {
  var logInterface = customInterface || printLog;
  var lvlArray = Array.isArray(lvl) ? lvl : [lvl];
  var applyLog = function(lgLvl) {
    return function(title, description) {
      var payload = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        payload[_i - 2] = arguments[_i];
      }
      return logInterface({
        level: lgLvl,
        title,
        description,
        payload
      });
    };
  };
  return lvlArray.reduce(function(accumulator, currentLvl) {
    if (currentLvl === LOG_LEVELS.DEBUG || currentLvl === LOG_LEVELS.ALL) {
      return __assign(__assign({}, accumulator), {
        info: applyLog(LOG_LEVELS.INFO),
        error: applyLog(LOG_LEVELS.ERROR),
        warning: applyLog(LOG_LEVELS.WARNING)
      });
    }
    if (currentLvl === LOG_LEVELS.INFO) {
      return __assign(__assign({}, accumulator), {
        info: applyLog(LOG_LEVELS.INFO)
      });
    }
    if (currentLvl === LOG_LEVELS.ERROR) {
      return __assign(__assign({}, accumulator), {
        error: applyLog(LOG_LEVELS.ERROR)
      });
    }
    if (currentLvl === LOG_LEVELS.WARNING) {
      return __assign(__assign({}, accumulator), {
        warning: applyLog(LOG_LEVELS.WARNING)
      });
    }
    return __assign({}, accumulator);
  }, getDefaultLogger());
};
var pubSubFactory = function() {
  var topics = {};
  var hOP = topics.hasOwnProperty;
  return {
    __getTopics: function() {
      return topics;
    },
    subscribe: function(topic, listener) {
      if (!hOP.call(topics, topic)) {
        topics[topic] = [];
      }
      var index = topics[topic].push(listener) - 1;
      return {
        remove: function() {
          topics[topic].splice(index, 1);
        }
      };
    },
    publish: function(topic, info) {
      if (!hOP.call(topics, topic)) {
        return;
      }
      topics[topic].forEach(function(item) {
        item(info !== void 0 ? info : {});
      });
    }
  };
};
function useAppendDomNode(ids, rootSelector) {
  if (ids === void 0) {
    ids = [];
  }
  if (rootSelector === void 0) {
    rootSelector = "unknown";
  }
  (0, import_react3.useEffect)(function() {
    var root = document.querySelector(rootSelector);
    if (root) {
      ids.forEach(function(id) {
        var elem = document.createElement("div");
        elem.setAttribute("id", id);
        root.appendChild(elem);
      });
    }
    return function() {
      if (root) {
        ids.forEach(function(id) {
          var target = document.getElementById(id);
          if (target)
            root.removeChild(target);
        });
      }
    };
  }, []);
}
var VoiceMessageProvider = function(_a) {
  var children = _a.children, _b = _a.isVoiceMessageEnabled, isVoiceMessageEnabled = _b === void 0 ? true : _b;
  if (!isVoiceMessageEnabled) {
    return import_react3.default.createElement(VoicePlayerProvider, null, children);
  }
  return import_react3.default.createElement(VoiceRecorderProvider, null, import_react3.default.createElement(VoicePlayerProvider, null, children));
};
function uikitConfigMapper(_a) {
  var _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
  var legacyConfig = _a.legacyConfig, _1 = _a.uikitOptions, uikitOptions = _1 === void 0 ? {} : _1;
  var replyType = legacyConfig.replyType, isMentionEnabled = legacyConfig.isMentionEnabled, isReactionEnabled = legacyConfig.isReactionEnabled, disableUserProfile = legacyConfig.disableUserProfile, isVoiceMessageEnabled = legacyConfig.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = legacyConfig.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = legacyConfig.isMessageReceiptStatusEnabledOnChannelList, showSearchIcon = legacyConfig.showSearchIcon;
  return {
    common: {
      enableUsingDefaultUserProfile: (_c = (_b = uikitOptions.common) === null || _b === void 0 ? void 0 : _b.enableUsingDefaultUserProfile) !== null && _c !== void 0 ? _c : typeof disableUserProfile === "boolean" ? !disableUserProfile : void 0
    },
    groupChannel: {
      enableOgtag: (_d = uikitOptions.groupChannel) === null || _d === void 0 ? void 0 : _d.enableOgtag,
      enableMention: (_f = (_e2 = uikitOptions.groupChannel) === null || _e2 === void 0 ? void 0 : _e2.enableMention) !== null && _f !== void 0 ? _f : isMentionEnabled,
      enableReactions: (_h = (_g = uikitOptions.groupChannel) === null || _g === void 0 ? void 0 : _g.enableReactions) !== null && _h !== void 0 ? _h : isReactionEnabled,
      enableTypingIndicator: (_j = uikitOptions.groupChannel) === null || _j === void 0 ? void 0 : _j.enableTypingIndicator,
      enableVoiceMessage: (_l = (_k = uikitOptions.groupChannel) === null || _k === void 0 ? void 0 : _k.enableVoiceMessage) !== null && _l !== void 0 ? _l : isVoiceMessageEnabled,
      replyType: (_o = (_m = uikitOptions.groupChannel) === null || _m === void 0 ? void 0 : _m.replyType) !== null && _o !== void 0 ? _o : replyType != null ? getCaseResolvedReplyType(replyType).lowerCase : void 0,
      threadReplySelectType: (_p = uikitOptions.groupChannel) === null || _p === void 0 ? void 0 : _p.threadReplySelectType,
      input: {
        enableDocument: (_r = (_q = uikitOptions.groupChannel) === null || _q === void 0 ? void 0 : _q.input) === null || _r === void 0 ? void 0 : _r.enableDocument
      }
    },
    groupChannelList: {
      enableTypingIndicator: (_t = (_s = uikitOptions.groupChannelList) === null || _s === void 0 ? void 0 : _s.enableTypingIndicator) !== null && _t !== void 0 ? _t : isTypingIndicatorEnabledOnChannelList,
      enableMessageReceiptStatus: (_v = (_u = uikitOptions.groupChannelList) === null || _u === void 0 ? void 0 : _u.enableMessageReceiptStatus) !== null && _v !== void 0 ? _v : isMessageReceiptStatusEnabledOnChannelList
    },
    groupChannelSettings: {
      enableMessageSearch: (_x = (_w = uikitOptions.groupChannelSettings) === null || _w === void 0 ? void 0 : _w.enableMessageSearch) !== null && _x !== void 0 ? _x : showSearchIcon
    },
    openChannel: {
      enableOgtag: (_y = uikitOptions.openChannel) === null || _y === void 0 ? void 0 : _y.enableOgtag,
      input: {
        enableDocument: (_0 = (_z = uikitOptions.openChannel) === null || _z === void 0 ? void 0 : _z.input) === null || _0 === void 0 ? void 0 : _0.enableDocument
      }
    }
  };
}
var TIMEOUT = 2e3;
function schedulerFactory(_a) {
  var logger = _a.logger, timeout = _a.timeout, cb = _a.cb;
  var queue = [];
  var interval = null;
  var push = function(channel) {
    var channelPresent = queue.find(function(c) {
      return c.url === channel.url;
    });
    if (!channelPresent) {
      queue.push(channel);
    } else {
      logger.info("Channel: Mark as read already in queue", {
        channel
      });
    }
    if (interval) {
      return;
    }
    var item = queue.shift();
    if (item) {
      cb(item);
    }
    interval = setInterval(function() {
      if (queue.length === 0 && interval) {
        clearInterval(interval);
        interval = null;
        return;
      }
      var item2 = queue.shift();
      if (item2) {
        cb(item2);
      }
    }, timeout || TIMEOUT);
  };
  var clear = function() {
    queue = [];
    if (interval) {
      clearInterval(interval);
      interval = null;
    }
  };
  return {
    push,
    clear,
    getQueue: function() {
      return queue;
    }
  };
}
function useUnmount(callback, deps) {
  if (deps === void 0) {
    deps = [];
  }
  (0, import_react3.useLayoutEffect)(function() {
    return function() {
      callback();
    };
  }, deps);
}
function useMarkAsReadScheduler(_a, _b) {
  var isConnected = _a.isConnected;
  var logger = _b.logger;
  var markAsReadScheduler = (0, import_react3.useMemo)(function() {
    return schedulerFactory({
      logger,
      cb: function(channel) {
        try {
          channel.markAsRead();
        } catch (error) {
          logger.warning("Channel: Mark as delivered failed", {
            channel,
            error
          });
        }
      }
    });
  }, []);
  (0, import_react3.useEffect)(function() {
    if (!isConnected) {
      markAsReadScheduler.clear();
    }
  }, [isConnected]);
  useUnmount(function() {
    markAsReadScheduler.clear();
  });
  return markAsReadScheduler;
}
function useMarkAsDeliveredScheduler(_a, _b) {
  var isConnected = _a.isConnected;
  var logger = _b.logger;
  var markAsDeliveredScheduler = (0, import_react3.useMemo)(function() {
    return schedulerFactory({
      logger,
      cb: function(channel) {
        try {
          channel.markAsDelivered();
        } catch (error) {
          logger.warning("Channel: Mark as delivered failed", {
            channel,
            error
          });
        }
      }
    });
  }, []);
  (0, import_react3.useEffect)(function() {
    if (!isConnected) {
      markAsDeliveredScheduler.clear();
    }
  }, [isConnected]);
  useUnmount(function() {
    markAsDeliveredScheduler.clear();
  });
  return markAsDeliveredScheduler;
}
function SendbirdProvider(props) {
  var localConfigs = uikitConfigMapper({
    legacyConfig: {
      replyType: props.replyType,
      isMentionEnabled: props.isMentionEnabled,
      isReactionEnabled: props.isReactionEnabled,
      disableUserProfile: props.disableUserProfile,
      isVoiceMessageEnabled: props.isVoiceMessageEnabled,
      isTypingIndicatorEnabledOnChannelList: props.isTypingIndicatorEnabledOnChannelList,
      isMessageReceiptStatusEnabledOnChannelList: props.isMessageReceiptStatusEnabledOnChannelList,
      showSearchIcon: props.showSearchIcon
    },
    uikitOptions: props.uikitOptions
  });
  return import_react3.default.createElement(UIKitConfigProvider, {
    localConfigs: {
      common: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.common,
      groupChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannel,
        channelList: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelList,
        setting: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelSettings
      },
      openChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.openChannel
      }
    }
  }, import_react3.default.createElement(SendbirdSDK, props));
}
var SendbirdSDK = function(_a) {
  var _b, _c, _d;
  var appId = _a.appId, userId = _a.userId, children = _a.children, _e2 = _a.accessToken, accessToken = _e2 === void 0 ? "" : _e2, _f = _a.customApiHost, customApiHost = _f === void 0 ? "" : _f, _g = _a.customWebSocketHost, customWebSocketHost = _g === void 0 ? "" : _g, _h = _a.configureSession, configureSession = _h === void 0 ? null : _h, _j = _a.theme, theme = _j === void 0 ? "light" : _j, _k = _a.config, config = _k === void 0 ? {} : _k, _l = _a.nickname, nickname = _l === void 0 ? "" : _l, _m = _a.colorSet, colorSet = _m === void 0 ? null : _m, _o = _a.stringSet, stringSet = _o === void 0 ? null : _o, _p = _a.dateLocale, dateLocale = _p === void 0 ? null : _p, _q = _a.profileUrl, profileUrl = _q === void 0 ? "" : _q, voiceRecord = _a.voiceRecord, _r = _a.userListQuery, userListQuery = _r === void 0 ? null : _r, _s = _a.imageCompression, imageCompression = _s === void 0 ? {} : _s, _t = _a.allowProfileEdit, allowProfileEdit = _t === void 0 ? false : _t, _u = _a.disableMarkAsDelivered, disableMarkAsDelivered = _u === void 0 ? false : _u, _v = _a.renderUserProfile, renderUserProfile = _v === void 0 ? null : _v, _w = _a.onUserProfileMessage, onUserProfileMessage = _w === void 0 ? null : _w, _x = _a.breakpoint, breakpoint = _x === void 0 ? false : _x, _y = _a.isUserIdUsedForNickname, isUserIdUsedForNickname = _y === void 0 ? true : _y, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, _z = _a.isMultipleFilesMessageEnabled, isMultipleFilesMessageEnabled = _z === void 0 ? false : _z, eventHandlers = _a.eventHandlers;
  var _0 = config.logLevel, logLevel = _0 === void 0 ? "" : _0, _1 = config.userMention, userMention = _1 === void 0 ? {} : _1, _2 = config.isREMUnitEnabled, isREMUnitEnabled = _2 === void 0 ? false : _2, customPubSub = config.pubSub;
  var isMobile = useMediaQueryContext().isMobile;
  var _3 = (0, import_react3.useState)(LoggerFactory(logLevel)), logger = _3[0], setLogger = _3[1];
  var pubSub = (0, import_react3.useState)(function() {
    return customPubSub !== null && customPubSub !== void 0 ? customPubSub : pubSubFactory();
  })[0];
  var _4 = (0, import_react3.useReducer)(reducer$1, initialState$1), sdkStore = _4[0], sdkDispatcher = _4[1];
  var _5 = (0, import_react3.useReducer)(reducer, initialState), userStore = _5[0], userDispatcher = _5[1];
  var _6 = useUIKitConfig(), configs = _6.configs, configsWithAppAttr = _6.configsWithAppAttr, initDashboardConfigs = _6.initDashboardConfigs;
  var sdkInitialized = sdkStore.initialized;
  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;
  var _7 = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _b !== void 0 ? _b : {}, uploadSizeLimit = _7.uploadSizeLimit, multipleFilesMessageFileCountLimit = _7.multipleFilesMessageFileCountLimit;
  useTheme(colorSet);
  var reconnect = useConnect({
    appId,
    userId,
    accessToken,
    isUserIdUsedForNickname,
    isMobile
  }, {
    logger,
    nickname,
    profileUrl,
    configureSession,
    customApiHost,
    customWebSocketHost,
    sdkInitParams,
    customExtensionParams,
    sdk,
    sdkDispatcher,
    userDispatcher,
    initDashboardConfigs
  });
  useUnmount(function() {
    if (typeof sdk.disconnect === "function") {
      disconnectSdk({
        logger,
        sdkDispatcher,
        userDispatcher,
        sdk
      });
    }
  }, [sdk.disconnect]);
  (0, import_react3.useEffect)(function() {
    setLogger(LoggerFactory(logLevel));
  }, [logLevel]);
  useAppendDomNode(["sendbird-modal-root", "sendbird-dropdown-portal", "sendbird-emoji-list-portal"], "body");
  var _8 = (0, import_react3.useState)(theme), currentTheme = _8[0], setCurrentTheme = _8[1];
  (0, import_react3.useEffect)(function() {
    setCurrentTheme(theme);
  }, [theme]);
  (0, import_react3.useEffect)(function() {
    var body = document.querySelector("body");
    body.classList.remove("sendbird-experimental__rem__units");
    if (isREMUnitEnabled) {
      body.classList.add("sendbird-experimental__rem__units");
    }
  }, [isREMUnitEnabled]);
  (0, import_react3.useEffect)(function() {
    logger.info("Setup theme", "Theme: ".concat(currentTheme));
    try {
      var body = document.querySelector("body");
      body.classList.remove("sendbird-theme--light");
      body.classList.remove("sendbird-theme--dark");
      body.classList.add("sendbird-theme--".concat(currentTheme || "light"));
      logger.info("Finish setup theme");
    } catch (e) {
      logger.warning("Setup theme failed", "".concat(e));
    }
    return function() {
      try {
        var body2 = document.querySelector("body");
        body2.classList.remove("sendbird-theme--light");
        body2.classList.remove("sendbird-theme--dark");
      } catch (_a2) {
      }
    };
  }, [currentTheme]);
  var isOnline = useOnlineStatus(sdkStore.sdk, logger);
  var markAsReadScheduler = useMarkAsReadScheduler({
    isConnected: isOnline
  }, {
    logger
  });
  var markAsDeliveredScheduler = useMarkAsDeliveredScheduler({
    isConnected: isOnline
  }, {
    logger
  });
  var localeStringSet = import_react3.default.useMemo(function() {
    if (!stringSet) {
      return getStringSet("en");
    }
    return __assign(__assign({}, getStringSet("en")), stringSet);
  }, [stringSet]);
  var uikitMultipleFilesMessageLimit = (0, import_react3.useMemo)(function() {
    return Math.min(DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, multipleFilesMessageFileCountLimit !== null && multipleFilesMessageFileCountLimit !== void 0 ? multipleFilesMessageFileCountLimit : Number.MAX_SAFE_INTEGER);
  }, [multipleFilesMessageFileCountLimit]);
  var uikitUploadSizeLimit = (0, import_react3.useMemo)(function() {
    return uploadSizeLimit;
  }, [uploadSizeLimit]);
  return import_react3.default.createElement(SendbirdSdkContext.Provider, {
    value: {
      stores: {
        sdkStore,
        userStore
      },
      dispatchers: {
        sdkDispatcher,
        userDispatcher,
        reconnect
      },
      config: {
        disableMarkAsDelivered,
        renderUserProfile,
        onUserProfileMessage,
        allowProfileEdit,
        isOnline,
        userId,
        appId,
        accessToken,
        theme: currentTheme,
        setCurrentTheme,
        setCurrenttheme: setCurrentTheme,
        isMultipleFilesMessageEnabled,
        uikitUploadSizeLimit,
        uikitMultipleFilesMessageLimit,
        userListQuery,
        logger,
        pubSub,
        imageCompression: __assign({
          compressionRate: 0.7
        }, imageCompression),
        voiceRecord: {
          maxRecordingTime: (_c = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime) !== null && _c !== void 0 ? _c : VOICE_RECORDER_DEFAULT_MAX,
          minRecordingTime: (_d = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime) !== null && _d !== void 0 ? _d : VOICE_RECORDER_DEFAULT_MIN
        },
        userMention: {
          maxMentionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10,
          maxSuggestionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15
        },
        markAsReadScheduler,
        markAsDeliveredScheduler,
        // From UIKitConfigProvider.localConfigs
        disableUserProfile: !configs.common.enableUsingDefaultUserProfile,
        isReactionEnabled: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,
        isMentionEnabled: configs.groupChannel.channel.enableMention,
        isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage,
        replyType: getCaseResolvedReplyType(configs.groupChannel.channel.replyType).upperCase,
        isTypingIndicatorEnabledOnChannelList: configs.groupChannel.channelList.enableTypingIndicator,
        isMessageReceiptStatusEnabledOnChannelList: configs.groupChannel.channelList.enableMessageReceiptStatus,
        showSearchIcon: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch,
        // Remote configs set from dashboard by UIKit feature configuration
        groupChannel: {
          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableOgtag,
          enableTypingIndicator: configs.groupChannel.channel.enableTypingIndicator,
          enableDocument: configs.groupChannel.channel.input.enableDocument,
          threadReplySelectType: getCaseResolvedThreadReplySelectType(configs.groupChannel.channel.threadReplySelectType).lowerCase
        },
        openChannel: {
          enableOgtag: sdkInitialized && configsWithAppAttr(sdk).openChannel.channel.enableOgtag,
          enableDocument: configs.openChannel.channel.input.enableDocument
        }
      },
      eventHandlers
    }
  }, import_react3.default.createElement(MediaQueryProvider, {
    logger,
    breakpoint
  }, import_react3.default.createElement(LocalizationProvider, {
    stringSet: localeStringSet,
    dateLocale
  }, import_react3.default.createElement(VoiceMessageProvider, {
    isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage
  }, import_react3.default.createElement(GlobalModalProvider, null, children)))));
};
export {
  SendbirdProvider,
  SendbirdProvider as default,
  useSendbirdStateContext
};
/*! Bundled license information:

css-vars-ponyfill/dist/css-vars-ponyfill.esm.js:
  (*!
   * css-vars-ponyfill
   * v2.4.8
   * https://jhildenbiddle.github.io/css-vars-ponyfill/
   * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>
   * MIT license
   *)
  (*!
   * get-css-data
   * v2.1.0
   * https://github.com/jhildenbiddle/get-css-data
   * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>
   * MIT license
   *)
  (**
   * Gets CSS data from <style> and <link> nodes (including @imports), then
   * returns data in order processed by DOM. Allows specifying nodes to
   * include/exclude and filtering CSS data using RegEx.
   *
   * @preserve
   * @param {object}   [options] The options object
   * @param {object}   [options.rootElement=document] Root element to traverse for
   *                   <link> and <style> nodes.
   * @param {string}   [options.include] CSS selector matching <link> and <style>
   *                   nodes to include
   * @param {string}   [options.exclude] CSS selector matching <link> and <style>
   *                   nodes to exclude
   * @param {object}   [options.filter] Regular expression used to filter node CSS
   *                   data. Each block of CSS data is tested against the filter,
   *                   and only matching data is included.
   * @param {boolean}  [options.skipDisabled=true] Determines if disabled
   *                   stylesheets will be skipped while collecting CSS data.
   * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be
   *                   collected from a stylesheet's runtime values instead of its
   *                   text content. This is required to get accurate CSS data
   *                   when a stylesheet has been modified using the deleteRule()
   *                   or insertRule() methods because these modifications will
   *                   not be reflected in the stylesheet's text content.
   * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
   *                   1) the XHR object, 2) source node reference, and 3) the
   *                   source URL as arguments.
   * @param {function} [options.onSuccess] Callback on each CSS node read. Passes
   *                   1) CSS text, 2) source node reference, and 3) the source
   *                   URL as arguments.
   * @param {function} [options.onError] Callback on each error. Passes 1) the XHR
   *                   object for inspection, 2) soure node reference, and 3) the
   *                   source URL that failed (either a <link> href or an @import)
   *                   as arguments
   * @param {function} [options.onComplete] Callback after all nodes have been
   *                   processed. Passes 1) concatenated CSS text, 2) an array of
   *                   CSS text in DOM order, and 3) an array of nodes in DOM
   *                   order as arguments.
   *
   * @example
   *
   *   getCssData({
   *     rootElement : document,
   *     include     : 'style,link[rel="stylesheet"]',
   *     exclude     : '[href="skip.css"]',
   *     filter      : /red/,
   *     skipDisabled: true,
   *     useCSSOM    : false,
   *     onBeforeSend(xhr, node, url) {
   *       // ...
   *     }
   *     onSuccess(cssText, node, url) {
   *       // ...
   *     }
   *     onError(xhr, node, url) {
   *       // ...
   *     },
   *     onComplete(cssText, cssArray, nodeArray) {
   *       // ...
   *     }
   *   });
   *)
  (**
   * Fetches, parses, and transforms CSS custom properties from specified
   * <style> and <link> elements into static values, then appends a new <style>
   * element with static values to the DOM to provide CSS custom property
   * compatibility for legacy browsers. Also provides a single interface for
   * live updates of runtime values in both modern and legacy browsers.
   *
   * @preserve
   * @param {object}   [options] Options object
   * @param {object}   [options.rootElement=document] Root element to traverse for
   *                   <link> and <style> nodes
   * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>
   *                   and <style> nodes will be processed.
   * @param {string}   [options.include="style,link[rel=stylesheet]"] CSS selector
   *                   matching <link re="stylesheet"> and <style> nodes to
   *                   process
   * @param {string}   [options.exclude] CSS selector matching <link
   *                   rel="stylehseet"> and <style> nodes to exclude from those
   *                   matches by options.include
   * @param {object}   [options.variables] A map of custom property name/value
   *                   pairs. Property names can omit or include the leading
   *                   double-hyphen (—), and values specified will override
   *                   previous values
   * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will
   *                   only generate legacy-compatible CSS in browsers that lack
   *                   native support (i.e., legacy browsers)
   * @param {boolean}  [options.preserveStatic=true] Determines if CSS
   *                   declarations that do not reference a custom property will
   *                   be preserved in the transformed CSS
   * @param {boolean}  [options.preserveVars=false] Determines if CSS custom
   *                   property declarations will be preserved in the transformed
   *                   CSS
   * @param {boolean}  [options.silent=false] Determines if warning and error
   *                   messages will be displayed on the console
   * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will
   *                   update the DOM after processing CSS custom properties
   * @param {boolean}  [options.updateURLs=true] Determines if relative url()
   *                   paths will be converted to absolute urls in external CSS
   * @param {boolean}  [options.watch=false] Determines if a MutationObserver will
   *                   be created that will execute the ponyfill when a <link> or
   *                   <style> DOM mutation is observed
   * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
   *                   1) the XHR object, 2) source node reference, and 3) the
   *                   source URL as arguments
   * @param {function} [options.onError] Callback after a CSS parsing error has
   *                   occurred or an XHR request has failed. Passes 1) an error
   *                   message, and 2) source node reference, 3) xhr, and 4 url as
   *                   arguments.
   * @param {function} [options.onWarning] Callback after each CSS parsing warning
   *                   has occurred. Passes 1) a warning message as an argument.
   * @param {function} [options.onSuccess] Callback after CSS data has been
   *                   collected from each node and before CSS custom properties
   *                   have been transformed. Allows modifying the CSS data before
   *                   it is transformed by returning any string value (or false
   *                   to skip). Passes 1) CSS text, 2) source node reference, and
   *                   3) the source URL as arguments.
   * @param {function} [options.onComplete] Callback after all CSS has been
   *                   processed, legacy-compatible CSS has been generated, and
   *                   (optionally) the DOM has been updated. Passes 1) a CSS
   *                   string with CSS variable values resolved, 2) an array of
   *                   output <style> node references that have been appended to
   *                   the DOM, 3) an object containing all custom properies names
   *                   and values, and 4) the ponyfill execution time in
   *                   milliseconds.
   * @param {function} [options.onFinally] Callback in modern and legacy browsers
   *                   after the ponyfill has finished all tasks. Passes 1) a
   *                   boolean indicating if the last ponyfill call resulted in a
   *                   style change, 2) a boolean indicating if the current
   *                   browser provides native support for CSS custom properties,
   *                   and 3) the ponyfill execution time in milliseconds.
   * @example
   *
   *   cssVars({
   *     rootElement   : document,
   *     shadowDOM     : false,
   *     include       : 'style,link[rel="stylesheet"]',
   *     exclude       : '',
   *     variables     : {},
   *     onlyLegacy    : true,
   *     preserveStatic: true,
   *     preserveVars  : false,
   *     silent        : false,
   *     updateDOM     : true,
   *     updateURLs    : true,
   *     watch         : false,
   *     onBeforeSend(xhr, node, url) {},
   *     onError(message, node, xhr, url) {},
   *     onWarning(message) {},
   *     onSuccess(cssText, node, url) {},
   *     onComplete(cssText, styleNode, cssVariables, benchmark) {},
   *     onFinally(hasChanged, hasNativeSupport, benchmark)
   *   });
   *)
*/
//# sourceMappingURL=@sendbird_uikit-react_SendbirdProvider.js.map
