import {
  USER_ACTIONS
} from "./chunk-5OTCRE3N.js";
import {
  Avatar$1,
  ChannelAvatar,
  ContextMenu,
  MENTION_USER_LABEL_CLASSNAME,
  MenuItem,
  MenuItems,
  MessageStatus,
  PUBSUB_TOPICS,
  PlaceHolder,
  PlaceHolderTypes,
  TextButton,
  TypingIndicatorText,
  UserListItem,
  UserProfileProvider,
  getChannelTitle,
  getChannelUnreadMessageCount,
  getCreateGroupChannel,
  getLastMessage,
  getLastMessageCreatedAt,
  getSdk,
  getTotalMembers,
  useLongPress
} from "./chunk-5MRX4ENC.js";
import {
  ButtonTypes,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  K2 as K,
  Label,
  LabelColors,
  LabelTypography,
  LocalizationContext,
  Modal,
  S3 as S,
  _extends,
  filterChannelListParams,
  getChannelsWithUpsertedChannel,
  isAboutSame,
  isVoiceMessage,
  noop,
  qe2 as qe,
  require_prop_types,
  useLocalization,
  useMediaQueryContext,
  uuidv4
} from "./chunk-SC6Q4D3X.js";
import {
  __assign,
  __awaiter,
  __generator,
  __spreadArray,
  useSendbirdStateContext
} from "./chunk-JYKYS726.js";
import {
  DELIVERY_RECEIPT
} from "./chunk-ZUUM5UVF.js";
import {
  require_react_dom
} from "./chunk-OCHDJWGW.js";
import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@sendbird/uikit-react/ChannelList.js
var import_react18 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/ChannelListProvider-eccd99c6.js
var import_react = __toESM(require_react(), 1);
var RESET_CHANNEL_LIST = "RESET_CHANNEL_LIST";
var CREATE_CHANNEL = "CREATE_CHANNEL";
var LEAVE_CHANNEL_SUCCESS = "LEAVE_CHANNEL_SUCCESS";
var SET_CURRENT_CHANNEL = "SET_CURRENT_CHANNEL";
var FETCH_CHANNELS_START = "FETCH_CHANNELS_START";
var FETCH_CHANNELS_SUCCESS = "FETCH_CHANNELS_SUCCESS";
var FETCH_CHANNELS_FAILURE = "FETCH_CHANNELS_FAILURE";
var INIT_CHANNELS_START = "INIT_CHANNELS_START";
var INIT_CHANNELS_SUCCESS = "INIT_CHANNELS_SUCCESS";
var INIT_CHANNELS_FAILURE = "INIT_CHANNELS_FAILURE";
var ON_USER_JOINED = "ON_USER_JOINED";
var ON_CHANNEL_DELETED = "ON_CHANNEL_DELETED";
var ON_LAST_MESSAGE_UPDATED = "ON_LAST_MESSAGE_UPDATED";
var ON_USER_LEFT = "ON_USER_LEFT";
var ON_CHANNEL_CHANGED = "ON_CHANNEL_CHANGED";
var ON_CHANNEL_ARCHIVED = "ON_CHANNEL_ARCHIVED";
var ON_CHANNEL_FROZEN = "ON_CHANNEL_FROZEN";
var ON_CHANNEL_UNFROZEN = "ON_CHANNEL_UNFROZEN";
var ON_READ_RECEIPT_UPDATED = "ON_READ_RECEIPT_UPDATED";
var ON_DELIVERY_RECEIPT_UPDATED = "ON_DELIVERY_RECEIPT_UPDATED";
var CHANNEL_REPLACED_TO_TOP = "CHANNEL_REPLACED_TO_TOP";
var CHANNEL_LIST_PARAMS_UPDATED = "CHANNEL_LIST_PARAMS_UPDATED";
var DELIVERY_RECEIPT2 = "delivery_receipt";
var createEventHandler = function(_a) {
  var sdk = _a.sdk, sdkChannelHandlerId = _a.sdkChannelHandlerId, channelListDispatcher = _a.channelListDispatcher, logger = _a.logger;
  var ChannelHandler = new qe({
    onChannelChanged: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelChanged", channel);
        channelListDispatcher({
          type: ON_CHANNEL_CHANGED,
          payload: channel
        });
      }
    },
    onChannelDeleted: function(channelUrl) {
      logger.info("ChannelList: onChannelDeleted", channelUrl);
      channelListDispatcher({
        type: ON_CHANNEL_DELETED,
        payload: channelUrl
      });
    },
    onUserJoined: function(channel) {
      logger.info("ChannelList: onUserJoined", channel);
      channelListDispatcher({
        type: ON_USER_JOINED,
        payload: channel
      });
    },
    onUserBanned: function(channel, user) {
      var _a2;
      if (channel.isGroupChannel()) {
        logger.info("Channel: onUserBanned", channel);
        var isMe = user.userId === ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId);
        channelListDispatcher({
          type: ON_USER_LEFT,
          payload: {
            channel,
            isMe
          }
        });
      }
    },
    onUserLeft: function(channel, user) {
      var _a2;
      logger.info("ChannelList: onUserLeft", channel);
      var isMe = user.userId === ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId);
      channelListDispatcher({
        type: ON_USER_LEFT,
        payload: {
          channel,
          isMe
        }
      });
    },
    onUnreadMemberStatusUpdated: function(channel) {
      logger.info("ChannelList: onUnreadMemberStatusUpdated", channel);
      channelListDispatcher({
        type: ON_READ_RECEIPT_UPDATED,
        payload: channel
      });
    },
    onUndeliveredMemberStatusUpdated: function(channel) {
      logger.info("ChannelList: onUndeliveredMemberStatusUpdated", channel);
      if (channel.lastMessage) {
        channelListDispatcher({
          type: ON_DELIVERY_RECEIPT_UPDATED,
          payload: channel
        });
      }
    },
    onMessageUpdated: function(channel, message) {
      if (channel.isGroupChannel() && channel.lastMessage.isEqual(message)) {
        logger.info("ChannelList: onMessageUpdated", channel);
        channelListDispatcher({
          type: ON_LAST_MESSAGE_UPDATED,
          payload: channel
        });
      }
    },
    onChannelHidden: function(channel) {
      logger.info("ChannelList: onChannelHidden", channel);
      channelListDispatcher({
        type: ON_CHANNEL_ARCHIVED,
        payload: channel
      });
    },
    onChannelFrozen: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelFrozen", channel);
        channelListDispatcher({
          type: ON_CHANNEL_FROZEN,
          payload: channel
        });
      }
    },
    onChannelUnfrozen: function(channel) {
      if (channel.isGroupChannel()) {
        logger.info("ChannelList: onChannelUnfrozen", channel);
        channelListDispatcher({
          type: ON_CHANNEL_UNFROZEN,
          payload: channel
        });
      }
    }
  });
  logger.info("ChannelList: Added channelHandler");
  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);
};
var createChannelListQuery = function(_a) {
  var sdk = _a.sdk, _b = _a.userFilledChannelListQuery, userFilledChannelListQuery = _b === void 0 ? {} : _b;
  var params = {
    includeEmpty: false,
    limit: 20,
    order: "latest_last_message"
    // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'
  };
  if (userFilledChannelListQuery) {
    Object.keys(userFilledChannelListQuery).forEach(function(key) {
      params[key] = userFilledChannelListQuery[key];
    });
  }
  return sdk.groupChannel.createMyGroupChannelListQuery(params);
};
function setupChannelList(_a) {
  var sdk = _a.sdk, sdkChannelHandlerId = _a.sdkChannelHandlerId, channelListDispatcher = _a.channelListDispatcher, setChannelSource = _a.setChannelSource, onChannelSelect = _a.onChannelSelect, userFilledChannelListQuery = _a.userFilledChannelListQuery, logger = _a.logger, sortChannelList = _a.sortChannelList, disableAutoSelect = _a.disableAutoSelect, markAsDeliveredScheduler = _a.markAsDeliveredScheduler, disableMarkAsDelivered = _a.disableMarkAsDelivered;
  if (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) {
    createEventHandler({
      sdk,
      channelListDispatcher,
      sdkChannelHandlerId,
      logger
    });
  } else {
    logger.warning("ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist", sdk);
  }
  logger.info("ChannelList - creating query", {
    userFilledChannelListQuery
  });
  var channelListQuery = createChannelListQuery({
    sdk,
    userFilledChannelListQuery
  });
  logger.info("ChannelList - created query", channelListQuery);
  setChannelSource(channelListQuery);
  channelListDispatcher({
    type: INIT_CHANNELS_START
  });
  if (userFilledChannelListQuery) {
    logger.info("ChannelList - setting up channelListQuery", channelListQuery);
    channelListDispatcher({
      type: CHANNEL_LIST_PARAMS_UPDATED,
      payload: {
        channelListQuery,
        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId
      }
    });
  }
  logger.info("ChannelList - fetching channels");
  if (channelListQuery.hasNext) {
    channelListQuery.next().then(function(channelList) {
      var _a2, _b;
      logger.info("ChannelList - fetched channels", channelList);
      logger.info("ChannelList - highlight channel", channelList[0]);
      var sortedChannelList = channelList;
      if (sortChannelList && typeof sortChannelList === "function") {
        sortedChannelList = sortChannelList(channelList);
        logger.info("ChannelList - channel list sorted", sortedChannelList);
      }
      if (!disableAutoSelect) {
        onChannelSelect === null || onChannelSelect === void 0 ? void 0 : onChannelSelect(sortedChannelList[0]);
      }
      channelListDispatcher({
        type: INIT_CHANNELS_SUCCESS,
        payload: {
          channelList: sortedChannelList,
          disableAutoSelect
        }
      });
      var canSetMarkAsDelivered = (_b = (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.premiumFeatureList) === null || _b === void 0 ? void 0 : _b.find(function(feature) {
        return feature === DELIVERY_RECEIPT2;
      });
      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {
        sortedChannelList.forEach(function(channel) {
          markAsDeliveredScheduler.push(channel);
        });
      }
    }).catch(function(err) {
      if (err) {
        logger.error("ChannelList - couldnt fetch channels", err);
        channelListDispatcher({
          type: INIT_CHANNELS_FAILURE
        });
      }
    });
  } else {
    logger.info("ChannelList - there are no more channels");
  }
}
var pubSubHandleRemover = function(subscriber) {
  subscriber.forEach(function(s) {
    try {
      s.remove();
    } catch (_a) {
    }
  });
};
var pubSubHandler = function(pubSub, channelListDispatcher) {
  var subscriber = /* @__PURE__ */ new Map();
  if (!pubSub)
    return subscriber;
  subscriber.set(PUBSUB_TOPICS.CREATE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.CREATE_CHANNEL, function(msg) {
    var channel = msg.channel;
    channelListDispatcher({
      type: "CREATE_CHANNEL",
      payload: channel
    });
  }));
  subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function(msg) {
    var _a;
    var channel = msg.channel, message = msg.message;
    var updatedChannel = channel;
    if (((_a = updatedChannel === null || updatedChannel === void 0 ? void 0 : updatedChannel.lastMessage) === null || _a === void 0 ? void 0 : _a.messageId) === message.messageId) {
      updatedChannel.lastMessage = message;
    }
    if (channel) {
      channelListDispatcher({
        type: ON_LAST_MESSAGE_UPDATED,
        payload: updatedChannel
      });
    }
  }));
  subscriber.set(PUBSUB_TOPICS.LEAVE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.LEAVE_CHANNEL, function(msg) {
    var channel = msg.channel;
    channelListDispatcher({
      type: LEAVE_CHANNEL_SUCCESS,
      payload: channel === null || channel === void 0 ? void 0 : channel.url
    });
  }));
  subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, function(msg) {
    var channel = msg.channel;
    channelListDispatcher({
      type: CHANNEL_REPLACED_TO_TOP,
      payload: channel
    });
  }));
  return subscriber;
};
var getNextChannel = function(_a) {
  var channel = _a.channel, currentChannel = _a.currentChannel, allChannels = _a.allChannels, disableAutoSelect = _a.disableAutoSelect;
  var nextChannel = null;
  if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === channel.url) {
    if (!disableAutoSelect && allChannels.length > 0) {
      var firstChannel = allChannels[0], _b = allChannels[1], secondChannel = _b === void 0 ? null : _b;
      nextChannel = firstChannel.url === channel.url ? secondChannel : firstChannel;
    }
  } else {
    nextChannel = currentChannel;
  }
  return nextChannel;
};
var initialState = {
  // we might not need this initialized state -> should remove
  initialized: false,
  loading: true,
  allChannels: [],
  currentChannel: null,
  channelListQuery: null,
  currentUserId: "",
  disableAutoSelect: false
};
function channelListReducer(state, action) {
  return K(action).with({
    type: INIT_CHANNELS_START
  }, function() {
    return __assign(__assign({}, state), {
      loading: true
    });
  }).with({
    type: RESET_CHANNEL_LIST
  }, function() {
    return initialState;
  }).with({
    type: INIT_CHANNELS_SUCCESS
  }, function(action2) {
    var _a = action2.payload, channelList = _a.channelList, disableAutoSelect = _a.disableAutoSelect;
    return __assign(__assign({}, state), {
      initialized: true,
      loading: false,
      allChannels: channelList,
      disableAutoSelect,
      currentChannel: !disableAutoSelect && channelList && channelList.length && channelList.length > 0 ? channelList[0] : null
    });
  }).with({
    type: FETCH_CHANNELS_SUCCESS
  }, function(action2) {
    var currentChannels = state.allChannels.map(function(c) {
      return c.url;
    });
    var filteredChannels = action2.payload.filter(function(_a) {
      var url = _a.url;
      return !currentChannels.find(function(c) {
        return c === url;
      });
    });
    return __assign(__assign({}, state), {
      allChannels: __spreadArray(__spreadArray([], state.allChannels, true), filteredChannels, true)
    });
  }).with({
    type: CREATE_CHANNEL
  }, function(action2) {
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, channelListQuery = state.channelListQuery;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), {
          currentChannel: channel,
          allChannels: getChannelsWithUpsertedChannel(allChannels, channel)
        });
      }
      return __assign(__assign({}, state), {
        currentChannel: channel
      });
    }
    return __assign(__assign({}, state), {
      currentChannel: channel,
      allChannels: __spreadArray([channel], allChannels.filter(function(ch) {
        return ch.url !== (channel === null || channel === void 0 ? void 0 : channel.url);
      }), true)
    });
  }).with({
    type: ON_CHANNEL_ARCHIVED
  }, function(action2) {
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), {
          allChannels: getChannelsWithUpsertedChannel(allChannels, channel)
        });
      }
    }
    var nextChannel = getNextChannel({
      channel,
      currentChannel,
      allChannels,
      disableAutoSelect
    });
    return __assign(__assign({}, state), {
      currentChannel: nextChannel,
      allChannels: allChannels.filter(function(_a) {
        var url = _a.url;
        return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
      })
    });
  }).with({
    type: S.union(LEAVE_CHANNEL_SUCCESS, ON_CHANNEL_DELETED)
  }, function(action2) {
    var _a;
    var channelUrl = action2.payload;
    return __assign(__assign({}, state), {
      currentChannel: channelUrl === ((_a = state.currentChannel) === null || _a === void 0 ? void 0 : _a.url) ? state.allChannels[0] : state.currentChannel,
      allChannels: state.allChannels.filter(function(_a2) {
        var url = _a2.url;
        return url !== channelUrl;
      })
    });
  }).with({
    type: ON_USER_LEFT
  }, function(action2) {
    var _a = action2.payload, channel = _a.channel, isMe = _a.isMe;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    var nextChannels = allChannels.filter(function(ch) {
      return ch.url !== channel.url;
    });
    var nextChannel = null;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        nextChannels = getChannelsWithUpsertedChannel(allChannels, channel);
      }
    }
    if (isMe) {
      nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
    }
    return __assign(__assign({}, state), {
      currentChannel: nextChannel,
      allChannels: nextChannels
    });
  }).with({
    type: S.union(ON_USER_JOINED, ON_CHANNEL_CHANGED, ON_READ_RECEIPT_UPDATED, ON_DELIVERY_RECEIPT_UPDATED)
  }, function(action2) {
    var _a, _b;
    var channel = action2.payload;
    var _c = state.allChannels, allChannels = _c === void 0 ? [] : _c, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    var unreadMessageCount = channel.unreadMessageCount;
    if (action2.type === ON_USER_JOINED && !(channel === null || channel === void 0 ? void 0 : channel.lastMessage))
      return state;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), {
          allChannels: getChannelsWithUpsertedChannel(allChannels, channel)
        });
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), {
        currentChannel: nextChannel,
        allChannels: allChannels.filter(function(_a2) {
          var url = _a2.url;
          return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
        })
      });
    }
    if (
      // When marking as read the channel
      unreadMessageCount === 0 && ((_b = (_a = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _a === void 0 ? void 0 : _a.sender) === null || _b === void 0 ? void 0 : _b.userId) !== currentUserId
    ) {
      return __assign(__assign({}, state), {
        allChannels: allChannels.map(function(ch) {
          return ch.url === (channel === null || channel === void 0 ? void 0 : channel.url) ? channel : ch;
        })
      });
    }
    return __assign(__assign({}, state), {
      allChannels: __spreadArray([channel], allChannels.filter(function(_a2) {
        var url = _a2.url;
        return url !== channel.url;
      }), true)
    });
  }).with({
    type: SET_CURRENT_CHANNEL
  }, function(action2) {
    return __assign(__assign({}, state), {
      currentChannel: action2.payload
    });
  }).with({
    type: ON_LAST_MESSAGE_UPDATED
  }, function(action2) {
    return __assign(__assign({}, state), {
      allChannels: state.allChannels.map(function(channel) {
        return (channel === null || channel === void 0 ? void 0 : channel.url) === action2.payload.url ? action2.payload : channel;
      })
    });
  }).with({
    type: ON_CHANNEL_FROZEN
  }, function(action2) {
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), {
          allChannels: getChannelsWithUpsertedChannel(allChannels, channel)
        });
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), {
        currentChannel: nextChannel,
        allChannels: allChannels.filter(function(_a) {
          var url = _a.url;
          return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
        })
      });
    }
    return __assign(__assign({}, state), {
      allChannels: allChannels.map(function(ch) {
        if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          ch.isFrozen = true;
          return ch;
        }
        return ch;
      })
    });
  }).with({
    type: ON_CHANNEL_UNFROZEN
  }, function(action2) {
    var channel = action2.payload;
    var allChannels = state.allChannels, currentUserId = state.currentUserId, currentChannel = state.currentChannel, channelListQuery = state.channelListQuery, disableAutoSelect = state.disableAutoSelect;
    if (channelListQuery) {
      if (filterChannelListParams(channelListQuery, channel, currentUserId)) {
        return __assign(__assign({}, state), {
          allChannels: getChannelsWithUpsertedChannel(allChannels, channel)
        });
      }
      var nextChannel = getNextChannel({
        channel,
        currentChannel,
        allChannels,
        disableAutoSelect
      });
      return __assign(__assign({}, state), {
        currentChannel: nextChannel,
        allChannels: allChannels.filter(function(_a) {
          var url = _a.url;
          return url !== (channel === null || channel === void 0 ? void 0 : channel.url);
        })
      });
    }
    return __assign(__assign({}, state), {
      allChannels: allChannels.map(function(ch) {
        if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          ch.isFrozen = false;
          return ch;
        }
        return ch;
      })
    });
  }).with({
    type: CHANNEL_REPLACED_TO_TOP
  }, function(action2) {
    if (state.channelListQuery) {
      if (filterChannelListParams(state.channelListQuery, action2.payload, state.currentUserId)) {
        return __assign(__assign({}, state), {
          allChannels: __spreadArray([action2.payload], state.allChannels.filter(function(channel) {
            return (channel === null || channel === void 0 ? void 0 : channel.url) !== action2.payload.url;
          }), true)
        });
      }
      return state;
    }
    return __assign(__assign({}, state), {
      allChannels: __spreadArray([action2.payload], state.allChannels.filter(function(channel) {
        return (channel === null || channel === void 0 ? void 0 : channel.url) !== action2.payload.url;
      }), true)
    });
  }).with({
    type: CHANNEL_LIST_PARAMS_UPDATED
  }, function(action2) {
    return __assign(__assign({}, state), {
      currentUserId: action2.payload.currentUserId,
      channelListQuery: action2.payload.channelListQuery
    });
  }).otherwise(function() {
    return state;
  });
}
function useActiveChannelUrl(_a, _b) {
  var activeChannelUrl = _a.activeChannelUrl, channels = _a.channels, sdk = _a.sdk;
  var logger = _b.logger, channelListDispatcher = _b.channelListDispatcher;
  return (0, import_react.useEffect)(function() {
    var _a2;
    if (activeChannelUrl) {
      logger.info("ChannelListProvider: looking for active channel", {
        activeChannelUrl
      });
      var activeChannel = channels === null || channels === void 0 ? void 0 : channels.find(function(channel) {
        return channel.url === activeChannelUrl;
      });
      if (activeChannel) {
        channelListDispatcher({
          type: SET_CURRENT_CHANNEL,
          payload: activeChannel
        });
      } else {
        logger.info("ChannelListProvider: searching backend for active channel", {
          activeChannelUrl
        });
        (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.getChannel(activeChannelUrl).then(function(channel) {
          channelListDispatcher({
            type: FETCH_CHANNELS_SUCCESS,
            payload: [channel]
          });
          channelListDispatcher({
            type: SET_CURRENT_CHANNEL,
            payload: channel
          });
        }).catch(function() {
          logger.warning("ChannelListProvider: Active channel not found");
        });
      }
    }
  }, [activeChannelUrl]);
}
var useFetchChannelList = function(_a, _b) {
  var channelSource = _a.channelSource, disableMarkAsDelivered = _a.disableMarkAsDelivered;
  var channelListDispatcher = _b.channelListDispatcher, logger = _b.logger, markAsDeliveredScheduler = _b.markAsDeliveredScheduler;
  return (0, import_react.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var channelList, error_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!(channelSource === null || channelSource === void 0 ? void 0 : channelSource.hasNext)) {
              logger.info("ChannelList: not able to fetch");
              return [
                2
                /*return*/
              ];
            }
            logger.info("ChannelList: starting fetch");
            channelListDispatcher({
              type: FETCH_CHANNELS_START,
              payload: null
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, channelSource.next()];
          case 2:
            channelList = _a2.sent();
            logger.info("ChannelList: succeeded fetch", {
              channelList
            });
            channelListDispatcher({
              type: FETCH_CHANNELS_SUCCESS,
              payload: channelList
            });
            if (!disableMarkAsDelivered) {
              logger.info("ChannelList: mark as delivered to fetched channels");
              channelList === null || channelList === void 0 ? void 0 : channelList.forEach(function(channel) {
                if ((channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) > 0) {
                  markAsDeliveredScheduler.push(channel);
                }
              });
            }
            return [3, 4];
          case 3:
            error_1 = _a2.sent();
            logger.error("ChannelList: failed fetch", {
              error: error_1
            });
            channelListDispatcher({
              type: FETCH_CHANNELS_FAILURE,
              payload: error_1
            });
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [channelSource, disableMarkAsDelivered]);
};
var ChannelListContext = import_react.default.createContext({
  disableUserProfile: true,
  allowProfileEdit: true,
  onBeforeCreateChannel: null,
  onThemeChange: null,
  onProfileEditSuccess: null,
  onChannelSelect: null,
  queries: {},
  className: null,
  initialized: false,
  loading: false,
  allChannels: [],
  currentChannel: null,
  channelListQuery: {},
  currentUserId: null,
  channelListDispatcher: null,
  channelSource: null,
  typingChannels: [],
  fetchChannelList: noop
});
var ChannelListProvider = function(props) {
  var _a, _b;
  var children = props.children, className = props.className, disableUserProfile = props.disableUserProfile, allowProfileEdit = props.allowProfileEdit, queries = props.queries, onProfileEditSuccess = props.onProfileEditSuccess, onThemeChange = props.onThemeChange, onBeforeCreateChannel = props.onBeforeCreateChannel, sortChannelList = props.sortChannelList, overrideInviteUser = props.overrideInviteUser, activeChannelUrl = props.activeChannelUrl, _c = props.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _c === void 0 ? null : _c, _d = props.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _d === void 0 ? null : _d;
  var disableAutoSelect = (props === null || props === void 0 ? void 0 : props.disableAutoSelect) || !!activeChannelUrl;
  var onChannelSelect = (props === null || props === void 0 ? void 0 : props.onChannelSelect) || noop;
  var globalStore = useSendbirdStateContext();
  var config = globalStore.config, stores = globalStore.stores;
  var sdkStore = stores.sdkStore;
  var pubSub = config.pubSub, logger = config.logger, onUserProfileMessage = config.onUserProfileMessage;
  var markAsDeliveredScheduler = config.markAsDeliveredScheduler, _e = config.disableMarkAsDelivered, disableMarkAsDelivered = _e === void 0 ? false : _e, _f = config.isTypingIndicatorEnabledOnChannelList, isTypingIndicatorEnabledOnChannelList = _f === void 0 ? false : _f, _g = config.isMessageReceiptStatusEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = _g === void 0 ? false : _g;
  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;
  var _h = ((_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _a !== void 0 ? _a : {}).premiumFeatureList, premiumFeatureList = _h === void 0 ? [] : _h;
  var userDefinedDisableUserProfile = disableUserProfile || (config === null || config === void 0 ? void 0 : config.disableUserProfile);
  var userDefinedRenderProfile = config === null || config === void 0 ? void 0 : config.renderUserProfile;
  var enableEditProfile = allowProfileEdit || (config === null || config === void 0 ? void 0 : config.allowProfileEdit);
  var userFilledChannelListQuery = queries === null || queries === void 0 ? void 0 : queries.channelListQuery;
  var userFilledApplicationUserListQuery = queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery;
  var sdkIntialized = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;
  var _j = (0, import_react.useReducer)(channelListReducer, initialState), channelListStore = _j[0], channelListDispatcher = _j[1];
  var currentChannel = channelListStore.currentChannel;
  var _k = (0, import_react.useState)(null), channelSource = _k[0], setChannelSource = _k[1];
  var _l = (0, import_react.useState)([]), typingChannels = _l[0], setTypingChannels = _l[1];
  (0, import_react.useEffect)(function() {
    var subscriber = pubSubHandler(pubSub, channelListDispatcher);
    return function() {
      pubSubHandleRemover(subscriber);
    };
  }, [sdkIntialized]);
  (0, import_react.useEffect)(function() {
    var _a2;
    var sdkChannelHandlerId = uuidv4();
    if (sdkIntialized) {
      logger.info("ChannelList: Setup channelHandlers");
      setupChannelList({
        sdk,
        sdkChannelHandlerId,
        channelListDispatcher,
        setChannelSource,
        onChannelSelect,
        userFilledChannelListQuery,
        logger,
        sortChannelList,
        disableAutoSelect,
        markAsDeliveredScheduler,
        disableMarkAsDelivered
      });
    } else {
      logger.info("ChannelList: Removing channelHandlers");
      if ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.removeGroupChannelHandler) {
        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);
      }
      setChannelSource(null);
      channelListDispatcher({
        type: RESET_CHANNEL_LIST,
        payload: null
      });
    }
    return function() {
      var _a3, _b2;
      logger.info("ChannelList: Removing channelHandlers");
      if ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) {
        (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.removeGroupChannelHandler(sdkChannelHandlerId);
      }
    };
  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);
  (0, import_react.useEffect)(function() {
    var _a2, _b2;
    var typingHandlerId = "";
    if ((_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.addGroupChannelHandler) {
      typingHandlerId = uuidv4();
      var handler = new qe({
        onTypingStatusUpdated: function(channel) {
          var _a3;
          var typingMemberCount = (_a3 = channel === null || channel === void 0 ? void 0 : channel.getTypingUsers()) === null || _a3 === void 0 ? void 0 : _a3.length;
          var channelList = typingChannels.filter(function(ch) {
            return ch.url !== channel.url;
          });
          if (typingMemberCount > 0) {
            setTypingChannels(__spreadArray(__spreadArray([], channelList, true), [channel], false));
          } else {
            setTypingChannels(channelList);
          }
        },
        onUnreadMemberStatusUpdated: function(channel) {
          channelListDispatcher({
            type: ON_LAST_MESSAGE_UPDATED,
            payload: channel
          });
        },
        onUndeliveredMemberStatusUpdated: function(channel) {
          channelListDispatcher({
            type: ON_LAST_MESSAGE_UPDATED,
            payload: channel
          });
        },
        onMessageUpdated: function(channel) {
          if (channel.isGroupChannel()) {
            channelListDispatcher({
              type: ON_LAST_MESSAGE_UPDATED,
              payload: channel
            });
            sdk.groupChannel.getChannelWithoutCache(channel.url).then(function(ch) {
              channelListDispatcher({
                type: ON_LAST_MESSAGE_UPDATED,
                payload: ch
              });
            });
          }
        },
        onMentionReceived: function(channel) {
          if (channel.isGroupChannel()) {
            channelListDispatcher({
              type: ON_LAST_MESSAGE_UPDATED,
              payload: channel
            });
            sdk.groupChannel.getChannelWithoutCache(channel.url).then(function(ch) {
              channelListDispatcher({
                type: ON_LAST_MESSAGE_UPDATED,
                payload: ch
              });
            });
          }
        }
      });
      (_b2 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.addGroupChannelHandler(typingHandlerId, handler);
    }
    return function() {
      var _a3;
      if (((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.removeGroupChannelHandler) && typingHandlerId !== "") {
        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);
      }
    };
  }, [(_b = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _b === void 0 ? void 0 : _b.userId]);
  var queries_ = (0, import_react.useMemo)(function() {
    return {
      applicationUserListQuery: userFilledApplicationUserListQuery,
      channelListQuery: userFilledChannelListQuery
    };
  }, [userFilledApplicationUserListQuery, userFilledChannelListQuery]);
  var allChannels = channelListStore.allChannels;
  var sortedChannels = sortChannelList && typeof sortChannelList === "function" ? sortChannelList(allChannels) : allChannels;
  if (sortedChannels.length !== allChannels.length) {
    var warning = "ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems";
    console.warn(warning, {
      before: allChannels,
      after: sortedChannels
    });
    logger.warning(warning, {
      before: allChannels,
      after: sortedChannels
    });
  }
  (0, import_react.useEffect)(function() {
    if (!sdk || !sdk.groupChannel || !currentChannel || !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
      return;
    }
    sdk.groupChannel.getChannel(currentChannel.url).then(function(groupChannel) {
      if (groupChannel) {
        onChannelSelect(groupChannel);
      } else {
        onChannelSelect(null);
      }
    });
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  useActiveChannelUrl({
    activeChannelUrl,
    channels: sortedChannels,
    sdk
  }, {
    logger,
    channelListDispatcher
  });
  var fetchChannelList = useFetchChannelList({
    channelSource,
    disableMarkAsDelivered: disableMarkAsDelivered || !premiumFeatureList.some(function(feature) {
      return feature === DELIVERY_RECEIPT;
    })
  }, {
    channelListDispatcher,
    logger,
    markAsDeliveredScheduler
  });
  return import_react.default.createElement(ChannelListContext.Provider, {
    value: __assign(__assign({
      className,
      disableUserProfile,
      queries: queries_,
      onProfileEditSuccess,
      onThemeChange,
      onBeforeCreateChannel,
      overrideInviteUser,
      onChannelSelect,
      sortChannelList,
      allowProfileEdit: enableEditProfile,
      channelListDispatcher,
      channelSource
    }, channelListStore), {
      allChannels: sortedChannels,
      typingChannels,
      isTypingIndicatorEnabled: isTypingIndicatorEnabled !== null ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,
      isMessageReceiptStatusEnabled: isMessageReceiptStatusEnabled !== null ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,
      fetchChannelList
    })
  }, import_react.default.createElement(UserProfileProvider, {
    disableUserProfile: userDefinedDisableUserProfile !== null && userDefinedDisableUserProfile !== void 0 ? userDefinedDisableUserProfile : config === null || config === void 0 ? void 0 : config.disableUserProfile,
    renderUserProfile: userDefinedRenderProfile,
    onUserProfileMessage
  }, import_react.default.createElement("div", {
    className: "sendbird-channel-list ".concat(className)
  }, children)));
};
function useChannelListContext() {
  var context = (0, import_react.useContext)(ChannelListContext);
  return context;
}

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelListUI.js
var import_react17 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelListHeader.js
var import_react2 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var ChannelListHeader = function(_a) {
  var renderHeader = _a.renderHeader, renderTitle = _a.renderTitle, renderIconButton = _a.renderIconButton, onEdit = _a.onEdit, allowProfileEdit = _a.allowProfileEdit;
  var _b = useSendbirdStateContext(), stores = _b.stores, config = _b.config;
  var user = stores.userStore.user;
  var logger = config.logger;
  var stringSet = (0, import_react2.useContext)(LocalizationContext).stringSet;
  if (renderHeader) {
    logger === null || logger === void 0 ? void 0 : logger.warning('Recomend to use "renderTitle" instead of "renderHeader". It will be deprecated.');
  }
  var titleRenderer = renderHeader || renderTitle;
  return import_react2.default.createElement("div", {
    className: ["sendbird-channel-header", allowProfileEdit ? "sendbird-channel-header--allow-edit" : ""].join(" ")
  }, (titleRenderer === null || titleRenderer === void 0 ? void 0 : titleRenderer()) || import_react2.default.createElement("div", {
    className: "sendbird-channel-header__title",
    role: "button",
    onClick: function() {
      onEdit === null || onEdit === void 0 ? void 0 : onEdit();
    },
    onKeyDown: function() {
      onEdit === null || onEdit === void 0 ? void 0 : onEdit();
    },
    tabIndex: 0
  }, import_react2.default.createElement("div", {
    className: "sendbird-channel-header__title__left"
  }, import_react2.default.createElement(Avatar$1, {
    width: "32px",
    height: "32px",
    src: user.profileUrl,
    alt: user.nickname
  })), import_react2.default.createElement("div", {
    className: "sendbird-channel-header__title__right"
  }, import_react2.default.createElement(Label, {
    className: "sendbird-channel-header__title__right__name",
    type: LabelTypography.SUBTITLE_2,
    color: LabelColors.ONBACKGROUND_1
  }, user.nickname || stringSet.NO_NAME), import_react2.default.createElement(Label, {
    className: "sendbird-channel-header__title__right__user-id",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_2
  }, user.userId))), import_react2.default.createElement("div", {
    className: "sendbird-channel-header__right-icon"
  }, renderIconButton === null || renderIconButton === void 0 ? void 0 : renderIconButton()));
};

// node_modules/@sendbird/uikit-react/ChannelList/components/AddChannel.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/CreateChannel.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/CreateChannel/components/CreateChannelUI.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/CreateChannelProvider-a2885972.js
var import_react3 = __toESM(require_react(), 1);
var CHANNEL_TYPE;
(function(CHANNEL_TYPE2) {
  CHANNEL_TYPE2["GROUP"] = "group";
  CHANNEL_TYPE2["SUPERGROUP"] = "supergroup";
  CHANNEL_TYPE2["BROADCAST"] = "broadcast";
})(CHANNEL_TYPE || (CHANNEL_TYPE = {}));
var CreateChannelContext = import_react3.default.createContext(void 0);
var CreateChannelProvider = function(props) {
  var _a;
  var children = props.children, onCreateChannel = props.onCreateChannel, onBeforeCreateChannel = props.onBeforeCreateChannel, overrideInviteUser = props.overrideInviteUser, userListQuery = props.userListQuery;
  var store = useSendbirdStateContext();
  var userListQuery_ = (_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.userListQuery;
  var createChannel = getCreateGroupChannel(store);
  var _b = (0, import_react3.useState)(0), step = _b[0], setStep = _b[1];
  var _c = (0, import_react3.useState)(CHANNEL_TYPE.GROUP), type = _c[0], setType = _c[1];
  return import_react3.default.createElement(CreateChannelContext.Provider, {
    value: {
      onBeforeCreateChannel,
      createChannel,
      onCreateChannel,
      overrideInviteUser,
      userListQuery: userListQuery || userListQuery_,
      step,
      setStep,
      type,
      setType
    }
  }, children);
};
var useCreateChannelContext = function() {
  return import_react3.default.useContext(CreateChannelContext);
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/InviteUsers.js
var import_react4 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var filterUser = function(idsToFilter) {
  return function(currentId) {
    return idsToFilter === null || idsToFilter === void 0 ? void 0 : idsToFilter.includes(currentId);
  };
};
var setChannelType = function(params, type) {
  if (type === "broadcast") {
    params.isBroadcast = true;
  }
  if (type === "supergroup") {
    params.isSuper = true;
  }
  return params;
};
var createDefaultUserListQuery = function(_a) {
  var sdk = _a.sdk, userFilledApplicationUserListQuery = _a.userFilledApplicationUserListQuery;
  if (sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery) {
    var params_1 = sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery();
    if (userFilledApplicationUserListQuery) {
      Object.keys(userFilledApplicationUserListQuery).forEach(function(key) {
        params_1[key] = userFilledApplicationUserListQuery[key];
      });
    }
    return params_1;
  }
};
var appHeight = function() {
  try {
    var doc = document.documentElement;
    doc.style.setProperty("--sendbird-vh", window.innerHeight * 0.01 + "px");
  } catch (_a) {
  }
};
var BUFFER = 50;
var InviteUsers = function(_a) {
  var _b, _c, _d;
  var onCancel = _a.onCancel, userListQuery = _a.userListQuery;
  var _e = useCreateChannelContext(), onBeforeCreateChannel = _e.onBeforeCreateChannel, onCreateChannel = _e.onCreateChannel, overrideInviteUser = _e.overrideInviteUser, createChannel = _e.createChannel, type = _e.type;
  var globalStore = useSendbirdStateContext();
  var userId = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.userId;
  var sdk = (_d = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;
  var idsToFilter = [userId];
  var _f = (0, import_react4.useState)([]), users = _f[0], setUsers = _f[1];
  var _g = (0, import_react4.useState)({}), selectedUsers = _g[0], setSelectedUsers = _g[1];
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  var _h = (0, import_react4.useState)(null), usersDataSource = _h[0], setUsersDataSource = _h[1];
  var selectedCount = Object.keys(selectedUsers).length;
  var titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;
  var submitText = stringSet.BUTTON__CREATE;
  var userQueryCreator = userListQuery ? userListQuery() : createDefaultUserListQuery({
    sdk
  });
  (0, import_react4.useEffect)(function() {
    var applicationUserListQuery = userQueryCreator;
    setUsersDataSource(applicationUserListQuery);
    if (!(applicationUserListQuery === null || applicationUserListQuery === void 0 ? void 0 : applicationUserListQuery.isLoading)) {
      applicationUserListQuery.next().then(function(users_) {
        setUsers(users_);
      });
    }
  }, []);
  (0, import_react4.useEffect)(function() {
    appHeight();
    window.addEventListener("resize", appHeight);
    return function() {
      window.removeEventListener("resize", appHeight);
    };
  }, []);
  return import_react4.default.createElement(Modal, {
    isFullScreenOnMobile: true,
    titleText,
    submitText,
    type: ButtonTypes.PRIMARY,
    disabled: users.length > 1 && Object.keys(selectedUsers).length === 0,
    onCancel,
    onSubmit: function() {
      var selectedUserList = Object.keys(selectedUsers).length > 0 ? Object.keys(selectedUsers) : [userId];
      if (typeof overrideInviteUser === "function") {
        overrideInviteUser({
          users: selectedUserList,
          onClose: onCancel !== null && onCancel !== void 0 ? onCancel : noop,
          channelType: type
        });
        return;
      }
      if (onBeforeCreateChannel) {
        var params = onBeforeCreateChannel(selectedUserList);
        setChannelType(params, type);
        createChannel(params).then(function(channel) {
          onCreateChannel === null || onCreateChannel === void 0 ? void 0 : onCreateChannel(channel);
        });
      } else {
        var params = {};
        params.invitedUserIds = selectedUserList;
        params.isDistinct = false;
        if (userId) {
          params.operatorUserIds = [userId];
        }
        setChannelType(params, type);
        createChannel(params).then(function(channel) {
          onCreateChannel === null || onCreateChannel === void 0 ? void 0 : onCreateChannel(channel);
        });
      }
      onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }
  }, import_react4.default.createElement("div", null, import_react4.default.createElement(Label, {
    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,
    type: LabelTypography.CAPTION_1
  }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)), import_react4.default.createElement("div", {
    className: "sendbird-create-channel--scroll",
    onScroll: function(e) {
      if (!usersDataSource)
        return;
      var eventTarget = e.target;
      var hasNext = usersDataSource.hasNext, isLoading = usersDataSource.isLoading;
      var fetchMore = eventTarget.clientHeight + eventTarget.scrollTop + BUFFER > eventTarget.scrollHeight;
      if (hasNext && fetchMore && !isLoading) {
        usersDataSource.next().then(function(usersBatch) {
          setUsers(__spreadArray(__spreadArray([], users, true), usersBatch, true));
        });
      }
    }
  }, users.map(function(user) {
    return !filterUser(idsToFilter)(user.userId) && import_react4.default.createElement(UserListItem, {
      key: user.userId,
      user,
      checkBox: true,
      checked: selectedUsers[user.userId],
      onChange: function(event) {
        var _a2;
        var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
        if (!event.target.checked) {
          delete modifiedSelectedUsers[event.target.id];
        }
        setSelectedUsers(modifiedSelectedUsers);
      }
    });
  }))));
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/SelectChannelType.js
var import_react5 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var isBroadcastChannelEnabled = function(sdk) {
  var _a;
  var ALLOW_BROADCAST_CHANNEL = "allow_broadcast_channel";
  var applicationAttributes = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes;
  if (Array.isArray(applicationAttributes)) {
    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);
  }
  return false;
};
var isSuperGroupChannelEnabled = function(sdk) {
  var _a;
  var ALLOW_SUPER_GROUP_CHANNEL = "allow_super_group_channel";
  var applicationAttributes = (_a = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a === void 0 ? void 0 : _a.applicationAttributes;
  if (Array.isArray(applicationAttributes)) {
    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);
  }
  return false;
};
var SelectChannelType = function(props) {
  var onCancel = props.onCancel;
  var store = useSendbirdStateContext();
  var sdk = getSdk(store);
  var createChannelProps = useCreateChannelContext();
  var setStep = createChannelProps.setStep, setType = createChannelProps.setType;
  var stringSet = (0, import_react5.useContext)(LocalizationContext).stringSet;
  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);
  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);
  return import_react5.default.createElement(Modal, {
    titleText: stringSet === null || stringSet === void 0 ? void 0 : stringSet.MODAL__CREATE_CHANNEL__TITLE,
    hideFooter: true,
    onCancel: function() {
      onCancel();
    },
    className: "sendbird-add-channel__modal"
  }, import_react5.default.createElement("div", {
    className: "sendbird-add-channel__rectangle-wrap"
  }, import_react5.default.createElement("div", {
    className: "sendbird-add-channel__rectangle",
    onClick: function() {
      setType(CHANNEL_TYPE.GROUP);
      setStep(1);
    },
    role: "button",
    tabIndex: 0,
    onKeyDown: function() {
      setType(CHANNEL_TYPE.GROUP);
      setStep(1);
    }
  }, import_react5.default.createElement(Icon, {
    className: "sendbird-add-channel__rectangle__chat-icon",
    type: IconTypes.CHAT,
    fillColor: IconColors.PRIMARY,
    width: "28px",
    height: "28px"
  }), import_react5.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.MODAL__CREATE_CHANNEL__GROUP)), isSupergroupAvailable && import_react5.default.createElement("div", {
    className: "sendbird-add-channel__rectangle",
    onClick: function() {
      setType(CHANNEL_TYPE.SUPERGROUP);
      setStep(1);
    },
    role: "button",
    tabIndex: 0,
    onKeyDown: function() {
      setType(CHANNEL_TYPE.SUPERGROUP);
      setStep(1);
    }
  }, import_react5.default.createElement(Icon, {
    className: "sendbird-add-channel__rectangle__supergroup-icon",
    type: IconTypes.SUPERGROUP,
    fillColor: IconColors.PRIMARY,
    width: "28px",
    height: "28px"
  }), import_react5.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.MODAL__CREATE_CHANNEL__SUPER)), isBroadcastAvailable && import_react5.default.createElement("div", {
    className: "sendbird-add-channel__rectangle",
    onClick: function() {
      setType(CHANNEL_TYPE.BROADCAST);
      setStep(1);
    },
    role: "button",
    tabIndex: 0,
    onKeyDown: function() {
      setType(CHANNEL_TYPE.BROADCAST);
      setStep(1);
    }
  }, import_react5.default.createElement(Icon, {
    className: "sendbird-add-channel__rectangle__broadcast-icon",
    type: IconTypes.BROADCAST,
    fillColor: IconColors.PRIMARY,
    width: "28px",
    height: "28px"
  }), import_react5.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.MODAL__CREATE_CHANNEL__BROADCAST))));
};

// node_modules/@sendbird/uikit-react/CreateChannel/components/CreateChannelUI.js
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);
var CreateChannel = function(props) {
  var onCancel = props.onCancel, renderStepOne = props.renderStepOne;
  var _a = useCreateChannelContext(), step = _a.step, setStep = _a.setStep, userListQuery = _a.userListQuery;
  return import_react6.default.createElement(import_react6.default.Fragment, null, step === 0 && ((renderStepOne === null || renderStepOne === void 0 ? void 0 : renderStepOne()) || import_react6.default.createElement(SelectChannelType, {
    onCancel
  })), step === 1 && import_react6.default.createElement(InviteUsers, {
    userListQuery,
    onCancel: function() {
      setStep(0);
      onCancel();
    }
  }));
};

// node_modules/@sendbird/uikit-react/CreateChannel.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);
var CreateChannel2 = function(props) {
  var onBeforeCreateChannel = props.onBeforeCreateChannel, userListQuery = props.userListQuery, onCreateChannel = props.onCreateChannel, overrideInviteUser = props.overrideInviteUser, onCancel = props.onCancel, renderStepOne = props.renderStepOne;
  return import_react7.default.createElement(CreateChannelProvider, {
    onBeforeCreateChannel,
    userListQuery,
    onCreateChannel,
    overrideInviteUser
  }, import_react7.default.createElement(CreateChannel, {
    renderStepOne,
    onCancel
  }));
};

// node_modules/@sendbird/uikit-react/ChannelList/components/AddChannel.js
var import_prop_types6 = __toESM(require_prop_types(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var AddChannel = function() {
  var _a;
  var _b = (0, import_react8.useState)(false), showModal = _b[0], setShowModal = _b[1];
  var state = useSendbirdStateContext();
  var isOnline = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.isOnline;
  var disabled = !isOnline;
  var _c = useChannelListContext(), overrideInviteUser = _c.overrideInviteUser, onBeforeCreateChannel = _c.onBeforeCreateChannel;
  return import_react8.default.createElement(import_react8.default.Fragment, null, import_react8.default.createElement(IconButton, {
    height: "32px",
    width: "32px",
    onClick: function() {
      setShowModal(true);
    },
    disabled
  }, import_react8.default.createElement(Icon, {
    type: IconTypes.CREATE,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  })), showModal && import_react8.default.createElement(CreateChannel2, {
    onCancel: function() {
      setShowModal(false);
    },
    overrideInviteUser,
    onCreateChannel: function() {
      setShowModal(false);
    },
    onBeforeCreateChannel
  }));
};

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelPreview.js
var import_react11 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/Badge.js
var import_react9 = __toESM(require_react(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);
function Badge(_a) {
  var count = _a.count, _b = _a.maxLevel, maxLevel = _b === void 0 ? 2 : _b, _c = _a.className, className = _c === void 0 ? "" : _c;
  var stringSet = (0, import_react9.useContext)(LocalizationContext).stringSet;
  var maximumNumber = parseInt("9".repeat(maxLevel > 6 ? 6 : maxLevel), 10);
  return import_react9.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-badge"], false).join(" ")
  }, import_react9.default.createElement("div", {
    className: "sendbird-badge__text"
  }, import_react9.default.createElement(Label, {
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONCONTENT_1
  }, count > maximumNumber ? "".concat(maximumNumber).concat(stringSet.BADGE__OVER) : count)));
}

// node_modules/@sendbird/uikit-react/ui/MentionUserLabel.js
var import_react10 = __toESM(require_react(), 1);
function MentionUserLabel(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, children = _a.children, _c = _a.isReverse, isReverse = _c === void 0 ? false : _c, color = _a.color, userId = _a.userId;
  return import_react10.default.createElement("span", {
    className: "".concat(MENTION_USER_LABEL_CLASSNAME, " ").concat(className, " ").concat(isReverse ? "reverse" : "", " ").concat(color),
    contentEditable: false,
    "data-userid": userId,
    "data-sb-mention": true
  }, children);
}

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelPreview.js
var import_prop_types8 = __toESM(require_prop_types(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
var ChannelPreview = function(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k;
  var channel = _a.channel, _l = _a.isActive, isActive = _l === void 0 ? false : _l, _m = _a.isTyping, isTyping = _m === void 0 ? false : _m, renderChannelAction = _a.renderChannelAction, onLeaveChannel = _a.onLeaveChannel, onClick = _a.onClick, tabIndex = _a.tabIndex;
  var sbState = useSendbirdStateContext();
  var _o = useChannelListContext(), _p = _o.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _p === void 0 ? false : _p, _q = _o.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _q === void 0 ? false : _q;
  var _r = useLocalization(), dateLocale = _r.dateLocale, stringSet = _r.stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var _s = (0, import_react11.useState)(false), showMobileLeave = _s[0], setShowMobileLeave = _s[1];
  var userId = (_d = (_c = (_b = sbState === null || sbState === void 0 ? void 0 : sbState.stores) === null || _b === void 0 ? void 0 : _b.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;
  var theme = (_e = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _e === void 0 ? void 0 : _e.theme;
  var isMentionEnabled = (_f = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _f === void 0 ? void 0 : _f.isMentionEnabled;
  var isFrozen = (channel === null || channel === void 0 ? void 0 : channel.isFrozen) || false;
  var isBroadcast = (channel === null || channel === void 0 ? void 0 : channel.isBroadcast) || false;
  var isChannelTyping = isTypingIndicatorEnabled && isTyping;
  var isMessageStatusEnabled = isMessageReceiptStatusEnabled && (((_g = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _g === void 0 ? void 0 : _g.messageType) === "user" || ((_h = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _h === void 0 ? void 0 : _h.messageType) === "file") && ((_k = (_j = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _j === void 0 ? void 0 : _j.sender) === null || _k === void 0 ? void 0 : _k.userId) === userId;
  var onLongPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setShowMobileLeave(true);
      }
    },
    onClick
  }, {
    delay: 1e3
  });
  var channelName = getChannelTitle(channel, userId, stringSet);
  return import_react11.default.createElement(import_react11.default.Fragment, null, import_react11.default.createElement("div", _extends({
    className: ["sendbird-channel-preview", isActive ? "sendbird-channel-preview--active" : ""].join(" "),
    role: "link",
    tabIndex
  }, isMobile ? __assign({}, onLongPress) : {
    onClick
  }), import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__avatar"
  }, import_react11.default.createElement(ChannelAvatar, {
    channel,
    userId,
    theme
  })), import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content"
  }, import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content__upper"
  }, import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content__upper__header"
  }, isBroadcast && import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content__upper__header__broadcast-icon"
  }, import_react11.default.createElement(Icon, {
    type: IconTypes.BROADCAST,
    fillColor: IconColors.SECONDARY,
    height: "16px",
    width: "16px"
  })), import_react11.default.createElement(Label, {
    className: "sendbird-channel-preview__content__upper__header__channel-name",
    type: LabelTypography.SUBTITLE_2,
    color: LabelColors.ONBACKGROUND_1
  }, channelName), import_react11.default.createElement(Label, {
    className: "sendbird-channel-preview__content__upper__header__total-members",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, getTotalMembers(channel)), isFrozen && import_react11.default.createElement("div", {
    title: "Frozen",
    className: "sendbird-channel-preview__content__upper__header__frozen-icon"
  }, import_react11.default.createElement(Icon, {
    type: IconTypes.FREEZE,
    fillColor: IconColors.PRIMARY,
    height: 12,
    width: 12
  }))), !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isMessageStatusEnabled && import_react11.default.createElement(MessageStatus, {
    className: "sendbird-channel-preview__content__upper__last-message-at",
    channel,
    message: channel === null || channel === void 0 ? void 0 : channel.lastMessage,
    isDateSeparatorConsidered: false
  }), !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isMessageStatusEnabled && import_react11.default.createElement(Label, {
    className: "sendbird-channel-preview__content__upper__last-message-at",
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_2
  }, getLastMessageCreatedAt({
    channel,
    locale: dateLocale,
    stringSet
  }))), import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content__lower"
  }, import_react11.default.createElement(Label, {
    className: "sendbird-channel-preview__content__lower__last-message",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_3
  }, isChannelTyping && import_react11.default.createElement(TypingIndicatorText, {
    members: channel === null || channel === void 0 ? void 0 : channel.getTypingUsers()
  }), !isChannelTyping && !isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && getLastMessage(channel, stringSet), !isChannelTyping && isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && stringSet.VOICE_MESSAGE), !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__content__lower__unread-message-count"
  }, isMentionEnabled && (channel === null || channel === void 0 ? void 0 : channel.unreadMentionCount) > 0 ? import_react11.default.createElement(MentionUserLabel, {
    className: "sendbird-channel-preview__content__lower__unread-message-count__mention",
    color: "purple"
  }, "@") : null, getChannelUnreadMessageCount(channel) ? import_react11.default.createElement(Badge, {
    count: getChannelUnreadMessageCount(channel)
  }) : null))), !isMobile && import_react11.default.createElement("div", {
    className: "sendbird-channel-preview__action"
  }, renderChannelAction({
    channel
  }))), showMobileLeave && isMobile && import_react11.default.createElement(Modal, {
    className: "sendbird-channel-preview__leave--mobile",
    titleText: channelName,
    hideFooter: true,
    isCloseOnClickOutside: true,
    onCancel: function() {
      return setShowMobileLeave(false);
    }
  }, import_react11.default.createElement(TextButton, {
    onClick: function() {
      onLeaveChannel();
      setShowMobileLeave(false);
    },
    className: "sendbird-channel-preview__leave-label--mobile"
  }, import_react11.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))));
};

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelPreviewAction.js
var import_react12 = __toESM(require_react(), 1);
var import_react_dom7 = __toESM(require_react_dom(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);
var LeaveChannel = function(props) {
  var _a, _b, _c;
  var _d = props.channel, channel = _d === void 0 ? null : _d, _e = props.onSubmit, onSubmit = _e === void 0 ? noop : _e, _f = props.onCancel, onCancel = _f === void 0 ? noop : _f;
  var channelFromContext = (_a = useChannelListContext()) === null || _a === void 0 ? void 0 : _a.currentChannel;
  var leavingChannel = channel || channelFromContext;
  var state = useSendbirdStateContext();
  var stringSet = useLocalization().stringSet;
  var logger = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.logger;
  var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
  if (leavingChannel) {
    return import_react12.default.createElement(Modal, {
      disabled: !isOnline,
      onCancel,
      onSubmit: function() {
        logger.info("ChannelSettings: Leaving channel", leavingChannel);
        leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(function() {
          logger.info("ChannelSettings: Leaving channel successful!", leavingChannel);
          onSubmit();
        });
      },
      submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,
      titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE
    });
  }
};
function ChannelPreviewAction(_a) {
  var channel = _a.channel, _b = _a.disabled, disabled = _b === void 0 ? false : _b, onLeaveChannel = _a.onLeaveChannel;
  var parentRef = (0, import_react12.useRef)(null);
  var parentContainerRef = (0, import_react12.useRef)(null);
  var _c = (0, import_react12.useState)(false), showModal = _c[0], setShowModal = _c[1];
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  return import_react12.default.createElement("div", {
    ref: parentContainerRef,
    tabIndex: 0,
    role: "button",
    style: {
      display: "inline-block"
    },
    onKeyDown: function(e) {
      return e.stopPropagation();
    },
    onClick: function(e) {
      return e.stopPropagation();
    }
  }, import_react12.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      return import_react12.default.createElement(IconButton, {
        ref: parentRef,
        onClick: toggleDropdown,
        height: "32px",
        width: "32px"
      }, import_react12.default.createElement(Icon, {
        type: IconTypes.MORE,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      }));
    },
    menuItems: function(closeDropdown) {
      return import_react12.default.createElement(MenuItems, {
        parentRef,
        parentContainRef: parentContainerRef,
        closeDropdown
      }, import_react12.default.createElement(MenuItem, {
        onClick: function() {
          if (disabled) {
            return;
          }
          setShowModal(true);
          closeDropdown();
        },
        dataSbId: "channel_list_item_context_menu_leave_channel"
      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));
    }
  }), showModal && import_react12.default.createElement(LeaveChannel, {
    channel,
    onSubmit: function() {
      setShowModal(false);
      onLeaveChannel();
    },
    onCancel: function() {
      return setShowModal(false);
    }
  }));
}

// node_modules/@sendbird/uikit-react/EditUserProfile.js
var import_react16 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/EditUserProfile/context.js
var import_react13 = __toESM(require_react(), 1);
var EditUserProfileProviderContext = import_react13.default.createContext(void 0);
var EditUserProfileProvider = function(props) {
  var children = props.children, onEditProfile = props.onEditProfile, onCancel = props.onCancel, onThemeChange = props.onThemeChange;
  var value = (0, import_react13.useMemo)(function() {
    return {
      onEditProfile,
      onCancel,
      onThemeChange
    };
  }, []);
  return import_react13.default.createElement(EditUserProfileProviderContext.Provider, {
    value
  }, children);
};
var useEditUserProfileContext = function() {
  return import_react13.default.useContext(EditUserProfileProviderContext);
};

// node_modules/@sendbird/uikit-react/EditUserProfile/components/EditUserProfileUI.js
var import_react15 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/Input.js
var import_react14 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);
var InputLabel = function(_a) {
  var children = _a.children;
  return import_react14.default.createElement(Label, {
    className: "sendbird-input-label",
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_1
  }, children);
};
var Input = import_react14.default.forwardRef(function(props, ref) {
  var name = props.name, required = props.required, disabled = props.disabled, value = props.value, placeHolder = props.placeHolder;
  var _a = (0, import_react14.useState)(value), inputValue = _a[0], setInputValue = _a[1];
  return import_react14.default.createElement("div", {
    className: "sendbird-input"
  }, import_react14.default.createElement("input", {
    className: "sendbird-input__input",
    ref,
    name,
    required,
    disabled,
    value: inputValue,
    onChange: function(e) {
      setInputValue(e.target.value);
    }
  }), placeHolder && !inputValue && import_react14.default.createElement(Label, {
    className: "sendbird-input__placeholder",
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_3
  }, placeHolder));
});

// node_modules/@sendbird/uikit-react/EditUserProfile/components/EditUserProfileUI.js
var import_react_dom8 = __toESM(require_react_dom(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1);
function EditUserProfile() {
  var _a, _b, _c, _d, _e, _f, _g;
  var editProfileProps = useEditUserProfileContext();
  var store = useSendbirdStateContext();
  var hiddenInputRef = (0, import_react15.useRef)(null);
  var inputRef = (0, import_react15.useRef)(null);
  var formRef = (0, import_react15.useRef)(null);
  var stringSet = (0, import_react15.useContext)(LocalizationContext).stringSet;
  var _h = (0, import_react15.useState)(null), currentImg = _h[0], setCurrentImg = _h[1];
  var _j = (0, import_react15.useState)(null), newFile = _j[0], setNewFile = _j[1];
  var onEditProfile = editProfileProps.onEditProfile, onCancel = editProfileProps.onCancel, onThemeChange = editProfileProps.onThemeChange;
  var theme = ((_a = store === null || store === void 0 ? void 0 : store.config) === null || _a === void 0 ? void 0 : _a.theme) || "light";
  var changeTheme = ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.setCurrentTheme) || noop;
  var user = (_d = (_c = store === null || store === void 0 ? void 0 : store.stores) === null || _c === void 0 ? void 0 : _c.userStore) === null || _d === void 0 ? void 0 : _d.user;
  var sdk = (_f = (_e = store === null || store === void 0 ? void 0 : store.stores) === null || _e === void 0 ? void 0 : _e.sdkStore) === null || _f === void 0 ? void 0 : _f.sdk;
  var userDispatcher = (_g = store === null || store === void 0 ? void 0 : store.dispatchers) === null || _g === void 0 ? void 0 : _g.userDispatcher;
  return import_react15.default.createElement(Modal, {
    titleText: stringSet.EDIT_PROFILE__TITLE,
    submitText: stringSet.BUTTON__SAVE,
    type: ButtonTypes.PRIMARY,
    onCancel,
    isFullScreenOnMobile: true,
    onSubmit: function() {
      var _a2;
      if ((user === null || user === void 0 ? void 0 : user.nickname) !== "" && !inputRef.current.value) {
        if (formRef.current.reportValidity) {
          formRef.current.reportValidity();
        }
        return;
      }
      sdk === null || sdk === void 0 ? void 0 : sdk.updateCurrentUserInfo({
        nickname: (_a2 = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value,
        profileImage: newFile
      }).then(function(updatedUser) {
        userDispatcher({
          type: USER_ACTIONS.UPDATE_USER_INFO,
          payload: updatedUser
        });
        if (onEditProfile && typeof onEditProfile === "function") {
          onEditProfile(updatedUser);
        }
      });
    }
  }, import_react15.default.createElement("form", {
    className: "sendbird-edit-user-profile",
    ref: formRef,
    onSubmit: function(e) {
      e.preventDefault();
    }
  }, import_react15.default.createElement("section", {
    className: "sendbird-edit-user-profile__img"
  }, import_react15.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), import_react15.default.createElement("div", {
    className: "sendbird-edit-user-profile__img__avatar"
  }, import_react15.default.createElement(Avatar$1, {
    width: "80px",
    height: "80px",
    src: currentImg || (user === null || user === void 0 ? void 0 : user.profileUrl)
  })), import_react15.default.createElement("input", {
    ref: hiddenInputRef,
    type: "file",
    accept: "image/gif, image/jpeg, image/png",
    style: {
      display: "none"
    },
    onChange: function(e) {
      setCurrentImg(URL.createObjectURL(e.target.files[0]));
      setNewFile(e.target.files[0]);
      hiddenInputRef.current.value = "";
    }
  }), import_react15.default.createElement(TextButton, {
    className: "sendbird-edit-user-profile__img__avatar-button",
    disableUnderline: true,
    onClick: function() {
      return hiddenInputRef.current.click();
    }
  }, import_react15.default.createElement(Label, {
    type: LabelTypography.BUTTON_1,
    color: LabelColors.PRIMARY
  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), import_react15.default.createElement("section", {
    className: "sendbird-edit-user-profile__name"
  }, import_react15.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), import_react15.default.createElement(Input, {
    required: (user === null || user === void 0 ? void 0 : user.nickname) !== "",
    name: "sendbird-edit-user-profile__name__input",
    ref: inputRef,
    value: user === null || user === void 0 ? void 0 : user.nickname,
    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER
  })), import_react15.default.createElement("section", {
    className: "sendbird-edit-user-profile__userid"
  }, import_react15.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), import_react15.default.createElement(Input, {
    disabled: true,
    name: "sendbird-edit-user-profile__userid__input",
    value: user === null || user === void 0 ? void 0 : user.userId
  })), import_react15.default.createElement("section", {
    className: "sendbird-edit-user-profile__theme"
  }, import_react15.default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), import_react15.default.createElement("div", {
    className: "sendbird-edit-user-profile__theme__theme-icon"
  }, theme === "dark" ? import_react15.default.createElement(Icon, {
    onClick: function() {
      changeTheme("light");
      onThemeChange === null || onThemeChange === void 0 ? void 0 : onThemeChange("light");
    },
    type: IconTypes.TOGGLE_ON,
    width: 44,
    height: 24
  }) : import_react15.default.createElement(Icon, {
    onClick: function() {
      changeTheme("dark");
      onThemeChange === null || onThemeChange === void 0 ? void 0 : onThemeChange("dark");
    },
    type: IconTypes.TOGGLE_OFF,
    width: 44,
    height: 24
  })))));
}

// node_modules/@sendbird/uikit-react/EditUserProfile.js
var import_react_dom9 = __toESM(require_react_dom(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);
var EditProfile = function(props) {
  var onEditProfile = props.onEditProfile, onCancel = props.onCancel, onThemeChange = props.onThemeChange;
  return import_react16.default.createElement(EditUserProfileProvider, {
    onEditProfile,
    onCancel,
    onThemeChange
  }, import_react16.default.createElement(EditUserProfile, null));
};

// node_modules/@sendbird/uikit-react/ChannelList/components/ChannelListUI.js
var import_prop_types13 = __toESM(require_prop_types(), 1);
var import_react_dom10 = __toESM(require_react_dom(), 1);
var ChannelListUI = function(props) {
  var _a;
  var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
  var _b = (0, import_react17.useState)(false), showProfileEdit = _b[0], setShowProfileEdit = _b[1];
  var _c = useChannelListContext(), onThemeChange = _c.onThemeChange, allowProfileEdit = _c.allowProfileEdit, allChannels = _c.allChannels, loading = _c.loading, currentChannel = _c.currentChannel, channelListDispatcher = _c.channelListDispatcher, typingChannels = _c.typingChannels, initialized = _c.initialized, fetchChannelList = _c.fetchChannelList;
  var state = useSendbirdStateContext();
  var sdkStore = (_a = state === null || state === void 0 ? void 0 : state.stores) === null || _a === void 0 ? void 0 : _a.sdkStore;
  var config = state === null || state === void 0 ? void 0 : state.config;
  var logger = config.logger, _d = config.isOnline, isOnline = _d === void 0 ? false : _d;
  var sdkError = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.error;
  return import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement("div", {
    className: "sendbird-channel-list__header"
  }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || import_react17.default.createElement(ChannelListHeader, {
    onEdit: function() {
      if (allowProfileEdit) {
        setShowProfileEdit(true);
      }
    },
    allowProfileEdit,
    renderIconButton: function() {
      return import_react17.default.createElement(AddChannel, null);
    }
  })), showProfileEdit && import_react17.default.createElement(EditProfile, {
    onThemeChange,
    onCancel: function() {
      setShowProfileEdit(false);
    },
    onEditProfile: function() {
      setShowProfileEdit(false);
    }
  }), import_react17.default.createElement("div", {
    className: "sendbird-channel-list__body",
    onScroll: function(e) {
      var target = e === null || e === void 0 ? void 0 : e.target;
      if (isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {
        fetchChannelList();
      }
    }
  }, sdkError && !loading && (renderPlaceHolderError && typeof renderPlaceHolderError === "function" ? renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError() : import_react17.default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.WRONG
  })), import_react17.default.createElement("div", null, allChannels && allChannels.map(function(channel, idx) {
    var onLeaveChannel = function(c, cb) {
      logger.info("ChannelList: Leaving channel", c);
      c.leave().then(function(res) {
        logger.info("ChannelList: Leaving channel success", res);
        if (cb && typeof cb === "function") {
          cb(res, null);
        }
        channelListDispatcher({
          type: LEAVE_CHANNEL_SUCCESS,
          payload: channel === null || channel === void 0 ? void 0 : channel.url
        });
      }).catch(function(err) {
        logger.error("ChannelList: Leaving channel failed", err);
        if (cb && typeof cb === "function") {
          cb(null, err);
        }
      });
    };
    var onClick = function() {
      if (!isOnline) {
        return;
      }
      logger.info("ChannelList: Clicked on channel:", channel);
      channelListDispatcher({
        type: SET_CURRENT_CHANNEL,
        payload: channel
      });
    };
    return renderChannelPreview ? (
      // eslint-disable-next-line
      import_react17.default.createElement("div", {
        key: channel === null || channel === void 0 ? void 0 : channel.url,
        onClick
      }, renderChannelPreview({
        channel,
        onLeaveChannel
      }))
    ) : import_react17.default.createElement(ChannelPreview, {
      key: channel === null || channel === void 0 ? void 0 : channel.url,
      tabIndex: idx,
      onClick,
      channel,
      onLeaveChannel: function() {
        return onLeaveChannel(channel, null);
      },
      isActive: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),
      isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function(_a2) {
        var url = _a2.url;
        return url === (channel === null || channel === void 0 ? void 0 : channel.url);
      }),
      renderChannelAction: function() {
        return import_react17.default.createElement(ChannelPreviewAction, {
          channel,
          disabled: !isOnline,
          onLeaveChannel: function() {
            return onLeaveChannel(channel, null);
          }
        });
      }
    });
  })), !initialized && loading && (renderPlaceHolderLoading && typeof renderPlaceHolderLoading === "function" ? renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading() : import_react17.default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.LOADING
  })), initialized && (allChannels === null || allChannels === void 0 ? void 0 : allChannels.length) === 0 && (renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === "function" ? renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList() : import_react17.default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.NO_CHANNELS
  }))));
};

// node_modules/@sendbird/uikit-react/ChannelList.js
var import_prop_types14 = __toESM(require_prop_types());
var import_react_dom11 = __toESM(require_react_dom());
var ChannelList = function(props) {
  return import_react18.default.createElement(ChannelListProvider, {
    className: props === null || props === void 0 ? void 0 : props.className,
    disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile,
    allowProfileEdit: props === null || props === void 0 ? void 0 : props.allowProfileEdit,
    onBeforeCreateChannel: props === null || props === void 0 ? void 0 : props.onBeforeCreateChannel,
    onThemeChange: props === null || props === void 0 ? void 0 : props.onThemeChange,
    overrideInviteUser: props === null || props === void 0 ? void 0 : props.overrideInviteUser,
    onProfileEditSuccess: props === null || props === void 0 ? void 0 : props.onProfileEditSuccess,
    onChannelSelect: props === null || props === void 0 ? void 0 : props.onChannelSelect,
    sortChannelList: props === null || props === void 0 ? void 0 : props.sortChannelList,
    queries: props === null || props === void 0 ? void 0 : props.queries,
    disableAutoSelect: props === null || props === void 0 ? void 0 : props.disableAutoSelect,
    activeChannelUrl: props === null || props === void 0 ? void 0 : props.activeChannelUrl,
    isTypingIndicatorEnabled: props === null || props === void 0 ? void 0 : props.isTypingIndicatorEnabled,
    isMessageReceiptStatusEnabled: props === null || props === void 0 ? void 0 : props.isMessageReceiptStatusEnabled
  }, import_react18.default.createElement(ChannelListUI, {
    renderChannelPreview: props === null || props === void 0 ? void 0 : props.renderChannelPreview,
    renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,
    renderHeader: props === null || props === void 0 ? void 0 : props.renderHeader,
    renderPlaceHolderEmptyList: props === null || props === void 0 ? void 0 : props.renderPlaceHolderEmptyList,
    renderPlaceHolderError: props === null || props === void 0 ? void 0 : props.renderPlaceHolderError,
    renderPlaceHolderLoading: props === null || props === void 0 ? void 0 : props.renderPlaceHolderLoading
  }));
};
export {
  ChannelList as default
};
//# sourceMappingURL=@sendbird_uikit-react_ChannelList.js.map
