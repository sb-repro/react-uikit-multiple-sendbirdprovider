import {
  Avatar$1,
  ChannelAvatar,
  ChannelProvider,
  Colors,
  ContextMenu,
  EmojiListItems,
  ImageRenderer,
  Loader,
  MAX_USER_MENTION_COUNT,
  MAX_USER_SUGGESTION_COUNT,
  MENTION_USER_LABEL_CLASSNAME,
  MenuItem,
  MenuItems,
  MessageStatus,
  PlaceHolder,
  PlaceHolderTypes,
  TextButton,
  ThreadReplySelectType,
  TypingIndicator,
  USER_MENTION_TEMP_CHAR,
  UserListItem,
  UserProfile,
  UserProfileContext,
  changeColorToClassName as changeColorToClassName2,
  format,
  getBorderRadiusForMultipleImageRenderer,
  isAboutSame,
  isDisabledBecauseFrozen,
  isDisabledBecauseMuted,
  isOperator,
  isSameDay,
  isSameGroup,
  scrollIntoLast,
  useChannelContext,
  useLongPress
} from "./chunk-5MRX4ENC.js";
import {
  AudioUnitDefaultValue,
  VOICE_PLAYER_STATUS,
  useGlobalModalContext,
  useVoicePlayerContext,
  useVoiceRecorderContext
} from "./chunk-THAKGUBC.js";
import {
  Button,
  ButtonSizes,
  ButtonTypes,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  K2 as K,
  Label,
  LabelColors,
  LabelStringSet,
  LabelTypography,
  LocalizationContext,
  MODAL_ROOT,
  Modal,
  ModalFooter,
  UIKitMessageTypes,
  W,
  _extends,
  _objectSpread2,
  arrayEqual,
  changeColorToClassName,
  copyToClipboard,
  getClassName,
  getEmojiListAll,
  getEmojiMapAll,
  getEmojiTooltipString,
  getEmojiUrl,
  getMimeTypesUIKitAccepts,
  getSenderName,
  getUIKitFileType,
  getUIKitFileTypes,
  getUIKitMessageType,
  getUIKitMessageTypes,
  isAudioMessage,
  isEditedMessage,
  isFailedMessage,
  isFileMessage,
  isGif,
  isGifMessage,
  isImage,
  isImageFileInfo,
  isImageMessage,
  isMultipleFilesMessage,
  isOGMessage,
  isPendingMessage,
  isReactedBy,
  isSendableMessage,
  isSentMessage,
  isSupportedFileView,
  isTextMessage,
  isThreadMessage,
  isThumbnailMessage,
  isUrl,
  isUserMessage,
  isVideo,
  isVideoMessage,
  isVoiceMessage,
  noop,
  require_prop_types,
  truncateString,
  useLocalization,
  useMediaQueryContext,
  uuidv4
} from "./chunk-SC6Q4D3X.js";
import {
  __assign,
  __spreadArray,
  useSendbirdStateContext
} from "./chunk-JYKYS726.js";
import {
  SCROLL_BUFFER,
  SLIDER_BUTTON_ICON_SIDE_LENGTH,
  VOICE_PLAYER_AUDIO_ID,
  VOICE_RECORDER_CLICK_BUFFER_TIME,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-ZUUM5UVF.js";
import {
  require_react_dom
} from "./chunk-OCHDJWGW.js";
import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@sendbird/uikit-react/Channel.js
var import_react50 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_react49 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ConnectionStatus.js
var import_react = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
function ConnectionStatus() {
  var stringSet = (0, import_react.useContext)(LocalizationContext).stringSet;
  return import_react.default.createElement("div", {
    className: "sendbird-connection-status"
  }, import_react.default.createElement(Label, {
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_2
  }, stringSet.TRYING_TO_CONNECT), import_react.default.createElement(Icon, {
    type: IconTypes.DISCONNECTED,
    fillColor: IconColors.SENT,
    width: "14px",
    height: "14px"
  }));
}

// node_modules/@sendbird/uikit-react/Channel/components/ChannelHeader.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/utils-fc1f5aa0.js
var getChannelTitle = function(channel, currentUserId, stringSet) {
  var _a;
  var LABEL_STRING_SET = stringSet || LabelStringSet;
  if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {
    return LABEL_STRING_SET.NO_TITLE;
  }
  if ((channel === null || channel === void 0 ? void 0 : channel.name) && channel.name !== "Group Channel") {
    return channel.name;
  }
  if (((_a = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a === void 0 ? void 0 : _a.length) === 1) {
    return LABEL_STRING_SET.NO_MEMBERS;
  }
  return channel === null || channel === void 0 ? void 0 : channel.members.filter(function(_a2) {
    var userId = _a2.userId;
    return userId !== currentUserId;
  }).map(function(_a2) {
    var nickname = _a2.nickname;
    return nickname || LABEL_STRING_SET.NO_NAME;
  }).join(", ");
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelHeader.js
var import_prop_types2 = __toESM(require_prop_types(), 1);
var ChannelHeader = function(_a) {
  var _b, _c, _d;
  var _e = _a.className, className = _e === void 0 ? "" : _e;
  var globalStore = useSendbirdStateContext();
  var userId = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _b === void 0 ? void 0 : _b.userId;
  var theme = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _c === void 0 ? void 0 : _c.theme;
  var channelStore = useChannelContext();
  var isMobile = useMediaQueryContext().isMobile;
  var currentGroupChannel = channelStore.currentGroupChannel, showSearchIcon = channelStore.showSearchIcon, onSearchClick = channelStore.onSearchClick, onChatHeaderActionClick = channelStore.onChatHeaderActionClick, _f = channelStore.onBackClick, onBackClick = _f === void 0 ? noop : _f;
  var subTitle = (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members) && ((_d = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members) === null || _d === void 0 ? void 0 : _d.length) !== 2;
  var isMuted = (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.myMutedState) === "muted";
  var stringSet = (0, import_react2.useContext)(LocalizationContext).stringSet;
  return import_react2.default.createElement("div", {
    className: "sendbird-chat-header ".concat(className)
  }, import_react2.default.createElement("div", {
    className: "sendbird-chat-header__left"
  }, isMobile && import_react2.default.createElement(Icon, {
    className: "sendbird-chat-header__icon_back",
    onClick: onBackClick,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px",
    type: IconTypes.ARROW_LEFT
  }), import_react2.default.createElement(ChannelAvatar, {
    theme,
    channel: currentGroupChannel,
    userId,
    height: 32,
    width: 32
  }), import_react2.default.createElement(Label, {
    className: "sendbird-chat-header__left__title",
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, getChannelTitle(currentGroupChannel, userId, stringSet)), import_react2.default.createElement(Label, {
    className: "sendbird-chat-header__left__subtitle",
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_2
  }, subTitle)), import_react2.default.createElement("div", {
    className: "sendbird-chat-header__right"
  }, (typeof isMuted === "string" && isMuted === "true" || typeof isMuted === "boolean" && isMuted) && import_react2.default.createElement(Icon, {
    className: "sendbird-chat-header__right__mute",
    type: IconTypes.NOTIFICATIONS_OFF_FILLED,
    fillColor: IconColors.ON_BACKGROUND_2,
    width: "24px",
    height: "24px"
  }), showSearchIcon && !(currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isEphemeral) && import_react2.default.createElement(IconButton, {
    className: "sendbird-chat-header__right__search",
    width: "32px",
    height: "32px",
    onClick: onSearchClick
  }, import_react2.default.createElement(Icon, {
    type: IconTypes.SEARCH,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  })), import_react2.default.createElement(IconButton, {
    className: "sendbird-chat-header__right__info",
    width: "32px",
    height: "32px",
    onClick: onChatHeaderActionClick
  }, import_react2.default.createElement(Icon, {
    type: IconTypes.INFO,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }))));
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_react43 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_react40 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/SuggestedMentionList.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/const-93731a4c.js
var MessageInputKeys = {
  Enter: "Enter",
  ArrowUp: "ArrowUp",
  ArrowDown: "ArrowDown",
  Backspace: "Backspace"
};
var NodeTypes = {
  ElementNode: 1,
  TextNode: 3
};
var NodeNames = {
  Span: "SPAN",
  Br: "BR",
  Div: "DIV"
};

// node_modules/@sendbird/uikit-react/Thread/context.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Thread/context/types.js
var ChannelStateTypes;
(function(ChannelStateTypes2) {
  ChannelStateTypes2["NIL"] = "NIL";
  ChannelStateTypes2["LOADING"] = "LOADING";
  ChannelStateTypes2["INVALID"] = "INVALID";
  ChannelStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ChannelStateTypes || (ChannelStateTypes = {}));
var ParentMessageStateTypes;
(function(ParentMessageStateTypes2) {
  ParentMessageStateTypes2["NIL"] = "NIL";
  ParentMessageStateTypes2["LOADING"] = "LOADING";
  ParentMessageStateTypes2["INVALID"] = "INVALID";
  ParentMessageStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ParentMessageStateTypes || (ParentMessageStateTypes = {}));
var ThreadListStateTypes;
(function(ThreadListStateTypes2) {
  ThreadListStateTypes2["NIL"] = "NIL";
  ThreadListStateTypes2["LOADING"] = "LOADING";
  ThreadListStateTypes2["INVALID"] = "INVALID";
  ThreadListStateTypes2["INITIALIZED"] = "INITIALIZED";
})(ThreadListStateTypes || (ThreadListStateTypes = {}));

// node_modules/@sendbird/uikit-react/Thread/context.js
var ThreadContextActionTypes;
(function(ThreadContextActionTypes2) {
  ThreadContextActionTypes2["INIT_USER_ID"] = "INIT_USER_ID";
  ThreadContextActionTypes2["GET_CHANNEL_START"] = "GET_CHANNEL_START";
  ThreadContextActionTypes2["GET_CHANNEL_SUCCESS"] = "GET_CHANNEL_SUCCESS";
  ThreadContextActionTypes2["GET_CHANNEL_FAILURE"] = "GET_CHANNEL_FAILURE";
  ThreadContextActionTypes2["SET_EMOJI_CONTAINER"] = "SET_EMOJI_CONTAINER";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_START"] = "GET_PARENT_MESSAGE_START";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_SUCCESS"] = "GET_PARENT_MESSAGE_SUCCESS";
  ThreadContextActionTypes2["GET_PARENT_MESSAGE_FAILURE"] = "GET_PARENT_MESSAGE_FAILURE";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_START"] = "INITIALIZE_THREAD_LIST_START";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_SUCCESS"] = "INITIALIZE_THREAD_LIST_SUCCESS";
  ThreadContextActionTypes2["INITIALIZE_THREAD_LIST_FAILURE"] = "INITIALIZE_THREAD_LIST_FAILURE";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_START"] = "GET_PREV_MESSAGES_START";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_SUCESS"] = "GET_PREV_MESSAGES_SUCESS";
  ThreadContextActionTypes2["GET_PREV_MESSAGES_FAILURE"] = "GET_PREV_MESSAGES_FAILURE";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_START"] = "GET_NEXT_MESSAGES_START";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_SUCESS"] = "GET_NEXT_MESSAGES_SUCESS";
  ThreadContextActionTypes2["GET_NEXT_MESSAGES_FAILURE"] = "GET_NEXT_MESSAGES_FAILURE";
  ThreadContextActionTypes2["SEND_MESSAGE_START"] = "SEND_MESSAGE_START";
  ThreadContextActionTypes2["SEND_MESSAGE_SUCESS"] = "SEND_MESSAGE_SUCESS";
  ThreadContextActionTypes2["SEND_MESSAGE_FAILURE"] = "SEND_MESSAGE_FAILURE";
  ThreadContextActionTypes2["RESEND_MESSAGE_START"] = "RESEND_MESSAGE_START";
  ThreadContextActionTypes2["ON_MESSAGE_DELETED_BY_REQ_ID"] = "ON_MESSAGE_DELETED_BY_REQ_ID";
  ThreadContextActionTypes2["ON_MESSAGE_RECEIVED"] = "ON_MESSAGE_RECEIVED";
  ThreadContextActionTypes2["ON_MESSAGE_UPDATED"] = "ON_MESSAGE_UPDATED";
  ThreadContextActionTypes2["ON_MESSAGE_DELETED"] = "ON_MESSAGE_DELETED";
  ThreadContextActionTypes2["ON_REACTION_UPDATED"] = "ON_REACTION_UPDATED";
  ThreadContextActionTypes2["ON_FILE_INFO_UPLOADED"] = "ON_FILE_INFO_UPLOADED";
  ThreadContextActionTypes2["ON_USER_MUTED"] = "ON_USER_MUTED";
  ThreadContextActionTypes2["ON_USER_UNMUTED"] = "ON_USER_UNMUTED";
  ThreadContextActionTypes2["ON_USER_BANNED"] = "ON_USER_BANNED";
  ThreadContextActionTypes2["ON_USER_UNBANNED"] = "ON_USER_UNBANNED";
  ThreadContextActionTypes2["ON_USER_LEFT"] = "ON_USER_LEFT";
  ThreadContextActionTypes2["ON_CHANNEL_FROZEN"] = "ON_CHANNEL_FROZEN";
  ThreadContextActionTypes2["ON_CHANNEL_UNFROZEN"] = "ON_CHANNEL_UNFROZEN";
  ThreadContextActionTypes2["ON_OPERATOR_UPDATED"] = "ON_OPERATOR_UPDATED";
})(ThreadContextActionTypes || (ThreadContextActionTypes = {}));
var initialState = {
  currentChannel: null,
  allThreadMessages: [],
  localThreadMessages: [],
  parentMessage: null,
  channelState: ChannelStateTypes.NIL,
  parentMessageState: ParentMessageStateTypes.NIL,
  threadListState: ThreadListStateTypes.NIL,
  hasMorePrev: false,
  hasMoreNext: false,
  emojiContainer: {},
  isMuted: false,
  isChannelFrozen: false,
  currentUserId: ""
};
var ThreadContext = import_react3.default.createContext(null);
var useThreadContext = function() {
  return import_react3.default.useContext(ThreadContext);
};

// node_modules/@sendbird/uikit-react/Channel/components/SuggestedMentionList.js
var import_prop_types3 = __toESM(require_prop_types(), 1);
function SuggestedUserMentionItem(props) {
  var member = props.member, _a = props.isFocused, isFocused = _a === void 0 ? false : _a, parentScrollRef = props.parentScrollRef, onClick = props.onClick, onMouseOver = props.onMouseOver, onMouseMove = props.onMouseMove, renderUserMentionItem = props.renderUserMentionItem;
  var scrollRef = (0, import_react4.useRef)(null);
  var _b = (0, import_react4.useContext)(LocalizationContext).stringSet, stringSet = _b === void 0 ? {} : _b;
  (0, import_react4.useEffect)(function() {
    if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {
      scrollRef.current.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  }, [isFocused]);
  var customMentionItem = (0, import_react4.useMemo)(function() {
    if (renderUserMentionItem) {
      return import_react4.default.createElement("div", {
        className: "sendbird-mention-suggest-list__user-item",
        onClick: function(event) {
          return onClick === null || onClick === void 0 ? void 0 : onClick({
            event,
            member,
            itemRef: scrollRef
          });
        },
        onMouseOver: function(event) {
          return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({
            event,
            member,
            itemRef: scrollRef
          });
        },
        onMouseMove: function(event) {
          return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({
            event,
            member,
            itemRef: scrollRef
          });
        },
        key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),
        ref: scrollRef
      }, renderUserMentionItem({
        user: member
      }));
    }
  }, [renderUserMentionItem]);
  if (customMentionItem) {
    return customMentionItem;
  }
  return import_react4.default.createElement("div", {
    className: "sendbird-mention-suggest-list__user-item ".concat(isFocused ? "focused" : ""),
    onClick: function(event) {
      return onClick === null || onClick === void 0 ? void 0 : onClick({
        event,
        member,
        itemRef: scrollRef
      });
    },
    onMouseOver: function(event) {
      return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({
        event,
        member,
        itemRef: scrollRef
      });
    },
    onMouseMove: function(event) {
      return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({
        event,
        member,
        itemRef: scrollRef
      });
    },
    key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),
    ref: scrollRef
  }, import_react4.default.createElement(Avatar$1, {
    className: "sendbird-mention-suggest-list__user-item__avatar",
    src: member === null || member === void 0 ? void 0 : member.profileUrl,
    alt: "user-profile",
    width: "24px",
    height: "24px"
  }), import_react4.default.createElement(Label, {
    className: "sendbird-mention-suggest-list__user-item__nickname",
    type: LabelTypography.SUBTITLE_2,
    color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3
  }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)), import_react4.default.createElement(Label, {
    className: "sendbird-mention-suggest-list__user-item__user-id",
    type: LabelTypography.SUBTITLE_2,
    color: LabelColors.ONBACKGROUND_2
  }, member === null || member === void 0 ? void 0 : member.userId));
}
var DEBOUNCING_TIME = 300;
function SuggestedMentionList(props) {
  var _a, _b, _c, _d, _e;
  var className = props.className, _f = props.targetNickname, targetNickname = _f === void 0 ? "" : _f, onUserItemClick = props.onUserItemClick, onFocusItemChange = props.onFocusItemChange, onFetchUsers = props.onFetchUsers, renderUserMentionItem = props.renderUserMentionItem, inputEvent = props.inputEvent, _g = props.ableAddMention, ableAddMention = _g === void 0 ? true : _g, _h = props.maxMentionCount, maxMentionCount = _h === void 0 ? MAX_USER_MENTION_COUNT : _h, _j = props.maxSuggestionCount, maxSuggestionCount = _j === void 0 ? MAX_USER_SUGGESTION_COUNT : _j;
  var currentGroupChannel = (_a = useChannelContext === null || useChannelContext === void 0 ? void 0 : useChannelContext()) === null || _a === void 0 ? void 0 : _a.currentGroupChannel;
  var currentChannel = (_b = useThreadContext === null || useThreadContext === void 0 ? void 0 : useThreadContext()) === null || _b === void 0 ? void 0 : _b.currentChannel;
  var channelInstance = currentGroupChannel || currentChannel;
  var _k = useSendbirdStateContext(), config = _k.config, stores = _k.stores;
  var logger = config.logger;
  var currentUserId = ((_e = (_d = (_c = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk) === null || _d === void 0 ? void 0 : _d.currentUser) === null || _e === void 0 ? void 0 : _e.userId) || "";
  var scrollRef = (0, import_react4.useRef)(null);
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  var _l = (0, import_react4.useState)(null), timer = _l[0], setTimer = _l[1];
  var _m = (0, import_react4.useState)(""), searchString = _m[0], setSearchString = _m[1];
  var _o = (0, import_react4.useState)(""), lastSearchString = _o[0], setLastSearchString = _o[1];
  var _p = (0, import_react4.useState)(null), currentUser = _p[0], setCurrentUser = _p[1];
  var _q = (0, import_react4.useState)([]), currentMemberList = _q[0], setCurrentMemberList = _q[1];
  (0, import_react4.useEffect)(function() {
    clearTimeout(timer);
    setTimer(setTimeout(function() {
      setSearchString(targetNickname);
    }, DEBOUNCING_TIME));
  }, [targetNickname]);
  (0, import_react4.useEffect)(function() {
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {
      if (currentMemberList.length > 0) {
        onUserItemClick(currentUser);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);
      });
      if (0 < currentUserIndex) {
        setCurrentUser(currentMemberList[currentUserIndex - 1]);
        onFocusItemChange(currentMemberList[currentUserIndex - 1]);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);
      });
      if (currentUserIndex < currentMemberList.length - 1) {
        setCurrentUser(currentMemberList[currentUserIndex + 1]);
        onFocusItemChange(currentMemberList[currentUserIndex + 1]);
      }
    }
  }, [inputEvent]);
  (0, import_react4.useEffect)(function() {
    if (!(channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.createMemberListQuery)) {
      logger.warning("SuggestedMentionList: Creating member list query failed");
      return;
    }
    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {
      return;
    }
    var query = channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.createMemberListQuery({
      limit: maxSuggestionCount + 1,
      nicknameStartsWithFilter: searchString.slice(USER_MENTION_TEMP_CHAR.length)
    });
    query.next().then(function(memberList) {
      var suggestingMembers = memberList.filter(function(member) {
        return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId);
      }).slice(0, maxSuggestionCount);
      if (suggestingMembers.length < 1) {
        logger.info("SuggestedMentionList: Fetched member list is empty");
      } else {
        logger.info("SuggestedMentionList: Fetching member list succeeded", {
          memberListQuery: query,
          memberList: suggestingMembers
        });
        setCurrentUser(suggestingMembers[0]);
      }
      setLastSearchString(searchString);
      onFetchUsers(suggestingMembers);
      setCurrentMemberList(suggestingMembers);
    }).catch(function(error) {
      if (error) {
        logger.error("SuggestedMentionList: Fetching member list failed", error);
      }
    });
  }, [channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.url, searchString]);
  if (!ableAddMention && currentMemberList.length === 0) {
    return null;
  }
  return import_react4.default.createElement("div", {
    className: "sendbird-mention-suggest-list ".concat(className),
    key: "sendbird-mention-suggest-list",
    ref: scrollRef
  }, ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function(member) {
    return import_react4.default.createElement(SuggestedUserMentionItem, {
      key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),
      member,
      isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId),
      parentScrollRef: scrollRef,
      onClick: function(_a2) {
        var member2 = _a2.member;
        onUserItemClick(member2);
      },
      onMouseOver: function(_a2) {
        var member2 = _a2.member;
        setCurrentUser(member2);
      },
      renderUserMentionItem
    });
  })), !ableAddMention && import_react4.default.createElement("div", {
    className: "sendbird-mention-suggest-list__notice-item"
  }, import_react4.default.createElement(Icon, {
    className: "sendbird-mention-suggest-list__notice-item__icon",
    type: IconTypes.INFO,
    fillColor: IconColors.ON_BACKGROUND_2,
    width: "20px",
    height: "20px"
  }), import_react4.default.createElement(Label, {
    className: "sendbird-mention-suggest-list__notice-item__text",
    type: LabelTypography.SUBTITLE_2,
    color: LabelColors.ONBACKGROUND_2
  }, stringSet.MENTION_COUNT__OVER_LIMIT.replace("%d", maxMentionCount))));
}

// node_modules/@sendbird/uikit-react/ui/DateSeparator.js
var import_react5 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);
var DateSeparator = function(_a) {
  var _b = _a.children, children = _b === void 0 ? null : _b, _c = _a.className, className = _c === void 0 ? "" : _c, _d = _a.separatorColor, separatorColor = _d === void 0 ? Colors.ONBACKGROUND_4 : _d;
  return import_react5.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-separator"], false).join(" ")
  }, import_react5.default.createElement("div", {
    className: ["sendbird-separator__left", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ")
  }), import_react5.default.createElement("div", {
    className: "sendbird-separator__text"
  }, children || import_react5.default.createElement(Label, {
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, "Date Separator")), import_react5.default.createElement("div", {
    className: ["sendbird-separator__right", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ")
  }));
};

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var import_react7 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);

// node_modules/@sendbird/uikit-react/index-6b3b1eca.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/dompurify/dist/purify.es.js
var {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
var {
  freeze,
  seal,
  create
} = Object;
var {
  apply,
  construct
} = typeof Reflect !== "undefined" && Reflect;
if (!freeze) {
  freeze = function freeze2(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal2(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply2(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct2(Func, args) {
    return new Func(...args);
  };
}
var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringToString = unapply(String.prototype.toString);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function(thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === "string") {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    if (getOwnPropertyDescriptor(object, property) !== void 0) {
      newObject[property] = value;
    }
  }
  return newObject;
}
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === "function") {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue(element) {
    console.warn("fallback value for", element);
    return null;
  }
  return fallbackValue;
}
var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
var text = freeze(["#text"]);
var html = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]);
var svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
var IS_ALLOWED_URI = seal(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);
var EXPRESSIONS = Object.freeze({
  __proto__: null,
  MUSTACHE_EXPR,
  ERB_EXPR,
  TMPLIT_EXPR,
  DATA_ATTR,
  ARIA_ATTR,
  IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA,
  ATTR_WHITESPACE,
  DOCTYPE_NAME
});
var getGlobal = function getGlobal2() {
  return typeof window === "undefined" ? null : window;
};
var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== "object" || typeof trustedTypes.createPolicy !== "function") {
    return null;
  }
  let suffix = null;
  const ATTR_NAME = "data-tt-policy-suffix";
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = "dompurify" + (suffix ? "#" + suffix : "");
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html2) {
        return html2;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    console.warn("TrustedTypes policy " + policyName + " could not be created.");
    return null;
  }
};
function createDOMPurify() {
  let window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
  const DOMPurify = (root) => createDOMPurify(root);
  DOMPurify.version = "3.0.6";
  DOMPurify.removed = [];
  if (!window2 || !window2.document || window2.document.nodeType !== 9) {
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document: document2
  } = window2;
  const originalDocument = document2;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window2.NamedNodeMap || window2.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window2;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, "cloneNode");
  const getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
  const getChildNodes = lookupGetter(ElementPrototype, "childNodes");
  const getParentNode = lookupGetter(ElementPrototype, "parentNode");
  if (typeof HTMLTemplateElement === "function") {
    const template = document2.createElement("template");
    if (template.content && template.content.ownerDocument) {
      document2 = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = "";
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document2;
  const {
    importNode
  } = originalDocument;
  let hooks = {};
  DOMPurify.isSupported = typeof entries === "function" && typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: MUSTACHE_EXPR2,
    ERB_EXPR: ERB_EXPR2,
    TMPLIT_EXPR: TMPLIT_EXPR2,
    DATA_ATTR: DATA_ATTR2,
    ARIA_ATTR: ARIA_ATTR2,
    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA2,
    ATTR_WHITESPACE: ATTR_WHITESPACE2
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  let FORBID_TAGS = null;
  let FORBID_ATTR = null;
  let ALLOW_ARIA_ATTR = true;
  let ALLOW_DATA_ATTR = true;
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  let SAFE_FOR_TEMPLATES = false;
  let WHOLE_DOCUMENT = false;
  let SET_CONFIG = false;
  let FORCE_BODY = false;
  let RETURN_DOM = false;
  let RETURN_DOM_FRAGMENT = false;
  let RETURN_TRUSTED_TYPE = false;
  let SANITIZE_DOM = true;
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
  let KEEP_CONTENT = true;
  let IN_PLACE = false;
  let USE_PROFILES = {};
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
  const MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  const HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
  const DEFAULT_PARSER_MEDIA_TYPE = "text/html";
  let transformCaseFunc = null;
  let CONFIG = null;
  const formElement = document2.createElement("form");
  const isRegexOrFunction = function isRegexOrFunction2(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  const _parseConfig = function _parseConfig2() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    if (!cfg || typeof cfg !== "object") {
      cfg = {};
    }
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
    transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
    ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = "ALLOWED_NAMESPACES" in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(
      clone(DEFAULT_URI_SAFE_ATTRIBUTES),
      // eslint-disable-line indent
      cfg.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(
      clone(DEFAULT_DATA_URI_TAGS),
      // eslint-disable-line indent
      cfg.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
    RETURN_DOM = cfg.RETURN_DOM || false;
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
    FORCE_BODY = cfg.FORCE_BODY || false;
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
    IN_PLACE = cfg.IN_PLACE || false;
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, [...text]);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    if (KEEP_CONTENT) {
      ALLOWED_TAGS["#text"] = true;
    }
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
    }
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ["tbody"]);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      emptyHTML = trustedTypesPolicy.createHTML("");
    } else {
      if (trustedTypesPolicy === void 0) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      if (trustedTypesPolicy !== null && typeof emptyHTML === "string") {
        emptyHTML = trustedTypesPolicy.createHTML("");
      }
    }
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
  const HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "desc", "title", "annotation-xml"]);
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
  const ALL_SVG_TAGS = addToSet({}, svg$1);
  addToSet(ALL_SVG_TAGS, svgFilters);
  addToSet(ALL_SVG_TAGS, svgDisallowed);
  const ALL_MATHML_TAGS = addToSet({}, mathMl$1);
  addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
  const _checkValidNamespace = function _checkValidNamespace2(element) {
    let parent = getParentNode(element);
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: "template"
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "svg";
      }
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "math";
      }
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
      }
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    return false;
  };
  const _forceRemove = function _forceRemove2(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      node.parentNode.removeChild(node);
    } catch (_) {
      node.remove();
    }
  };
  const _removeAttribute = function _removeAttribute2(name, node) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: node.getAttributeNode(name),
        from: node
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: node
      });
    }
    node.removeAttribute(name);
    if (name === "is" && !ALLOWED_ATTR[name]) {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(node);
        } catch (_) {
        }
      } else {
        try {
          node.setAttribute(name, "");
        } catch (_) {
        }
      }
    }
  };
  const _initDocument = function _initDocument2(dirty) {
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = "<remove></remove>" + dirty;
    } else {
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {
      }
    }
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, "template", null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  const _createNodeIterator = function _createNodeIterator2(root) {
    return createNodeIterator.call(
      root.ownerDocument || root,
      root,
      // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT,
      null
    );
  };
  const _isClobbered = function _isClobbered2(elm) {
    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function" || typeof elm.hasChildNodes !== "function");
  };
  const _isNode = function _isNode2(object) {
    return typeof Node === "function" && object instanceof Node;
  };
  const _executeHook = function _executeHook2(entryPoint, currentNode, data) {
    if (!hooks[entryPoint]) {
      return;
    }
    arrayForEach(hooks[entryPoint], (hook) => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  };
  const _sanitizeElements = function _sanitizeElements2(currentNode) {
    let content = null;
    _executeHook("beforeSanitizeElements", currentNode, null);
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    const tagName = transformCaseFunc(currentNode.nodeName);
    _executeHook("uponSanitizeElement", currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        content = stringReplace(content, expr, " ");
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    _executeHook("afterSanitizeElements", currentNode, null);
    return false;
  };
  const _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
    if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
      return false;
    }
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR2, lcName))
      ;
    else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR2, lcName))
      ;
    else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
      )
        ;
      else {
        return false;
      }
    } else if (URI_SAFE_ATTRIBUTES[lcName])
      ;
    else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag])
      ;
    else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA2, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if (value) {
      return false;
    } else
      ;
    return true;
  };
  const _isBasicCustomElement = function _isBasicCustomElement2(tagName) {
    return tagName.indexOf("-") > 0;
  };
  const _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
    _executeHook("beforeSanitizeAttributes", currentNode, null);
    const {
      attributes
    } = currentNode;
    if (!attributes) {
      return;
    }
    const hookEvent = {
      attrName: "",
      attrValue: "",
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR
    };
    let l = attributes.length;
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === "value" ? attrValue : stringTrim(attrValue);
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = void 0;
      _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
      value = hookEvent.attrValue;
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      _removeAttribute(name, currentNode);
      if (!hookEvent.keepAttr) {
        continue;
      }
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
          value = stringReplace(value, expr, " ");
        });
      }
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
        _removeAttribute(name, currentNode);
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      if (trustedTypesPolicy && typeof trustedTypes === "object" && typeof trustedTypes.getAttributeType === "function") {
        if (namespaceURI)
          ;
        else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case "TrustedHTML": {
              value = trustedTypesPolicy.createHTML(value);
              break;
            }
            case "TrustedScriptURL": {
              value = trustedTypesPolicy.createScriptURL(value);
              break;
            }
          }
        }
      }
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          currentNode.setAttribute(name, value);
        }
        arrayPop(DOMPurify.removed);
      } catch (_) {
      }
    }
    _executeHook("afterSanitizeAttributes", currentNode, null);
  };
  const _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    _executeHook("beforeSanitizeShadowDOM", fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      _executeHook("uponSanitizeShadowNode", shadowNode, null);
      if (_sanitizeElements(shadowNode)) {
        continue;
      }
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM2(shadowNode.content);
      }
      _sanitizeAttributes(shadowNode);
    }
    _executeHook("afterSanitizeShadowDOM", fragment, null);
  };
  DOMPurify.sanitize = function(dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = "<!-->";
    }
    if (typeof dirty !== "string" && !_isNode(dirty)) {
      if (typeof dirty.toString === "function") {
        dirty = dirty.toString();
        if (typeof dirty !== "string") {
          throw typeErrorCreate("dirty is not a string, aborting");
        }
      } else {
        throw typeErrorCreate("toString is not a function");
      }
    }
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    DOMPurify.removed = [];
    if (typeof dirty === "string") {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
        }
      }
    } else if (dirty instanceof Node) {
      body = _initDocument("<!---->");
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") {
        body = importedNode;
      } else if (importedNode.nodeName === "HTML") {
        body = importedNode;
      } else {
        body.appendChild(importedNode);
      }
    } else {
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf("<") === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      body = _initDocument(dirty);
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
      }
    }
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    while (currentNode = nodeIterator.nextNode()) {
      if (_sanitizeElements(currentNode)) {
        continue;
      }
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
      _sanitizeAttributes(currentNode);
    }
    if (IN_PLACE) {
      return dirty;
    }
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
    }
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        serializedHTML = stringReplace(serializedHTML, expr, " ");
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function() {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function(tag, attr, value) {
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function(entryPoint, hookFunction) {
    if (typeof hookFunction !== "function") {
      return;
    }
    hooks[entryPoint] = hooks[entryPoint] || [];
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function(entryPoint) {
    if (hooks[entryPoint]) {
      return arrayPop(hooks[entryPoint]);
    }
  };
  DOMPurify.removeHooks = function(entryPoint) {
    if (hooks[entryPoint]) {
      hooks[entryPoint] = [];
    }
  };
  DOMPurify.removeAllHooks = function() {
    hooks = {};
  };
  return DOMPurify;
}
var purify = createDOMPurify();

// node_modules/@sendbird/uikit-react/consts-4ec7d640.js
var TEXT_MESSAGE_BODY_CLASSNAME = "sendbird-text-message-item-body";

// node_modules/@sendbird/uikit-react/consts-be37687e.js
var OG_MESSAGE_BODY_CLASSNAME = "sendbird-og-message-item-body__text-bubble";

// node_modules/@sendbird/uikit-react/index-6b3b1eca.js
function renderToString(_a) {
  var userId = _a.userId, nickname = _a.nickname;
  var el = '<span data-userid="'.concat(userId, '" data-sb-mention="true" class="').concat(MENTION_USER_LABEL_CLASSNAME, '">').concat(nickname, "</span>");
  var purifier = purify(window);
  var sanitized_ = purifier.sanitize(el);
  var token = sanitized_.split(" ");
  var spanTag = token[0], rest = token.slice(1);
  var sanitized = __spreadArray([spanTag, 'contenteditable="false"'], rest, true).join(" ");
  return sanitized;
}
var sanitizeString = (str) => str === null || str === void 0 ? void 0 : str.replace(/[\u00A0-\u9999<>]/gim, (i) => "".concat("&#", i.charCodeAt(0), ";"));
var nodeListToArray = (childNodes) => {
  try {
    return Array.from(childNodes);
  } catch (error) {
    return [];
  }
};
function isChannelTypeSupportsMultipleFilesMessage(channel) {
  var _channel$isGroupChann;
  return channel && (channel === null || channel === void 0 || (_channel$isGroupChann = channel.isGroupChannel) === null || _channel$isGroupChann === void 0 ? void 0 : _channel$isGroupChann.call(channel)) && !channel.isBroadcast && !channel.isSuper;
}
function inserTemplateToDOM(templateList) {
  var nodes = templateList.map(function(template) {
    var text2 = template.text, userId = template.userId;
    if (userId) {
      return renderToString({
        userId,
        nickname: text2
      });
    }
    return sanitizeString(text2);
  }).join(" ").concat(" ");
  document.execCommand("insertHTML", false, nodes);
}
var PASTE_NODE = "sendbird-uikit__paste-node";
var TEXT_MESSAGE_CLASS = "sendbird-word";
var MENTION_CLASS = "sendbird-word__mention";
var MENTION_CLASS_IN_INPUT = "sendbird-mention-user-label";
var MENTION_CLASS_COMBINED_QUERY = ".".concat(MENTION_CLASS, ", .").concat(MENTION_CLASS_IN_INPUT);
function querySelectorIncludingSelf(master, selector) {
  var result = __spreadArray([master], Array.from(master.querySelectorAll(selector)), true).find(function(el) {
    return el.matches(selector);
  });
  return result;
}
function getLeafNodes(master) {
  var ogMessage = querySelectorIncludingSelf(master, ".".concat(OG_MESSAGE_BODY_CLASSNAME));
  if (ogMessage) {
    return nodeListToArray(ogMessage.childNodes);
  }
  var textMessageBody = querySelectorIncludingSelf(master, ".".concat(TEXT_MESSAGE_BODY_CLASSNAME));
  if (textMessageBody) {
    return nodeListToArray(textMessageBody.childNodes);
  }
  return nodeListToArray(master.childNodes);
}
function createPasteNode() {
  var pasteNode = document.body.querySelector("#".concat(PASTE_NODE));
  if (pasteNode) {
    pasteNode === null || pasteNode === void 0 ? void 0 : pasteNode.remove();
  }
  var node = document.createElement("div");
  node.id = PASTE_NODE;
  node.style.display = "none";
  return node;
}
function hasMention(parent) {
  return (parent === null || parent === void 0 ? void 0 : parent.querySelector(MENTION_CLASS_COMBINED_QUERY)) ? true : false;
}
var extractTextFromNodes = function(nodes) {
  var text2 = "";
  nodes.forEach(function(node) {
    var textNodes = node.querySelectorAll(".".concat(TEXT_MESSAGE_CLASS));
    if (textNodes.length > 0) {
      text2 += extractTextFromNodes(Array.from(textNodes)) + " ";
    }
    text2 += node.innerText + " ";
  });
  return text2;
};
function domToMessageTemplate(nodeArray) {
  var templates = nodeArray === null || nodeArray === void 0 ? void 0 : nodeArray.reduce(function(accumulator, currentValue) {
    var _a;
    var mentionNode;
    var text2 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
    if (currentValue instanceof Text) {
      mentionNode = false;
      text2 = currentValue.textContent;
    }
    if (currentValue instanceof HTMLElement) {
      mentionNode = currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT) ? currentValue : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);
    }
    if (mentionNode) {
      var text_1 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
      var userId = (_a = mentionNode.dataset) === null || _a === void 0 ? void 0 : _a.userid;
      return __spreadArray(__spreadArray([], accumulator, true), [{
        text: text_1,
        userId
      }], false);
    }
    return __spreadArray(__spreadArray([], accumulator, true), [{
      text: text2
    }], false);
  }, []);
  return templates;
}
function getUsersFromWords(templates, channel) {
  var userMap = {};
  var users = channel.members;
  templates.forEach(function(template) {
    if (template.userId) {
      var mentionedMember = users.find(function(user) {
        return user.userId === template.userId;
      });
      if (mentionedMember) {
        userMap[template.userId] = mentionedMember;
      }
    }
  });
  return Object.values(userMap);
}
function usePaste(_a) {
  var ref = _a.ref, setIsInput = _a.setIsInput, setHeight = _a.setHeight, channel = _a.channel, setMentionedUsers = _a.setMentionedUsers;
  return (0, import_react6.useCallback)(function(e) {
    e.preventDefault();
    var html2 = e === null || e === void 0 ? void 0 : e.clipboardData.getData("text/html");
    if (!html2) {
      var text2 = e === null || e === void 0 ? void 0 : e.clipboardData.getData("text");
      document.execCommand("insertHTML", false, sanitizeString(text2));
      setIsInput(true);
      setHeight();
      return;
    }
    var purifier = purify(window);
    var clean = purifier.sanitize(html2);
    var pasteNode = createPasteNode();
    pasteNode.innerHTML = clean;
    if (!hasMention(pasteNode)) {
      var text2 = extractTextFromNodes(Array.from(pasteNode.children));
      document.execCommand("insertHTML", false, sanitizeString(text2));
      pasteNode.remove();
      setIsInput(true);
      setHeight();
      return;
    }
    var leafNodes = getLeafNodes(pasteNode);
    var words = domToMessageTemplate(leafNodes);
    var mentionedUsers = getUsersFromWords(words, channel);
    setMentionedUsers(mentionedUsers);
    inserTemplateToDOM(words);
    pasteNode.remove();
    setIsInput(true);
    setHeight();
  }, [ref, setIsInput, setHeight, channel, setMentionedUsers]);
}

// node_modules/@sendbird/uikit-react/tokenize-eae44765.js
var USER_MENTION_PREFIX = "@";
var TOKEN_TYPES = {
  string: "string",
  mention: "mention",
  url: "url",
  undetermined: "undetermined"
};
function getUserMentionRegex(mentionedUsers, templatePrefix_) {
  var templatePrefix = templatePrefix_ || USER_MENTION_PREFIX;
  return RegExp("(".concat(mentionedUsers.map(function(u) {
    var userId = u.userId.replace(
      // If user.id includes these patterns, need to convert it into an escaped one
      /([.*+?^${}()|[\]\\])/g,
      "\\$1"
    );
    return "".concat(templatePrefix, "\\{").concat(userId, "\\}");
  }).join("|"), ")"), "g");
}
function identifyMentions(_a) {
  var tokens = _a.tokens, _b = _a.mentionedUsers, mentionedUsers = _b === void 0 ? [] : _b, _c = _a.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c;
  if (!(mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length)) {
    return tokens;
  }
  var userMentionRegex = getUserMentionRegex(mentionedUsers, templatePrefix);
  var results = tokens.map(function(token) {
    if (token.type !== TOKEN_TYPES.undetermined) {
      return token;
    }
    var value = token.value;
    var parts = value.split(userMentionRegex);
    var tokens2 = parts.map(function(part) {
      if (part.match(userMentionRegex)) {
        var matchedUser = mentionedUsers.find(function(user) {
          return "@{".concat(user === null || user === void 0 ? void 0 : user.userId, "}") === part;
        });
        var nickname = (matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.nickname) || "(No name)";
        return {
          value: nickname,
          type: TOKEN_TYPES.mention,
          userId: matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.userId
        };
      } else {
        return {
          value: part,
          type: TOKEN_TYPES.undetermined
        };
      }
    });
    return tokens2;
  }).flat();
  return results;
}
function identifyUrlsAndStrings(token) {
  var results = token.map(function(token2) {
    if (token2.type !== TOKEN_TYPES.undetermined) {
      return token2;
    }
    var _a = token2.value, value = _a === void 0 ? "" : _a;
    var parts = value.split(" ");
    var tokens = parts.map(function(part) {
      if (isUrl(part)) {
        return {
          value: part,
          type: TOKEN_TYPES.url
        };
      } else {
        return {
          value: part,
          type: TOKEN_TYPES.string
        };
      }
    });
    return tokens;
  }).flat();
  return results;
}
function combineNearbyStrings(tokens) {
  var results = tokens.reduce(function(acc, token) {
    var lastToken = acc[acc.length - 1];
    if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === TOKEN_TYPES.string && token.type === TOKEN_TYPES.string) {
      lastToken.value = "".concat(lastToken.value, " ").concat(token.value);
      return acc;
    }
    return __spreadArray(__spreadArray([], acc, true), [token], false);
  }, []);
  return results;
}
function tokenizeMessage(_a) {
  var messageText = _a.messageText, _b = _a.mentionedUsers, mentionedUsers = _b === void 0 ? [] : _b, _c = _a.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c;
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var partialWithMentions = identifyMentions({
    tokens: partialResult,
    mentionedUsers,
    templatePrefix
  });
  var partialsWithUrlsAndMentions = identifyUrlsAndStrings(partialWithMentions);
  var result = combineNearbyStrings(partialsWithUrlsAndMentions);
  return result;
}
function getWhiteSpacePreservedText(text2) {
  var NON_BREAKING_SPACE = " ";
  var lines = text2.split("\n");
  var processedLines = lines.map(function(line) {
    var _a, _b;
    var leadingWhitespace = ((_a = line.match(/^\s*/)) === null || _a === void 0 ? void 0 : _a[0]) || "";
    var trailingWhitespace = ((_b = line.match(/\s*$/)) === null || _b === void 0 ? void 0 : _b[0]) || "";
    var convertedLeadingWhitespace = leadingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    var convertedTrailingWhitespace = trailingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    return convertedLeadingWhitespace + line.trim() + convertedTrailingWhitespace;
  });
  var result = processedLines.join("\n");
  return result;
}

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var ChannelType;
(function(ChannelType2) {
  ChannelType2["BASE"] = "base";
  ChannelType2["GROUP"] = "group";
  ChannelType2["OPEN"] = "open";
})(ChannelType || (ChannelType = {}));
var checkIfFileUploadEnabled = function(_a) {
  var channel = _a.channel, config = _a.config;
  var isEnabled = K(channel === null || channel === void 0 ? void 0 : channel.channelType).with(ChannelType.GROUP, function() {
    var _a2;
    return (_a2 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.enableDocument;
  }).with(ChannelType.OPEN, function() {
    var _a2;
    return (_a2 = config === null || config === void 0 ? void 0 : config.openChannel) === null || _a2 === void 0 ? void 0 : _a2.enableDocument;
  }).otherwise(function() {
    return true;
  });
  return isEnabled;
};
var TEXT_FIELD_ID = "sendbird-message-input-text-field";
var LINE_HEIGHT = 76;
var noop2 = () => {
};
var displayCaret = (element, position) => {
  const range = document.createRange();
  const sel = window.getSelection();
  range.setStart(element.childNodes[0], position);
  range.collapse(true);
  sel.removeAllRanges();
  sel.addRange(range);
  element.focus();
};
var resetInput = (ref) => {
  try {
    ref.current.innerHTML = "";
  } catch (_unused) {
  }
};
var initialTargetStringInfo = {
  targetString: "",
  startNodeIndex: null,
  startOffsetIndex: null,
  endNodeIndex: null,
  endOffsetIndex: null
};
var MessageInput = import_react7.default.forwardRef((props, ref) => {
  var _ref$current, _ref$current$textCont, _ref$current6;
  const {
    className,
    messageFieldId,
    isEdit,
    isMentionEnabled,
    isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled,
    disabled,
    message,
    placeholder,
    maxLength,
    onFileUpload,
    onSendMessage,
    onUpdateMessage,
    onCancelEdit,
    onStartTyping,
    channelUrl,
    channel,
    mentionSelectedUser,
    onUserMentioned,
    onMentionStringChange,
    onMentionedUserIdsUpdated,
    onVoiceMessageIconClick,
    onKeyUp,
    onKeyDown,
    renderFileUploadIcon,
    renderVoiceMessageIcon,
    renderSendMessageIcon,
    setMentionedUsers,
    acceptableMimeTypes
  } = props;
  const textFieldId = messageFieldId || TEXT_FIELD_ID;
  const {
    stringSet
  } = useLocalization();
  const {
    config
  } = useSendbirdStateContext();
  const isFileUploadEnabled = checkIfFileUploadEnabled({
    channel,
    config
  });
  const fileInputRef = (0, import_react7.useRef)(null);
  const [isInput, setIsInput] = (0, import_react7.useState)(false);
  const [mentionedUserIds, setMentionedUserIds] = (0, import_react7.useState)([]);
  const [targetStringInfo, setTargetStringInfo] = (0, import_react7.useState)(_objectSpread2({}, initialTargetStringInfo));
  const setHeight = (0, import_react7.useMemo)(() => () => {
    try {
      const elem = ref === null || ref === void 0 ? void 0 : ref.current;
      const MAX_HEIGHT = window.document.body.offsetHeight * 0.6;
      if (elem && elem.scrollHeight >= LINE_HEIGHT) {
        if (MAX_HEIGHT < elem.scrollHeight) {
          elem.style.height = "auto";
          elem.style.height = `${MAX_HEIGHT}px`;
        } else {
          elem.style.height = "auto";
          elem.style.height = `${elem.scrollHeight}px`;
        }
      } else {
        elem.style.height = "";
      }
    } catch (error) {
    }
  }, []);
  const initialValue = props === null || props === void 0 ? void 0 : props.value;
  (0, import_react7.useEffect)(() => {
    var _textField$textConten;
    const textField = ref === null || ref === void 0 ? void 0 : ref.current;
    try {
      textField.innerHTML = initialValue;
      displayCaret(textField, initialValue === null || initialValue === void 0 ? void 0 : initialValue.length);
    } catch (_unused2) {
    }
    setMentionedUserIds([]);
    setIsInput((textField === null || textField === void 0 || (_textField$textConten = textField.textContent) === null || _textField$textConten === void 0 ? void 0 : _textField$textConten.trim().length) > 0);
    setHeight();
  }, [initialValue]);
  (0, import_react7.useEffect)(() => {
    if (!isEdit) {
      setIsInput(false);
      resetInput(ref);
    }
  }, [channelUrl]);
  (0, import_react7.useEffect)(() => {
    if (isEdit && message !== null && message !== void 0 && message.messageId) {
      var _message$mentionedUse, _message$mentionedMes, _textField$textConten2;
      const textField = ref === null || ref === void 0 ? void 0 : ref.current;
      if (isMentionEnabled && (message === null || message === void 0 || (_message$mentionedUse = message.mentionedUsers) === null || _message$mentionedUse === void 0 ? void 0 : _message$mentionedUse.length) > 0 && (message === null || message === void 0 || (_message$mentionedMes = message.mentionedMessageTemplate) === null || _message$mentionedMes === void 0 ? void 0 : _message$mentionedMes.length) > 0) {
        const {
          mentionedUsers = []
        } = message;
        const tokens = tokenizeMessage({
          messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
          mentionedUsers
        });
        textField.innerHTML = tokens.map((token) => {
          if (token.type === TOKEN_TYPES.mention) {
            const mentionedUser = mentionedUsers.find((user) => user.userId === token.userId);
            const nickname = `${USER_MENTION_PREFIX}${(mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME}`;
            return renderToString({
              userId: token.userId,
              nickname
            });
          }
          return sanitizeString(token.value);
        }).join(" ");
      } else {
        try {
          textField.innerHTML = sanitizeString(message === null || message === void 0 ? void 0 : message.message);
        } catch (_unused3) {
        }
        setMentionedUserIds([]);
      }
      setIsInput((textField === null || textField === void 0 || (_textField$textConten2 = textField.textContent) === null || _textField$textConten2 === void 0 ? void 0 : _textField$textConten2.trim().length) > 0);
      setHeight();
    }
  }, [isEdit, message]);
  const useMentionedLabelDetection = (0, import_react7.useCallback)(() => {
    var _textField$textConten3;
    const textField = ref === null || ref === void 0 ? void 0 : ref.current;
    if (isMentionEnabled) {
      const newMentionedUserIds = [...textField.getElementsByClassName("sendbird-mention-user-label")].map((node) => {
        var _node$dataset;
        return node === null || node === void 0 || (_node$dataset = node.dataset) === null || _node$dataset === void 0 ? void 0 : _node$dataset.userid;
      });
      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {
        onMentionedUserIdsUpdated(newMentionedUserIds);
        setMentionedUserIds(newMentionedUserIds);
      }
    }
    setIsInput(((_textField$textConten3 = textField.textContent) === null || _textField$textConten3 === void 0 ? void 0 : _textField$textConten3.trim().length) > 0);
  }, [targetStringInfo, isMentionEnabled]);
  (0, import_react7.useEffect)(() => {
    if (isMentionEnabled && mentionSelectedUser) {
      const {
        targetString,
        startNodeIndex,
        startOffsetIndex,
        endNodeIndex,
        endOffsetIndex
      } = targetStringInfo;
      if (targetString && startNodeIndex !== null && startOffsetIndex !== null) {
        var _document, _childNodes$startNode, _document2, _childNodes$endNodeIn;
        const textField = ref === null || ref === void 0 ? void 0 : ref.current;
        const childNodes = nodeListToArray(textField === null || textField === void 0 ? void 0 : textField.childNodes);
        const frontTextNode = (_document = document) === null || _document === void 0 ? void 0 : _document.createTextNode((_childNodes$startNode = childNodes[startNodeIndex]) === null || _childNodes$startNode === void 0 ? void 0 : _childNodes$startNode.textContent.slice(0, startOffsetIndex));
        const backTextNode = (_document2 = document) === null || _document2 === void 0 ? void 0 : _document2.createTextNode(` ${(_childNodes$endNodeIn = childNodes[endNodeIndex]) === null || _childNodes$endNodeIn === void 0 ? void 0 : _childNodes$endNodeIn.textContent.slice(endOffsetIndex)}`);
        const mentionLabel = renderToString({
          userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,
          nickname: `${USER_MENTION_TEMP_CHAR}${(mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME}`
        });
        const div = document.createElement("div");
        div.innerHTML = mentionLabel;
        const newNodes = [...childNodes.slice(0, startNodeIndex), frontTextNode, div.childNodes[0], backTextNode, ...childNodes.slice(endNodeIndex + 1)];
        textField.innerHTML = "";
        newNodes.forEach((newNode) => {
          textField.appendChild(newNode);
        });
        onUserMentioned(mentionSelectedUser);
        if (window.getSelection || document.getSelection) {
          const selection = window.getSelection() || document.getSelection();
          selection.removeAllRanges();
          const range = new Range();
          range.selectNodeContents(textField);
          range.setStart(textField.childNodes[startNodeIndex + 2], 1);
          range.setEnd(textField.childNodes[startNodeIndex + 2], 1);
          range.collapse(false);
          selection.addRange(range);
          textField.focus();
        }
        setTargetStringInfo(_objectSpread2({}, initialTargetStringInfo));
        setHeight();
        useMentionedLabelDetection();
      }
    }
  }, [mentionSelectedUser, isMentionEnabled]);
  const useMentionInputDetection = (0, import_react7.useCallback)(() => {
    var _window, _window$getSelection, _document3, _document3$getSelecti;
    const selection = ((_window = window) === null || _window === void 0 || (_window$getSelection = _window.getSelection) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.call(_window)) || ((_document3 = document) === null || _document3 === void 0 || (_document3$getSelecti = _document3.getSelection) === null || _document3$getSelecti === void 0 ? void 0 : _document3$getSelecti.call(_document3));
    const textField = ref === null || ref === void 0 ? void 0 : ref.current;
    if (selection.anchorNode === textField) {
      onMentionStringChange("");
    }
    if (isMentionEnabled && selection && selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset) {
      let textStack = "";
      let startNodeIndex = null;
      let startOffsetIndex = null;
      for (let index = 0; index < textField.childNodes.length; index += 1) {
        const currentNode = textField.childNodes[index];
        if (currentNode.nodeType === NodeTypes.TextNode) {
          const textContent = currentNode === selection.anchorNode ? (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset)) || "" : (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) || "";
          if (textStack.length > 0) {
            textStack += textContent;
          } else {
            let charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);
            for (let i = charLastIndex - 1; i > -1; i -= 1) {
              if (textContent[i] === USER_MENTION_TEMP_CHAR) {
                charLastIndex = i;
              } else {
                break;
              }
            }
            if (charLastIndex > -1) {
              textStack = textContent;
              startNodeIndex = index;
              startOffsetIndex = charLastIndex;
            }
          }
        } else {
          textStack = "";
          startNodeIndex = null;
          startOffsetIndex = null;
        }
        if (currentNode === selection.anchorNode) {
          const targetString = textStack ? textStack.slice(startOffsetIndex) : "";
          setTargetStringInfo({
            targetString,
            startNodeIndex,
            startOffsetIndex,
            endNodeIndex: index,
            endOffsetIndex: selection.anchorOffset
          });
          onMentionStringChange(targetString);
          return;
        }
      }
    }
  }, [isMentionEnabled]);
  const sendMessage = () => {
    const textField = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!isEdit && textField !== null && textField !== void 0 && textField.textContent) {
      let messageText = "";
      let mentionTemplate = "";
      textField.childNodes.forEach((node) => {
        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {
          const {
            innerText,
            dataset = {}
          } = node;
          const {
            userid = ""
          } = dataset;
          messageText += innerText;
          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;
        } else if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Br) {
          messageText += "\n";
          mentionTemplate += "\n";
        } else if ((node === null || node === void 0 ? void 0 : node.nodeType) === NodeTypes.ElementNode && (node === null || node === void 0 ? void 0 : node.nodeName) === NodeNames.Div) {
          const {
            textContent = ""
          } = node;
          messageText += `
${textContent}`;
          mentionTemplate += `
${textContent}`;
        } else {
          const {
            textContent = ""
          } = node;
          messageText += textContent;
          mentionTemplate += textContent;
        }
      });
      const params = {
        message: messageText,
        mentionTemplate
      };
      onSendMessage(params);
      resetInput(ref);
      textField.focus();
      setIsInput(false);
      setHeight();
    }
  };
  const isEditDisabled = !(ref !== null && ref !== void 0 && (_ref$current = ref.current) !== null && _ref$current !== void 0 && (_ref$current = _ref$current.textContent) !== null && _ref$current !== void 0 && _ref$current.trim());
  const editMessage = () => {
    const textField = ref === null || ref === void 0 ? void 0 : ref.current;
    const messageId = message === null || message === void 0 ? void 0 : message.messageId;
    if (isEdit && messageId) {
      let messageText = "";
      let mentionTemplate = "";
      textField.childNodes.forEach((node) => {
        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {
          const {
            innerText,
            dataset = {}
          } = node;
          const {
            userid = ""
          } = dataset;
          messageText += innerText;
          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;
          messageText += "\n";
          mentionTemplate += "\n";
        } else {
          const {
            textContent = ""
          } = node;
          messageText += textContent;
          mentionTemplate += textContent;
        }
      });
      const params = {
        messageId,
        message: messageText,
        mentionTemplate
      };
      onUpdateMessage(params);
      resetInput(ref);
    }
  };
  const onPaste = usePaste({
    ref,
    setMentionedUserIds,
    setMentionedUsers,
    channel,
    setIsInput,
    setHeight
  });
  return import_react7.default.createElement("form", {
    className: getClassName([className, isEdit ? "sendbird-message-input__edit" : "", disabled ? "sendbird-message-input-form__disabled" : ""])
  }, import_react7.default.createElement("div", {
    className: getClassName(["sendbird-message-input", disabled ? "sendbird-message-input__disabled" : ""])
  }, import_react7.default.createElement("div", {
    id: `${textFieldId}${isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ""}`,
    className: `sendbird-message-input--textarea ${textFieldId}`,
    contentEditable: !disabled,
    role: "textbox",
    "aria-label": "Text Input",
    disabled,
    ref,
    maxLength,
    onKeyDown: (e) => {
      const preventEvent = onKeyDown(e);
      if (preventEvent) {
        e.preventDefault();
      } else {
        var _ref$current2, _e$nativeEvent, _ref$current3, _ref$current4, _ref$current$childNod;
        if (!e.shiftKey && e.key === MessageInputKeys.Enter && (ref === null || ref === void 0 || (_ref$current2 = ref.current) === null || _ref$current2 === void 0 || (_ref$current2 = _ref$current2.textContent) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.trim().length) > 0 && (e === null || e === void 0 || (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.isComposing) !== true) {
          e.preventDefault();
          sendMessage();
        }
        if (e.key === MessageInputKeys.Backspace && (ref === null || ref === void 0 || (_ref$current3 = ref.current) === null || _ref$current3 === void 0 || (_ref$current3 = _ref$current3.childNodes) === null || _ref$current3 === void 0 ? void 0 : _ref$current3.length) === 2 && !(ref !== null && ref !== void 0 && (_ref$current4 = ref.current) !== null && _ref$current4 !== void 0 && (_ref$current4 = _ref$current4.childNodes) !== null && _ref$current4 !== void 0 && (_ref$current4 = _ref$current4[0]) !== null && _ref$current4 !== void 0 && _ref$current4.textContent) && (ref === null || ref === void 0 || (_ref$current$childNod = ref.current.childNodes) === null || _ref$current$childNod === void 0 || (_ref$current$childNod = _ref$current$childNod[1]) === null || _ref$current$childNod === void 0 ? void 0 : _ref$current$childNod.nodeType) === NodeTypes.ElementNode) {
          ref === null || ref === void 0 || ref.current.removeChild(ref === null || ref === void 0 ? void 0 : ref.current.childNodes[1]);
        }
      }
    },
    onKeyUp: (e) => {
      const preventEvent = onKeyUp(e);
      if (preventEvent) {
        e.preventDefault();
      } else {
        useMentionInputDetection();
      }
    },
    onClick: () => {
      useMentionInputDetection();
    },
    onInput: () => {
      var _ref$current5;
      setHeight();
      onStartTyping();
      setIsInput((ref === null || ref === void 0 || (_ref$current5 = ref.current) === null || _ref$current5 === void 0 || (_ref$current5 = _ref$current5.textContent) === null || _ref$current5 === void 0 ? void 0 : _ref$current5.trim().length) > 0);
      useMentionedLabelDetection();
    },
    onPaste
  }), ((_ref$current$textCont = ref === null || ref === void 0 || (_ref$current6 = ref.current) === null || _ref$current6 === void 0 || (_ref$current6 = _ref$current6.textContent) === null || _ref$current6 === void 0 ? void 0 : _ref$current6.length) !== null && _ref$current$textCont !== void 0 ? _ref$current$textCont : 0) === 0 && import_react7.default.createElement(Label, {
    className: "sendbird-message-input--placeholder",
    type: LabelTypography.BODY_1,
    color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3
  }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER), !isEdit && isInput && import_react7.default.createElement(IconButton, {
    className: "sendbird-message-input--send",
    height: "32px",
    width: "32px",
    onClick: () => sendMessage()
  }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || import_react7.default.createElement(Icon, {
    type: IconTypes.SEND,
    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,
    width: "20px",
    height: "20px"
  })), !isEdit && !isInput && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon()) || isFileUploadEnabled && import_react7.default.createElement(IconButton, {
    className: `sendbird-message-input--attach ${isVoiceMessageEnabled ? "is-voice-message-enabled" : ""}`,
    height: "32px",
    width: "32px",
    onClick: () => {
      var _fileInputRef$current, _fileInputRef$current2;
      fileInputRef === null || fileInputRef === void 0 || (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 || (_fileInputRef$current2 = _fileInputRef$current.click) === null || _fileInputRef$current2 === void 0 || _fileInputRef$current2.call(_fileInputRef$current);
    }
  }, import_react7.default.createElement(Icon, {
    type: IconTypes.ATTACH,
    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,
    width: "20px",
    height: "20px"
  }), import_react7.default.createElement("input", {
    className: "sendbird-message-input--attach-input",
    type: "file",
    ref: fileInputRef,
    onChange: (event) => {
      const {
        files
      } = event.currentTarget;
      onFileUpload(files && files.length === 1 ? [files[0]] : [...files]);
      event.target.value = "";
    },
    accept: getMimeTypesUIKitAccepts(acceptableMimeTypes),
    multiple: isSelectingMultipleFilesEnabled && isChannelTypeSupportsMultipleFilesMessage(channel)
  }))), isVoiceMessageEnabled && !isEdit && !isInput && import_react7.default.createElement(IconButton, {
    className: "sendbird-message-input--voice-message",
    width: "32px",
    height: "32px",
    onClick: onVoiceMessageIconClick
  }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || import_react7.default.createElement(Icon, {
    type: IconTypes.AUDIO_ON_LINED,
    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,
    width: "20px",
    height: "20px"
  }))), isEdit && import_react7.default.createElement("div", {
    className: "sendbird-message-input--edit-action"
  }, import_react7.default.createElement(Button, {
    className: "sendbird-message-input--edit-action__cancel",
    type: ButtonTypes.SECONDARY,
    size: ButtonSizes.SMALL,
    onClick: onCancelEdit
  }, stringSet.BUTTON__CANCEL), import_react7.default.createElement(Button, {
    className: "sendbird-message-input--edit-action__save",
    type: ButtonTypes.PRIMARY,
    size: ButtonSizes.SMALL,
    disabled: isEditDisabled,
    onClick: () => editMessage()
  }, stringSet.BUTTON__SAVE)));
});
MessageInput.propTypes = {
  className: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.arrayOf(import_prop_types5.default.string)]),
  isEdit: import_prop_types5.default.bool,
  isMentionEnabled: import_prop_types5.default.bool,
  isVoiceMessageEnabled: import_prop_types5.default.bool,
  isSelectingMultipleFilesEnabled: import_prop_types5.default.bool,
  disabled: import_prop_types5.default.bool,
  value: import_prop_types5.default.string,
  placeholder: import_prop_types5.default.string,
  maxLength: import_prop_types5.default.number,
  onFileUpload: import_prop_types5.default.func,
  onSendMessage: import_prop_types5.default.func,
  onUpdateMessage: import_prop_types5.default.func,
  onStartTyping: import_prop_types5.default.func,
  onCancelEdit: import_prop_types5.default.func,
  channelUrl: import_prop_types5.default.string,
  channel: import_prop_types5.default.shape({
    channelType: import_prop_types5.default.string
  }).isRequired,
  messageFieldId: import_prop_types5.default.string,
  acceptableMimeTypes: import_prop_types5.default.arrayOf(import_prop_types5.default.string),
  // Mention
  message: import_prop_types5.default.shape({
    messageId: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.number]),
    message: import_prop_types5.default.string,
    mentionedMessageTemplate: import_prop_types5.default.string,
    mentionedUsers: import_prop_types5.default.arrayOf(import_prop_types5.default.shape({}))
  }),
  setMentionedUsers: import_prop_types5.default.func,
  mentionSelectedUser: import_prop_types5.default.shape({
    userId: import_prop_types5.default.string,
    nickname: import_prop_types5.default.string
  }),
  onUserMentioned: import_prop_types5.default.func,
  onMentionStringChange: import_prop_types5.default.func,
  onMentionedUserIdsUpdated: import_prop_types5.default.func,
  onKeyUp: import_prop_types5.default.func,
  onKeyDown: import_prop_types5.default.func,
  // Voice Message
  onVoiceMessageIconClick: import_prop_types5.default.func,
  renderVoiceMessageIcon: import_prop_types5.default.func,
  renderSendMessageIcon: import_prop_types5.default.func,
  renderFileUploadIcon: import_prop_types5.default.func
};
MessageInput.defaultProps = {
  className: "",
  messageFieldId: "",
  channelUrl: "",
  onSendMessage: noop2,
  onUpdateMessage: noop2,
  value: null,
  message: null,
  isEdit: false,
  isMentionEnabled: false,
  isVoiceMessageEnabled: true,
  isSelectingMultipleFilesEnabled: false,
  onVoiceMessageIconClick: noop2,
  disabled: false,
  placeholder: "",
  maxLength: 5e3,
  onFileUpload: noop2,
  onCancelEdit: noop2,
  onStartTyping: noop2,
  mentionSelectedUser: null,
  onUserMentioned: noop2,
  onMentionStringChange: noop2,
  onMentionedUserIdsUpdated: noop2,
  onKeyUp: noop2,
  onKeyDown: noop2,
  setMentionedUsers: noop2,
  renderVoiceMessageIcon: noop2,
  renderFileUploadIcon: noop2,
  renderSendMessageIcon: noop2,
  acceptableMimeTypes: null
};

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_react35 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/MessageItemMenu.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/types-781e0bab.js
var Role = {
  OPERATOR: "operator",
  NONE: "none"
};

// node_modules/@sendbird/uikit-react/ui/MessageItemMenu.js
var import_react_dom = __toESM(require_react_dom(), 1);
var import_prop_types6 = __toESM(require_prop_types(), 1);
function MessageItemMenu(_a) {
  var _b;
  var className = _a.className, message = _a.message, channel = _a.channel, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, replyType = _a.replyType, _e = _a.disableDeleteMessage, disableDeleteMessage = _e === void 0 ? null : _e, showEdit = _a.showEdit, showRemove = _a.showRemove, resendMessage = _a.resendMessage, setQuoteMessage = _a.setQuoteMessage, setSupposedHover = _a.setSupposedHover, onReplyInThread = _a.onReplyInThread, _f = _a.onMoveToParentMessage, onMoveToParentMessage = _f === void 0 ? null : _f;
  var stringSet = (0, import_react8.useContext)(LocalizationContext).stringSet;
  var triggerRef = (0, import_react8.useRef)(null);
  var containerRef = (0, import_react8.useRef)(null);
  var channelStore = useChannelContext();
  var showMenuItemCopy = isUserMessage(message);
  var showMenuItemEdit = !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete = !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isPendingMessage(message) && isByMe;
  var showMenuItemOpenInChannel = onMoveToParentMessage !== null;
  var isReplyTypeEnabled = !isFailedMessage(message) && !isPendingMessage(message) && ((_b = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b === void 0 ? void 0 : _b.call(channel)) && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && ((channel === null || channel === void 0 ? void 0 : channel.isBroadcast) && (channel === null || channel === void 0 ? void 0 : channel.myRole) === Role.OPERATOR || !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var showMenuItemReply = isReplyTypeEnabled && replyType === "QUOTE_REPLY";
  var showMenuItemThread = isReplyTypeEnabled && replyType === "THREAD" && !(message === null || message === void 0 ? void 0 : message.parentMessageId) && onReplyInThread;
  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemThread || showMenuItemOpenInChannel || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {
    return null;
  }
  return import_react8.default.createElement("div", {
    className: getClassName([className, "sendbird-message-item-menu"]),
    ref: containerRef
  }, import_react8.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      return import_react8.default.createElement(IconButton, {
        className: "sendbird-message-item-menu__trigger",
        ref: triggerRef,
        width: "32px",
        height: "32px",
        onClick: function() {
          toggleDropdown();
          setSupposedHover(true);
        },
        onBlur: function() {
          setSupposedHover(false);
        }
      }, import_react8.default.createElement(Icon, {
        className: "sendbird-message-item-menu__trigger__icon",
        type: IconTypes.MORE,
        fillColor: IconColors.CONTENT_INVERSE,
        width: "24px",
        height: "24px"
      }));
    },
    menuItems: function(close) {
      var _a2;
      var closeDropdown = function() {
        close();
        setSupposedHover(false);
      };
      return import_react8.default.createElement(MenuItems, {
        className: "sendbird-message-item-menu__list",
        parentRef: triggerRef,
        parentContainRef: containerRef,
        closeDropdown,
        openLeft: isByMe
      }, showMenuItemCopy && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-copy",
        onClick: function() {
          copyToClipboard(message === null || message === void 0 ? void 0 : message.message);
          closeDropdown();
        },
        dataSbId: "ui_message_item_menu_copy"
      }, stringSet.MESSAGE_MENU__COPY), showMenuItemReply && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-reply",
        onClick: function() {
          setQuoteMessage(message);
          closeDropdown();
        },
        disable: (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0,
        dataSbId: "ui_message_item_menu_reply"
      }, stringSet.MESSAGE_MENU__REPLY), showMenuItemThread && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-thread",
        onClick: function() {
          onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
            message
          });
          closeDropdown();
        },
        dataSbId: "ui_message_item_menu_thread"
      }, stringSet.MESSAGE_MENU__THREAD), showMenuItemOpenInChannel && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-open-channel",
        onClick: function() {
          onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage();
          closeDropdown();
        },
        dataSbId: "ui_message_item_menu_open_in_channel"
      }, stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL), showMenuItemEdit && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-edit",
        onClick: function() {
          if (!disabled) {
            showEdit(true);
            closeDropdown();
          }
        },
        dataSbId: "ui_message_item_menu_edit"
      }, stringSet.MESSAGE_MENU__EDIT), showMenuItemResend && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-resend",
        onClick: function() {
          if (!disabled) {
            resendMessage(message);
            closeDropdown();
          }
        },
        dataSbId: "ui_message_item_menu_resend"
      }, stringSet.MESSAGE_MENU__RESEND), showMenuItemDelete && import_react8.default.createElement(MenuItem, {
        className: "sendbird-message-item-menu__list__menu-item menu-item-delete",
        onClick: function() {
          var _a3;
          if (isFailedMessage(message)) {
            (_a3 = channelStore === null || channelStore === void 0 ? void 0 : channelStore.deleteMessage) === null || _a3 === void 0 ? void 0 : _a3.call(channelStore, message);
          } else if (!disabled) {
            showRemove(true);
            closeDropdown();
          }
        },
        disable: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_a2 = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a2 === void 0 ? void 0 : _a2.replyCount) > 0,
        dataSbId: "ui_message_item_menu_delete"
      }, stringSet.MESSAGE_MENU__DELETE));
    }
  }));
}

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react10 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionButton.js
var import_react9 = __toESM(require_react(), 1);
var ReactionButton = import_react9.default.forwardRef(function(props, ref) {
  var className = props.className, width = props.width, height = props.height, selected = props.selected, _a = props.dataSbId, dataSbId = _a === void 0 ? "" : _a, onClick = props.onClick, children = props.children;
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react9.default.createElement("div", _extends({
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-reaction-button".concat(selected ? "--selected" : "")], false).join(" "),
    ref,
    role: "button",
    style: {
      width,
      height
    }
  }, onClickHandler, {
    tabIndex: 0,
    "data-sb-id": dataSbId
  }), import_react9.default.createElement("div", {
    className: "sendbird-reaction-button__inner"
  }, children));
});

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react_dom2 = __toESM(require_react_dom(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);
function MessageItemReactionMenu(_a) {
  var className = _a.className, message = _a.message, userId = _a.userId, _b = _a.spaceFromTrigger, spaceFromTrigger = _b === void 0 ? {
    x: 0,
    y: 0
  } : _b, emojiContainer = _a.emojiContainer, toggleReaction = _a.toggleReaction, setSupposedHover = _a.setSupposedHover;
  var triggerRef = (0, import_react10.useRef)(null);
  var containerRef = (0, import_react10.useRef)(null);
  if (isPendingMessage(message) || isFailedMessage(message)) {
    return null;
  }
  return import_react10.default.createElement("div", {
    className: getClassName([className, "sendbird-message-item-reaction-menu"]),
    ref: containerRef
  }, import_react10.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      return import_react10.default.createElement(IconButton, {
        className: "sendbird-message-item-reaction-menu__trigger",
        ref: triggerRef,
        width: "32px",
        height: "32px",
        onClick: function() {
          toggleDropdown();
          setSupposedHover(true);
        },
        onBlur: function() {
          setSupposedHover(false);
        }
      }, import_react10.default.createElement(Icon, {
        className: "sendbird-message-item-reaction-menu__trigger__icon",
        type: IconTypes.EMOJI_MORE,
        fillColor: IconColors.CONTENT_INVERSE,
        width: "24px",
        height: "24px"
      }));
    },
    menuItems: function(close) {
      var closeDropdown = function() {
        close();
        setSupposedHover(false);
      };
      return import_react10.default.createElement(EmojiListItems, {
        parentRef: triggerRef,
        parentContainRef: containerRef,
        closeDropdown,
        spaceFromTrigger
      }, getEmojiListAll(emojiContainer).map(function(emoji) {
        var _a2, _b2, _c;
        var isReacted = (_c = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.filter(function(reaction) {
          return reaction.key === emoji.key;
        })[0]) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
          return reactorId === userId;
        });
        return import_react10.default.createElement(ReactionButton, {
          key: emoji.key,
          width: "36px",
          height: "36px",
          selected: isReacted,
          onClick: function() {
            closeDropdown();
            toggleReaction(message, emoji.key, isReacted);
          },
          dataSbId: "ui_emoji_reactions_menu_".concat(emoji.key)
        }, import_react10.default.createElement(ImageRenderer, {
          url: emoji.url,
          width: "28px",
          height: "28px",
          placeHolder: function(style) {
            return import_react10.default.createElement("div", {
              style
            }, import_react10.default.createElement(Icon, {
              type: IconTypes.QUESTION,
              fillColor: IconColors.ON_BACKGROUND_3,
              width: "28px",
              height: "28px"
            }));
          }
        }));
      }));
    }
  }));
}

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_react16 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionBadge.js
var import_react11 = __toESM(require_react(), 1);
var import_prop_types8 = __toESM(require_prop_types(), 1);
var ReactionBadge = import_react11.default.forwardRef(function(props, ref) {
  var _a = props.className, className = _a === void 0 ? "" : _a, children = props.children, _b = props.count, count = _b === void 0 ? "" : _b, _c = props.isAdd, isAdd = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, _e = props.onClick, onClick = _e === void 0 ? function() {
  } : _e;
  var getClassNameTail = function() {
    if (selected && !isAdd) {
      return "--selected";
    }
    if (isAdd) {
      return "--is-add";
    }
    return "";
  };
  return import_react11.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-reaction-badge".concat(getClassNameTail())], false).join(" "),
    role: "button",
    ref,
    onClick,
    onKeyDown: onClick,
    onTouchEnd: onClick,
    tabIndex: 0
  }, import_react11.default.createElement("div", {
    className: "sendbird-reaction-badge__inner"
  }, import_react11.default.createElement("div", {
    className: "sendbird-reaction-badge__inner__icon"
  }, children), import_react11.default.createElement(Label, {
    className: children && count && "sendbird-reaction-badge__inner__count",
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_1
  }, count)));
});

// node_modules/@sendbird/uikit-react/ui/BottomSheet.js
var import_react12 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);
var BottomSheet = function(props) {
  var _a = props.className, className = _a === void 0 ? "" : _a, children = props.children, onBackdropClick = props.onBackdropClick;
  var portalRoot = (0, import_react12.useRef)();
  portalRoot.current = document.getElementById(MODAL_ROOT);
  if (!portalRoot.current) {
    portalRoot.current = document.createElement("div");
    portalRoot.current.setAttribute("id", MODAL_ROOT);
    document.body.appendChild(portalRoot.current);
  }
  return (0, import_react_dom3.createPortal)(import_react12.default.createElement("div", {
    className: "".concat(className, " sendbird-bottomsheet")
  }, import_react12.default.createElement("div", {
    className: "sendbird-bottomsheet__content",
    role: "dialog",
    "aria-modal": "true",
    "aria-expanded": "true"
  }, children), import_react12.default.createElement("div", {
    className: "\n          sendbird-bottomsheet__backdrop\n        ",
    onClick: function(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      onBackdropClick();
    }
  })), portalRoot.current);
};

// node_modules/@sendbird/uikit-react/ui/Tooltip.js
var import_react13 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);
function Tooltip(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.children, children = _c === void 0 ? "" : _c;
  return import_react13.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-tooltip"], false).join(" ")
  }, import_react13.default.createElement(Label, {
    className: "sendbird-tooltip__text",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONCONTENT_1
  }, children));
}

// node_modules/@sendbird/uikit-react/ui/TooltipWrapper.js
var import_react14 = __toESM(require_react(), 1);
var SPACE_FROM_TRIGGER = 8;
function TooltipWrapper(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, children = _a.children, hoverTooltip = _a.hoverTooltip;
  var _c = (0, import_react14.useState)(false), showHoverTooltip = _c[0], setShowHoverTooltip = _c[1];
  var childrenRef = (0, import_react14.useRef)(null);
  return import_react14.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-tooltip-wrapper"], false).join(" "),
    onMouseOver: function() {
      setShowHoverTooltip(true);
    },
    onFocus: function() {
      setShowHoverTooltip(true);
    },
    onMouseOut: function() {
      setShowHoverTooltip(false);
    },
    onBlur: function() {
      setShowHoverTooltip(false);
    }
  }, import_react14.default.createElement("div", {
    className: "sendbird-tooltip-wrapper__children",
    ref: childrenRef
  }, children), showHoverTooltip && import_react14.default.createElement("div", {
    className: "sendbird-tooltip-wrapper__hover-tooltip",
    style: {
      bottom: "calc(100% + ".concat(SPACE_FROM_TRIGGER, "px)")
    }
  }, import_react14.default.createElement("div", {
    className: "sendbird-tooltip-wrapper__hover-tooltip__inner"
  }, import_react14.default.createElement("div", {
    className: "sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container",
    style: {
      left: childrenRef.current && "calc(".concat(childrenRef.current.offsetWidth / 2, "px - 50%)")
    }
  }, hoverTooltip))));
}

// node_modules/@sendbird/uikit-react/Message/context.js
var import_react15 = __toESM(require_react(), 1);
var defaultValue = {
  message: {},
  isByMe: false
};
var MessageContext = import_react15.default.createContext(defaultValue);
var MessageProvider = function(props) {
  var children = props.children, message = props.message, _a = props.isByMe, isByMe = _a === void 0 ? false : _a;
  return import_react15.default.createElement(MessageContext.Provider, {
    value: {
      message,
      isByMe
    }
  }, children);
};
var useMessageContext = function() {
  var value = import_react15.default.useContext(MessageContext);
  if (value === void 0) {
    throw new Error("useMessageContext must be used within a MessageProvider");
  }
  return value;
};

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_prop_types11 = __toESM(require_prop_types(), 1);
var import_react_dom4 = __toESM(require_react_dom(), 1);
var ReactedMembersBottomSheet = function(_a) {
  var _b, _c, _d;
  var message = _a.message, channel = _a.channel, _e = _a.emojiKey, emojiKey = _e === void 0 ? "" : _e, hideMenu = _a.hideMenu, emojiContainer = _a.emojiContainer, onPressUserProfileHandler = _a.onPressUserProfileHandler;
  var _f = channel.members, members = _f === void 0 ? [] : _f;
  var _g = (0, import_react16.useState)(emojiKey), selectedEmoji = _g[0], setSelectedEmoji = _g[1];
  function onPressUserProfileCallBack() {
    if (onPressUserProfileHandler && message) {
      var sender = message === null || message === void 0 ? void 0 : message.sender;
      onPressUserProfileHandler(sender);
    }
  }
  return import_react16.default.createElement(BottomSheet, {
    onBackdropClick: hideMenu
  }, import_react16.default.createElement("div", {
    className: "sendbird-message__bottomsheet"
  }, import_react16.default.createElement("div", {
    className: "sendbird-message__bottomsheet__reacted-members"
  }, (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.map(function(reaction) {
    var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);
    return import_react16.default.createElement("div", {
      key: reaction.key,
      className: "\n                  sendbird-message__bottomsheet__reacted-members__item\n                  ".concat(selectedEmoji === reaction.key ? "sendbird-message__bottomsheet__reacted-members__item__selected" : "", "\n                "),
      onClick: function() {
        setSelectedEmoji(reaction.key);
      }
    }, import_react16.default.createElement(ImageRenderer, {
      url: emojiUrl,
      width: "28px",
      height: "28px",
      placeHolder: function(style) {
        return import_react16.default.createElement("div", {
          style
        }, import_react16.default.createElement(Icon, {
          type: IconTypes.QUESTION,
          fillColor: IconColors.ON_BACKGROUND_3,
          width: "28px",
          height: "28px"
        }));
      }
    }), import_react16.default.createElement(Label, {
      type: LabelTypography.BUTTON_2,
      color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3
    }, reaction.userIds.length));
  })), import_react16.default.createElement(
    "div",
    {
      className: "sendbird-message__bottomsheet__reactor-list"
    },
    // making a member list who reacted to the message with the `selectedEmoji`
    ((_d = (_c = message.reactions) === null || _c === void 0 ? void 0 : _c.find(function(reaction) {
      return reaction.key === selectedEmoji;
    })) === null || _d === void 0 ? void 0 : _d.userIds.map(function(userId) {
      return members.find(function(member) {
        return member.userId === userId;
      });
    }).filter(function(member) {
      return member !== void 0;
    })).map(function(member) {
      return import_react16.default.createElement(UserListItem, {
        key: member.userId,
        className: "sendbird-message__bottomsheet__reactor-list__item",
        user: member,
        avatarSize: "36px",
        onClick: onPressUserProfileCallBack
      });
    })
  )));
};
function ReactionItem(_a) {
  var _b;
  var reaction = _a.reaction, memberNicknamesMap = _a.memberNicknamesMap, setEmojiKey = _a.setEmojiKey, toggleReaction = _a.toggleReaction, emojisMap = _a.emojisMap, channel = _a.channel;
  var store = useSendbirdStateContext();
  var isMobile = useMediaQueryContext().isMobile;
  var messageStore = useMessageContext();
  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;
  var stringSet = (0, import_react16.useContext)(LocalizationContext).stringSet;
  var userId = store.config.userId;
  var reactedByMe = isReactedBy(userId, reaction);
  var showHoverTooltip = reaction.userIds.length > 0 && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !channel.isSuper;
  var handleOnClick = function() {
    setEmojiKey("");
    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, reaction.key, reactedByMe);
  };
  var longPress = useLongPress({
    onLongPress: function() {
      setEmojiKey(reaction.key);
    },
    onClick: handleOnClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react16.default.createElement(TooltipWrapper, {
    className: "sendbird-emoji-reactions__reaction-badge",
    hoverTooltip: showHoverTooltip ? import_react16.default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)) : import_react16.default.createElement(import_react16.default.Fragment, null)
  }, import_react16.default.createElement("div", isMobile ? longPress : {
    onClick: handleOnClick
  }, import_react16.default.createElement(ReactionBadge, {
    count: reaction.userIds.length,
    selected: reactedByMe
  }, import_react16.default.createElement(ImageRenderer, {
    circle: true,
    url: ((_b = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b === void 0 ? void 0 : _b.url) || "",
    width: "20px",
    height: "20px",
    defaultComponent: import_react16.default.createElement(Icon, {
      width: "20px",
      height: "20px",
      type: IconTypes.QUESTION
    })
  }))));
}
var AddReactionBadgeItem = function(_a) {
  var onClick = _a.onClick;
  var onlyClick = useLongPress({
    onLongPress: function() {
    },
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react16.default.createElement("div", _extends({
    className: "sendbird-emoji-reactions__add-reaction-badge"
  }, onlyClick), import_react16.default.createElement(ReactionBadge, {
    isAdd: true
  }, import_react16.default.createElement(Icon, {
    type: IconTypes.EMOJI_MORE,
    fillColor: IconColors.ON_BACKGROUND_3,
    width: "20px",
    height: "20px"
  })));
};
var MobileEmojisBottomSheet = function(_a) {
  var userId = _a.userId, message = _a.message, emojiContainer = _a.emojiContainer, hideMenu = _a.hideMenu, toggleReaction = _a.toggleReaction;
  var emojiAllList = (0, import_react16.useMemo)(function() {
    return getEmojiListAll(emojiContainer);
  }, [emojiContainer]);
  return import_react16.default.createElement(BottomSheet, {
    onBackdropClick: hideMenu
  }, import_react16.default.createElement("div", {
    className: "sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet"
  }, emojiAllList.map(function(emoji) {
    var _a2, _b, _c, _d;
    var isReacted = (_d = (_c = (_b = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.find(function(reaction) {
      return reaction.key === emoji.key;
    })) === null || _b === void 0 ? void 0 : _b.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
      return reactorId === userId;
    })) !== null && _d !== void 0 ? _d : false;
    return import_react16.default.createElement(ReactionButton, {
      key: emoji.key,
      width: "44px",
      height: "44px",
      selected: isReacted,
      onClick: function(e) {
        e === null || e === void 0 ? void 0 : e.stopPropagation();
        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
        hideMenu();
      },
      dataSbId: "ui_mobile_emoji_reactions_menu_".concat(emoji.key)
    }, import_react16.default.createElement(ImageRenderer, {
      url: emoji.url,
      width: "38px",
      height: "38px",
      placeHolder: function(style) {
        return import_react16.default.createElement("div", {
          style
        }, import_react16.default.createElement(Icon, {
          type: IconTypes.QUESTION,
          fillColor: IconColors.ON_BACKGROUND_3,
          width: "28px",
          height: "28px"
        }));
      }
    }));
  })));
};
var EmojiReactions = function(_a) {
  var _b, _c, _d, _e, _f;
  var _g = _a.className, className = _g === void 0 ? "" : _g, userId = _a.userId, message = _a.message, channel = _a.channel, emojiContainer = _a.emojiContainer, memberNicknamesMap = _a.memberNicknamesMap, _h = _a.spaceFromTrigger, spaceFromTrigger = _h === void 0 ? {
    x: 0,
    y: 0
  } : _h, _j = _a.isByMe, isByMe = _j === void 0 ? false : _j, toggleReaction = _a.toggleReaction, onPressUserProfile = _a.onPressUserProfile;
  var isMobile = useMediaQueryContext().isMobile;
  var addReactionRef = (0, import_react16.useRef)(null);
  var _k = (0, import_react16.useState)(false), showEmojiList = _k[0], setShowEmojiList = _k[1];
  var _l = (0, import_react16.useState)(""), selectedEmojiKey = _l[0], setSelectedEmojiKey = _l[1];
  var emojisMap = getEmojiMapAll(emojiContainer);
  var showAddReactionBadge = ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) < emojisMap.size;
  return import_react16.default.createElement("div", {
    className: getClassName([className, "sendbird-emoji-reactions", isByMe ? "outgoing" : "incoming"])
  }, ((_e = (_d = message.reactions) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) > 0 && ((_f = message.reactions) === null || _f === void 0 ? void 0 : _f.map(function(reaction) {
    return import_react16.default.createElement(ReactionItem, {
      key: reaction === null || reaction === void 0 ? void 0 : reaction.key,
      reaction,
      memberNicknamesMap,
      setEmojiKey: setSelectedEmojiKey,
      toggleReaction,
      emojisMap,
      channel
    });
  })), !isMobile && showAddReactionBadge && import_react16.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      return import_react16.default.createElement(ReactionBadge, {
        className: "sendbird-emoji-reactions__add-reaction-badge",
        ref: addReactionRef,
        isAdd: true,
        onClick: function(e) {
          var _a2;
          toggleDropdown();
          (_a2 = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a2 === void 0 ? void 0 : _a2.call(e);
        }
      }, import_react16.default.createElement(Icon, {
        type: IconTypes.EMOJI_MORE,
        fillColor: IconColors.ON_BACKGROUND_3,
        width: "20px",
        height: "20px"
      }));
    },
    menuItems: function(closeDropdown) {
      return import_react16.default.createElement(EmojiListItems, {
        parentRef: addReactionRef,
        parentContainRef: addReactionRef,
        closeDropdown,
        spaceFromTrigger
      }, getEmojiListAll(emojiContainer).map(function(emoji) {
        var _a2, _b2, _c2;
        var isReacted = ((_c2 = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.find(function(reaction) {
          return reaction.key === emoji.key;
        })) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
          return reactorId === userId;
        })) || false;
        return import_react16.default.createElement(ReactionButton, {
          key: emoji.key,
          width: "36px",
          height: "36px",
          selected: isReacted,
          onClick: function(e) {
            closeDropdown();
            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
            e === null || e === void 0 ? void 0 : e.stopPropagation();
          },
          dataSbId: "ui_emoji_reactions_menu_".concat(emoji.key)
        }, import_react16.default.createElement(ImageRenderer, {
          url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "",
          width: "28px",
          height: "28px",
          placeHolder: function(style) {
            return import_react16.default.createElement("div", {
              style
            }, import_react16.default.createElement(Icon, {
              type: IconTypes.QUESTION,
              fillColor: IconColors.ON_BACKGROUND_3,
              width: "28px",
              height: "28px"
            }));
          }
        }));
      }));
    }
  }), isMobile && showAddReactionBadge && import_react16.default.createElement(AddReactionBadgeItem, {
    onClick: function() {
      setShowEmojiList(true);
    }
  }), isMobile && showEmojiList && import_react16.default.createElement(MobileEmojisBottomSheet, {
    userId,
    message,
    emojiContainer,
    hideMenu: function() {
      setShowEmojiList(false);
    },
    toggleReaction
  }), isMobile && selectedEmojiKey && channel !== null && import_react16.default.createElement(ReactedMembersBottomSheet, {
    message,
    channel,
    emojiKey: selectedEmojiKey,
    hideMenu: function() {
      setSelectedEmojiKey("");
    },
    emojiContainer,
    onPressUserProfileHandler: onPressUserProfile
  }));
};

// node_modules/@sendbird/uikit-react/ui/AdminMessage.js
var import_react17 = __toESM(require_react(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);
function AdminMessage(_a) {
  var _b;
  var _c = _a.className, className = _c === void 0 ? "" : _c, message = _a.message;
  if (!((message === null || message === void 0 ? void 0 : message.isAdminMessage) || (message === null || message === void 0 ? void 0 : message.messageType)) || !((_b = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b === void 0 ? void 0 : _b.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
    return null;
  }
  return import_react17.default.createElement("div", {
    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ["sendbird-admin-message"], false).join(" ")
  }, import_react17.default.createElement(Label, {
    className: "sendbird-admin-message__text",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, message === null || message === void 0 ? void 0 : message.message));
}

// node_modules/@sendbird/uikit-react/ui/TextMessageItemBody.js
var import_react21 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/index-a0638563.js
var import_react20 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/MentionLabel.js
var import_react18 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var import_prop_types13 = __toESM(require_prop_types(), 1);
function MentionLabel(props) {
  var _a, _b, _c;
  var mentionTemplate = props.mentionTemplate, mentionedUserId = props.mentionedUserId, mentionedUserNickname = props.mentionedUserNickname, isByMe = props.isByMe;
  var mentionRef = (0, import_react18.useRef)();
  var sendbirdState = useSendbirdStateContext();
  var userId = (_a = sendbirdState === null || sendbirdState === void 0 ? void 0 : sendbirdState.config) === null || _a === void 0 ? void 0 : _a.userId;
  var sdk = (_c = (_b = sendbirdState === null || sendbirdState === void 0 ? void 0 : sendbirdState.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var amIBeingMentioned = userId === mentionedUserId;
  var _d = (0, import_react18.useState)(), user = _d[0], setUser = _d[1];
  var fetchUser = (0, import_react18.useCallback)(function(toggleDropdown) {
    if (user || !(sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery)) {
      toggleDropdown();
      return;
    }
    var query = sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery({
      userIdsFilter: [mentionedUserId]
    });
    query.next().then(function(members) {
      if ((members === null || members === void 0 ? void 0 : members.length) > 0) {
        setUser(members[0]);
      }
      toggleDropdown();
    });
  }, [sdk, mentionedUserId]);
  return import_react18.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      return import_react18.default.createElement("a", {
        className: "\n            sendbird-word__mention\n            ".concat(amIBeingMentioned ? "sendbird-word__mention--me" : "", "\n          "),
        onClick: function() {
          return fetchUser(toggleDropdown);
        },
        ref: mentionRef,
        "data-userid": mentionedUserId,
        "data-nickname": mentionedUserNickname,
        "data-sb-mention": true
      }, import_react18.default.createElement(Label, {
        type: LabelTypography.CAPTION_1,
        color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
      }, "".concat(mentionTemplate).concat(mentionedUserNickname)));
    },
    menuItems: function(closeDropdown) {
      return import_react18.default.createElement(
        MenuItems,
        {
          parentRef: mentionRef,
          parentContainRef: mentionRef,
          closeDropdown,
          style: {
            paddingTop: "0px",
            paddingBottom: "0px"
          }
        },
        import_react18.default.createElement(UserProfile, {
          user,
          onSuccess: closeDropdown,
          currentUserId: userId
        })
      );
    }
  });
}

// node_modules/@sendbird/uikit-react/ui/LinkLabel.js
var import_react19 = __toESM(require_react(), 1);
var import_prop_types14 = __toESM(require_prop_types(), 1);
var http = /https?:\/\//;
function LinkLabel(_ref) {
  let {
    className,
    src,
    type,
    color,
    children
  } = _ref;
  const url = http.test(src) ? src : `http://${src}`;
  return import_react19.default.createElement("a", {
    className: [...Array.isArray(className) ? className : [className], "sendbird-link-label", color ? changeColorToClassName(color) : ""].join(" "),
    href: url,
    target: "_blank",
    rel: "noopener noreferrer",
    onTouchEnd: (e) => {
      e.preventDefault();
      e.nativeEvent.stopImmediatePropagation();
      window.open(url, "_blank", "noopener,noreferrer");
    }
  }, import_react19.default.createElement(Label, {
    className: "sendbird-link-label__label",
    type,
    color
  }, children));
}
LinkLabel.propTypes = {
  className: import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.arrayOf(import_prop_types14.default.string)]),
  src: import_prop_types14.default.string.isRequired,
  type: import_prop_types14.default.string,
  color: import_prop_types14.default.string,
  children: import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.element, import_prop_types14.default.arrayOf(import_prop_types14.default.string), import_prop_types14.default.arrayOf(import_prop_types14.default.element)]).isRequired
};
LinkLabel.defaultProps = {
  className: "",
  type: "",
  color: ""
};

// node_modules/@sendbird/uikit-react/index-a0638563.js
function keyGenerator(createdAt, messageUpdatedAt, index) {
  return "sb-msg_".concat(createdAt, "_").concat(messageUpdatedAt, "_").concat(index);
}
function TextFragment(_a) {
  var tokens = _a.tokens;
  var messageStore = useMessageContext();
  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;
  var isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;
  var updatedAt = message.updatedAt, createdAt = message.createdAt;
  return import_react20.default.createElement(import_react20.default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map(function(token, idx) {
    var key = keyGenerator(createdAt, updatedAt, idx);
    return K(token.type).with(TOKEN_TYPES.mention, function() {
      return import_react20.default.createElement("span", {
        className: "sendbird-word",
        key
      }, import_react20.default.createElement(MentionLabel, {
        mentionTemplate: USER_MENTION_PREFIX,
        mentionedUserId: token.userId,
        mentionedUserNickname: token.value,
        isByMe
      }));
    }).with(TOKEN_TYPES.url, function() {
      return import_react20.default.createElement("span", {
        className: "sendbird-word",
        key
      }, import_react20.default.createElement(LinkLabel, {
        className: "sendbird-word__url",
        src: token.value,
        type: LabelTypography.BODY_1
      }, token.value));
    }).otherwise(function() {
      return import_react20.default.createElement(import_react20.default.Fragment, {
        key
      }, getWhiteSpacePreservedText(token.value));
    });
  }));
}

// node_modules/@sendbird/uikit-react/ui/TextMessageItemBody.js
var import_prop_types15 = __toESM(require_prop_types(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
function TextMessageItemBody(_a) {
  var _b, _c, _d;
  var _e = _a.className, className = _e === void 0 ? "" : _e, message = _a.message, _f = _a.isByMe, isByMe = _f === void 0 ? false : _f, _g = _a.mouseHover, mouseHover = _g === void 0 ? false : _g, _h = _a.isMentionEnabled, isMentionEnabled = _h === void 0 ? false : _h, _j = _a.isReactionEnabled, isReactionEnabled = _j === void 0 ? false : _j;
  var stringSet = (0, import_react21.useContext)(LocalizationContext).stringSet;
  var isMessageMentioned = isMentionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _b === void 0 ? void 0 : _b.length) > 0 && ((_c = message === null || message === void 0 ? void 0 : message.mentionedUsers) === null || _c === void 0 ? void 0 : _c.length) > 0;
  var tokens = (0, import_react21.useMemo)(function() {
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: message === null || message === void 0 ? void 0 : message.mentionedUsers,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
  return import_react21.default.createElement(Label, {
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
  }, import_react21.default.createElement("div", {
    className: getClassName([className, TEXT_MESSAGE_BODY_CLASSNAME, isByMe ? "outgoing" : "incoming", mouseHover ? "mouse-hover" : "", isReactionEnabled && ((_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length) > 0 ? "reactions" : ""])
  }, import_react21.default.createElement(TextFragment, {
    tokens
  }), isEditedMessage(message) && import_react21.default.createElement(Label, {
    className: "sendbird-text-message-item-body__message edited",
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2
  }, " ".concat(stringSet.MESSAGE_EDITED, " "))));
}

// node_modules/@sendbird/uikit-react/ui/FileMessageItemBody.js
var import_react22 = __toESM(require_react(), 1);
var import_prop_types16 = __toESM(require_prop_types(), 1);
function FileMessageItemBody(_a) {
  var _b;
  var className = _a.className, message = _a.message, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.mouseHover, mouseHover = _d === void 0 ? false : _d, _e = _a.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e, _f = _a.truncateLimit, truncateLimit = _f === void 0 ? null : _f;
  var isMobile = useMediaQueryContext().isMobile;
  var truncateMaxNum = truncateLimit || (isMobile ? 20 : null);
  return import_react22.default.createElement("div", {
    className: getClassName([className, "sendbird-file-message-item-body", isByMe ? "outgoing" : "incoming", mouseHover ? "mouse-hover" : "", isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""])
  }, import_react22.default.createElement("div", {
    className: "sendbird-file-message-item-body__file-icon"
  }, import_react22.default.createElement(Icon, {
    className: "sendbird-file-message-item-body__file-icon__icon",
    type: {
      IMAGE: IconTypes.PHOTO,
      VIDEO: IconTypes.PLAY,
      AUDIO: IconTypes.FILE_AUDIO,
      GIF: IconTypes.GIF,
      OTHERS: IconTypes.FILE_DOCUMENT
    }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)],
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  })), import_react22.default.createElement(TextButton, {
    className: "sendbird-file-message-item-body__file-name",
    onClick: function() {
      window.open(message === null || message === void 0 ? void 0 : message.url);
    },
    color: isByMe ? Colors.ONCONTENT_1 : Colors.ONBACKGROUND_1
  }, import_react22.default.createElement(Label, {
    className: "sendbird-file-message-item-body__file-name__text",
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
  }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), truncateMaxNum))));
}

// node_modules/@sendbird/uikit-react/ui/ThumbnailMessageItemBody.js
var import_react23 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/utils-bfc0ab3b.js
function getMessageFirstFileType(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.type) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.mimeType) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getFirstFileInfo(message) {
  var fileInfoList = message.fileInfoList;
  return fileInfoList.length > 0 ? fileInfoList[0] : null;
}
function getMessageFirstFileName(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.name) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.fileName) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileUrl(message) {
  return K(message).when(isFileMessage, function() {
    var _a;
    return (_a = message === null || message === void 0 ? void 0 : message.url) !== null && _a !== void 0 ? _a : "";
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.url) !== null && _b !== void 0 ? _b : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileThumbnails(message) {
  return K(message).when(isFileMessage, function() {
    return message.thumbnails;
  }).when(isMultipleFilesMessage, function() {
    var _a, _b;
    return (_b = (_a = getFirstFileInfo(message)) === null || _a === void 0 ? void 0 : _a.thumbnails) !== null && _b !== void 0 ? _b : [];
  }).otherwise(function() {
    return [];
  });
}
function getMessageFirstFileThumbnailUrl(message) {
  var thumbnails = getMessageFirstFileThumbnails(message);
  return thumbnails && thumbnails.length > 0 ? thumbnails[0].url : "";
}

// node_modules/@sendbird/uikit-react/ui/ThumbnailMessageItemBody.js
var import_prop_types17 = __toESM(require_prop_types(), 1);
function ThumbnailMessageItemBody(_a) {
  var _b, _c;
  var _d = _a.className, className = _d === void 0 ? "" : _d, message = _a.message, _e = _a.isByMe, isByMe = _e === void 0 ? false : _e, _f = _a.mouseHover, mouseHover = _f === void 0 ? false : _f, _g = _a.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a.showFileViewer, showFileViewer = _h === void 0 ? noop : _h, _j = _a.style, style = _j === void 0 ? {} : _j;
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  var _k = (0, import_react23.useState)(false), imageRendered = _k[0], setImageRendered = _k[1];
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick: function() {
      if (isSentMessage(message)) {
        showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);
      }
    }
  });
  return import_react23.default.createElement("div", _extends({
    className: getClassName([className, "sendbird-thumbnail-message-item-body", isByMe ? "outgoing" : "incoming", mouseHover ? "mouse-hover" : "", isReactionEnabled && ((_c = (_b = message.reactions) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) > 0 ? "reactions" : ""])
  }, onClickHandler), import_react23.default.createElement(ImageRenderer, {
    className: "sendbird-thumbnail-message-item-body__thumbnail",
    url: thumbnailUrl || getMessageFirstFileUrl(message),
    alt: getMessageFirstFileType(message),
    width: (style === null || style === void 0 ? void 0 : style.width) || "360px",
    height: (style === null || style === void 0 ? void 0 : style.height) || "270px",
    onLoad: function() {
      setImageRendered(true);
    },
    placeHolder: function(style_) {
      return import_react23.default.createElement("div", {
        className: "sendbird-thumbnail-message-item-body__placeholder",
        style: style_
      });
    }
  }), isVideoMessage(message) && !thumbnailUrl && !imageRendered && import_react23.default.createElement("video", {
    className: "sendbird-thumbnail-message-item-body__video"
  }, import_react23.default.createElement("source", {
    src: getMessageFirstFileUrl(message),
    type: getMessageFirstFileType(message)
  })), import_react23.default.createElement("div", {
    className: "sendbird-thumbnail-message-item-body__image-cover"
  }), (isVideoMessage(message) || isGifMessage(message)) && import_react23.default.createElement("div", {
    className: "sendbird-thumbnail-message-item-body__icon-wrapper"
  }, import_react23.default.createElement("div", {
    className: "sendbird-thumbnail-message-item-body__icon-wrapper__icon"
  }, import_react23.default.createElement(Icon, {
    type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF,
    fillColor: IconColors.THUMBNAIL_ICON,
    width: "34px",
    height: "34px"
  }))));
}

// node_modules/@sendbird/uikit-react/ui/OGMessageItemBody.js
var import_react24 = __toESM(require_react(), 1);
var import_prop_types18 = __toESM(require_prop_types(), 1);
var import_react_dom7 = __toESM(require_react_dom(), 1);
function OGMessageItemBody(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var className = _a.className, message = _a.message, _p = _a.isByMe, isByMe = _p === void 0 ? false : _p, _q = _a.mouseHover, mouseHover = _q === void 0 ? false : _q, _r = _a.isMentionEnabled, isMentionEnabled = _r === void 0 ? false : _r, _s = _a.isReactionEnabled, isReactionEnabled = _s === void 0 ? false : _s, _t = _a.onMessageHeightChange, onMessageHeightChange = _t === void 0 ? function() {
  } : _t;
  var imageRef = (0, import_react24.useRef)(null);
  var stringSet = (0, import_react24.useContext)(LocalizationContext).stringSet;
  var openOGUrl = function() {
    var _a2, _b2;
    if ((_a2 = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _a2 === void 0 ? void 0 : _a2.url)
      window.open((_b2 = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _b2 === void 0 ? void 0 : _b2.url);
  };
  var isMessageMentioned = isMentionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _b === void 0 ? void 0 : _b.length) > 0 && ((_c = message === null || message === void 0 ? void 0 : message.mentionedUsers) === null || _c === void 0 ? void 0 : _c.length) > 0;
  var tokens = (0, import_react24.useMemo)(function() {
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: message === null || message === void 0 ? void 0 : message.mentionedUsers,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
  return import_react24.default.createElement("div", {
    className: getClassName([className, "sendbird-og-message-item-body", isByMe ? "outgoing" : "incoming", mouseHover ? "mouse-hover" : "", isReactionEnabled && ((_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length) > 0 ? "reactions" : ""])
  }, import_react24.default.createElement(Label, {
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
  }, import_react24.default.createElement("div", {
    className: OG_MESSAGE_BODY_CLASSNAME
  }, import_react24.default.createElement(TextFragment, {
    tokens
  }), isEditedMessage(message) && import_react24.default.createElement(Label, {
    className: "sendbird-og-message-item-body__text-bubble__message",
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2
  }, " ".concat(stringSet.MESSAGE_EDITED, " ")))), import_react24.default.createElement("div", {
    ref: imageRef,
    className: "sendbird-og-message-item-body__og-thumbnail\n          ".concat(((_f = (_e = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _e === void 0 ? void 0 : _e.defaultImage) === null || _f === void 0 ? void 0 : _f.url) ? "" : "sendbird-og-message-item-body__og-thumbnail__empty", "\n        "),
    onClick: openOGUrl
  }, import_react24.default.createElement(ImageRenderer, {
    onLoad: onMessageHeightChange,
    onError: function() {
      var _a2, _b2;
      try {
        (_b2 = (_a2 = imageRef === null || imageRef === void 0 ? void 0 : imageRef.current) === null || _a2 === void 0 ? void 0 : _a2.classList) === null || _b2 === void 0 ? void 0 : _b2.add("sendbird-og-message-item-body__og-thumbnail__empty");
      } catch (error) {
      }
    },
    className: "sendbird-og-message-item-body__og-thumbnail__image",
    url: ((_h = (_g = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _g === void 0 ? void 0 : _g.defaultImage) === null || _h === void 0 ? void 0 : _h.url) || "",
    alt: (_k = (_j = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _j === void 0 ? void 0 : _j.defaultImage) === null || _k === void 0 ? void 0 : _k.alt,
    defaultComponent: import_react24.default.createElement("div", {
      className: "sendbird-og-message-item-body__og-thumbnail__place-holder"
    }, import_react24.default.createElement(Icon, {
      className: "sendbird-og-message-item-body__og-thumbnail__place-holder__icon",
      type: IconTypes.THUMBNAIL_NONE,
      width: "56px",
      height: "56px"
    }))
  })), import_react24.default.createElement("div", {
    className: "sendbird-og-message-item-body__description",
    onClick: openOGUrl
  }, ((_l = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _l === void 0 ? void 0 : _l.title) && import_react24.default.createElement(Label, {
    className: "sendbird-og-message-item-body__description__title",
    type: LabelTypography.SUBTITLE_2,
    color: LabelColors.ONBACKGROUND_1
  }, message.ogMetaData.title), ((_m = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _m === void 0 ? void 0 : _m.description) && import_react24.default.createElement(Label, {
    className: "sendbird-og-message-item-body__description__description",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_1
  }, message.ogMetaData.description), ((_o = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _o === void 0 ? void 0 : _o.url) && import_react24.default.createElement(Label, {
    className: "sendbird-og-message-item-body__description__url",
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_2
  }, message.ogMetaData.url)), import_react24.default.createElement("div", {
    className: "sendbird-og-message-item-body__cover"
  }));
}

// node_modules/@sendbird/uikit-react/ui/UnknownMessageItemBody.js
var import_react25 = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);
function UnknownMessageItemBody(_a) {
  var _b;
  var className = _a.className, message = _a.message, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.mouseHover, mouseHover = _d === void 0 ? false : _d, _e = _a.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e;
  var stringSet = (0, import_react25.useContext)(LocalizationContext).stringSet;
  return import_react25.default.createElement("div", {
    className: getClassName([className, "sendbird-unknown-message-item-body", isByMe ? "outgoing" : "incoming", mouseHover ? "mouse-hover" : "", isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""])
  }, import_react25.default.createElement(Label, {
    className: "sendbird-unknown-message-item-body__header",
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
  }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE), import_react25.default.createElement(Label, {
    className: "sendbird-unknown-message-item-body__description",
    type: LabelTypography.BODY_1,
    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2
  }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE));
}

// node_modules/@sendbird/uikit-react/ui/QuoteMessage.js
var import_react26 = __toESM(require_react(), 1);
var import_prop_types20 = __toESM(require_prop_types(), 1);
function QuoteMessage(_a) {
  var _b;
  var _c, _d, _e, _f, _g, _h;
  var message = _a.message, _j = _a.userId, userId = _j === void 0 ? "" : _j, _k = _a.isByMe, isByMe = _k === void 0 ? false : _k, _l = _a.className, className = _l === void 0 ? "" : _l, _m = _a.isUnavailable, isUnavailable = _m === void 0 ? false : _m, onClick = _a.onClick;
  var stringSet = (0, import_react26.useContext)(LocalizationContext).stringSet;
  var parentMessage = message.parentMessage;
  var parentMessageSender = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender;
  var parentMessageSenderNickname = userId === (parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.nickname;
  var parentMessageUrl = getMessageFirstFileUrl(parentMessage);
  var parentMessageType = getMessageFirstFileType(parentMessage);
  var currentMessageSenderNickname = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : (_d = message === null || message === void 0 ? void 0 : message.sender) === null || _d === void 0 ? void 0 : _d.nickname;
  var _o = (0, import_react26.useState)(false), isThumbnailLoaded = _o[0], setThumbnailLoaded = _o[1];
  var uikitFileTypes = getUIKitFileTypes();
  var splitFileName = (_f = (_e = getMessageFirstFileName(parentMessage)) === null || _e === void 0 ? void 0 : _e.split("/")) !== null && _f !== void 0 ? _f : parentMessageUrl.split("/");
  return import_react26.default.createElement("div", {
    className: getClassName([className, "sendbird-quote-message", isByMe ? "outgoing" : "incoming", isUnavailable ? "unavailable" : ""]),
    key: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId,
    onClick: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    },
    onTouchEnd: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    }
  }, import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-to"
  }, import_react26.default.createElement(Icon, {
    className: "sendbird-quote-message__replied-to__icon",
    type: IconTypes.REPLY,
    fillColor: IconColors.ON_BACKGROUND_3,
    width: "12px",
    height: "12px"
  }), import_react26.default.createElement(Label, {
    className: "sendbird-quote-message__replied-to__text",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_3
  }, import_react26.default.createElement("span", {
    className: "sendbird-quote-message__replied-to__text__nickname"
  }, currentMessageSenderNickname), import_react26.default.createElement("span", {
    className: "sendbird-quote-message__replied-to__text__text"
  }, stringSet.QUOTED_MESSAGE__REPLIED_TO), import_react26.default.createElement("span", {
    className: "sendbird-quote-message__replied-to__text__nickname"
  }, parentMessageSenderNickname))), import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message"
  }, isUnavailable && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__text-message"
  }, import_react26.default.createElement(Label, {
    className: "sendbird-quote-message__replied-message__text-message__word",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.QUOTED_MESSAGE__UNAVAILABLE)), isUserMessage(parentMessage) && ((_g = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message) === null || _g === void 0 ? void 0 : _g.length) > 0 && !isUnavailable && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__text-message"
  }, import_react26.default.createElement(Label, {
    className: "sendbird-quote-message__replied-message__text-message__word",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_1
  }, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message)), isVoiceMessage(parentMessage) && parentMessageUrl && !isUnavailable && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__text-message"
  }, import_react26.default.createElement(Label, {
    className: "sendbird-quote-message__replied-message__text-message__word",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.VOICE_MESSAGE)), (isThumbnailMessage(parentMessage) || isMultipleFilesMessage(parentMessage)) && parentMessageUrl && !isUnavailable && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__thumbnail-message"
  }, import_react26.default.createElement(ImageRenderer, {
    className: "sendbird-quote-message__replied-message__thumbnail-message__image",
    url: parentMessageUrl,
    alt: parentMessageType,
    width: "144px",
    height: "108px",
    onLoad: function() {
      return setThumbnailLoaded(true);
    },
    defaultComponent: import_react26.default.createElement("div", {
      className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder"
    }, import_react26.default.createElement("div", {
      className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon"
    }, import_react26.default.createElement(Icon, {
      type: isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO,
      fillColor: IconColors.ON_BACKGROUND_2,
      width: "22px",
      height: "22px"
    })))
  }), isVideo(parentMessageType) && !(((_h = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.thumbnails) === null || _h === void 0 ? void 0 : _h.length) > 0) && import_react26.default.createElement(import_react26.default.Fragment, null, import_react26.default.createElement("video", {
    className: "sendbird-quote-message__replied-message__thumbnail-message__video"
  }, import_react26.default.createElement("source", {
    src: parentMessageUrl,
    type: parentMessageType
  })), import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__thumbnail-message__cover"
  }, import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon"
  }, import_react26.default.createElement(Icon, {
    type: IconTypes.PLAY,
    fillColor: IconColors.ON_BACKGROUND_2,
    width: "14px",
    height: "14px"
  })))), isThumbnailLoaded && isGif(parentMessageType) && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__thumbnail-message__cover"
  }, import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon"
  }, import_react26.default.createElement(Icon, {
    type: IconTypes.GIF,
    fillColor: IconColors.THUMBNAIL_ICON,
    width: "14px",
    height: "14px"
  })))), getUIKitMessageType(parentMessage) === UIKitMessageTypes.FILE && parentMessageUrl && !isUnavailable && import_react26.default.createElement("div", {
    className: "sendbird-quote-message__replied-message__file-message"
  }, import_react26.default.createElement(Icon, {
    className: "sendbird-quote-message__replied-message__file-message__type-icon",
    type: (_b = {}, _b[uikitFileTypes.IMAGE] = IconTypes.PHOTO, _b[uikitFileTypes.VIDEO] = IconTypes.PLAY, _b[uikitFileTypes.AUDIO] = IconTypes.FILE_AUDIO, _b[uikitFileTypes.GIF] = IconTypes.GIF, _b[uikitFileTypes.OTHERS] = IconTypes.FILE_DOCUMENT, _b)[getUIKitFileType(parentMessageType)],
    fillColor: IconColors.ON_BACKGROUND_3,
    width: "16px",
    height: "16px"
  }), import_react26.default.createElement(Label, {
    className: "sendbird-quote-message__replied-message__file-message__file-name",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_3
  }, truncateString(splitFileName[splitFileName.length - 1])))));
}

// node_modules/@sendbird/uikit-react/index-c22e4772.js
var import_react27 = __toESM(require_react(), 1);
var MobileContextMenu = function(props) {
  var _a, _b, _c;
  var hideMenu = props.hideMenu, channel = props.channel, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, deleteMessage = props.deleteMessage, setQuoteMessage = props.setQuoteMessage, parentRef = props.parentRef, onReplyInThread = props.onReplyInThread, _d = props.isOpenedFromThread, isOpenedFromThread = _d === void 0 ? false : _d;
  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
  var stringSet = useLocalization().stringSet;
  var showMenuItemCopy = isUserMessage(message);
  var showMenuItemEdit = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;
  var disableDelete = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var showMenuItemDownload = !isPendingMessage(message) && isFileMessage(message) && !(isVoiceMessage(message) && ((channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast)));
  var showMenuItemReply = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var showMenuItemThread = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var fileMessage = message;
  return import_react27.default.createElement(ContextMenu, {
    isOpen: true,
    menuItems: function() {
      var _a2, _b2, _c2;
      return import_react27.default.createElement(MenuItems, {
        className: "sendbird-message__mobile-context-menu",
        parentRef,
        parentContainRef: parentRef,
        closeDropdown: hideMenu
      }, showMenuItemCopy && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-copy",
        onClick: function() {
          hideMenu();
          copyToClipboard(message === null || message === void 0 ? void 0 : message.message);
        },
        dataSbId: "ui_mobile_message_item_menu_copy"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: LabelColors.ONBACKGROUND_1
      }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__COPY), import_react27.default.createElement(Icon, {
        type: IconTypes.COPY,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemReply && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-reply",
        onClick: function() {
          hideMenu();
          setQuoteMessage(message);
        },
        disable: ((_a2 = message === null || message === void 0 ? void 0 : message.parentMessageId) !== null && _a2 !== void 0 ? _a2 : 0) > 0,
        dataSbId: "ui_mobile_message_item_menu_reply"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: ((_b2 = message === null || message === void 0 ? void 0 : message.parentMessageId) !== null && _b2 !== void 0 ? _b2 : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__REPLY), import_react27.default.createElement(Icon, {
        type: IconTypes.REPLY,
        fillColor: ((_c2 = message === null || message === void 0 ? void 0 : message.parentMessageId) !== null && _c2 !== void 0 ? _c2 : 0) > 0 ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemThread && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-reply",
        onClick: function() {
          hideMenu();
          onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
            message
          });
        },
        dataSbId: "ui_mobile_message_item_menu_thread"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__THREAD), import_react27.default.createElement(Icon, {
        type: IconTypes.THREAD,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemEdit && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-edit",
        onClick: function() {
          hideMenu();
          showEdit(true);
        },
        dataSbId: "ui_mobile_message_item_menu_edit"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__EDIT), import_react27.default.createElement(Icon, {
        type: IconTypes.EDIT,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemResend && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-resend",
        onClick: function() {
          hideMenu();
          resendMessage(message);
        },
        dataSbId: "ui_mobile_message_item_menu_resend"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__RESEND), import_react27.default.createElement(Icon, {
        type: IconTypes.REFRESH,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemDeleteFinal && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-delete",
        onClick: function() {
          if (isFailedMessage(message)) {
            hideMenu();
            deleteMessage === null || deleteMessage === void 0 ? void 0 : deleteMessage(message);
          } else if (!disableDelete) {
            hideMenu();
            showRemove === null || showRemove === void 0 ? void 0 : showRemove(true);
          }
        },
        disable: disableDelete,
        dataSbId: "ui_mobile_message_item_menu_delete"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: disableDelete ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__DELETE), import_react27.default.createElement(Icon, {
        type: IconTypes.DELETE,
        fillColor: disableDelete ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      })), showMenuItemDownload && import_react27.default.createElement(MenuItem, {
        className: "sendbird-message__mobile-context-menu-item menu-item-save",
        onClick: function() {
          hideMenu();
        },
        dataSbId: "ui_mobile_message_item_menu_download_file"
      }, import_react27.default.createElement("a", {
        className: "sendbird-message__contextmenu--hyperlink",
        rel: "noopener noreferrer",
        href: fileMessage === null || fileMessage === void 0 ? void 0 : fileMessage.url,
        target: "_blank"
      }, import_react27.default.createElement(Label, {
        type: LabelTypography.SUBTITLE_1,
        color: LabelColors.ONBACKGROUND_1
      }, stringSet.MESSAGE_MENU__SAVE), import_react27.default.createElement(Icon, {
        type: IconTypes.DOWNLOAD,
        fillColor: IconColors.PRIMARY,
        width: "24px",
        height: "24px"
      }))));
    }
  });
};
var EMOJI_SIZE = 38;
var MobileBottomSheet = function(props) {
  var _a, _b, _c;
  var hideMenu = props.hideMenu, channel = props.channel, emojiContainer = props.emojiContainer, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, isReactionEnabled = props.isReactionEnabled, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, _d = props.isOpenedFromThread, isOpenedFromThread = _d === void 0 ? false : _d;
  var isByMe = ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) === userId;
  var stringSet = useLocalization().stringSet;
  var globalStore = useSendbirdStateContext();
  var isOnline = globalStore.config.isOnline;
  var showMenuItemCopy = isUserMessage(message);
  var showMenuItemEdit = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend = isOnline && isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;
  var disableDelete = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b === void 0 ? void 0 : _b.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var showMenuItemDownload = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);
  var showReaction = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;
  var showMenuItemReply = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast);
  var showMenuItemThread = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast);
  var disableReaction = (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0;
  var fileMessage = message;
  var maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;
  var _e = (0, import_react27.useState)(false), showEmojisOnly = _e[0], setShowEmojisOnly = _e[1];
  var emojis = getEmojiListAll(emojiContainer);
  var visibleEmojis = showEmojisOnly ? emojis : emojis === null || emojis === void 0 ? void 0 : emojis.slice(0, maxEmojisPerRow);
  var canShowMoreEmojis = emojis.length > maxEmojisPerRow;
  return import_react27.default.createElement(BottomSheet, {
    onBackdropClick: hideMenu
  }, import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet"
  }, showReaction && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet-reactions"
  }, import_react27.default.createElement("ul", {
    className: "sendbird-message__bottomsheet-reaction-bar"
  }, import_react27.default.createElement("div", {
    className: "\n                    sendbird-message__bottomsheet-reaction-bar__row\n                    ".concat(showEmojisOnly ? "sendbird-message__bottomsheet-reaction-bar__all" : "", "\n                  ")
  }, visibleEmojis.map(function(emoji) {
    var _a2, _b2, _c2;
    var isReacted = (_c2 = (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.filter(function(reaction) {
      return reaction.key === emoji.key;
    })[0]) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
      return reactorId === userId;
    });
    return import_react27.default.createElement(ReactionButton, {
      key: emoji.key,
      width: "".concat(EMOJI_SIZE, "px"),
      height: "".concat(EMOJI_SIZE, "px"),
      selected: isReacted,
      onClick: function() {
        hideMenu();
        toggleReaction(message, emoji.key, isReacted);
      },
      dataSbId: "ui_mobile_emoji_reactions_menu_".concat(emoji.key)
    }, import_react27.default.createElement(ImageRenderer, {
      url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "",
      width: "28px",
      height: "28px",
      placeHolder: function(style) {
        return import_react27.default.createElement("div", {
          style
        }, import_react27.default.createElement(Icon, {
          type: IconTypes.QUESTION,
          fillColor: IconColors.ON_BACKGROUND_3,
          width: "28px",
          height: "28px"
        }));
      }
    }));
  }), canShowMoreEmojis && !showEmojisOnly && import_react27.default.createElement(ReactionButton, {
    key: "emoji_more",
    width: "38px",
    height: "38px",
    onClick: function() {
      setShowEmojisOnly(true);
    },
    dataSbId: "ui_mobile_emoji_reactions_menu_emojiadd"
  }, import_react27.default.createElement(ImageRenderer, {
    url: "",
    width: "28px",
    height: "28px",
    placeHolder: function(style) {
      return import_react27.default.createElement("div", {
        style
      }, import_react27.default.createElement(Icon, {
        type: IconTypes.EMOJI_MORE,
        fillColor: IconColors.ON_BACKGROUND_3,
        width: "28px",
        height: "28px"
      }));
    }
  }))))), !showEmojisOnly && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--actions"
  }, showMenuItemCopy && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      hideMenu();
      copyToClipboard(message === null || message === void 0 ? void 0 : message.message);
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.COPY,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__COPY)), showMenuItemEdit && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      hideMenu();
      showEdit(true);
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.EDIT,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__EDIT)), showMenuItemResend && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      hideMenu();
      resendMessage(message);
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.REFRESH,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__RESEND)), showMenuItemReply && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action\n                      ".concat(disableReaction ? "sendbird-message__bottomsheet--action-disabled" : "", "\n                    "),
    role: "menuitem",
    "aria-disabled": disableReaction ? true : false,
    onClick: function() {
      if (!disableReaction) {
        hideMenu();
        setQuoteMessage(message);
      }
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.REPLY,
    fillColor: disableReaction ? IconColors.ON_BACKGROUND_3 : IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: disableReaction ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__REPLY)), showMenuItemThread && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      hideMenu();
      onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
        message
      });
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.THREAD,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.MESSAGE_MENU__THREAD)), showMenuItemDeleteFinal && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      if (isFailedMessage(message)) {
        hideMenu();
        deleteMessage === null || deleteMessage === void 0 ? void 0 : deleteMessage(message);
      } else if (!disableDelete) {
        hideMenu();
        showRemove === null || showRemove === void 0 ? void 0 : showRemove(true);
      }
    }
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.DELETE,
    fillColor: disableDelete ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: disableDelete ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__DELETE)), showMenuItemDownload && import_react27.default.createElement("div", {
    className: "sendbird-message__bottomsheet--action",
    onClick: function() {
      hideMenu();
    }
  }, import_react27.default.createElement("a", {
    className: "sendbird-message__bottomsheet--hyperlink",
    rel: "noopener noreferrer",
    href: fileMessage === null || fileMessage === void 0 ? void 0 : fileMessage.url,
    target: "_blank"
  }, import_react27.default.createElement(Icon, {
    type: IconTypes.DOWNLOAD,
    fillColor: IconColors.PRIMARY,
    width: "24px",
    height: "24px"
  }), import_react27.default.createElement(Label, {
    type: LabelTypography.SUBTITLE_1,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_MENU__SAVE))))));
};
var MobileMenu = function(props) {
  var message = props.message, hideMenu = props.hideMenu, userId = props.userId, channel = props.channel, _a = props.isReactionEnabled, isReactionEnabled = _a === void 0 ? false : _a, isByMe = props.isByMe, replyType = props.replyType, disabled = props.disabled, deleteMenuState = props.deleteMenuState, showRemove = props.showRemove, showEdit = props.showEdit, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, setQuoteMessage = props.setQuoteMessage, emojiContainer = props.emojiContainer, toggleReaction = props.toggleReaction, parentRef = props.parentRef, onReplyInThread = props.onReplyInThread, isOpenedFromThread = props.isOpenedFromThread;
  return import_react27.default.createElement(import_react27.default.Fragment, null, isReactionEnabled ? import_react27.default.createElement(MobileBottomSheet, {
    channel,
    message,
    hideMenu,
    isByMe,
    userId,
    replyType,
    disabled,
    showRemove,
    showEdit,
    deleteMenuState,
    resendMessage,
    deleteMessage,
    setQuoteMessage,
    emojiContainer,
    toggleReaction,
    isReactionEnabled,
    onReplyInThread,
    isOpenedFromThread
  }) : import_react27.default.createElement(MobileContextMenu, {
    channel,
    userId,
    message,
    hideMenu,
    isByMe,
    showEdit,
    replyType,
    disabled,
    deleteMenuState,
    showRemove,
    resendMessage,
    deleteMessage,
    setQuoteMessage,
    parentRef,
    onReplyInThread,
    isOpenedFromThread
  }));
};

// node_modules/@sendbird/uikit-react/ui/ThreadReplies.js
var import_react28 = __toESM(require_react(), 1);
var import_prop_types21 = __toESM(require_prop_types(), 1);
function ThreadReplies(_a) {
  var _b;
  var className = _a.className, threadInfo = _a.threadInfo, onClick = _a.onClick;
  var _c = threadInfo.mostRepliedUsers, mostRepliedUsers = _c === void 0 ? [] : _c, replyCount = threadInfo.replyCount;
  var stringSet = useLocalization().stringSet;
  return import_react28.default.createElement("div", {
    className: "sendbird-ui-thread-replies ".concat(className),
    role: "button",
    onClick: function(e) {
      onClick(e);
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    },
    onKeyDown: function(e) {
      onClick(e);
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    }
  }, import_react28.default.createElement("div", {
    className: "sendbird-ui-thread-replies__user-profiles"
  }, mostRepliedUsers.slice(0, 4).map(function(user) {
    return import_react28.default.createElement(Avatar$1, {
      key: uuidv4(),
      className: "sendbird-ui-thread-replies__user-profiles__avatar",
      src: user === null || user === void 0 ? void 0 : user.profileUrl,
      alt: "user profile",
      width: "20px",
      height: "20px"
    });
  }), (mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers.length) >= 5 && import_react28.default.createElement("div", {
    className: "sendbird-ui-thread-replies__user-profiles__avatar"
  }, import_react28.default.createElement(Avatar$1, {
    className: "sendbird-ui-thread-replies__user-profiles__avatar__image",
    src: (_b = mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers[4]) === null || _b === void 0 ? void 0 : _b.profileUrl,
    alt: "user profile",
    width: "20px",
    height: "20px"
  }), import_react28.default.createElement("div", {
    className: "sendbird-ui-thread-replies__user-profiles__avatar__cover"
  }), import_react28.default.createElement("div", {
    className: "sendbird-ui-thread-replies__user-profiles__avatar__plus"
  }, import_react28.default.createElement(Icon, {
    type: IconTypes.PLUS,
    fillColor: IconColors.WHITE,
    width: "16px",
    height: "16px"
  })))), import_react28.default.createElement(Label, {
    className: "sendbird-ui-thread-replies__reply-counts",
    type: LabelTypography.CAPTION_2,
    color: LabelColors.PRIMARY
  }, replyCount === 1 ? "".concat(replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLY) : "".concat(replyCount > 99 ? stringSet.CHANNEL__THREAD_OVER_MAX : replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLIES)), import_react28.default.createElement(Icon, {
    className: "sendbird-ui-thread-replies__icon",
    type: IconTypes.CHEVRON_RIGHT,
    fillColor: IconColors.PRIMARY,
    width: "16px",
    height: "16px"
  }));
}

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react32 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ProgressBar.js
var import_react29 = __toESM(require_react(), 1);
var ProgressBarColorTypes = {
  PRIMARY: "progress-bar-color--primary",
  GRAY: "progress-bar-color--gray"
};
var ProgressBar = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, maxSize = _a.maxSize, _d = _a.currentSize, currentSize = _d === void 0 ? 0 : _d, _e = _a.colorType, colorType = _e === void 0 ? ProgressBarColorTypes.PRIMARY : _e;
  var width = (0, import_react29.useMemo)(function() {
    return "".concat(currentSize / maxSize * 100, "%");
  }, [currentSize, maxSize]);
  return import_react29.default.createElement("div", {
    className: "sendbird-progress-bar ".concat(className, " ").concat(colorType, " ").concat(disabled ? "progress-bar--disabled" : "")
  }, import_react29.default.createElement("div", {
    className: "sendbird-progress-bar__fill",
    style: {
      width
    }
  }));
};

// node_modules/@sendbird/uikit-react/VoicePlayer/useVoicePlayer.js
var import_react30 = __toESM(require_react(), 1);
var import_react_dom8 = __toESM(require_react_dom(), 1);
var import_prop_types22 = __toESM(require_prop_types(), 1);
var generateGroupKey = function(channelUrl, key) {
  if (channelUrl === void 0) {
    channelUrl = "";
  }
  if (key === void 0) {
    key = "";
  }
  return "".concat(channelUrl, "-").concat(key);
};
var useVoicePlayer = function(_a) {
  var _b;
  var _c = _a.key, key = _c === void 0 ? "" : _c, _d = _a.channelUrl, channelUrl = _d === void 0 ? "" : _d, _e = _a.audioFile, audioFile = _e === void 0 ? null : _e, _f = _a.audioFileUrl, audioFileUrl = _f === void 0 ? "" : _f;
  var groupKey = (0, import_react30.useState)(generateGroupKey(channelUrl, key))[0];
  var _g = useVoicePlayerContext(), play = _g.play, pause = _g.pause, stop = _g.stop, voicePlayerStore = _g.voicePlayerStore;
  var isRecordable = useVoiceRecorderContext().isRecordable;
  var currentAudioUnit = ((_b = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b === void 0 ? void 0 : _b[groupKey]) || AudioUnitDefaultValue();
  var playVoicePlayer = function() {
    if (!isRecordable) {
      play === null || play === void 0 ? void 0 : play({
        groupKey,
        audioFile,
        audioFileUrl
      });
    }
  };
  var pauseVoicePlayer = function() {
    pause === null || pause === void 0 ? void 0 : pause(groupKey);
  };
  var stopVoicePlayer = function(text2) {
    if (text2 === void 0) {
      text2 = "";
    }
    stop === null || stop === void 0 ? void 0 : stop(text2);
  };
  (0, import_react30.useEffect)(function() {
    return function() {
      var _a2;
      if (audioFile || audioFileUrl) {
        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);
        (_a2 = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a2 === void 0 ? void 0 : _a2.call(voiceAudioPlayerElement);
      }
    };
  }, []);
  return {
    play: playVoicePlayer,
    pause: pauseVoicePlayer,
    stop: stopVoicePlayer,
    playbackTime: currentAudioUnit.playbackTime * 1e3,
    duration: currentAudioUnit.duration * 1e3,
    // the unit of playbackTime and duration should be millisecond
    playingStatus: currentAudioUnit.playingStatus
  };
};

// node_modules/@sendbird/uikit-react/ui/PlaybackTime.js
var import_react31 = __toESM(require_react(), 1);
var import_prop_types23 = __toESM(require_prop_types(), 1);
var PlaybackTime = function(_a) {
  var className = _a.className, _b = _a.time, time = _b === void 0 ? 0 : _b, _c = _a.labelType, labelType = _c === void 0 ? LabelTypography.CAPTION_2 : _c, _d = _a.labelColor, labelColor = _d === void 0 ? LabelColors.ONCONTENT_1 : _d;
  var naturalTime = time < 0 ? 0 : time;
  var hour = Math.floor(naturalTime / 36e5);
  var min = Math.floor(naturalTime % 36e5 / 6e4);
  var sec = Math.floor(naturalTime % 36e5 % 6e4 / 1e3);
  return import_react31.default.createElement("div", {
    className: "sendbird-ui-play-time ".concat(className)
  }, import_react31.default.createElement(Label, {
    type: labelType,
    color: labelColor
  }, "".concat(hour ? hour + ":" : "").concat(min < 10 ? "0" : "").concat(min ? min : "0", ":").concat(sec < 10 ? "0" : "").concat(sec)));
};

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react_dom9 = __toESM(require_react_dom(), 1);
var import_prop_types24 = __toESM(require_prop_types(), 1);
var VoiceMessageItemBody = function(_a) {
  var _b;
  var className = _a.className, message = _a.message, channelUrl = _a.channelUrl, _c = _a.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a.isReactionEnabled, isReactionEnabled = _d === void 0 ? false : _d;
  var _e = (0, import_react32.useState)(false), usingReaction = _e[0], setUsingReaction = _e[1];
  var _f = useVoicePlayer({
    channelUrl,
    key: "".concat(message === null || message === void 0 ? void 0 : message.messageId),
    audioFileUrl: message === null || message === void 0 ? void 0 : message.url
  }), play = _f.play, pause = _f.pause, _g = _f.playbackTime, playbackTime = _g === void 0 ? 0 : _g, duration = _f.duration, _h = _f.playingStatus, playingStatus = _h === void 0 ? VOICE_PLAYER_STATUS.IDLE : _h;
  (0, import_react32.useEffect)(function() {
    var _a2;
    if (isReactionEnabled && ((_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.length) > 0) {
      setUsingReaction(true);
    } else {
      setUsingReaction(false);
    }
  }, [isReactionEnabled, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
  var progresBarMaxSize = (0, import_react32.useMemo)(function() {
    var _a2;
    if (message === null || message === void 0 ? void 0 : message.metaArrays) {
      var duration_1 = (_a2 = message === null || message === void 0 ? void 0 : message.metaArrays.find(function(metaArray) {
        return metaArray.key === "KEY_VOICE_MESSAGE_DURATION";
      })) === null || _a2 === void 0 ? void 0 : _a2.value[0];
      return duration_1 && parseInt(duration_1);
    }
    return 1;
  }, [message === null || message === void 0 ? void 0 : message.metaArrays]);
  return import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body ".concat(className, " ").concat(usingReaction ? "is-reactions-contained" : "")
  }, import_react32.default.createElement(ProgressBar, {
    className: "sendbird-voice-message-item-body__progress-bar",
    maxSize: duration || progresBarMaxSize,
    currentSize: playbackTime,
    colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY
  }), import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button"
  }, (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button__button",
    onClick: play
  }, import_react32.default.createElement(Icon, {
    width: "18px",
    height: "18px",
    type: IconTypes.PLAY,
    fillColor: IconColors.PRIMARY
  })), playingStatus === VOICE_PLAYER_STATUS.PREPARING && import_react32.default.createElement(Loader, {
    width: "22.2px",
    height: "22.2px"
  }, import_react32.default.createElement(Icon, {
    width: "22.2px",
    height: "22.2px",
    type: IconTypes.SPINNER,
    fillColor: IconColors.PRIMARY_2
  })), playingStatus === VOICE_PLAYER_STATUS.PLAYING && import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button__button",
    onClick: function() {
      pause();
    }
  }, import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button__button__pause"
  }, import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button__button__pause__inner"
  }), import_react32.default.createElement("div", {
    className: "sendbird-voice-message-item-body__status-button__button__pause__inner"
  })))), import_react32.default.createElement(PlaybackTime, {
    className: "sendbird-voice-message-item-body__playback-time",
    time: progresBarMaxSize - playbackTime,
    labelType: LabelTypography.BODY_1,
    labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1
  }));
};

// node_modules/@sendbird/uikit-react/useStatefulFileInfoList-5e68b93f.js
var import_react34 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/index-0f017704.js
var import_react33 = __toESM(require_react(), 1);
var import_react_dom10 = __toESM(require_react_dom(), 1);
var SUPPORTED_MIMES = {
  IMAGE: ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/svg+xml", "image/webp"],
  VIDEO: ["video/mpeg", "video/ogg", "video/webm", "video/mp4"]
};
__assign({}, SUPPORTED_MIMES);
var ViewerTypes = {
  SINGLE: "SINGLE",
  MULTI: "MULTI"
};
function useKeyDown(_a) {
  var props = _a.props, ref = _a.ref;
  var onClose = props.onClose;
  var onClickLeft = noop;
  var onClickRight = noop;
  if (props.viewerType === ViewerTypes.MULTI) {
    onClickLeft = props.onClickLeft;
    onClickRight = props.onClickRight;
  }
  (0, import_react33.useLayoutEffect)(function() {
    var _a2;
    (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [ref.current]);
  var onKeyDown = (0, import_react33.useCallback)(function(event) {
    switch (event.key) {
      case "Escape":
        onClose(event);
        break;
      case "ArrowLeft":
        onClickLeft();
        break;
      case "ArrowRight":
        onClickRight();
        break;
    }
    event.stopPropagation();
  }, [onClose, onClickLeft, onClickRight]);
  return {
    onKeyDown
  };
}
function mapFileViewerComponentProps(_a) {
  var props = _a.props;
  if (props.viewerType === ViewerTypes.MULTI) {
    var _b = props, fileInfoList = _b.fileInfoList, currentIndex = _b.currentIndex;
    return fileInfoList[currentIndex];
  }
  var fileInfo = props;
  return {
    name: fileInfo.name,
    type: fileInfo.type,
    url: fileInfo.url
  };
}
function DeleteButton(props) {
  if (props.viewerType !== ViewerTypes.MULTI) {
    var onDelete_1 = props.onDelete, isByMe = props.isByMe, disableDelete_1 = props.disableDelete, className = props.className;
    return isByMe ? import_react33.default.createElement("div", {
      className: "sendbird-fileviewer__header__right__actions__delete ".concat(className)
    }, import_react33.default.createElement(Icon, {
      className: disableDelete_1 ? "disabled" : "",
      type: IconTypes.DELETE,
      fillColor: disableDelete_1 ? IconColors.GRAY : IconColors.ON_BACKGROUND_1,
      height: "24px",
      width: "24px",
      onClick: function(e) {
        if (!disableDelete_1) {
          onDelete_1 === null || onDelete_1 === void 0 ? void 0 : onDelete_1(e);
        }
      }
    })) : import_react33.default.createElement(import_react33.default.Fragment, null);
  }
  return import_react33.default.createElement(import_react33.default.Fragment, null);
}
function Slider(props) {
  if (props.viewerType === ViewerTypes.MULTI) {
    var onClickLeft_1 = props.onClickLeft, onClickRight_1 = props.onClickRight;
    return import_react33.default.createElement("div", {
      className: "sendbird-file-viewer-slider"
    }, import_react33.default.createElement("div", {
      className: "sendbird-file-viewer-arrow--left"
    }, import_react33.default.createElement(Icon, {
      type: IconTypes.SLIDE_LEFT,
      fillColor: IconColors.ON_BACKGROUND_1,
      height: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      width: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      onClick: function(e) {
        onClickLeft_1 === null || onClickLeft_1 === void 0 ? void 0 : onClickLeft_1();
        e.stopPropagation();
      }
    })), import_react33.default.createElement("div", {
      className: "sendbird-file-viewer-arrow--right"
    }, import_react33.default.createElement(Icon, {
      type: IconTypes.SLIDE_LEFT,
      fillColor: IconColors.ON_BACKGROUND_1,
      height: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      width: SLIDER_BUTTON_ICON_SIDE_LENGTH,
      onClick: function(e) {
        e.stopPropagation();
        onClickRight_1 === null || onClickRight_1 === void 0 ? void 0 : onClickRight_1();
      }
    })));
  }
  return import_react33.default.createElement(import_react33.default.Fragment, null);
}
var FileViewerComponent = function(props) {
  var ref = (0, import_react33.useRef)(null);
  var profileUrl = props.profileUrl, nickname = props.nickname, onClose = props.onClose;
  var onKeyDown = useKeyDown({
    props,
    ref
  }).onKeyDown;
  var _a = mapFileViewerComponentProps({
    props
  }), name = _a.name, type = _a.type, url = _a.url;
  var stringSet = (0, import_react33.useContext)(LocalizationContext).stringSet;
  return import_react33.default.createElement("div", {
    className: "sendbird-fileviewer",
    onKeyDown,
    tabIndex: 1,
    ref
  }, import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header"
  }, import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header__left"
  }, import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header__left__avatar"
  }, import_react33.default.createElement(Avatar$1, {
    height: "32px",
    width: "32px",
    src: profileUrl
  })), import_react33.default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__filename",
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, name), import_react33.default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__sender-name",
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_2
  }, nickname)), import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header__right"
  }, isSupportedFileView(type) && import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions"
  }, import_react33.default.createElement("a", {
    className: "sendbird-fileviewer__header__right__actions__download",
    rel: "noopener noreferrer",
    href: url,
    target: "_blank"
  }, import_react33.default.createElement(Icon, {
    type: IconTypes.DOWNLOAD,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px"
  })), import_react33.default.createElement(DeleteButton, _extends({
    className: "sendbird-fileviewer__header__right__actions__delete"
  }, props))), import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions__close"
  }, import_react33.default.createElement(Icon, {
    type: IconTypes.CLOSE,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px",
    onClick: function(e) {
      return onClose === null || onClose === void 0 ? void 0 : onClose(e);
    }
  })))), import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__content"
  }, isVideo(type) && import_react33.default.createElement("video", {
    controls: true,
    className: "sendbird-fileviewer__content__video"
  }, import_react33.default.createElement("source", {
    src: url,
    type
  })), isImage(type) && import_react33.default.createElement("img", {
    src: url,
    alt: name,
    className: props.viewerType === ViewerTypes.MULTI ? "sendbird-fileviewer__content__img__multi" : "sendbird-fileviewer__content__img"
  }), !isSupportedFileView(type) && import_react33.default.createElement("div", {
    className: "sendbird-fileviewer__content__unsupported"
  }, import_react33.default.createElement(Label, {
    type: LabelTypography.H_1,
    color: LabelColors.ONBACKGROUND_1
  }, (stringSet === null || stringSet === void 0 ? void 0 : stringSet.UI__FILE_VIEWER__UNSUPPORT) || "Unsupported message")), import_react33.default.createElement(Slider, props)));
};
function FileViewer(_a) {
  var _b, _c, _d;
  var message = _a.message, _e = _a.statefulFileInfoList, statefulFileInfoList = _e === void 0 ? [] : _e, onClose = _a.onClose, _f = _a.isByMe, isByMe = _f === void 0 ? false : _f, onDelete = _a.onDelete, currentIndex = _a.currentIndex, onClickLeft = _a.onClickLeft, onClickRight = _a.onClickRight;
  if (isMultipleFilesMessage(message)) {
    var castedMessage = message;
    return import_react33.default.createElement(FileViewerComponent, {
      profileUrl: castedMessage.sender.profileUrl,
      nickname: castedMessage.sender.nickname,
      viewerType: ViewerTypes.MULTI,
      fileInfoList: statefulFileInfoList.filter(function(fileInfo) {
        return fileInfo.url;
      }).map(function(fileInfo) {
        return {
          name: fileInfo.fileName || "",
          type: fileInfo.mimeType || "",
          url: fileInfo.url
        };
      }),
      currentIndex: currentIndex || 0,
      onClickLeft: onClickLeft || noop,
      onClickRight: onClickRight || noop,
      onClose
    });
  } else if (isFileMessage(message)) {
    var castedMessage = message;
    return (0, import_react_dom10.createPortal)(import_react33.default.createElement(FileViewerComponent, {
      profileUrl: (_b = castedMessage.sender) === null || _b === void 0 ? void 0 : _b.profileUrl,
      nickname: (_c = castedMessage.sender) === null || _c === void 0 ? void 0 : _c.nickname,
      name: castedMessage.name,
      type: castedMessage.type,
      url: castedMessage === null || castedMessage === void 0 ? void 0 : castedMessage.url,
      isByMe,
      disableDelete: (((_d = castedMessage.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) || 0) > 0,
      onClose,
      onDelete: onDelete || noop
    }), document.getElementById(MODAL_ROOT));
  }
  return import_react33.default.createElement(import_react33.default.Fragment, null);
}

// node_modules/@sendbird/uikit-react/useStatefulFileInfoList-5e68b93f.js
function ImageGrid(_a) {
  var _b;
  var children = _a.children, className = _a.className, message = _a.message, isReactionEnabled = _a.isReactionEnabled;
  return import_react34.default.createElement("div", {
    className: "sendbird-image-grid-wrap"
  }, import_react34.default.createElement("div", {
    className: getClassName([className, "sendbird-image-grid", isReactionEnabled && ((_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length) > 0 ? "reactions" : ""])
  }, children));
}
var GRID_WIDTH_CHAT_WEB = 400;
var GRID_SIDE_PADDING = 8;
var GRID_GAP = 4;
var TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 54;
var PROFILE_IMAGE_WIDTH = 40;
var CHAT_MOBILE_SIDE_PADDING = 48;
var THREAD_PARENT_WIDTH = 320;
var THREAD_PARENT_SIDE_PADDING = 28;
var THREAD_PARENT_GRID_MARGIN_LEFT = 12;
var THREAD_CHILD_WIDTH = 200;
var THREAD_CHILD_SIDE_PADDING = 8;
var THREAD_CHILD_MOBILE_SIDE_PADDING = 32;
var THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 60;
var MULTIPLE_FILES_IMAGE_SIDE_LENGTH = {
  CHAT_WEB: "calc(".concat(GRID_WIDTH_CHAT_WEB / 2, "px - ").concat((GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  CHAT_MOBILE: "calc(50vw - ".concat((CHAT_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  THREAD_PARENT_WEB: "calc(".concat((THREAD_PARENT_WIDTH - (THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP)) / 2, "px)"),
  THREAD_PARENT_MOBILE: "calc(50vw - ".concat((THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP) / 2, "px)"),
  THREAD_CHILD_WEB: "calc(".concat((THREAD_CHILD_WIDTH - THREAD_CHILD_SIDE_PADDING - GRID_GAP) / 2, "px)"),
  THREAD_CHILD_MOBILE: "calc(50vw - ".concat((THREAD_CHILD_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)")
};
var MULTIPLE_FILES_IMAGE_BORDER_RADIUS = {
  CHAT_WEB: "6px",
  CHAT_MOBILE: "6px",
  THREAD_PARENT_WEB: "6px",
  THREAD_PARENT_MOBILE: "6px",
  THREAD_CHILD_WEB: "6px",
  THREAD_CHILD_MOBILE: "6px"
};
var MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH = "34px";
var ThreadMessageKind = {
  PARENT: "parent",
  CHILD: "child"
};
function MultipleFilesMessageItemBody(_a) {
  var className = _a.className, message = _a.message, _b = _a.isReactionEnabled, isReactionEnabled = _b === void 0 ? false : _b, threadMessageKindKey = _a.threadMessageKindKey, _c = _a.statefulFileInfoList, statefulFileInfoList = _c === void 0 ? [] : _c;
  var _d = (0, import_react34.useState)(-1), currentFileViewerIndex = _d[0], setCurrentFileViewerIndex = _d[1];
  function onClose() {
    setCurrentFileViewerIndex(-1);
  }
  function onClickLeft() {
    setCurrentFileViewerIndex(currentFileViewerIndex === 0 ? statefulFileInfoList.length - 1 : currentFileViewerIndex - 1);
  }
  function onClickRight() {
    setCurrentFileViewerIndex(currentFileViewerIndex === statefulFileInfoList.length - 1 ? 0 : currentFileViewerIndex + 1);
  }
  return threadMessageKindKey && import_react34.default.createElement(import_react34.default.Fragment, null, currentFileViewerIndex > -1 && import_react34.default.createElement(FileViewer, {
    message,
    statefulFileInfoList,
    currentIndex: currentFileViewerIndex,
    onClickLeft,
    onClickRight,
    onClose
  }), import_react34.default.createElement(ImageGrid, {
    className,
    message,
    isReactionEnabled
  }, statefulFileInfoList.map(function(fileInfo, index) {
    var isGifValue = isGif(fileInfo.mimeType);
    return import_react34.default.createElement("div", {
      className: "sendbird-multiple-files-image-renderer-wrapper",
      onClick: message.sendingStatus === W.SUCCEEDED ? function() {
        return setCurrentFileViewerIndex(index);
      } : void 0,
      key: "sendbird-multiple-files-image-renderer-".concat(index, "-").concat(fileInfo.url)
    }, import_react34.default.createElement(ImageRenderer, {
      url: fileInfo.url,
      fixedSize: false,
      width: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey],
      maxSideLength: MULTIPLE_FILES_IMAGE_SIDE_LENGTH.CHAT_WEB,
      height: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey],
      borderRadius: getBorderRadiusForMultipleImageRenderer(MULTIPLE_FILES_IMAGE_BORDER_RADIUS[threadMessageKindKey], index, statefulFileInfoList.length),
      shadeOnHover: true,
      isUploaded: !!fileInfo.isUploaded,
      placeHolder: function(style_) {
        return import_react34.default.createElement("div", {
          className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder",
          style: style_
        }, isGifValue ? import_react34.default.createElement("div", {
          className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder__icon"
        }, import_react34.default.createElement(Icon, {
          type: IconTypes.GIF,
          fillColor: IconColors.THUMBNAIL_ICON,
          width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH,
          height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH
        })) : import_react34.default.createElement(Icon, {
          type: IconTypes.PHOTO,
          fillColor: IconColors.ON_BACKGROUND_2,
          width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH,
          height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH
        }));
      },
      defaultComponent: import_react34.default.createElement("div", {
        className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder"
      }, import_react34.default.createElement(Icon, {
        type: IconTypes.THUMBNAIL_NONE,
        fillColor: IconColors.ON_BACKGROUND_2,
        width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH,
        height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH
      }))
    }));
  })));
}
function useThreadMessageKindKeySelector(_a) {
  var threadMessageKind = _a.threadMessageKind, isMobile = _a.isMobile;
  var threadMessageKindKey = (0, import_react34.useMemo)(function() {
    return K(threadMessageKind).with(ThreadMessageKind.PARENT, function() {
      return isMobile ? "THREAD_PARENT_MOBILE" : "THREAD_PARENT_WEB";
    }).with(ThreadMessageKind.CHILD, function() {
      return isMobile ? "THREAD_CHILD_MOBILE" : "THREAD_CHILD_WEB";
    }).otherwise(function() {
      return isMobile ? "CHAT_MOBILE" : "CHAT_WEB";
    });
  }, [isMobile, threadMessageKind]);
  return threadMessageKindKey;
}
function createStatefulFileInfoList(message, oldStatefulFileInfoList) {
  var _a;
  if (!message)
    return null;
  if (message.sendingStatus === W.SUCCEEDED) {
    return message.fileInfoList.map(function(fileInfo) {
      return {
        fileName: fileInfo.fileName,
        fileSize: fileInfo.fileSize,
        mimeType: fileInfo.mimeType,
        thumbnails: fileInfo.thumbnails,
        url: fileInfo.url,
        isUploaded: true
      };
    });
  }
  if (!Array.isArray((_a = message.messageParams) === null || _a === void 0 ? void 0 : _a.fileInfoList))
    return null;
  return message.messageParams.fileInfoList.map(function(fileInfo, index) {
    var _a2, _b, _c;
    return {
      fileName: fileInfo.fileName,
      fileSize: fileInfo.fileSize,
      mimeType: fileInfo.mimeType,
      /**
       * Note here, we prioritize using fileUrl (implying uploaded state) over file.
       * This is necessary because cache loaded pending/failed mfms is mixed with
       * files (not yet uploaded ones) and fileUrls (uploaded).
       *
       * Notice that if file is used in the old state, it will not be replace with the new fileUrl
       * because doing so will rerender the ImageRenderer component which makes rendering process awkward and slow.
       * */
      url: (_c = (_b = (_a2 = oldStatefulFileInfoList[index]) === null || _a2 === void 0 ? void 0 : _a2.url) !== null && _b !== void 0 ? _b : fileInfo.fileUrl) !== null && _c !== void 0 ? _c : fileInfo.file instanceof Blob ? URL.createObjectURL(fileInfo.file) : void 0,
      /**
       * Side note: It was a bad design to not include this property by SDK.
       * Because if original object has fileUrl set and no file, then uploaded result remains
       * the same so customer cannot know whether it has been uploaded or not.
       */
      isUploaded: !fileInfo.file && typeof fileInfo.fileUrl === "string" && fileInfo.fileUrl.length > 0
    };
  });
}
var useStatefulFileInfoList = function(message) {
  var _a, _b, _c;
  var _d = (0, import_react34.useState)([]), statefulFileInfoList = _d[0], setStatefulFileInfoList = _d[1];
  (0, import_react34.useEffect)(function() {
    if (isMultipleFilesMessage(message)) {
      var newStatefulFileInfoList = createStatefulFileInfoList(message, statefulFileInfoList);
      setStatefulFileInfoList(newStatefulFileInfoList);
    }
  }, [
    // Sent message dependency.
    (_a = message.fileInfoList) === null || _a === void 0 ? void 0 : _a.length,
    // Unsent message dependency.
    /**
     * Side note: It was a bad design to not include 'isUploaded' property by SDK.
     * Because if original object has fileUrl set and no file, then uploaded result remains
     * the same so customer cannot know whether it has been uploaded or not.
     */
    (_c = (_b = message.messageParams) === null || _b === void 0 ? void 0 : _b.fileInfoList) === null || _c === void 0 ? void 0 : _c.map(function(fileInfo) {
      return fileInfo.fileUrl;
    }).join(",")
  ]);
  return statefulFileInfoList;
};

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_prop_types25 = __toESM(require_prop_types(), 1);
var import_react_dom11 = __toESM(require_react_dom(), 1);
function MessageContent(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var className = _a.className, userId = _a.userId, channel = _a.channel, message = _a.message, _r = _a.disabled, disabled = _r === void 0 ? false : _r, _s = _a.chainTop, chainTop = _s === void 0 ? false : _s, _t = _a.chainBottom, chainBottom = _t === void 0 ? false : _t, _u = _a.isReactionEnabled, isReactionEnabled = _u === void 0 ? false : _u, _v = _a.disableQuoteMessage, disableQuoteMessage = _v === void 0 ? false : _v, replyType = _a.replyType, threadReplySelectType = _a.threadReplySelectType, nicknamesMap = _a.nicknamesMap, emojiContainer = _a.emojiContainer, scrollToMessage = _a.scrollToMessage, showEdit = _a.showEdit, showRemove = _a.showRemove, showFileViewer = _a.showFileViewer, resendMessage = _a.resendMessage, deleteMessage = _a.deleteMessage, toggleReaction = _a.toggleReaction, setQuoteMessage = _a.setQuoteMessage, onReplyInThread = _a.onReplyInThread, onQuoteMessageClick = _a.onQuoteMessageClick, onMessageHeightChange = _a.onMessageHeightChange;
  var messageTypes = getUIKitMessageTypes();
  var dateLocale = useLocalization().dateLocale;
  var _w = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {}, config = _w.config, eventHandlers = _w.eventHandlers;
  var onPressUserProfileHandler = (_b = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _b === void 0 ? void 0 : _b.onPressUserProfile;
  var _x = (0, import_react35.useContext)(UserProfileContext), disableUserProfile = _x.disableUserProfile, renderUserProfile = _x.renderUserProfile;
  var avatarRef = (0, import_react35.useRef)(null);
  var contentRef = (0, import_react35.useRef)(null);
  var isMobile = useMediaQueryContext().isMobile;
  var _y = (0, import_react35.useState)(false), showMenu = _y[0], setShowMenu = _y[1];
  var _z = (0, import_react35.useState)(false), mouseHover = _z[0], setMouseHover = _z[1];
  var _0 = (0, import_react35.useState)(false), supposedHover = _0[0], setSupposedHover = _0[1];
  var isByMe = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "pending" || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "failed";
  var isByMeClassName = isByMe ? "outgoing" : "incoming";
  var chainTopClassName = chainTop ? "chain-top" : "";
  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);
  var isReactionEnabledClassName = isReactionEnabledInChannel ? "use-reactions" : "";
  var supposedHoverClassName = supposedHover ? "sendbird-mouse-hover" : "";
  var useReplying = !!((replyType === "QUOTE_REPLY" || replyType === "THREAD") && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);
  var useReplyingClassName = useReplying ? "use-quote" : "";
  var isOgMessageEnabledInGroupChannel = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && config.groupChannel.enableOgtag;
  var displayThreadReplies = ((_d = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) > 0 && replyType === "THREAD";
  var longPress = useLongPress({
    onLongPress: function() {
      if (isMobile) {
        setShowMenu(true);
      }
    },
    onClick: noop
  }, {
    delay: 300,
    shouldPreventDefault: false
  });
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    isMobile
  });
  var statefulFileInfoList = useStatefulFileInfoList(message);
  if (((_e = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _e === void 0 ? void 0 : _e.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) === "admin") {
    return import_react35.default.createElement(AdminMessage, {
      message
    });
  }
  return import_react35.default.createElement("div", {
    className: getClassName([className, "sendbird-message-content", isByMeClassName]),
    onMouseOver: function() {
      return setMouseHover(true);
    },
    onMouseLeave: function() {
      return setMouseHover(false);
    }
  }, import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content__left", isReactionEnabledClassName, isByMeClassName, useReplyingClassName])
  }, !isByMe && !chainBottom && isSendableMessage(message) && /** user profile */
  import_react35.default.createElement(ContextMenu, {
    menuTrigger: function(toggleDropdown) {
      var _a2, _b2;
      return import_react35.default.createElement(Avatar$1, {
        className: "sendbird-message-content__left__avatar ".concat(displayThreadReplies ? "use-thread-replies" : ""),
        src: ((_b2 = (_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.find(function(member) {
          return (member === null || member === void 0 ? void 0 : member.userId) === message.sender.userId;
        })) === null || _b2 === void 0 ? void 0 : _b2.profileUrl) || message.sender.profileUrl || "",
        ref: avatarRef,
        width: "28px",
        height: "28px",
        onClick: function() {
          if (!disableUserProfile)
            toggleDropdown();
        }
      });
    },
    menuItems: function(closeDropdown) {
      return import_react35.default.createElement(
        MenuItems,
        {
          parentRef: avatarRef,
          parentContainRef: avatarRef,
          closeDropdown,
          style: {
            paddingTop: "0px",
            paddingBottom: "0px"
          }
        },
        renderUserProfile ? renderUserProfile({
          user: message.sender,
          close: closeDropdown,
          currentUserId: userId
        }) : import_react35.default.createElement(UserProfile, {
          user: message.sender,
          onSuccess: closeDropdown
        })
      );
    }
  }), isByMe && !isMobile && import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content-menu", isReactionEnabledClassName, supposedHoverClassName, isByMeClassName])
  }, import_react35.default.createElement(MessageItemMenu, {
    className: "sendbird-message-content-menu__normal-menu",
    channel,
    message,
    isByMe,
    replyType,
    disabled,
    showEdit,
    showRemove,
    resendMessage,
    setQuoteMessage,
    setSupposedHover,
    onReplyInThread: function(_a2) {
      var _b2;
      var message2 = _a2.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread({
          message: message2
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage((_b2 = message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt, message2.parentMessageId);
      }
    }
  }), isReactionEnabledInChannel && import_react35.default.createElement(MessageItemReactionMenu, {
    className: "sendbird-message-content-menu__reaction-menu",
    message,
    userId,
    emojiContainer,
    toggleReaction,
    setSupposedHover
  }))), import_react35.default.createElement("div", _extends({
    className: "sendbird-message-content__middle"
  }, isMobile ? __assign({}, longPress) : {}, {
    ref: contentRef
  }), !isByMe && !chainTop && !useReplying && import_react35.default.createElement(
    Label,
    {
      className: "sendbird-message-content__middle__sender-name",
      type: LabelTypography.CAPTION_2,
      color: LabelColors.ONBACKGROUND_2
    },
    // @ts-ignore
    ((_g = (_f = channel === null || channel === void 0 ? void 0 : channel.members) === null || _f === void 0 ? void 0 : _f.find(function(member) {
      var _a2;
      return (member === null || member === void 0 ? void 0 : member.userId) === ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId);
    })) === null || _g === void 0 ? void 0 : _g.nickname) || getSenderName(message)
    // TODO: Divide getting profileUrl logic to utils
  ), useReplying ? import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content__middle__quote-message", isByMe ? "outgoing" : "incoming", useReplyingClassName])
  }, import_react35.default.createElement(QuoteMessage, {
    className: "sendbird-message-content__middle__quote-message__quote",
    message,
    userId,
    isByMe,
    isUnavailable: ((_h = channel === null || channel === void 0 ? void 0 : channel.messageOffsetTimestamp) !== null && _h !== void 0 ? _h : 0) > ((_k = (_j = message.parentMessage) === null || _j === void 0 ? void 0 : _j.createdAt) !== null && _k !== void 0 ? _k : 0),
    onClick: function() {
      var _a2;
      if (replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.THREAD) {
        onQuoteMessageClick === null || onQuoteMessageClick === void 0 ? void 0 : onQuoteMessageClick({
          message
        });
      }
      if ((replyType === "QUOTE_REPLY" || replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.PARENT) && ((_a2 = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a2 === void 0 ? void 0 : _a2.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {
        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);
      }
    }
  })) : null, import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content__middle__body-container"])
  }, isByMe && !chainBottom && import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content__middle__body-container__created-at", "left", supposedHoverClassName])
  }, import_react35.default.createElement("div", {
    className: "sendbird-message-content__middle__body-container__created-at__component-container"
  }, import_react35.default.createElement(MessageStatus, {
    message,
    channel
  }))), isOgMessageEnabledInGroupChannel && isOGMessage(message) ? import_react35.default.createElement(OGMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,
    isReactionEnabled: isReactionEnabledInChannel,
    onMessageHeightChange
  }) : isTextMessage(message) && import_react35.default.createElement(TextMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,
    isReactionEnabled: isReactionEnabledInChannel
  }), getUIKitMessageType(message) === messageTypes.FILE && import_react35.default.createElement(FileMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isReactionEnabled: isReactionEnabledInChannel
  }), isMultipleFilesMessage(message) && import_react35.default.createElement(MultipleFilesMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isReactionEnabled: isReactionEnabledInChannel,
    threadMessageKindKey,
    statefulFileInfoList
  }), isVoiceMessage(message) && import_react35.default.createElement(VoiceMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    channelUrl: (_l = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _l !== void 0 ? _l : "",
    isByMe,
    isReactionEnabled: isReactionEnabledInChannel
  }), isThumbnailMessage(message) && import_react35.default.createElement(ThumbnailMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isReactionEnabled: isReactionEnabledInChannel,
    showFileViewer,
    style: isMobile ? {
      width: "100%"
    } : {}
  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && import_react35.default.createElement(UnknownMessageItemBody, {
    className: "sendbird-message-content__middle__message-item-body",
    message,
    isByMe,
    mouseHover,
    isReactionEnabled: isReactionEnabledInChannel
  }), isReactionEnabledInChannel && ((_m = message === null || message === void 0 ? void 0 : message.reactions) === null || _m === void 0 ? void 0 : _m.length) > 0 && import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content-reactions", isMultipleFilesMessage(message) ? "image-grid" : !isByMe || isThumbnailMessage(message) || isOGMessage(message) ? "" : "primary", mouseHover ? "mouse-hover" : ""])
  }, import_react35.default.createElement(EmojiReactions, {
    userId,
    message,
    channel,
    isByMe,
    emojiContainer,
    memberNicknamesMap: nicknamesMap,
    toggleReaction,
    onPressUserProfile: onPressUserProfileHandler
  })), !isByMe && !chainBottom && import_react35.default.createElement(Label, {
    className: getClassName(["sendbird-message-content__middle__body-container__created-at", "right", supposedHoverClassName]),
    type: LabelTypography.CAPTION_3,
    color: LabelColors.ONBACKGROUND_2
  }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, "p", {
    locale: dateLocale
  }))), displayThreadReplies && import_react35.default.createElement(ThreadReplies, {
    className: "sendbird-message-content__middle__thread-replies",
    threadInfo: message === null || message === void 0 ? void 0 : message.threadInfo,
    onClick: function() {
      return onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
        message
      });
    }
  })), import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content__right", chainTopClassName, isReactionEnabledClassName, useReplyingClassName])
  }, !isByMe && !isMobile && import_react35.default.createElement("div", {
    className: getClassName(["sendbird-message-content-menu", chainTopClassName, supposedHoverClassName, isByMeClassName])
  }, isReactionEnabledInChannel && import_react35.default.createElement(MessageItemReactionMenu, {
    className: "sendbird-message-content-menu__reaction-menu",
    message,
    userId,
    emojiContainer,
    toggleReaction,
    setSupposedHover
  }), import_react35.default.createElement(MessageItemMenu, {
    className: "sendbird-message-content-menu__normal-menu",
    channel,
    message,
    isByMe,
    replyType,
    disabled,
    showRemove,
    resendMessage,
    setQuoteMessage,
    setSupposedHover,
    onReplyInThread: function(_a2) {
      var _b2;
      var message2 = _a2.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread({
          message: message2
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage((_b2 = message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt, message2.parentMessageId);
      }
    }
  }))), showMenu && (((_o = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _o === void 0 ? void 0 : _o.call(message)) || ((_p = message === null || message === void 0 ? void 0 : message.isFileMessage) === null || _p === void 0 ? void 0 : _p.call(message)) || ((_q = message === null || message === void 0 ? void 0 : message.isMultipleFilesMessage) === null || _q === void 0 ? void 0 : _q.call(message))) && import_react35.default.createElement(MobileMenu, {
    parentRef: contentRef,
    channel,
    hideMenu: function() {
      setShowMenu(false);
    },
    message,
    isReactionEnabled: isReactionEnabledInChannel,
    isByMe,
    userId,
    replyType,
    disabled,
    showRemove,
    emojiContainer,
    resendMessage,
    deleteMessage,
    setQuoteMessage,
    toggleReaction,
    showEdit,
    onReplyInThread: function(_a2) {
      var _b2;
      var message2 = _a2.message;
      if (threadReplySelectType === ThreadReplySelectType.THREAD) {
        onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({
          message: message2
        });
      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
        scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(((_b2 = message2 === null || message2 === void 0 ? void 0 : message2.parentMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt) || 0, (message2 === null || message2 === void 0 ? void 0 : message2.parentMessageId) || 0);
      }
    }
  }));
}

// node_modules/@sendbird/uikit-react/Channel/components/FileViewer.js
var import_react36 = __toESM(require_react(), 1);
var import_react_dom12 = __toESM(require_react_dom(), 1);
var import_prop_types26 = __toESM(require_prop_types(), 1);
var FileViewerComponent2 = function(_a) {
  var profileUrl = _a.profileUrl, nickname = _a.nickname, name = _a.name, type = _a.type, url = _a.url, isByMe = _a.isByMe, onCancel = _a.onCancel, onDelete = _a.onDelete, disableDelete = _a.disableDelete;
  return import_react36.default.createElement("div", {
    className: "sendbird-fileviewer"
  }, import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header"
  }, import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__left"
  }, import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__left__avatar"
  }, import_react36.default.createElement(Avatar$1, {
    height: "32px",
    width: "32px",
    src: profileUrl
  })), import_react36.default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__filename",
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, name), import_react36.default.createElement(Label, {
    className: "sendbird-fileviewer__header__left__sender-name",
    type: LabelTypography.BODY_1,
    color: LabelColors.ONBACKGROUND_2
  }, nickname)), import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__right"
  }, isSupportedFileView(type) && import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions"
  }, import_react36.default.createElement("a", {
    className: "sendbird-fileviewer__header__right__actions__download",
    rel: "noopener noreferrer",
    href: url,
    target: "_blank"
  }, import_react36.default.createElement(Icon, {
    type: IconTypes.DOWNLOAD,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px"
  })), onDelete && isByMe && import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions__delete"
  }, import_react36.default.createElement(Icon, {
    className: disableDelete ? "disabled" : "",
    type: IconTypes.DELETE,
    fillColor: disableDelete ? IconColors.GRAY : IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px",
    onClick: function() {
      if (!disableDelete) {
        onDelete();
      }
    }
  }))), import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__header__right__actions__close"
  }, import_react36.default.createElement(Icon, {
    type: IconTypes.CLOSE,
    fillColor: IconColors.ON_BACKGROUND_1,
    height: "24px",
    width: "24px",
    onClick: onCancel
  })))), import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__content"
  }, isVideo(type) && import_react36.default.createElement("video", {
    controls: true,
    className: "sendbird-fileviewer__content__video"
  }, import_react36.default.createElement("source", {
    src: url,
    type
  })), isImage(type) && import_react36.default.createElement("img", {
    src: url,
    alt: name,
    className: "sendbird-fileviewer__content__img"
  }), !isSupportedFileView(type) && import_react36.default.createElement("div", {
    className: "sendbird-fileviewer__content__unsupported"
  }, import_react36.default.createElement(Label, {
    type: LabelTypography.H_1,
    color: LabelColors.ONBACKGROUND_1
  }, "Unsupoprted message"))));
};
var FileViewer2 = function(_a) {
  var _b, _c, _d;
  var onCancel = _a.onCancel, message = _a.message;
  var deleteMessage = useChannelContext().deleteMessage;
  var sender = message.sender, type = message.type, url = message.url, _e = message.name, name = _e === void 0 ? "" : _e, threadInfo = message.threadInfo;
  var user = (_c = (_b = useSendbirdStateContext()) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.userId;
  var isByMe = user === ((_d = message === null || message === void 0 ? void 0 : message.sender) === null || _d === void 0 ? void 0 : _d.userId);
  var disableDelete = (threadInfo === null || threadInfo === void 0 ? void 0 : threadInfo.replyCount) > 0;
  var profileUrl = sender.profileUrl, _f = sender.nickname, nickname = _f === void 0 ? "" : _f;
  return (0, import_react_dom12.createPortal)(import_react36.default.createElement(FileViewerComponent2, {
    profileUrl,
    nickname,
    type,
    url,
    name,
    onCancel,
    onDelete: function() {
      deleteMessage(message).then(function() {
        onCancel();
      });
    },
    isByMe,
    disableDelete
  }), document.getElementById(MODAL_ROOT));
};

// node_modules/@sendbird/uikit-react/Channel/components/RemoveMessageModal.js
var import_react37 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/stringFormatterUtils-abbe70ba.js
function getModalDeleteMessageTitle(stringSet, message) {
  return K(message).when(isMultipleFilesMessage, function() {
    var filesCount = message.fileInfoList.length;
    return "Do you want to delete all ".concat(filesCount, " photos?");
  }).otherwise(function() {
    return stringSet.MODAL__DELETE_MESSAGE__TITLE;
  });
}

// node_modules/@sendbird/uikit-react/Channel/components/RemoveMessageModal.js
var import_react_dom13 = __toESM(require_react_dom(), 1);
var import_prop_types27 = __toESM(require_prop_types(), 1);
var RemoveMessage = function(props) {
  var _a;
  var _b = props.onSubmit, onSubmit = _b === void 0 ? function() {
  } : _b, onCancel = props.onCancel, message = props.message;
  var stringSet = (0, import_react37.useContext)(LocalizationContext).stringSet;
  var deleteMessage = useChannelContext().deleteMessage;
  return import_react37.default.createElement(Modal, {
    type: ButtonTypes.DANGER,
    disabled: ((_a = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a === void 0 ? void 0 : _a.replyCount) > 0,
    onCancel,
    onSubmit: function() {
      deleteMessage(message).then(function() {
        onSubmit();
        onCancel();
      });
    },
    submitText: stringSet.MESSAGE_MENU__DELETE,
    titleText: getModalDeleteMessageTitle(stringSet, message)
  });
};

// node_modules/@sendbird/uikit-react/index-494f9e79.js
var import_react38 = __toESM(require_react(), 1);
function useDebounce(callback, delay) {
  var timeoutRef = (0, import_react38.useRef)(null);
  (0, import_react38.useEffect)(function() {
    return function() {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  function debounceFunction() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    timeoutRef.current = setTimeout(function() {
      callback.apply(void 0, args);
    }, delay);
  }
  return debounceFunction;
}
var DELAY = 500;
function calcScrollBottom(scrollHeight, scrollTop) {
  return scrollHeight - scrollTop;
}
function useHandleOnScrollCallback(_a) {
  var hasMore = _a.hasMore, hasNext = _a.hasNext, onScroll = _a.onScroll, scrollRef = _a.scrollRef, setShowScrollDownButton = _a.setShowScrollDownButton;
  var scrollCb = (0, import_react38.useCallback)(function() {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null) {
      return;
    }
    var scrollTop = element.scrollTop, scrollHeight = element.scrollHeight, clientHeight = element.clientHeight;
    var scrollBottom = calcScrollBottom(scrollHeight, scrollTop);
    if (typeof setShowScrollDownButton === "function") {
      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);
    }
    if (hasMore && scrollTop < SCROLL_BUFFER) {
      onScroll(function() {
        element.scrollTop = element.scrollHeight - scrollBottom;
      });
    }
    if (hasNext) {
      onScroll(function() {
        element.scrollTop = scrollTop - (scrollHeight - element.scrollHeight);
      });
    }
  }, [setShowScrollDownButton, hasMore, onScroll, scrollRef]);
  return useDebounce(scrollCb, DELAY);
}

// node_modules/@sendbird/uikit-react/Message/hooks/useDirtyGetMentions.js
var import_react39 = __toESM(require_react(), 1);
function getMentionNodes(root) {
  if (root) {
    var mentions = root.querySelectorAll("[data-sb-mention='true']");
    var mentionsArray = Array.from(mentions);
    return mentionsArray;
  }
  return [];
}
function useDirtyGetMentions(_a, _b) {
  var ref = _a.ref;
  var logger = _b.logger;
  var targetNode = ref.current;
  var _c = (0, import_react39.useState)([]), mentionNodes = _c[0], setMentionNodes = _c[1];
  (0, import_react39.useLayoutEffect)(function() {
    if (targetNode) {
      var mentions = getMentionNodes(targetNode);
      setMentionNodes(mentions);
    }
  }, [targetNode]);
  (0, import_react39.useEffect)(function() {
    var config = {
      childList: true,
      subtree: true
    };
    var callback = function(mutationList) {
      var hasMutation = mutationList.length > 0;
      if (hasMutation) {
        setMentionNodes(getMentionNodes(targetNode));
      }
    };
    var observer = new MutationObserver(callback);
    if (targetNode) {
      observer.observe(targetNode, config);
      logger.info("useDirtyGetMentions: observer started", {
        observer,
        config
      });
    }
    return function() {
      try {
        observer.disconnect();
        logger.info("useDirtyGetMentions: observer disconnected", {
          observer
        });
      } catch (error) {
        logger.error("useDirtyGetMentions: observer disconnect failed", {
          observer
        });
      }
    };
  }, [targetNode]);
  return mentionNodes;
}

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_prop_types28 = __toESM(require_prop_types(), 1);
var import_react_dom14 = __toESM(require_react_dom(), 1);
var useDidMountEffect = function(func, deps) {
  var _a = (0, import_react40.useState)(false), didMount = _a[0], setDidmount = _a[1];
  (0, import_react40.useEffect)(function() {
    if (didMount) {
      func();
    } else {
      setDidmount(true);
    }
  }, deps);
};
var Message = function(_a) {
  var _b, _c;
  var message = _a.message, hasSeparator = _a.hasSeparator, chainTop = _a.chainTop, chainBottom = _a.chainBottom, handleScroll = _a.handleScroll, renderCustomSeparator = _a.renderCustomSeparator, renderEditInput = _a.renderEditInput, renderMessage = _a.renderMessage, renderMessageContent = _a.renderMessageContent;
  var dateLocale = useLocalization().dateLocale;
  var globalStore = useSendbirdStateContext();
  var _d = globalStore.config, userId = _d.userId, isOnline = _d.isOnline, isMentionEnabled = _d.isMentionEnabled, userMention = _d.userMention, logger = _d.logger;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;
  var _e = useChannelContext(), initialized = _e.initialized, currentGroupChannel = _e.currentGroupChannel, highLightedMessageId = _e.highLightedMessageId, setHighLightedMessageId = _e.setHighLightedMessageId, animatedMessageId = _e.animatedMessageId, setAnimatedMessageId = _e.setAnimatedMessageId, updateMessage = _e.updateMessage, scrollToMessage = _e.scrollToMessage, replyType = _e.replyType, threadReplySelectType = _e.threadReplySelectType, isReactionEnabled = _e.isReactionEnabled, toggleReaction = _e.toggleReaction, emojiContainer = _e.emojiContainer, nicknamesMap = _e.nicknamesMap, setQuoteMessage = _e.setQuoteMessage, resendMessage = _e.resendMessage, deleteMessage = _e.deleteMessage, renderUserMentionItem = _e.renderUserMentionItem, onReplyInThread = _e.onReplyInThread, onQuoteMessageClick = _e.onQuoteMessageClick, onMessageAnimated = _e.onMessageAnimated, onMessageHighlighted = _e.onMessageHighlighted, onScrollCallback = _e.onScrollCallback, setIsScrolled = _e.setIsScrolled;
  var _f = (0, import_react40.useState)(false), showEdit = _f[0], setShowEdit = _f[1];
  var _g = (0, import_react40.useState)(false), showRemove = _g[0], setShowRemove = _g[1];
  var _h = (0, import_react40.useState)(false), showFileViewer = _h[0], setShowFileViewer = _h[1];
  var _j = (0, import_react40.useState)(false), isAnimated = _j[0], setIsAnimated = _j[1];
  var _k = (0, import_react40.useState)(false), isHighlighted = _k[0], setIsHighlighted = _k[1];
  var _l = (0, import_react40.useState)(""), mentionNickname = _l[0], setMentionNickname = _l[1];
  var _m = (0, import_react40.useState)([]), mentionedUsers = _m[0], setMentionedUsers = _m[1];
  var _o = (0, import_react40.useState)([]), mentionedUserIds = _o[0], setMentionedUserIds = _o[1];
  var _p = (0, import_react40.useState)(null), messageInputEvent = _p[0], setMessageInputEvent = _p[1];
  var _q = (0, import_react40.useState)(null), selectedUser = _q[0], setSelectedUser = _q[1];
  var _r = (0, import_react40.useState)([]), mentionSuggestedUsers = _r[0], setMentionSuggestedUsers = _r[1];
  var editMessageInputRef = (0, import_react40.useRef)(null);
  var messageScrollRef = (0, import_react40.useRef)(null);
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentGroupChannel) && !isDisabledBecauseMuted(currentGroupChannel);
  var disabled = !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !isOnline;
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: false,
    onScroll: onScrollCallback,
    scrollRef: messageScrollRef,
    setIsScrolled
  });
  var mentionNodes = useDirtyGetMentions({
    ref: editMessageInputRef
  }, {
    logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  (0, import_react40.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId2 = _a2.userId;
      var i = mentionedUserIds.indexOf(userId2);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  (0, import_react40.useLayoutEffect)(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, []);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, [showEdit, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
  (0, import_react40.useLayoutEffect)(function() {
    var animationTimeout = null;
    var messageHighlightedTimeout = null;
    if (highLightedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      handleOnScroll();
      setIsAnimated(false);
      animationTimeout = setTimeout(function() {
        setIsHighlighted(true);
      }, 500);
      messageHighlightedTimeout = setTimeout(function() {
        setHighLightedMessageId(0);
        onMessageHighlighted === null || onMessageHighlighted === void 0 ? void 0 : onMessageHighlighted();
      }, 1600);
    } else {
      setIsHighlighted(false);
    }
    return function() {
      clearTimeout(animationTimeout);
      clearTimeout(messageHighlightedTimeout);
    };
  }, [highLightedMessageId, messageScrollRef.current, message.messageId]);
  (0, import_react40.useLayoutEffect)(function() {
    var animationTimeout = null;
    var messageAnimatedTimeout = null;
    if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      handleOnScroll();
      setIsHighlighted(false);
      animationTimeout = setTimeout(function() {
        setIsAnimated(true);
      }, 500);
      messageAnimatedTimeout = setTimeout(function() {
        setAnimatedMessageId(0);
        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
      }, 1600);
    } else {
      setIsAnimated(false);
    }
    return function() {
      clearTimeout(animationTimeout);
      clearTimeout(messageAnimatedTimeout);
    };
  }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);
  var renderedMessage = (0, import_react40.useMemo)(function() {
    return renderMessage === null || renderMessage === void 0 ? void 0 : renderMessage({
      message,
      chainTop,
      chainBottom
    });
  }, [message, renderMessage]);
  var renderedCustomSeparator = (0, import_react40.useMemo)(function() {
    if (renderCustomSeparator) {
      return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({
        message
      });
    }
    return null;
  }, [message, renderCustomSeparator]);
  if (renderedMessage) {
    return import_react40.default.createElement(
      "div",
      {
        // do not delete this data attribute, used for scroll to given message
        // and also for testing
        "data-sb-message-id": message.messageId,
        "data-sb-created-at": message.createdAt,
        ref: messageScrollRef,
        className: getClassName(["sendbird-msg-hoc sendbird-msg--scroll-ref", isAnimated ? "sendbird-msg-hoc__animated" : "", isHighlighted ? "sendbird-msg-hoc__highlighted" : ""])
      },
      // TODO: Add message instance as a function parameter
      hasSeparator && (renderedCustomSeparator || import_react40.default.createElement(DateSeparator, null, import_react40.default.createElement(Label, {
        type: LabelTypography.CAPTION_2,
        color: LabelColors.ONBACKGROUND_2
      }, format(message.createdAt, "MMMM dd, yyyy", {
        locale: dateLocale
      })))),
      renderedMessage
    );
  }
  if (showEdit && ((_c = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _c === void 0 ? void 0 : _c.call(message))) {
    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || import_react40.default.createElement(import_react40.default.Fragment, null, displaySuggestedMentionList && import_react40.default.createElement(SuggestedMentionList, {
      targetNickname: mentionNickname,
      inputEvent: messageInputEvent,
      renderUserMentionItem,
      onUserItemClick: function(user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname("");
        setSelectedUser(user);
        setMessageInputEvent(null);
      },
      onFocusItemChange: function() {
        setMessageInputEvent(null);
      },
      onFetchUsers: function(users) {
        setMentionSuggestedUsers(users);
      },
      ableAddMention: ableMention,
      maxMentionCount: maxUserMentionCount,
      maxSuggestionCount: maxUserSuggestionCount
    }), import_react40.default.createElement(MessageInput, {
      isEdit: true,
      channel: currentGroupChannel,
      disabled,
      ref: editMessageInputRef,
      mentionSelectedUser: selectedUser,
      isMentionEnabled,
      message,
      onStartTyping: function() {
        var _a2;
        (_a2 = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.startTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentGroupChannel);
      },
      onUpdateMessage: function(_a2) {
        var _b2;
        var messageId = _a2.messageId, message2 = _a2.message, mentionTemplate = _a2.mentionTemplate;
        updateMessage({
          messageId,
          message: message2,
          mentionedUsers,
          mentionTemplate
        });
        setShowEdit(false);
        (_b2 = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(currentGroupChannel);
      },
      onCancelEdit: function() {
        var _a2;
        setMentionNickname("");
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEdit(false);
        (_a2 = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _a2 === void 0 ? void 0 : _a2.call(currentGroupChannel);
      },
      onUserMentioned: function(user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname("");
        }
      },
      onMentionStringChange: function(mentionText) {
        setMentionNickname(mentionText);
      },
      onMentionedUserIdsUpdated: function(userIds) {
        setMentionedUserIds(userIds);
      },
      onKeyDown: function(e) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e);
          return true;
        }
        return false;
      }
    }));
  }
  return import_react40.default.createElement("div", {
    className: getClassName(["sendbird-msg-hoc sendbird-msg--scroll-ref", isAnimated ? "sendbird-msg-hoc__animated" : "", isHighlighted ? "sendbird-msg-hoc__highlighted" : ""]),
    style: {
      marginBottom: "2px"
    },
    "data-sb-message-id": message.messageId,
    "data-sb-created-at": message.createdAt,
    ref: messageScrollRef
  }, hasSeparator && (renderedCustomSeparator || import_react40.default.createElement(DateSeparator, null, import_react40.default.createElement(Label, {
    type: LabelTypography.CAPTION_2,
    color: LabelColors.ONBACKGROUND_2
  }, format(message.createdAt, "MMMM dd, yyyy", {
    locale: dateLocale
  })))), (renderMessageContent === null || renderMessageContent === void 0 ? void 0 : renderMessageContent()) || import_react40.default.createElement(MessageContent, {
    className: "sendbird-message-hoc__message-content",
    userId,
    scrollToMessage,
    channel: currentGroupChannel,
    message,
    disabled: !isOnline,
    chainTop,
    chainBottom,
    isReactionEnabled,
    replyType,
    threadReplySelectType,
    nicknamesMap,
    emojiContainer,
    showEdit: setShowEdit,
    showRemove: setShowRemove,
    showFileViewer: setShowFileViewer,
    resendMessage,
    deleteMessage,
    toggleReaction,
    setQuoteMessage,
    onReplyInThread,
    onQuoteMessageClick,
    onMessageHeightChange: handleScroll
  }), showRemove && import_react40.default.createElement(RemoveMessage, {
    message,
    onCancel: function() {
      return setShowRemove(false);
    }
  }), showFileViewer && import_react40.default.createElement(FileViewer2, {
    message,
    onCancel: function() {
      return setShowFileViewer(false);
    }
  }));
};

// node_modules/@sendbird/uikit-react/Channel/utils/compareMessagesForGrouping.js
var compareMessagesForGrouping = function(prevMessage, currMessage, nextMessage, currentChannel, replyType) {
  if (replyType === "THREAD" && (currMessage === null || currMessage === void 0 ? void 0 : currMessage.threadInfo)) {
    return [false, false];
  }
  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || "";
  var isAcceptable = sendingStatus !== "pending" && sendingStatus !== "failed";
  return [isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable, isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable];
};

// node_modules/@sendbird/uikit-react/Channel/utils/getMessagePartsInfo.js
var getMessagePartsInfo = function(_a) {
  var _b = _a.allMessages, allMessages = _b === void 0 ? [] : _b, _c = _a.isMessageGroupingEnabled, isMessageGroupingEnabled = _c === void 0 ? true : _c, _d = _a.currentIndex, currentIndex = _d === void 0 ? 0 : _d, _e = _a.currentMessage, currentMessage = _e === void 0 ? null : _e, _f = _a.currentChannel, currentChannel = _f === void 0 ? null : _f, _g = _a.replyType, replyType = _g === void 0 ? "" : _g;
  var previousMessage = allMessages[currentIndex - 1];
  var nextMessage = allMessages[currentIndex + 1];
  var _h = isMessageGroupingEnabled ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, currentChannel, replyType) : [false, false], chainTop = _h[0], chainBottom = _h[1];
  var previousMessageCreatedAt = previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.createdAt;
  var currentCreatedAt = currentMessage.createdAt;
  var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));
  return {
    chainTop,
    chainBottom,
    hasSeparator
  };
};

// node_modules/@sendbird/uikit-react/Channel/components/UnreadCount.js
var import_react41 = __toESM(require_react(), 1);
var import_prop_types29 = __toESM(require_prop_types(), 1);
var UnreadCount = function(_a) {
  var _b, _c;
  var _d = _a.className, className = _d === void 0 ? "" : _d, _e = _a.count, count = _e === void 0 ? 0 : _e, _f = _a.time, time = _f === void 0 ? "" : _f, onClick = _a.onClick;
  var stringSet = (0, import_react41.useContext)(LocalizationContext).stringSet;
  var timeArray = ((_c = (_b = time === null || time === void 0 ? void 0 : time.toString) === null || _b === void 0 ? void 0 : _b.call(time)) === null || _c === void 0 ? void 0 : _c.split(" ")) || [];
  timeArray === null || timeArray === void 0 ? void 0 : timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);
  return import_react41.default.createElement("div", {
    className: "sendbird-notification".concat(count < 1 ? "--hide" : "", " ").concat(className),
    onClick
  }, import_react41.default.createElement(Label, {
    className: "sendbird-notification__text",
    color: LabelColors.ONCONTENT_1,
    type: LabelTypography.CAPTION_2
  }, "".concat(count, " "), stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE, " ".concat(timeArray.join(" "))), import_react41.default.createElement(Icon, {
    width: "24px",
    height: "24px",
    type: IconTypes.CHEVRON_DOWN,
    fillColor: IconColors.CONTENT
  }));
};

// node_modules/@sendbird/uikit-react/Channel/components/FrozenNotification.js
var import_react42 = __toESM(require_react(), 1);
var import_prop_types30 = __toESM(require_prop_types(), 1);
var FrozenNotification = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b;
  var stringSet = (0, import_react42.useContext)(LocalizationContext).stringSet;
  return import_react42.default.createElement("div", {
    className: "sendbird-notification sendbird-notification--frozen ".concat(className)
  }, import_react42.default.createElement(Label, {
    className: "sendbird-notification__text",
    type: LabelTypography.CAPTION_2
  }, stringSet.CHANNEL_FROZEN));
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_prop_types31 = __toESM(require_prop_types(), 1);
var import_react_dom15 = __toESM(require_react_dom(), 1);
var DELAY2 = 500;
function useSetScrollToBottom(_a) {
  var loading = _a.loading;
  var _b = (0, import_react43.useState)(0), scrollBottom = _b[0], setScrollBottom = _b[1];
  (0, import_react43.useEffect)(function() {
    if (loading) {
      setScrollBottom(0);
    }
  }, [loading]);
  var scrollCb = function(e) {
    var element = e.target;
    try {
      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);
    } catch (_a2) {
    }
  };
  return {
    scrollBottom,
    scrollToBottomHandler: useDebounce(scrollCb, DELAY2)
  };
}
function useScrollBehavior() {
  var _a = useChannelContext(), scrollRef = _a.scrollRef, _b = _a.scrollBehavior, scrollBehavior = _b === void 0 ? "auto" : _b;
  (0, import_react43.useEffect)(function() {
    if (scrollRef.current) {
      scrollRef.current.style.scrollBehavior = scrollBehavior;
    }
  }, [scrollRef.current]);
  return null;
}
var SCROLL_BOTTOM_PADDING = 50;
var MessageList = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, renderMessage = _a.renderMessage, renderPlaceholderEmpty = _a.renderPlaceholderEmpty, renderCustomSeparator = _a.renderCustomSeparator, renderPlaceholderLoader = _a.renderPlaceholderLoader;
  var _c = useChannelContext(), allMessages = _c.allMessages, localMessages = _c.localMessages, hasMorePrev = _c.hasMorePrev, hasMoreNext = _c.hasMoreNext, setInitialTimeStamp = _c.setInitialTimeStamp, setAnimatedMessageId = _c.setAnimatedMessageId, setHighLightedMessageId = _c.setHighLightedMessageId, isMessageGroupingEnabled = _c.isMessageGroupingEnabled, scrollRef = _c.scrollRef, onScrollCallback = _c.onScrollCallback, onScrollDownCallback = _c.onScrollDownCallback, messagesDispatcher = _c.messagesDispatcher, messageActionTypes = _c.messageActionTypes, currentGroupChannel = _c.currentGroupChannel, disableMarkAsRead = _c.disableMarkAsRead, filterMessageList = _c.filterMessageList, replyType = _c.replyType, loading = _c.loading, isScrolled = _c.isScrolled, unreadSince = _c.unreadSince;
  var store = useSendbirdStateContext();
  var allMessagesFiltered = typeof filterMessageList === "function" ? allMessages.filter(filterMessageList) : allMessages;
  var markAsReadScheduler = store.config.markAsReadScheduler;
  useScrollBehavior();
  var onScroll = function() {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null) {
      return;
    }
    var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
    if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScrollCallback();
    }
    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {
      onScrollDownCallback(function(_a2) {
        var messages = _a2[0];
        if (messages) {
          try {
            setTimeout(
              function() {
                return scrollIntoLast(0, scrollRef);
              },
              /**
               * Rendering MFM takes long time so we need this.
               * But later we should find better solution.
               */
              1e3
            );
          } catch (error) {
          }
        }
      });
    }
    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {
      messagesDispatcher({
        type: messageActionTypes.MARK_AS_READ,
        payload: {
          channel: currentGroupChannel
        }
      });
      markAsReadScheduler.push(currentGroupChannel);
    }
  };
  var onClickScrollBot = function() {
    var _a2, _b2, _c2, _d2, _e;
    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);
    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);
    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);
    if (((_a2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollTop) > -1) {
      scrollRef.current.scrollTop = ((_c2 = (_b2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _b2 === void 0 ? void 0 : _b2.scrollHeight) !== null && _c2 !== void 0 ? _c2 : 0) - ((_e = (_d2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _d2 === void 0 ? void 0 : _d2.offsetHeight) !== null && _e !== void 0 ? _e : 0);
    }
  };
  var moveScroll = function(isBottomMessageAffected) {
    if (isBottomMessageAffected === void 0) {
      isBottomMessageAffected = false;
    }
    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (current) {
      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
      if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {
        current.scrollTop += bottom - scrollBottom;
      }
    }
  };
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: hasMorePrev,
    hasNext: hasMoreNext,
    onScroll,
    scrollRef
  });
  var _d = useSetScrollToBottom({
    loading
  }), scrollToBottomHandler = _d.scrollToBottomHandler, scrollBottom = _d.scrollBottom;
  if (loading) {
    return typeof renderPlaceholderLoader === "function" ? renderPlaceholderLoader() : import_react43.default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.LOADING
    });
  }
  if (allMessagesFiltered.length < 1) {
    if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === "function") {
      return renderPlaceholderEmpty();
    }
    return import_react43.default.createElement(PlaceHolder, {
      className: "sendbird-conversation__no-messages",
      type: PlaceHolderTypes.NO_MESSAGES
    });
  }
  return import_react43.default.createElement(import_react43.default.Fragment, null, !isScrolled && import_react43.default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.LOADING
  }), import_react43.default.createElement(
    "div",
    {
      className: "sendbird-conversation__messages ".concat(className)
    },
    import_react43.default.createElement("div", {
      className: "sendbird-conversation__scroll-container"
    }, import_react43.default.createElement("div", {
      className: "sendbird-conversation__padding"
    }), import_react43.default.createElement("div", {
      className: "sendbird-conversation__messages-padding",
      ref: scrollRef,
      onScroll: function(e) {
        handleOnScroll();
        scrollToBottomHandler(e);
      }
    }, allMessagesFiltered.map(function(m, idx) {
      var _a2, _b2;
      var _c2 = getMessagePartsInfo({
        allMessages: allMessagesFiltered,
        replyType,
        isMessageGroupingEnabled,
        currentIndex: idx,
        currentMessage: m,
        currentChannel: currentGroupChannel
      }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom, hasSeparator = _c2.hasSeparator;
      var isByMe = ((_a2 = m === null || m === void 0 ? void 0 : m.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === ((_b2 = store === null || store === void 0 ? void 0 : store.config) === null || _b2 === void 0 ? void 0 : _b2.userId);
      return import_react43.default.createElement(MessageProvider, {
        message: m,
        key: m === null || m === void 0 ? void 0 : m.messageId,
        isByMe
      }, import_react43.default.createElement(Message, {
        handleScroll: moveScroll,
        renderMessage,
        message: m,
        hasSeparator,
        chainTop,
        chainBottom,
        renderCustomSeparator
      }));
    }), localMessages.map(function(m, idx) {
      var _a2, _b2;
      var _c2 = getMessagePartsInfo({
        allMessages: allMessagesFiltered,
        replyType,
        isMessageGroupingEnabled,
        currentIndex: idx,
        currentMessage: m,
        currentChannel: currentGroupChannel
      }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom;
      var isByMe = ((_a2 = m === null || m === void 0 ? void 0 : m.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === ((_b2 = store === null || store === void 0 ? void 0 : store.config) === null || _b2 === void 0 ? void 0 : _b2.userId);
      return import_react43.default.createElement(MessageProvider, {
        message: m,
        key: m === null || m === void 0 ? void 0 : m.messageId,
        isByMe
      }, import_react43.default.createElement(Message, {
        handleScroll: moveScroll,
        renderMessage,
        message: m,
        chainTop,
        chainBottom,
        renderCustomSeparator
      }));
    }))),
    (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && import_react43.default.createElement(FrozenNotification, {
      className: "sendbird-conversation__messages__notification"
    }),
    unreadSince && import_react43.default.createElement(UnreadCount, {
      className: "sendbird-conversation__messages__notification",
      count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount,
      time: unreadSince,
      onClick: function() {
        var _a2, _b2, _c2, _d2, _e;
        if ((_a2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollTop) {
          scrollRef.current.scrollTop = ((_c2 = (_b2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _b2 === void 0 ? void 0 : _b2.scrollHeight) !== null && _c2 !== void 0 ? _c2 : 0) - ((_e = (_d2 = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _d2 === void 0 ? void 0 : _d2.offsetHeight) !== null && _e !== void 0 ? _e : 0);
        }
        if (!disableMarkAsRead && !!currentGroupChannel) {
          markAsReadScheduler.push(currentGroupChannel);
          messagesDispatcher({
            type: messageActionTypes.MARK_AS_READ,
            payload: {
              channel: currentGroupChannel
            }
          });
        }
        setInitialTimeStamp(null);
        setAnimatedMessageId(null);
        setHighLightedMessageId(null);
      }
    }),
    // This flag is an unmatched variable
    scrollBottom > SCROLL_BOTTOM_PADDING && import_react43.default.createElement("div", {
      className: "sendbird-conversation__scroll-bottom-button",
      onClick: onClickScrollBot,
      onKeyDown: onClickScrollBot,
      tabIndex: 0,
      role: "button"
    }, import_react43.default.createElement(Icon, {
      width: "24px",
      height: "24px",
      type: IconTypes.CHEVRON_DOWN,
      fillColor: IconColors.PRIMARY
    }))
  ));
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageInput.js
var import_react48 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/QuoteMessageInput.js
var import_react44 = __toESM(require_react(), 1);
var import_prop_types32 = __toESM(require_prop_types(), 1);
var componentClassname = "sendbird-quote_message_input__avatar";
function QuoteMessageThumbnail(_a) {
  var _b, _c;
  var message = _a.message;
  if (!isFileMessage(message) && !isMultipleFilesMessage(message) || isVoiceMessage(message)) {
    return null;
  }
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  if (!thumbnailUrl) {
    if (((_b = message.isFileMessage) === null || _b === void 0 ? void 0 : _b.call(message)) && (isImageMessage(message) || isVideoMessage(message))) {
      thumbnailUrl = getMessageFirstFileUrl(message);
    } else if (((_c = message.isMultipleFilesMessage) === null || _c === void 0 ? void 0 : _c.call(message)) && message.fileInfoList.length > 0 && isImageFileInfo(message.fileInfoList[0])) {
      thumbnailUrl = message.fileInfoList[0].url;
    }
  }
  if (isVideoMessage(message) && thumbnailUrl) {
    return import_react44.default.createElement("div", {
      className: componentClassname
    }, import_react44.default.createElement("video", {
      style: {
        width: "44px",
        height: "44px"
      },
      src: thumbnailUrl
    }));
  } else if ((isThumbnailMessage(message) || isMultipleFilesMessage(message)) && thumbnailUrl) {
    return import_react44.default.createElement(ImageRenderer, {
      className: componentClassname,
      url: thumbnailUrl,
      alt: getMessageFirstFileType(message),
      width: "44px",
      height: "44px",
      fixedSize: true
    });
  } else if (isAudioMessage(message)) {
    return import_react44.default.createElement("div", {
      className: componentClassname
    }, import_react44.default.createElement(Icon, {
      type: IconTypes.FILE_AUDIO,
      fillColor: IconColors.ON_BACKGROUND_2,
      width: "24px",
      height: "24px"
    }));
  } else {
    return import_react44.default.createElement("div", {
      className: componentClassname
    }, import_react44.default.createElement(Icon, {
      type: IconTypes.FILE_DOCUMENT,
      fillColor: IconColors.ON_BACKGROUND_2,
      width: "24px",
      height: "24px"
    }));
  }
}
function QuoteMessageInput(_a) {
  var className = _a.className, replyingMessage = _a.replyingMessage, onClose = _a.onClose;
  var stringSet = (0, import_react44.useContext)(LocalizationContext).stringSet;
  var fileMessage = replyingMessage;
  var sender = replyingMessage === null || replyingMessage === void 0 ? void 0 : replyingMessage.sender;
  var displayFileIcon = (isFileMessage(replyingMessage) || isMultipleFilesMessage(replyingMessage)) && !isVoiceMessage(replyingMessage);
  return import_react44.default.createElement("div", {
    className: getClassName(["sendbird-quote_message_input", className])
  }, displayFileIcon && import_react44.default.createElement(QuoteMessageThumbnail, {
    message: fileMessage
  }), import_react44.default.createElement("div", {
    className: "sendbird-quote_message_input__body",
    style: {
      width: "calc(100% - ".concat(displayFileIcon ? "164px" : "120px", ")"),
      left: displayFileIcon ? "92px" : "40px"
    }
  }, import_react44.default.createElement(Label, {
    className: "sendbird-quote_message_input__body__sender-name",
    type: LabelTypography.CAPTION_1,
    color: LabelColors.ONBACKGROUND_1
  }, "".concat(stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO, " ").concat(sender && sender.nickname ? sender.nickname : stringSet.NO_NAME)), import_react44.default.createElement(Label, {
    className: "sendbird-quote_message_input__body__message-content",
    type: LabelTypography.BODY_2,
    color: LabelColors.ONBACKGROUND_3
  }, isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE, isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO, isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF, isUserMessage(replyingMessage) && replyingMessage.message, getUIKitMessageType(replyingMessage) === UIKitMessageTypes.FILE && getMessageFirstFileName(fileMessage), isMultipleFilesMessage(replyingMessage) && "".concat(fileMessage.fileInfoList.length, " Photos"), isVoiceMessage(replyingMessage) && stringSet.VOICE_MESSAGE)), import_react44.default.createElement(Icon, {
    className: "sendbird-quote_message_input__close-button",
    type: IconTypes.CLOSE,
    fillColor: IconColors.ON_BACKGROUND_2,
    width: "24px",
    height: "24px",
    onClick: function() {
      return onClose(replyingMessage);
    }
  }));
}

// node_modules/@sendbird/uikit-react/useHandleUploadFiles-5ede1bfe.js
var import_react47 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/VoiceRecorder/useVoiceRecorder.js
var import_react45 = __toESM(require_react(), 1);
var import_react_dom16 = __toESM(require_react_dom(), 1);
var import_prop_types33 = __toESM(require_prop_types(), 1);
var VoiceRecorderStatus = {
  PREPARING: "PREPARING",
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  COMPLETED: "COMPLETED"
};
var noop3 = function() {
};
var useVoiceRecorder = function(_a) {
  var _b = _a.onRecordingStarted, onRecordingStarted = _b === void 0 ? noop3 : _b, _c = _a.onRecordingEnded, onRecordingEnded = _c === void 0 ? noop3 : _c;
  var config = useSendbirdStateContext().config;
  var voiceRecord = config.voiceRecord;
  var maxRecordingTime = voiceRecord.maxRecordingTime;
  var voiceRecorder = useVoiceRecorderContext();
  var isRecordable = voiceRecorder.isRecordable;
  var _d = (0, import_react45.useState)(null), recordedFile = _d[0], setRecordedFile = _d[1];
  var _e = (0, import_react45.useState)(VoiceRecorderStatus.PREPARING), recordingStatus = _e[0], setRecordingStatus = _e[1];
  (0, import_react45.useEffect)(function() {
    if (isRecordable && recordingStatus === VoiceRecorderStatus.PREPARING) {
      setRecordingStatus(VoiceRecorderStatus.READY_TO_RECORD);
    }
  }, [isRecordable]);
  var start = (0, import_react45.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.start({
      onRecordingStarted: function() {
        setRecordingStatus(VoiceRecorderStatus.RECORDING);
        onRecordingStarted();
        startTimer();
      },
      onRecordingEnded: function(audioFile) {
        setRecordingStatus(VoiceRecorderStatus.COMPLETED);
        onRecordingEnded(audioFile);
        setRecordedFile(audioFile);
        stopTimer();
      }
    });
  }, [onRecordingStarted, onRecordingEnded]);
  var stop = (0, import_react45.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.stop();
    stopTimer();
  }, [voiceRecorder]);
  var cancel = (0, import_react45.useCallback)(function() {
    stop();
    setRecordedFile(null);
  }, [voiceRecorder]);
  var _f = (0, import_react45.useState)(0), recordingTime = _f[0], setRecordingTime = _f[1];
  var timer = null;
  function startTimer() {
    stopTimer();
    setRecordingTime(0);
    var interval = setInterval(function() {
      setRecordingTime(function(prevTime) {
        var newTime = prevTime + 100;
        if (newTime > maxRecordingTime) {
          stopTimer();
        }
        return newTime;
      });
    }, 100);
    timer = interval;
  }
  function stopTimer() {
    clearInterval(timer);
    timer = null;
  }
  (0, import_react45.useEffect)(function() {
    if (recordingTime > maxRecordingTime) {
      stop();
    }
  }, [recordingTime, maxRecordingTime, stop]);
  return {
    start,
    stop,
    cancel,
    recordingStatus,
    recordingTime,
    recordedFile,
    recordingLimit: maxRecordingTime
  };
};

// node_modules/@sendbird/uikit-react/index-493689bd.js
var import_react46 = __toESM(require_react(), 1);
var VoiceMessageInputStatus = {
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  READY_TO_PLAY: "READY_TO_PLAY",
  PLAYING: "PLAYING"
};
var ControlerIcon = function(_a) {
  var inputState = _a.inputState;
  switch (inputState) {
    case VoiceMessageInputStatus.READY_TO_RECORD: {
      return import_react46.default.createElement("div", {
        className: "sendbird-controler-icon record-icon"
      });
    }
    case VoiceMessageInputStatus.RECORDING: {
      return import_react46.default.createElement("div", {
        className: "sendbird-controler-icon stop-icon"
      });
    }
    case VoiceMessageInputStatus.READY_TO_PLAY: {
      return import_react46.default.createElement(Icon, {
        className: "sendbird-controler-icon play-icon",
        width: "20px",
        height: "20px",
        type: IconTypes.PLAY,
        fillColor: IconColors.ON_BACKGROUND_1
      });
    }
    case VoiceMessageInputStatus.PLAYING: {
      return import_react46.default.createElement("div", {
        className: "sendbird-controler-icon pause-icon"
      }, import_react46.default.createElement("div", {
        className: "sendbird-controler-icon pause-icon-inner"
      }), import_react46.default.createElement("div", {
        className: "sendbird-controler-icon pause-icon-inner"
      }));
    }
    default:
      return null;
  }
};
var VoiceMessageInput = function(_a) {
  var _b = _a.minRecordTime, minRecordTime = _b === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _b, maximumValue = _a.maximumValue, _c = _a.currentValue, currentValue = _c === void 0 ? 0 : _c, currentType = _a.currentType, onCancelClick = _a.onCancelClick, onControlClick = _a.onControlClick, onSubmitClick = _a.onSubmitClick, renderCancelButton = _a.renderCancelButton, renderControlButton = _a.renderControlButton, renderSubmitButton = _a.renderSubmitButton;
  var _d = (0, import_react46.useState)(0), lastClickTime = _d[0], setLastClickTime = _d[1];
  var isReadyToRecord = (0, import_react46.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_RECORD;
  }, [currentType]);
  var isRecording = (0, import_react46.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.RECORDING;
  }, [currentType]);
  var isSendButtonDisabled = (0, import_react46.useMemo)(function() {
    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD || currentType === VoiceMessageInputStatus.RECORDING) {
      return minRecordTime > currentValue;
    }
    return false;
  }, [currentType, minRecordTime, currentValue]);
  var isPlayMode = (0, import_react46.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_PLAY || currentType === VoiceMessageInputStatus.PLAYING;
  }, [currentType]);
  var stringSet = useLocalization().stringSet;
  var handleOnCancelClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onCancelClick();
      setLastClickTime(currentTime);
    }
  };
  var handleOnControlClick = (0, import_react46.useCallback)(function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onControlClick(currentType);
      setLastClickTime(currentTime);
    }
  }, [currentType]);
  var handleOnSubmitClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      if (!isSendButtonDisabled) {
        onSubmitClick();
      }
      setLastClickTime(currentTime);
    }
  };
  return import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input"
  }, import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__indicator"
  }, import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__indicator__progress-bar"
  }, import_react46.default.createElement(ProgressBar, {
    className: "sendbird-voice-message-input__indicator__progress-bar__bar",
    disabled: isReadyToRecord,
    maxSize: maximumValue,
    currentSize: currentValue
  })), isRecording ? import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__indicator__on-rec"
  }) : null, import_react46.default.createElement(PlaybackTime, {
    className: "sendbird-voice-message-input__indicator__playback-time",
    time: isPlayMode ? maximumValue - currentValue : currentValue,
    labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1
  })), import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__controler"
  }, (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || import_react46.default.createElement(TextButton, {
    className: "sendbird-voice-message-input__controler__cancel",
    onClick: handleOnCancelClick,
    disableUnderline: true
  }, import_react46.default.createElement(Label, {
    type: LabelTypography.BUTTON_1,
    color: LabelColors.PRIMARY
  }, stringSet.BUTTON__CANCEL)), (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__controler__main",
    onClick: handleOnControlClick
  }, import_react46.default.createElement(ControlerIcon, {
    inputState: currentType
  })), (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || import_react46.default.createElement("div", {
    className: "sendbird-voice-message-input__controler__submit ".concat(isSendButtonDisabled ? "voice-message--disabled" : ""),
    onClick: handleOnSubmitClick
  }, import_react46.default.createElement(Icon, {
    width: "19px",
    height: "19px",
    type: IconTypes.SEND,
    fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT
  }))));
};

// node_modules/@sendbird/uikit-react/useHandleUploadFiles-5ede1bfe.js
var VoiceMessageInputWrapper = function(_a) {
  var _b;
  var channel = _a.channel, onCancelClick = _a.onCancelClick, onSubmitClick = _a.onSubmitClick;
  var uuid = (0, import_react47.useRef)(uuidv4()).current;
  var _c = (0, import_react47.useState)(null), audioFile = _c[0], setAudioFile = _c[1];
  var _d = (0, import_react47.useState)(VoiceMessageInputStatus.READY_TO_RECORD), voiceInputState = _d[0], setVoiceInputState = _d[1];
  var _e = (0, import_react47.useState)(false), isSubmitted = _e[0], setSubmit = _e[1];
  var _f = (0, import_react47.useState)(false), isDisabled = _f[0], setDisabled = _f[1];
  var _g = (0, import_react47.useState)(false), showModal = _g[0], setShowModal = _g[1];
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var minRecordingTime = ((_b = config === null || config === void 0 ? void 0 : config.voiceRecord) === null || _b === void 0 ? void 0 : _b.minRecordingTime) || VOICE_RECORDER_DEFAULT_MIN;
  var _h = useVoiceRecorder({
    onRecordingStarted: function() {
      setVoiceInputState(VoiceMessageInputStatus.RECORDING);
    },
    onRecordingEnded: function(audioFile2) {
      setAudioFile(audioFile2);
    }
  }), start = _h.start, stop = _h.stop, cancel = _h.cancel, recordingTime = _h.recordingTime, recordingStatus = _h.recordingStatus, recordingLimit = _h.recordingLimit;
  var voicePlayer = useVoicePlayer({
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    key: uuid,
    audioFile
  });
  var play = voicePlayer.play, pause = voicePlayer.pause, playbackTime = voicePlayer.playbackTime, playingStatus = voicePlayer.playingStatus;
  var stopVoicePlayer = voicePlayer.stop;
  (0, import_react47.useEffect)(function() {
    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {
      setDisabled(true);
    } else {
      setDisabled(false);
    }
  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);
  (0, import_react47.useEffect)(function() {
    if (isSubmitted && audioFile) {
      onSubmitClick(audioFile, recordingTime);
      setSubmit(false);
      setAudioFile(null);
    }
  }, [isSubmitted, audioFile, recordingTime]);
  (0, import_react47.useEffect)(function() {
    if (audioFile) {
      if (recordingTime < minRecordingTime) {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
        setAudioFile(null);
      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {
        setVoiceInputState(VoiceMessageInputStatus.PLAYING);
      } else {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);
      }
    }
  }, [audioFile, recordingTime, playingStatus]);
  return import_react47.default.createElement("div", {
    className: "sendbird-voice-message-input-wrapper"
  }, import_react47.default.createElement(VoiceMessageInput, {
    currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime,
    maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit,
    currentType: voiceInputState,
    onCancelClick: function() {
      onCancelClick();
      cancel();
      stopVoicePlayer();
    },
    onSubmitClick: function() {
      if (isDisabled) {
        setShowModal(true);
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
      } else {
        stop();
        pause();
        setSubmit(true);
      }
    },
    onControlClick: function(type) {
      switch (type) {
        case VoiceMessageInputStatus.READY_TO_RECORD: {
          stopVoicePlayer();
          start();
          break;
        }
        case VoiceMessageInputStatus.RECORDING: {
          if (recordingTime >= minRecordingTime && !isDisabled) {
            stop();
          } else if (isDisabled) {
            cancel();
            setShowModal(true);
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          } else {
            cancel();
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          }
          break;
        }
        case VoiceMessageInputStatus.READY_TO_PLAY: {
          play();
          break;
        }
        case VoiceMessageInputStatus.PLAYING: {
          pause();
          break;
        }
      }
    }
  }), showModal && import_react47.default.createElement(Modal, {
    className: "sendbird-voice-message-input-wrapper-alert",
    titleText: isDisabledBecauseMuted(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN,
    hideFooter: true,
    isCloseOnClickOutside: true,
    onCancel: function() {
      setShowModal(false);
      onCancelClick();
    }
  }, import_react47.default.createElement("div", {
    className: "sendbird-voice-message-input-wrapper-alert__body"
  }, import_react47.default.createElement(Button, {
    className: "sendbird-voice-message-input-wrapper-alert__body__ok-button",
    type: ButtonTypes.PRIMARY,
    size: ButtonSizes.BIG,
    onClick: function() {
      setShowModal(false);
      onCancelClick();
    }
  }, stringSet.BUTTON__OK))));
};
var useHandleUploadFiles = function(_a, _b) {
  var sendFileMessage = _a.sendFileMessage, sendMultipleFilesMessage = _a.sendMultipleFilesMessage, quoteMessage = _a.quoteMessage;
  var logger = _b.logger;
  var stringSet = useLocalization().stringSet;
  var config = useSendbirdStateContext().config;
  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;
  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;
  var openModal = useGlobalModalContext().openModal;
  var handleUploadFiles = (0, import_react47.useCallback)(function(fileList) {
    var files = Array.from(fileList);
    if (!sendFileMessage || !sendMultipleFilesMessage) {
      logger.warning("Channel|useHandleUploadFiles: required functions are undefined", {
        sendFileMessage,
        sendMultipleFilesMessage
      });
      return;
    }
    if (files.length === 0) {
      logger.warning("Channel|useHandleUploadFiles: given file list is empty.", {
        files
      });
      return;
    }
    if (files.length > uikitMultipleFilesMessageLimit) {
      logger.info("Channel|useHandleUploadFiles: Cannot upload files more than ".concat(uikitMultipleFilesMessageLimit));
      openModal({
        modalProps: {
          titleText: "Up to ".concat(uikitMultipleFilesMessageLimit, " files can be attached."),
          hideFooter: true
        },
        childElement: function(_a2) {
          var closeModal = _a2.closeModal;
          return import_react47.default.createElement(ModalFooter, {
            type: ButtonTypes.PRIMARY,
            submitText: stringSet.BUTTON__OK,
            hideCancelButton: true,
            onCancel: closeModal,
            onSubmit: closeModal
          });
        }
      });
      return;
    }
    if (files.some(function(file2) {
      return file2.size > uikitUploadSizeLimit;
    })) {
      logger.info("Channel|useHandleUploadFiles: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
      var ONE_MiB = 1024 * 1024;
      openModal({
        modalProps: {
          titleText: "The maximum size per file is ".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB), " MB."),
          hideFooter: true
        },
        childElement: function(_a2) {
          var closeModal = _a2.closeModal;
          return import_react47.default.createElement(ModalFooter, {
            type: ButtonTypes.PRIMARY,
            submitText: stringSet.BUTTON__OK,
            hideCancelButton: true,
            onCancel: closeModal,
            onSubmit: closeModal
          });
        }
      });
      return;
    }
    if (files.length === 1) {
      logger.info("Channel|useHandleUploadFiles: sending one file.");
      var file = files[0];
      sendFileMessage(file, quoteMessage);
    } else if (files.length > 1) {
      logger.info("Channel|useHandleUploadFiles: sending multiple files.");
      var imageFiles_1 = [];
      var otherFiles_1 = [];
      files.forEach(function(file2) {
        if (isImage(file2.type)) {
          imageFiles_1.push(file2);
        } else {
          otherFiles_1.push(file2);
        }
      });
      return otherFiles_1.reduce(function(previousPromise, item) {
        return previousPromise.then(function() {
          return sendFileMessage(item, quoteMessage);
        });
      }, function() {
        if (imageFiles_1.length === 0) {
          return Promise.resolve();
        } else if (imageFiles_1.length === 1) {
          return sendFileMessage(imageFiles_1[0], quoteMessage);
        } else {
          return sendMultipleFilesMessage(imageFiles_1, quoteMessage);
        }
      }());
    }
  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);
  return [handleUploadFiles];
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageInput.js
var import_prop_types34 = __toESM(require_prop_types(), 1);
var import_react_dom17 = __toESM(require_react_dom(), 1);
var MessageInputWrapper = function(props, ref) {
  var _a;
  var value = props.value, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon;
  var propDisabled = props.disabled;
  var channelContext = useChannelContext();
  var currentGroupChannel = channelContext.currentGroupChannel, initialized = channelContext.initialized, quoteMessage = channelContext.quoteMessage, sendMessage = channelContext.sendMessage, sendFileMessage = channelContext.sendFileMessage, sendVoiceMessage = channelContext.sendVoiceMessage, sendMultipleFilesMessage = channelContext.sendMultipleFilesMessage, setQuoteMessage = channelContext.setQuoteMessage, messageInputRef = channelContext.messageInputRef, renderUserMentionItem = channelContext.renderUserMentionItem;
  var globalStore = useSendbirdStateContext();
  var isMobile = useMediaQueryContext().isMobile;
  var channel = currentGroupChannel;
  var _b = globalStore.config, isOnline = _b.isOnline, isMentionEnabled = _b.isMentionEnabled, userMention = _b.userMention, isVoiceMessageEnabled = _b.isVoiceMessageEnabled, logger = _b.logger;
  var isMultipleFilesMessageEnabled = (_a = channelContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : globalStore.config.isMultipleFilesMessageEnabled;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15;
  var stringSet = (0, import_react48.useContext)(LocalizationContext).stringSet;
  var _c = (0, import_react48.useState)(""), mentionNickname = _c[0], setMentionNickname = _c[1];
  var _d = (0, import_react48.useState)([]), mentionedUsers = _d[0], setMentionedUsers = _d[1];
  var _e = (0, import_react48.useState)([]), mentionedUserIds = _e[0], setMentionedUserIds = _e[1];
  var _f = (0, import_react48.useState)(null), selectedUser = _f[0], setSelectedUser = _f[1];
  var _g = (0, import_react48.useState)([]), mentionSuggestedUsers = _g[0], setMentionSuggestedUsers = _g[1];
  var _h = (0, import_react48.useState)(null), messageInputEvent = _h[0], setMessageInputEvent = _h[1];
  var _j = (0, import_react48.useState)(false), showVoiceMessageInput = _j[0], setShowVoiceMessageInput = _j[1];
  var disabled = propDisabled || !initialized || isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel) || !isOnline;
  var isOperator$1 = isOperator(channel);
  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
  var displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(channel) && !isDisabledBecauseMuted(channel) && !isBroadcast;
  (0, import_react48.useEffect)(function() {
    setMentionNickname("");
    setMentionedUsers([]);
    setMentionedUserIds([]);
    setSelectedUser(null);
    setMentionSuggestedUsers([]);
    setMessageInputEvent(null);
    setShowVoiceMessageInput(false);
  }, [channel === null || channel === void 0 ? void 0 : channel.url]);
  var mentionNodes = useDirtyGetMentions({
    ref: ref || messageInputRef
  }, {
    logger
  });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  (0, import_react48.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a2) {
      var userId = _a2.userId;
      var i = mentionedUserIds.indexOf(userId);
      if (i < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage,
    sendMultipleFilesMessage,
    quoteMessage
  }, {
    logger
  })[0];
  if (isBroadcast && !isOperator$1) {
    return null;
  }
  return import_react48.default.createElement("div", {
    className: "sendbird-message-input-wrapper".concat(showVoiceMessageInput ? "--voice-message" : "")
  }, displaySuggestedMentionList && import_react48.default.createElement(SuggestedMentionList, {
    targetNickname: mentionNickname,
    inputEvent: messageInputEvent,
    renderUserMentionItem,
    onUserItemClick: function(user) {
      if (user) {
        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname("");
      setSelectedUser(user);
      setMessageInputEvent(null);
    },
    onFocusItemChange: function() {
      setMessageInputEvent(null);
    },
    onFetchUsers: function(users) {
      setMentionSuggestedUsers(users);
    },
    ableAddMention: ableMention,
    maxMentionCount: maxUserMentionCount,
    maxSuggestionCount: maxUserSuggestionCount
  }), quoteMessage && import_react48.default.createElement("div", {
    className: "sendbird-message-input-wrapper__quote-message-input"
  }, import_react48.default.createElement(QuoteMessageInput, {
    replyingMessage: quoteMessage,
    onClose: function() {
      return setQuoteMessage(null);
    }
  })), showVoiceMessageInput ? import_react48.default.createElement(VoiceMessageInputWrapper, {
    channel,
    onSubmitClick: function(recordedFile, duration) {
      sendVoiceMessage(recordedFile, duration, quoteMessage);
      setQuoteMessage(null);
      setShowVoiceMessageInput(false);
    },
    onCancelClick: function() {
      setShowVoiceMessageInput(false);
    }
  }) : import_react48.default.createElement(MessageInput, {
    className: "sendbird-message-input-wrapper__message-input",
    value,
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    mentionSelectedUser: selectedUser,
    isMentionEnabled,
    isVoiceMessageEnabled,
    isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled,
    onVoiceMessageIconClick: function() {
      setShowVoiceMessageInput(true);
    },
    setMentionedUsers,
    channel,
    placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || isDisabledBecauseMuted(channel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED),
    ref: ref || messageInputRef,
    disabled,
    renderFileUploadIcon,
    renderSendMessageIcon,
    renderVoiceMessageIcon,
    onStartTyping: function() {
      channel === null || channel === void 0 ? void 0 : channel.startTyping();
    },
    onSendMessage: function(_a2) {
      var _b2;
      var message = _a2.message, mentionTemplate = _a2.mentionTemplate;
      sendMessage({
        message,
        quoteMessage,
        mentionedUsers,
        mentionTemplate
      });
      setMentionNickname("");
      setMentionedUsers([]);
      setQuoteMessage(null);
      (_b2 = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b2 === void 0 ? void 0 : _b2.call(channel);
    },
    onFileUpload: function(fileList) {
      handleUploadFiles(fileList);
      setQuoteMessage(null);
    },
    onUserMentioned: function(user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname("");
      }
    },
    onMentionStringChange: function(mentionText) {
      setMentionNickname(mentionText);
    },
    onMentionedUserIdsUpdated: function(userIds) {
      setMentionedUserIds(userIds);
    },
    onKeyDown: function(e) {
      if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e);
        return true;
      }
      return false;
    }
  }));
};
var MessageInputWrapper$1 = import_react48.default.forwardRef(MessageInputWrapper);

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_prop_types35 = __toESM(require_prop_types(), 1);
var import_react_dom18 = __toESM(require_react_dom(), 1);
var ChannelUI = function(_a) {
  var _b, _c, _d, _e, _f, _g;
  var isLoading = _a.isLoading, renderPlaceholderLoader = _a.renderPlaceholderLoader, renderPlaceholderInvalid = _a.renderPlaceholderInvalid, renderPlaceholderEmpty = _a.renderPlaceholderEmpty, renderChannelHeader = _a.renderChannelHeader, renderMessage = _a.renderMessage, renderMessageInput = _a.renderMessageInput, renderTypingIndicator = _a.renderTypingIndicator, renderCustomSeparator = _a.renderCustomSeparator, renderFileUploadIcon = _a.renderFileUploadIcon, renderVoiceMessageIcon = _a.renderVoiceMessageIcon, renderSendMessageIcon = _a.renderSendMessageIcon;
  var _h = useChannelContext(), channelUrl = _h.channelUrl, isInvalid = _h.isInvalid;
  var globalStore = useSendbirdStateContext();
  var sdkError = (_c = (_b = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.error;
  var logger = (_d = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _d === void 0 ? void 0 : _d.logger;
  var isOnline = (_e = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _e === void 0 ? void 0 : _e.isOnline;
  if (isLoading) {
    return import_react49.default.createElement("div", {
      className: "sendbird-conversation"
    }, (renderPlaceholderLoader === null || renderPlaceholderLoader === void 0 ? void 0 : renderPlaceholderLoader()) || import_react49.default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.LOADING
    }));
  }
  if (!channelUrl) {
    return import_react49.default.createElement("div", {
      className: "sendbird-conversation"
    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react49.default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.NO_CHANNELS
    }));
  }
  if (isInvalid) {
    return import_react49.default.createElement("div", {
      className: "sendbird-conversation"
    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react49.default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.WRONG
    }));
  }
  if (sdkError) {
    return import_react49.default.createElement("div", {
      className: "sendbird-conversation"
    }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react49.default.createElement(PlaceHolder, {
      type: PlaceHolderTypes.WRONG,
      retryToConnect: function() {
        logger.info("Channel: reconnecting");
      }
    }));
  }
  return import_react49.default.createElement("div", {
    className: "sendbird-conversation"
  }, (renderChannelHeader === null || renderChannelHeader === void 0 ? void 0 : renderChannelHeader()) || import_react49.default.createElement(ChannelHeader, {
    className: "sendbird-conversation__channel-header"
  }), import_react49.default.createElement(MessageList, {
    className: "sendbird-conversation__message-list",
    renderMessage,
    renderPlaceholderEmpty,
    renderCustomSeparator,
    renderPlaceholderLoader
  }), import_react49.default.createElement("div", {
    className: "sendbird-conversation__footer"
  }, (renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput()) || import_react49.default.createElement(MessageInputWrapper$1, {
    renderFileUploadIcon,
    renderVoiceMessageIcon,
    renderSendMessageIcon
  }), import_react49.default.createElement("div", {
    className: "sendbird-conversation__footer__typing-indicator"
  }, (renderTypingIndicator === null || renderTypingIndicator === void 0 ? void 0 : renderTypingIndicator()) || ((_g = (_f = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _f === void 0 ? void 0 : _f.groupChannel) === null || _g === void 0 ? void 0 : _g.enableTypingIndicator) && import_react49.default.createElement(TypingIndicator, null), !isOnline && import_react49.default.createElement(ConnectionStatus, null))));
};

// node_modules/@sendbird/uikit-react/Channel.js
var import_prop_types36 = __toESM(require_prop_types());
var import_react_dom19 = __toESM(require_react_dom());
var Channel = function(props) {
  return import_react50.default.createElement(ChannelProvider, {
    channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl,
    isReactionEnabled: props === null || props === void 0 ? void 0 : props.isReactionEnabled,
    isMessageGroupingEnabled: props === null || props === void 0 ? void 0 : props.isMessageGroupingEnabled,
    isMultipleFilesMessageEnabled: props === null || props === void 0 ? void 0 : props.isMultipleFilesMessageEnabled,
    showSearchIcon: props === null || props === void 0 ? void 0 : props.showSearchIcon,
    animatedMessage: props === null || props === void 0 ? void 0 : props.animatedMessage,
    highlightedMessage: props === null || props === void 0 ? void 0 : props.highlightedMessage,
    startingPoint: props === null || props === void 0 ? void 0 : props.startingPoint,
    onBeforeSendUserMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendUserMessage,
    onBeforeSendFileMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendFileMessage,
    onBeforeUpdateUserMessage: props === null || props === void 0 ? void 0 : props.onBeforeUpdateUserMessage,
    onBeforeSendVoiceMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendVoiceMessage,
    onBeforeSendMultipleFilesMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendMultipleFilesMessage,
    onChatHeaderActionClick: props === null || props === void 0 ? void 0 : props.onChatHeaderActionClick,
    onSearchClick: props === null || props === void 0 ? void 0 : props.onSearchClick,
    onBackClick: props === null || props === void 0 ? void 0 : props.onBackClick,
    replyType: props === null || props === void 0 ? void 0 : props.replyType,
    threadReplySelectType: props === null || props === void 0 ? void 0 : props.threadReplySelectType,
    queries: props === null || props === void 0 ? void 0 : props.queries,
    renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,
    filterMessageList: props === null || props === void 0 ? void 0 : props.filterMessageList,
    disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile,
    disableMarkAsRead: props === null || props === void 0 ? void 0 : props.disableMarkAsRead,
    onReplyInThread: props === null || props === void 0 ? void 0 : props.onReplyInThread,
    onQuoteMessageClick: props === null || props === void 0 ? void 0 : props.onQuoteMessageClick,
    onMessageAnimated: props === null || props === void 0 ? void 0 : props.onMessageAnimated,
    onMessageHighlighted: props === null || props === void 0 ? void 0 : props.onMessageHighlighted,
    scrollBehavior: props.scrollBehavior,
    reconnectOnIdle: props.reconnectOnIdle
  }, import_react50.default.createElement(ChannelUI, {
    isLoading: props === null || props === void 0 ? void 0 : props.isLoading,
    renderPlaceholderLoader: props === null || props === void 0 ? void 0 : props.renderPlaceholderLoader,
    renderPlaceholderInvalid: props === null || props === void 0 ? void 0 : props.renderPlaceholderInvalid,
    renderPlaceholderEmpty: props === null || props === void 0 ? void 0 : props.renderPlaceholderEmpty,
    renderChannelHeader: props === null || props === void 0 ? void 0 : props.renderChannelHeader,
    renderMessage: props === null || props === void 0 ? void 0 : props.renderMessage,
    renderMessageInput: props === null || props === void 0 ? void 0 : props.renderMessageInput,
    renderTypingIndicator: props === null || props === void 0 ? void 0 : props.renderTypingIndicator,
    renderCustomSeparator: props === null || props === void 0 ? void 0 : props.renderCustomSeparator,
    renderFileUploadIcon: props === null || props === void 0 ? void 0 : props.renderFileUploadIcon,
    renderVoiceMessageIcon: props === null || props === void 0 ? void 0 : props.renderVoiceMessageIcon,
    renderSendMessageIcon: props === null || props === void 0 ? void 0 : props.renderSendMessageIcon
  }));
};
export {
  Channel as default
};
/*! Bundled license information:

dompurify/dist/purify.es.js:
  (*! @license DOMPurify 3.0.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.6/LICENSE *)
*/
//# sourceMappingURL=@sendbird_uikit-react_Channel.js.map
