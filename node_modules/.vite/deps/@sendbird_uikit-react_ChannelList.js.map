{
  "version": 3,
  "sources": ["../../@sendbird/src/modules/ChannelList/dux/actionTypes.ts", "../../@sendbird/src/modules/ChannelList/utils.ts", "../../@sendbird/src/modules/ChannelList/dux/getNextChannel.ts", "../../@sendbird/src/modules/ChannelList/dux/initialState.ts", "../../@sendbird/src/modules/ChannelList/dux/reducers.ts", "../../@sendbird/src/modules/ChannelList/context/hooks/useActiveChannelUrl.ts", "../../@sendbird/src/modules/ChannelList/context/hooks/useFetchChannelList.ts", "../../@sendbird/src/modules/ChannelList/context/ChannelListProvider.tsx", "../../@sendbird/src/modules/ChannelList/components/ChannelListHeader/index.tsx", "../../@sendbird/src/modules/CreateChannel/types.ts", "../../@sendbird/src/modules/CreateChannel/context/CreateChannelProvider.tsx", "../../@sendbird/src/modules/CreateChannel/components/InviteUsers/utils.ts", "../../@sendbird/src/modules/CreateChannel/components/InviteUsers/index.tsx", "../../@sendbird/src/modules/CreateChannel/utils.ts", "../../@sendbird/src/modules/CreateChannel/components/SelectChannelType.tsx", "../../@sendbird/src/modules/CreateChannel/components/CreateChannelUI/index.tsx", "../../@sendbird/src/modules/CreateChannel/index.tsx", "../../@sendbird/src/modules/ChannelList/components/AddChannel/index.tsx", "../../@sendbird/src/ui/Badge/index.tsx", "../../@sendbird/src/ui/MentionUserLabel/index.tsx", "../../@sendbird/src/modules/ChannelList/components/ChannelPreview/index.tsx", "../../@sendbird/src/modules/ChannelList/components/LeaveChannel/index.tsx", "../../@sendbird/src/modules/ChannelList/components/ChannelPreviewAction.tsx", "../../@sendbird/src/modules/EditUserProfile/context/EditUserProfileProvider.tsx", "../../@sendbird/src/ui/Input/index.tsx", "../../@sendbird/src/modules/EditUserProfile/components/EditUserProfileUI/index.tsx", "../../@sendbird/src/modules/EditUserProfile/index.tsx", "../../@sendbird/src/modules/ChannelList/components/ChannelListUI/index.tsx", "../../@sendbird/src/modules/ChannelList/index.tsx"],
  "sourcesContent": ["import type { GroupChannel, GroupChannelListQuery } from '@sendbird/chat/groupChannel';\nimport { CreateAction } from '../../../utils/typeHelpers/reducers/createAction';\n\nexport const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n\ntype CHANNEL_LIST_PAYLOAD_TYPES = {\n  [RESET_CHANNEL_LIST]: null;\n  [CREATE_CHANNEL]: GroupChannel;\n  [UNLOAD_CHANNELS]: null;\n  [SET_CHANNEL_LOADING]: boolean;\n  [LEAVE_CHANNEL_SUCCESS]: ChannelURL;\n  [SET_CURRENT_CHANNEL]: GroupChannel | null;\n  [FETCH_CHANNELS_START]: null;\n\n  [FETCH_CHANNELS_SUCCESS]: GroupChannel[];\n  [FETCH_CHANNELS_FAILURE]: null;\n  [INIT_CHANNELS_START]: null;\n  [INIT_CHANNELS_SUCCESS]: {\n    channelList: GroupChannel[];\n    disableAutoSelect: boolean;\n  };\n  [INIT_CHANNELS_FAILURE]: null;\n  [INVITE_MEMBERS_SUCESS]: null;\n  [ON_USER_JOINED]: GroupChannel;\n  [ON_CHANNEL_DELETED]: ChannelURL;\n  [ON_LAST_MESSAGE_UPDATED]: GroupChannel;\n  [ON_USER_LEFT]: {\n    isMe: boolean;\n    channel: GroupChannel;\n  };\n  [ON_CHANNEL_CHANGED]: GroupChannel;\n  [ON_CHANNEL_ARCHIVED]: GroupChannel;\n  [ON_CHANNEL_FROZEN]: GroupChannel;\n  [ON_CHANNEL_UNFROZEN]: GroupChannel;\n  [ON_READ_RECEIPT_UPDATED]: GroupChannel;\n  [ON_DELIVERY_RECEIPT_UPDATED]: GroupChannel;\n  [CHANNEL_REPLACED_TO_TOP]: GroupChannel;\n  [CHANNEL_LIST_PARAMS_UPDATED]: {\n    channelListQuery: GroupChannelListQuery;\n    currentUserId: string | undefined;\n  };\n};\n\ntype ChannelURL = string;\n\nexport type ChannelListActionTypes = CreateAction<CHANNEL_LIST_PAYLOAD_TYPES>;\n", "import {\n  GroupChannel,\n  GroupChannelHandler,\n  GroupChannelListQuery,\n  GroupChannelListQueryParams,\n} from '@sendbird/chat/groupChannel';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../lib/pubSub/topics';\nimport { SdkStore } from '../../lib/types';\nimport React from 'react';\nimport { ChannelListInitialStateType } from './dux/initialState';\nimport { ChannelListActionTypes } from './dux/actionTypes';\nimport { GroupChannelListQueryParamsInternal } from './context/ChannelListProvider';\nimport { LoggerInterface } from '../../lib/Logger';\nimport { MarkAsDeliveredSchedulerType } from '../../lib/hooks/useMarkAsDeliveredScheduler';\nimport { PubSubTypes } from '../../lib/pubSub';\nimport { BaseMessage } from '@sendbird/chat/message';\n\nconst DELIVERY_RECEIPT = 'delivery_receipt';\n\ntype CreateEventHandlerParams = {\n  sdk: SdkStore['sdk'];\n  sdkChannelHandlerId: string;\n  channelListDispatcher: React.Dispatch<ChannelListActionTypes>;\n  logger: LoggerInterface;\n};\nconst createEventHandler = ({ sdk, sdkChannelHandlerId, channelListDispatcher, logger }: CreateEventHandlerParams) => {\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: (channel) => {\n      if (channel.isGroupChannel()) {\n        logger.info('ChannelList: onChannelChanged', channel);\n        channelListDispatcher({\n          type: channelActions.ON_CHANNEL_CHANGED,\n          payload: channel,\n        });\n      }\n    },\n    onChannelDeleted: (channelUrl) => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_DELETED,\n        payload: channelUrl,\n      });\n    },\n    onUserJoined: (channel) => {\n      logger.info('ChannelList: onUserJoined', channel);\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    },\n    onUserBanned: (channel, user) => {\n      if (channel.isGroupChannel()) {\n        logger.info('Channel: onUserBanned', channel);\n        const isMe = user.userId === sdk?.currentUser?.userId;\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: { channel, isMe },\n        });\n      }\n    },\n    onUserLeft: (channel, user) => {\n      logger.info('ChannelList: onUserLeft', channel);\n      const isMe = user.userId === sdk?.currentUser?.userId;\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: { channel, isMe },\n      });\n    },\n    onUnreadMemberStatusUpdated: (channel) => {\n      logger.info('ChannelList: onUnreadMemberStatusUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_READ_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    },\n    onUndeliveredMemberStatusUpdated: (channel) => {\n      logger.info('ChannelList: onUndeliveredMemberStatusUpdated', channel);\n      if (channel.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n    onMessageUpdated: (channel, message) => {\n      if (channel.isGroupChannel() && channel.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n    onChannelHidden: (channel) => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_ARCHIVED,\n        payload: channel,\n      });\n    },\n    onChannelFrozen: (channel) => {\n      if (channel.isGroupChannel()) {\n        logger.info('ChannelList: onChannelFrozen', channel);\n        channelListDispatcher({\n          type: channelActions.ON_CHANNEL_FROZEN,\n          payload: channel,\n        });\n      }\n    },\n    onChannelUnfrozen: (channel) => {\n      if (channel.isGroupChannel()) {\n        logger.info('ChannelList: onChannelUnfrozen', channel);\n        channelListDispatcher({\n          type: channelActions.ON_CHANNEL_UNFROZEN,\n          payload: channel,\n        });\n      }\n    },\n  });\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\ntype CreateChannelListQueryParams = {\n  sdk: SdkStore['sdk'];\n  userFilledChannelListQuery: GroupChannelListQueryParamsInternal;\n};\n\nconst createChannelListQuery = ({\n  sdk,\n  userFilledChannelListQuery = {},\n}: CreateChannelListQueryParams): GroupChannelListQuery => {\n  const params: GroupChannelListQueryParamsInternal = {\n    includeEmpty: false,\n    limit: 20, // The value of pagination limit could be set up to 100.\n    order: 'latest_last_message', // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  };\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      params[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return sdk.groupChannel.createMyGroupChannelListQuery(params as GroupChannelListQueryParams);\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\ntype SetupChannelListParams = {\n  sdk: SdkStore['sdk'];\n  sdkChannelHandlerId: string;\n  channelListDispatcher: React.Dispatch<ChannelListActionTypes>;\n  setChannelSource: (query: GroupChannelListQuery) => void;\n  onChannelSelect: (channel: ChannelListInitialStateType['currentChannel']) => void;\n  userFilledChannelListQuery: GroupChannelListQueryParamsInternal;\n  logger: LoggerInterface;\n  sortChannelList: (channels: GroupChannel[]) => GroupChannel[];\n  disableAutoSelect: boolean;\n  markAsDeliveredScheduler: MarkAsDeliveredSchedulerType;\n  disableMarkAsDelivered: boolean;\n};\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n  markAsDeliveredScheduler,\n  disableMarkAsDelivered,\n}: SetupChannelListParams) {\n  if (sdk?.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery\n      .next()\n      .then((channelList) => {\n        logger.info('ChannelList - fetched channels', channelList);\n        // select first channel\n        logger.info('ChannelList - highlight channel', channelList[0]);\n        let sortedChannelList = channelList;\n        if (sortChannelList && typeof sortChannelList === 'function') {\n          sortedChannelList = sortChannelList(channelList);\n          logger.info('ChannelList - channel list sorted', sortedChannelList);\n        }\n        if (!disableAutoSelect) {\n          onChannelSelect?.(sortedChannelList[0]);\n        }\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_SUCCESS,\n          payload: { channelList: sortedChannelList, disableAutoSelect },\n        });\n        const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList?.find((feature) => feature === DELIVERY_RECEIPT);\n\n        if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n          sortedChannelList.forEach((channel) => {\n            markAsDeliveredScheduler.push(channel);\n          });\n        }\n      })\n      .catch((err) => {\n        if (err) {\n          logger.error('ChannelList - couldnt fetch channels', err);\n          channelListDispatcher({\n            type: channelActions.INIT_CHANNELS_FAILURE,\n          });\n        }\n      });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber: ReturnType<typeof pubSubHandler>) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub: PubSubTypes, channelListDispatcher: React.Dispatch<ChannelListActionTypes>) => {\n  const subscriber = new Map<string, ReturnType<PubSubTypes['subscribe']>>();\n  if (!pubSub) return subscriber;\n  subscriber.set(\n    topics.CREATE_CHANNEL,\n    pubSub.subscribe(topics.CREATE_CHANNEL, (msg: { channel: GroupChannel }) => {\n      const { channel } = msg;\n      channelListDispatcher({\n        type: 'CREATE_CHANNEL',\n        payload: channel,\n      });\n    }),\n  );\n\n  subscriber.set(\n    topics.UPDATE_USER_MESSAGE,\n    pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg: { channel: GroupChannel; message: BaseMessage }) => {\n      const { channel, message } = msg;\n      const updatedChannel = channel;\n      if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n        updatedChannel.lastMessage = message;\n      }\n      if (channel) {\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: updatedChannel,\n        });\n      }\n    }),\n  );\n\n  subscriber.set(\n    topics.LEAVE_CHANNEL,\n    pubSub.subscribe(topics.LEAVE_CHANNEL, (msg: { channel: GroupChannel }) => {\n      const { channel } = msg;\n      channelListDispatcher({\n        type: channelActions.LEAVE_CHANNEL_SUCCESS,\n        payload: channel?.url,\n      });\n    }),\n  );\n\n  subscriber.set(\n    topics.SEND_MESSAGE_START,\n    pubSub.subscribe(topics.SEND_MESSAGE_START, (msg: { channel: GroupChannel }) => {\n      const { channel } = msg;\n      channelListDispatcher({\n        type: channelActions.CHANNEL_REPLACED_TO_TOP,\n        payload: channel,\n      });\n    }),\n  );\n\n  return subscriber;\n};\n\nexport default setupChannelList;\n", "// See the conditions of this function here https://github.com/sendbird/sendbird-uikit-react/pull/777\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\ntype CurrentChannelType = GroupChannel | null;\n\nexport interface GetNextChannelParams {\n  channel: GroupChannel;\n  currentChannel: CurrentChannelType;\n  allChannels: GroupChannel[];\n  disableAutoSelect: boolean;\n}\n\n/**\n * NOTICE: Use this function IF the current channel is removed from allChannels.\n * This function will give you the next currentChannel value.\n */\nexport const getNextChannel = ({\n  channel,\n  currentChannel,\n  allChannels,\n  disableAutoSelect,\n}: GetNextChannelParams): CurrentChannelType => {\n  let nextChannel: CurrentChannelType = null;\n  if (currentChannel?.url === channel.url) {\n    if (!disableAutoSelect && allChannels.length > 0) {\n      const [firstChannel, secondChannel = null] = allChannels;\n      nextChannel = firstChannel.url === channel.url ? secondChannel : firstChannel;\n    }\n  } else {\n    nextChannel = currentChannel;\n  }\n  return nextChannel;\n};\n", "import type { GroupChannel, GroupChannelListQuery } from '@sendbird/chat/groupChannel';\n\nexport interface ChannelListInitialStateType {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: null | GroupChannel;\n  channelListQuery: null | GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst initialState: ChannelListInitialStateType = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n\nexport default initialState;\n", "import { match, P } from 'ts-pattern';\nimport { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as channelListActions from './actionTypes';\nimport { ChannelListActionTypes } from './actionTypes';\nimport { getNextChannel } from './getNextChannel';\nimport initialState, { ChannelListInitialStateType } from './initialState';\n\nexport default function channelListReducer(\n  state: ChannelListInitialStateType,\n  action: ChannelListActionTypes,\n): ChannelListInitialStateType {\n  return (\n    match(action)\n      .with({ type: channelListActions.INIT_CHANNELS_START }, () => ({ ...state, loading: true }))\n      .with({ type: channelListActions.RESET_CHANNEL_LIST }, () => initialState)\n      .with({ type: channelListActions.INIT_CHANNELS_SUCCESS }, (action) => {\n        const { channelList, disableAutoSelect } = action.payload;\n        return {\n          ...state,\n          initialized: true,\n          loading: false,\n          allChannels: channelList,\n          disableAutoSelect,\n          currentChannel:\n            !disableAutoSelect && channelList && channelList.length && channelList.length > 0 ? channelList[0] : null,\n        };\n      })\n      .with({ type: channelListActions.FETCH_CHANNELS_SUCCESS }, (action) => {\n        const currentChannels = state.allChannels.map((c) => c.url);\n        const filteredChannels = action.payload.filter(({ url }) => !currentChannels.find((c) => c === url));\n        return {\n          ...state,\n          allChannels: [...state.allChannels, ...filteredChannels],\n        };\n      })\n      .with({ type: channelListActions.CREATE_CHANNEL }, (action) => {\n        const channel = action.payload;\n        const { allChannels, currentUserId, channelListQuery } = state;\n        if (channelListQuery) {\n          if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n            // Good to add to the ChannelList\n            return {\n              ...state,\n              currentChannel: channel,\n              allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n            };\n          }\n          // Do not add to the ChannelList\n          return {\n            ...state,\n            currentChannel: channel,\n          };\n        }\n        // No channelListQuery\n        // Add to the top of the ChannelList\n        return {\n          ...state,\n          currentChannel: channel,\n          allChannels: [channel, ...allChannels.filter((ch) => ch.url !== channel?.url)],\n        };\n      })\n      // A hidden channel will be unhidden when getting new message\n      .with({ type: channelListActions.ON_CHANNEL_ARCHIVED }, (action) => {\n        const channel = action.payload;\n        const { allChannels, currentUserId, currentChannel, channelListQuery, disableAutoSelect } = state;\n        if (channelListQuery) {\n          if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n            // Good to [add to/keep in] the ChannelList\n            return {\n              ...state,\n              allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n            };\n          }\n          // * Remove the channel from the ChannelList: because the channel is filtered\n        }\n\n        // No channelListQuery\n        // * Remove the channel from the ChannelList: because the channel is hidden\n        // Replace the currentChannel if it's filtered or hidden\n        const nextChannel = getNextChannel({\n          channel,\n          currentChannel,\n          allChannels,\n          disableAutoSelect,\n        });\n        return {\n          ...state,\n          currentChannel: nextChannel,\n          allChannels: allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      })\n      .with(\n        { type: P.union(channelListActions.LEAVE_CHANNEL_SUCCESS, channelListActions.ON_CHANNEL_DELETED) },\n        (action) => {\n          const channelUrl = action.payload;\n          return {\n            ...state,\n            currentChannel: channelUrl === state.currentChannel?.url ? state.allChannels[0] : state.currentChannel,\n            allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n          };\n        },\n      )\n      .with({ type: channelListActions.ON_USER_LEFT }, (action) => {\n        const { channel, isMe } = action.payload;\n        const { allChannels, currentUserId, currentChannel, channelListQuery, disableAutoSelect } = state;\n        let nextChannels = allChannels.filter((ch) => ch.url !== channel.url);\n        let nextChannel = null;\n        if (channelListQuery) {\n          if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n            // Good to [add to/keep in] the ChannelList\n            nextChannels = getChannelsWithUpsertedChannel(allChannels, channel);\n          }\n        }\n        // Replace the currentChannel if I left the currentChannel\n        if (isMe) {\n          nextChannel = getNextChannel({\n            channel,\n            currentChannel,\n            allChannels,\n            disableAutoSelect,\n          });\n        }\n        return {\n          ...state,\n          currentChannel: nextChannel,\n          allChannels: nextChannels,\n        };\n      })\n      .with(\n        {\n          type: P.union(\n            channelListActions.ON_USER_JOINED,\n            channelListActions.ON_CHANNEL_CHANGED,\n            channelListActions.ON_READ_RECEIPT_UPDATED,\n            channelListActions.ON_DELIVERY_RECEIPT_UPDATED,\n          ),\n        },\n        (action) => {\n          const channel = action.payload;\n          const { allChannels = [], currentUserId, currentChannel, channelListQuery, disableAutoSelect } = state;\n          const { unreadMessageCount } = channel;\n\n          // Do not display the channel when it's created (and not sent a message yet)\n          if (action.type === channelListActions.ON_USER_JOINED && !channel?.lastMessage) return state;\n\n          if (channelListQuery) {\n            if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n              // Good to [add to/keep in] the ChannelList\n              return {\n                ...state,\n                allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n              };\n            }\n            // Filter the channel from the ChannelList\n            // Replace the currentChannel if it's filtered channel\n            const nextChannel = getNextChannel({\n              channel,\n              currentChannel,\n              allChannels,\n              disableAutoSelect,\n            });\n            return {\n              ...state,\n              currentChannel: nextChannel,\n              allChannels: allChannels.filter(({ url }) => url !== channel?.url),\n            };\n          }\n\n          if (\n            // When marking as read the channel\n            unreadMessageCount === 0\n            // @ts-ignore - When sending a message by the current peer\n            && channel?.lastMessage?.sender?.userId !== currentUserId\n          ) {\n            // Don't move to the top\n            return {\n              ...state,\n              allChannels: allChannels.map((ch) => (ch.url === channel?.url ? channel : ch)),\n            };\n          }\n          // Move to the top\n          return {\n            ...state,\n            allChannels: [channel, ...allChannels.filter(({ url }) => url !== channel.url)],\n          };\n        },\n      )\n      .with({ type: channelListActions.SET_CURRENT_CHANNEL }, (action) => {\n        return {\n          ...state,\n          currentChannel: action.payload,\n        };\n      })\n      .with({ type: channelListActions.ON_LAST_MESSAGE_UPDATED }, (action) => {\n        return {\n          ...state,\n          allChannels: state.allChannels.map((channel) => channel?.url === action.payload.url ? action.payload : channel,\n          ),\n        };\n      })\n      .with({ type: channelListActions.ON_CHANNEL_FROZEN }, (action) => {\n        const channel = action.payload;\n        const { allChannels, currentUserId, currentChannel, channelListQuery, disableAutoSelect } = state;\n        if (channelListQuery) {\n          if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n            // Good to [add to/keep in] the ChannelList\n            return {\n              ...state,\n              allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n            };\n          }\n          // Filter the channel from the ChannelList\n          // Replace the currentChannel if it's filtered channel\n          const nextChannel = getNextChannel({\n            channel,\n            currentChannel,\n            allChannels,\n            disableAutoSelect,\n          });\n          return {\n            ...state,\n            currentChannel: nextChannel,\n            allChannels: allChannels.filter(({ url }) => url !== channel?.url),\n          };\n        }\n        return {\n          ...state,\n          allChannels: allChannels.map((ch) => {\n            if (ch.url === channel?.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n            return ch;\n          }),\n        };\n      })\n      .with({ type: channelListActions.ON_CHANNEL_UNFROZEN }, (action) => {\n        const channel = action.payload;\n        const { allChannels, currentUserId, currentChannel, channelListQuery, disableAutoSelect } = state;\n        if (channelListQuery) {\n          if (filterChannelListParams(channelListQuery, channel, currentUserId)) {\n            // Good to [add to/keep in] the ChannelList\n            return {\n              ...state,\n              allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n            };\n          }\n          // Filter the channel from the ChannelList\n          // Replace the currentChannel if it's filtered channel\n          const nextChannel = getNextChannel({\n            channel,\n            currentChannel,\n            allChannels,\n            disableAutoSelect,\n          });\n          return {\n            ...state,\n            currentChannel: nextChannel,\n            allChannels: allChannels.filter(({ url }) => url !== channel?.url),\n          };\n        }\n\n        // No channelListQuery\n        return {\n          ...state,\n          allChannels: allChannels.map((ch) => {\n            if (ch.url === channel?.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n            return ch;\n          }),\n        };\n      })\n      .with({ type: channelListActions.CHANNEL_REPLACED_TO_TOP }, (action) => {\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n            return {\n              ...state,\n              allChannels: [\n                action.payload,\n                ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n              ],\n            };\n          }\n          return state;\n        }\n        return {\n          ...state,\n          allChannels: [action.payload, ...state.allChannels.filter((channel) => channel?.url !== action.payload.url)],\n        };\n      })\n      .with({ type: channelListActions.CHANNEL_LIST_PARAMS_UPDATED }, (action) => {\n        return {\n          ...state,\n          currentUserId: action.payload.currentUserId,\n          channelListQuery: action.payload.channelListQuery,\n        };\n      })\n      .otherwise(() => state)\n  );\n}\n", "import { useEffect } from 'react';\nimport * as messageActionTypes from '../../dux/actionTypes';\nimport { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\n\nexport type DynamicProps = {\n  activeChannelUrl?: string;\n  channels?: GroupChannel[];\n  sdk?: SendbirdGroupChat;\n};\n\nexport type StaticProps = {\n  logger: Logger;\n  channelListDispatcher: React.Dispatch<any>;\n};\n\nfunction useActiveChannelUrl({\n  activeChannelUrl,\n  channels,\n  sdk,\n}: DynamicProps, {\n  logger,\n  channelListDispatcher,\n}: StaticProps): void {\n  return useEffect(() => {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', { activeChannelUrl });\n      const activeChannel = channels?.find(channel => channel.url === activeChannelUrl);\n      if (activeChannel) {\n        channelListDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: activeChannel,\n        });\n      } else {\n        logger.info('ChannelListProvider: searching backend for active channel', { activeChannelUrl });\n        sdk?.groupChannel?.getChannel(activeChannelUrl)\n          .then((channel) => {\n            channelListDispatcher({\n              type: messageActionTypes.FETCH_CHANNELS_SUCCESS,\n              payload: [channel],\n            });\n            channelListDispatcher({\n              type: messageActionTypes.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          })\n          .catch(() => {\n            logger.warning('ChannelListProvider: Active channel not found');\n          });\n      }\n    }\n  }, [activeChannelUrl]);\n}\n\nexport default useActiveChannelUrl;\n", "import React, { useCallback } from 'react';\nimport { GroupChannel, GroupChannelListQuery } from '@sendbird/chat/groupChannel';\n\nimport { Nullable } from '../../../../types';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { MarkAsDeliveredSchedulerType } from '../../../../lib/hooks/useMarkAsDeliveredScheduler';\nimport * as channelListActions from '../../dux/actionTypes';\nimport { ChannelListActionTypes } from '../../dux/actionTypes';\n\ninterface DynamicProps {\n  channelSource: Nullable<GroupChannelListQuery>;\n  disableMarkAsDelivered: boolean;\n}\ninterface StaticProps {\n  channelListDispatcher: React.Dispatch<ChannelListActionTypes>;\n  logger: Logger;\n  markAsDeliveredScheduler: MarkAsDeliveredSchedulerType;\n}\n\nexport const useFetchChannelList = ({\n  channelSource,\n  disableMarkAsDelivered,\n}: DynamicProps, {\n  channelListDispatcher,\n  logger,\n  markAsDeliveredScheduler,\n}: StaticProps) => {\n  return useCallback(async () => {\n    if (!channelSource?.hasNext) {\n      logger.info('ChannelList: not able to fetch');\n      return;\n    }\n    logger.info('ChannelList: starting fetch');\n    channelListDispatcher({\n      type: channelListActions.FETCH_CHANNELS_START,\n      payload: null,\n    });\n    try {\n      const channelList: GroupChannel[] = await channelSource.next();\n      logger.info('ChannelList: succeeded fetch', { channelList });\n      channelListDispatcher({\n        type: channelListActions.FETCH_CHANNELS_SUCCESS,\n        payload: channelList,\n      });\n      if (!disableMarkAsDelivered) {\n        logger.info('ChannelList: mark as delivered to fetched channels');\n        // eslint-disable-next-line no-unused-expressions\n        channelList?.forEach((channel) => {\n          if (channel?.unreadMessageCount > 0) {\n            markAsDeliveredScheduler.push(channel);\n          }\n        });\n      }\n    } catch (error) {\n      logger.error('ChannelList: failed fetch', { error });\n      channelListDispatcher({\n        type: channelListActions.FETCH_CHANNELS_FAILURE,\n        payload: error,\n      });\n    }\n  }, [\n    channelSource,\n    disableMarkAsDelivered,\n  ]);\n};\n", "import React, { useContext, useEffect, useMemo, useReducer, useState } from 'react';\n\nimport type { User } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCreateParams,\n  GroupChannelHandler,\n  GroupChannelListQuery as GroupChannelListQuerySb,\n  GroupChannelUserIdsFilter,\n} from '@sendbird/chat/groupChannel';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, { pubSubHandler, pubSubHandleRemover } from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\nimport { DELIVERY_RECEIPT } from '../../../utils/consts';\n\nimport * as channelListActions from '../dux/actionTypes';\nimport { ChannelListActionTypes } from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\nimport { CHANNEL_TYPE } from '../../CreateChannel/types';\nimport useActiveChannelUrl from './hooks/useActiveChannelUrl';\nimport { useFetchChannelList } from './hooks/useFetchChannelList';\n\nexport interface ApplicationUserListQueryInternal {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\nexport interface GroupChannelListQueryParamsInternal {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper' | 'broadcast_only' | 'exclusive_only';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?:\n    | 'all'\n    | 'unhidden_only'\n    | 'hidden_only'\n    | 'hidden_allow_auto_unhide'\n    | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n  userIdsFilter?: GroupChannelUserIdsFilter;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQueryInternal;\n  channelListQuery?: GroupChannelListQueryParamsInternal;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: User): void;\n  onChannelSelect?(channel: GroupChannel | null): void;\n  sortChannelList?: (channels: GroupChannel[]) => GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactElement;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  activeChannelUrl?: string;\n  typingChannels?: Array<GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQueryParamsInternal;\n  currentUserId: string;\n  channelListDispatcher: React.Dispatch<ChannelListActionTypes>;\n  channelSource: GroupChannelListQuerySb | null;\n  fetchChannelList: () => void;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n  fetchChannelList: noop,\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    overrideInviteUser,\n    activeChannelUrl,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  const disableAutoSelect = props?.disableAutoSelect || !!activeChannelUrl;\n  const onChannelSelect = props?.onChannelSelect || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger, onUserProfileMessage } = config;\n  const {\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered = false,\n    isTypingIndicatorEnabledOnChannelList = false,\n    isMessageReceiptStatusEnabledOnChannelList = false,\n  } = config;\n  const sdk = sdkStore?.sdk;\n  const { premiumFeatureList = [] } = sdk?.appInfo ?? {};\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(channelListReducers, channelListInitialState);\n  const { currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<GroupChannelListQuerySb | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    const sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n        markAsDeliveredScheduler,\n        disableMarkAsDelivered,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk?.groupChannel?.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    let typingHandlerId = '';\n    if (sdk?.groupChannel?.addGroupChannelHandler) {\n      typingHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (channel) => {\n          const typingMemberCount = channel?.getTypingUsers()?.length;\n          const channelList = typingChannels.filter((ch) => ch.url !== channel.url);\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel]);\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onMessageUpdated(channel) {\n          if (channel.isGroupChannel()) {\n            channelListDispatcher({\n              type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n              payload: channel,\n            });\n            sdk.groupChannel.getChannelWithoutCache(channel.url).then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n          }\n        },\n        onMentionReceived(channel) {\n          if (channel.isGroupChannel()) {\n            channelListDispatcher({\n              type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n              payload: channel,\n            });\n            sdk.groupChannel.getChannelWithoutCache(channel.url).then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n          }\n        },\n      });\n      sdk?.groupChannel?.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [userFilledApplicationUserListQuery, userFilledChannelListQuery]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !currentChannel?.url) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then((groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl(\n    {\n      activeChannelUrl,\n      channels: sortedChannels,\n      sdk,\n    },\n    {\n      logger,\n      channelListDispatcher,\n    },\n  );\n\n  const fetchChannelList = useFetchChannelList(\n    {\n      channelSource,\n      disableMarkAsDelivered:\n        disableMarkAsDelivered || !premiumFeatureList.some((feature) => feature === DELIVERY_RECEIPT),\n    },\n    {\n      channelListDispatcher,\n      logger,\n      markAsDeliveredScheduler,\n    },\n  );\n\n  return (\n    <ChannelListContext.Provider\n      value={{\n        className,\n        disableUserProfile,\n        queries: queries_,\n        onProfileEditSuccess,\n        onThemeChange,\n        onBeforeCreateChannel,\n        overrideInviteUser,\n        onChannelSelect,\n        sortChannelList,\n        allowProfileEdit: enableEditProfile,\n        channelListDispatcher,\n        channelSource,\n        ...channelListStore,\n        allChannels: sortedChannels,\n        typingChannels,\n        isTypingIndicatorEnabled:\n          isTypingIndicatorEnabled !== null ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n        isMessageReceiptStatusEnabled:\n          isMessageReceiptStatusEnabled !== null\n            ? isMessageReceiptStatusEnabled\n            : isMessageReceiptStatusEnabledOnChannelList,\n        fetchChannelList,\n      }}\n    >\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile ?? config?.disableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-list ${className}`}>{children}</div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nexport { ChannelListProvider, useChannelListContext };\n", "import React, { useContext } from 'react';\n\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport './index.scss';\nimport Avatar from '../../../../ui/Avatar';\n\ninterface ChannelListHeaderInterface {\n  renderHeader?: (props: void) => React.ReactElement;\n  renderTitle?: () => React.ReactElement;\n  renderIconButton?: (props: void) => React.ReactElement;\n  onEdit?: (props: void) => void;\n  allowProfileEdit?: boolean;\n}\n\nconst ChannelListHeader: React.FC<ChannelListHeaderInterface> = ({\n  renderHeader,\n  renderTitle,\n  renderIconButton,\n  onEdit,\n  allowProfileEdit,\n}: ChannelListHeaderInterface) => {\n  const { stores, config } = useSendbirdStateContext();\n  const { user } = stores.userStore;\n  const { logger } = config;\n\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (renderHeader) {\n    logger?.warning('Recomend to use \"renderTitle\" instead of \"renderHeader\". It will be deprecated.');\n  }\n  // renderTitle should have higher priority\n  const titleRenderer = renderHeader || renderTitle;\n\n  return (\n    <div\n      className={[\n        'sendbird-channel-header',\n        allowProfileEdit ? 'sendbird-channel-header--allow-edit' : '',\n      ].join(' ')}\n    >\n      {\n        titleRenderer?.() || (\n          <div\n            className=\"sendbird-channel-header__title\"\n            role=\"button\"\n            onClick={() => { onEdit?.(); }}\n            onKeyDown={() => { onEdit?.(); }}\n            tabIndex={0}\n          >\n            <div className=\"sendbird-channel-header__title__left\">\n              <Avatar\n                width=\"32px\"\n                height=\"32px\"\n                src={user.profileUrl}\n                alt={user.nickname}\n              />\n            </div>\n            <div className=\"sendbird-channel-header__title__right\">\n              <Label\n                className=\"sendbird-channel-header__title__right__name\"\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {user.nickname || stringSet.NO_NAME}\n              </Label>\n              <Label\n                className=\"sendbird-channel-header__title__right__user-id\"\n                type={LabelTypography.BODY_2}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {user.userId}\n              </Label>\n            </div>\n          </div>\n        )\n      }\n      <div className=\"sendbird-channel-header__right-icon\">\n        {renderIconButton?.()}\n      </div>\n    </div>\n  );\n};\n\nexport default ChannelListHeader;\n", "export enum CHANNEL_TYPE {\n  GROUP = 'group',\n  SUPERGROUP = 'supergroup',\n  BROADCAST = 'broadcast',\n}\n", "import React, { useState } from 'react';\nimport { User } from '@sendbird/chat';\nimport type {\n  GroupChannel,\n  GroupChannelCreateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport { getCreateGroupChannel } from '../../../lib/selectors';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CHANNEL_TYPE } from '../types';\n\nconst CreateChannelContext = React.createContext(undefined);\n\nexport interface UserListQuery {\n  hasNext?: boolean;\n  next(): Promise<Array<User>>;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface CreateChannelProviderProps {\n  children?: React.ReactElement;\n  onCreateChannel(channel: GroupChannel): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  userListQuery?(): UserListQuery;\n}\n\ntype CreateChannel = (channelParams: GroupChannelCreateParams) => Promise<GroupChannel>;\n\nexport interface CreateChannelContextInterface {\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  createChannel: CreateChannel;\n  sdk: SendbirdGroupChat;\n  userListQuery?(): UserListQuery;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onCreateChannel?(channel: GroupChannel): void;\n  step: number,\n  setStep: React.Dispatch<React.SetStateAction<number>>,\n  type: CHANNEL_TYPE,\n  setType: React.Dispatch<React.SetStateAction<CHANNEL_TYPE>>,\n}\n\nconst CreateChannelProvider: React.FC<CreateChannelProviderProps> = (props: CreateChannelProviderProps) => {\n  const {\n    children,\n    onCreateChannel,\n    onBeforeCreateChannel,\n    overrideInviteUser,\n    userListQuery,\n  } = props;\n\n  const store = useSendbirdStateContext();\n  const userListQuery_ = store?.config?.userListQuery;\n  const createChannel: (channelParams: GroupChannelCreateParams)\n    => Promise<GroupChannel> = getCreateGroupChannel(store);\n\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState(CHANNEL_TYPE.GROUP);\n\n  return (\n    <CreateChannelContext.Provider value={{\n      onBeforeCreateChannel,\n      createChannel,\n      onCreateChannel,\n      overrideInviteUser,\n      userListQuery: userListQuery || userListQuery_,\n      step,\n      setStep,\n      type,\n      setType,\n    }}>\n      {children}\n    </CreateChannelContext.Provider>\n  );\n};\n\nconst useCreateChannelContext = (): CreateChannelContextInterface => (\n  React.useContext(CreateChannelContext)\n);\n\nexport {\n  CreateChannelProvider,\n  useCreateChannelContext,\n};\n", "import type { ApplicationUserListQuery } from '@sendbird/chat';\nimport type { GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CHANNEL_TYPE } from '../../types';\n\nexport const filterUser = (idsToFilter: string[]) => (currentId: string): boolean => idsToFilter?.includes(currentId);\n\nexport const setChannelType = (\n  params: GroupChannelCreateParams,\n  type: CHANNEL_TYPE,\n): GroupChannelCreateParams => {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\n\ntype CreateDefaultUserListQueryType = {\n  sdk: SendbirdGroupChat;\n  userFilledApplicationUserListQuery?: ApplicationUserListQuery;\n};\n\nexport const createDefaultUserListQuery = (\n  { sdk, userFilledApplicationUserListQuery }: CreateDefaultUserListQueryType,\n): ApplicationUserListQuery => {\n  if (sdk?.createApplicationUserListQuery) {\n    const params = sdk?.createApplicationUserListQuery();\n    if (userFilledApplicationUserListQuery) {\n      Object.keys(userFilledApplicationUserListQuery).forEach((key) => {\n        params[key] = userFilledApplicationUserListQuery[key];\n      });\n    }\n    return params;\n  }\n};\n", "import React, { useState, useEffect, useContext } from 'react';\nimport type { ApplicationUserListQuery, User } from '@sendbird/chat';\nimport type { GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport './invite-users.scss';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useCreateChannelContext } from '../../context/CreateChannelProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nimport Modal from '../../../../ui/Modal';\nimport Label, {\n  LabelColors,\n  LabelTypography,\n} from '../../../../ui/Label';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport UserListItem from '../../../../ui/UserListItem';\n\nimport {\n  filterUser,\n  setChannelType,\n  createDefaultUserListQuery,\n} from './utils';\nimport { noop } from '../../../../utils/utils';\n\nexport interface InviteUsersProps {\n  onCancel?: () => void;\n  userListQuery?(): ApplicationUserListQuery;\n}\n\nconst appHeight = () => {\n  try {\n    const doc = document.documentElement;\n    doc.style.setProperty('--sendbird-vh', (window.innerHeight * 0.01) + 'px');\n  } catch {\n    //\n  }\n};\n\nconst BUFFER = 50;\n\nconst InviteUsers: React.FC<InviteUsersProps> = ({\n  onCancel,\n  userListQuery,\n}: InviteUsersProps) => {\n  const {\n    onBeforeCreateChannel,\n    onCreateChannel,\n    overrideInviteUser,\n    createChannel,\n    type,\n  } = useCreateChannelContext();\n\n  const globalStore = useSendbirdStateContext();\n  const userId = globalStore?.config?.userId;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const idsToFilter = [userId];\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUsers, setSelectedUsers] = useState({});\n  const { stringSet } = useContext(LocalizationContext);\n  const [usersDataSource, setUsersDataSource] = useState<ApplicationUserListQuery | null>(null);\n  const selectedCount = Object.keys(selectedUsers).length;\n  const titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;\n  const submitText = stringSet.BUTTON__CREATE;\n\n  const userQueryCreator = userListQuery ? userListQuery() : createDefaultUserListQuery({ sdk });\n\n  useEffect(() => {\n    const applicationUserListQuery = userQueryCreator;\n    setUsersDataSource(applicationUserListQuery);\n    // @ts-ignore\n    if (!applicationUserListQuery?.isLoading) {\n      applicationUserListQuery.next().then((users_) => {\n        setUsers(users_);\n      });\n    }\n  }, []);\n\n  // https://stackoverflow.com/a/70302463\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/#css-custom-properties-the-trick-to-correct-sizing\n  // to fix navbar break in mobile\n  useEffect(() => {\n    appHeight();\n    window.addEventListener('resize', appHeight);\n    return () => {\n      window.removeEventListener('resize', appHeight);\n    };\n  }, []);\n\n  return (\n    <Modal\n      isFullScreenOnMobile\n      titleText={titleText}\n      submitText={submitText}\n      type={ButtonTypes.PRIMARY}\n      // Disable the create button if no users are selected,\n      // but if there's only the logged-in user in the user list,\n      // then the create button should be enabled\n      disabled={users.length > 1 && Object.keys(selectedUsers).length === 0}\n      onCancel={onCancel}\n      onSubmit={() => {\n        const selectedUserList = Object.keys(selectedUsers).length > 0\n          ? Object.keys(selectedUsers)\n          : [userId];\n        if (typeof overrideInviteUser === 'function') {\n          overrideInviteUser({\n            users: selectedUserList,\n            onClose: onCancel ?? noop,\n            channelType: type,\n          });\n          return;\n        }\n\n        if (onBeforeCreateChannel) {\n          const params = onBeforeCreateChannel(selectedUserList);\n          setChannelType(params, type);\n          createChannel(params).then((channel) => {\n            onCreateChannel?.(channel);\n          });\n        } else {\n          const params: GroupChannelCreateParams = {};\n          params.invitedUserIds = selectedUserList;\n          params.isDistinct = false;\n          if (userId) {\n            params.operatorUserIds = [userId];\n          }\n          setChannelType(params, type);\n          // do not have custom params\n          createChannel(params).then((channel) => {\n            onCreateChannel?.(channel);\n          });\n        }\n        onCancel?.();\n      }}\n    >\n      <div>\n        <Label\n          color={(selectedCount > 0) ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3}\n          type={LabelTypography.CAPTION_1}\n        >\n          {`${selectedCount} ${stringSet.MODAL__INVITE_MEMBER__SELECTED}`}\n        </Label>\n        <div\n          className=\"sendbird-create-channel--scroll\"\n          onScroll={(e) => {\n            if (!usersDataSource) return;\n            const eventTarget = e.target as HTMLDivElement;\n            const { hasNext, isLoading } = usersDataSource;\n            const fetchMore = (\n              (eventTarget.clientHeight + eventTarget.scrollTop + BUFFER) > eventTarget.scrollHeight\n            );\n\n            if (hasNext && fetchMore && !isLoading) {\n              usersDataSource.next().then((usersBatch) => {\n                setUsers([\n                  ...users,\n                  ...usersBatch,\n                ]);\n              });\n            }\n          }}\n        >\n          {\n            users.map((user) => (!filterUser(idsToFilter)(user.userId)) && (\n              <UserListItem\n                key={user.userId}\n                user={user}\n                checkBox\n                checked={selectedUsers[user.userId]}\n                onChange={\n                  (event) => {\n                    const modifiedSelectedUsers = {\n                      ...selectedUsers,\n                      [event.target.id]: event.target.checked,\n                    };\n                    if (!event.target.checked) {\n                      delete modifiedSelectedUsers[event.target.id];\n                    }\n                    setSelectedUsers(modifiedSelectedUsers);\n                  }\n                }\n              />\n            ))\n          }\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default InviteUsers;\n", "import type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nexport const isBroadcastChannelEnabled = (sdk: SendbirdGroupChat): boolean => {\n  const ALLOW_BROADCAST_CHANNEL = 'allow_broadcast_channel';\n  const applicationAttributes = sdk?.appInfo?.applicationAttributes;\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);\n  }\n\n  return false;\n};\n\nexport const isSuperGroupChannelEnabled = (sdk: SendbirdGroupChat): boolean => {\n  const ALLOW_SUPER_GROUP_CHANNEL = 'allow_super_group_channel';\n  const applicationAttributes = sdk?.appInfo?.applicationAttributes;\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);\n  }\n\n  return false;\n};\n", "import React, { useContext } from 'react';\nimport type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport * as sendbirdSelectors from '../../../lib/selectors';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport { useCreateChannelContext } from '../context/CreateChannelProvider';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nimport Modal from '../../../ui/Modal';\n\nimport {\n  isBroadcastChannelEnabled,\n  isSuperGroupChannelEnabled,\n} from '../utils';\nimport { CHANNEL_TYPE } from '../types';\n\nexport interface SelectChannelTypeProps {\n  onCancel?(): void;\n}\n\nconst SelectChannelType: React.FC<SelectChannelTypeProps> = (props: SelectChannelTypeProps) => {\n  const { onCancel } = props;\n  const store = useSendbirdStateContext();\n\n  const sdk = sendbirdSelectors.getSdk(store) as SendbirdGroupChat;\n\n  const createChannelProps = useCreateChannelContext();\n  const {\n    setStep,\n    setType,\n  } = createChannelProps;\n\n  const { stringSet } = useContext(LocalizationContext);\n\n  const isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  const isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n\n  return (\n    <Modal\n      titleText={stringSet?.MODAL__CREATE_CHANNEL__TITLE}\n      hideFooter\n      onCancel={() => { onCancel(); }}\n      className=\"sendbird-add-channel__modal\"\n    >\n      <div className=\"sendbird-add-channel__rectangle-wrap\">\n        <div\n          className=\"sendbird-add-channel__rectangle\"\n          onClick={() => {\n            setType(CHANNEL_TYPE.GROUP);\n            setStep(1);\n          }}\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={() => {\n            setType(CHANNEL_TYPE.GROUP);\n            setStep(1);\n          }}\n        >\n          <Icon\n            className=\"sendbird-add-channel__rectangle__chat-icon\"\n            type={IconTypes.CHAT}\n            fillColor={IconColors.PRIMARY}\n            width=\"28px\"\n            height=\"28px\"\n          />\n          <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n            {stringSet.MODAL__CREATE_CHANNEL__GROUP}\n          </Label>\n        </div>\n        {\n          isSupergroupAvailable && (\n            <div\n              className=\"sendbird-add-channel__rectangle\"\n              onClick={() => {\n                setType(CHANNEL_TYPE.SUPERGROUP);\n                setStep(1);\n              }}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={() => {\n                setType(CHANNEL_TYPE.SUPERGROUP);\n                setStep(1);\n              }}\n            >\n              <Icon\n                className=\"sendbird-add-channel__rectangle__supergroup-icon\"\n                type={IconTypes.SUPERGROUP}\n                fillColor={IconColors.PRIMARY}\n                width=\"28px\"\n                height=\"28px\"\n              />\n              <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                {stringSet.MODAL__CREATE_CHANNEL__SUPER}\n              </Label>\n            </div>\n          )\n        }\n        {\n          isBroadcastAvailable && (\n            <div\n              className=\"sendbird-add-channel__rectangle\"\n              onClick={() => {\n                setType(CHANNEL_TYPE.BROADCAST);\n                setStep(1);\n              }}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={() => {\n                setType(CHANNEL_TYPE.BROADCAST);\n                setStep(1);\n              }}\n            >\n              <Icon\n                className=\"sendbird-add-channel__rectangle__broadcast-icon\"\n                type={IconTypes.BROADCAST}\n                fillColor={IconColors.PRIMARY}\n                width=\"28px\"\n                height=\"28px\"\n              />\n              <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                {stringSet.MODAL__CREATE_CHANNEL__BROADCAST}\n              </Label>\n            </div>\n          )\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default SelectChannelType;\n", "import './create-channel-ui.scss';\n\nimport React from 'react';\n\nimport { useCreateChannelContext } from '../../context/CreateChannelProvider';\nimport InviteUsers from '../InviteUsers';\n\nimport SelectChannelType from '../SelectChannelType';\n\nexport interface CreateChannelUIProps {\n  onCancel?(): void;\n  renderStepOne?:(props: void) => React.ReactElement;\n}\n\nconst CreateChannel: React.FC<CreateChannelUIProps> = (props: CreateChannelUIProps) => {\n  const { onCancel, renderStepOne } = props;\n\n  const {\n    step,\n    setStep,\n    userListQuery,\n  } = useCreateChannelContext();\n\n  return (\n    <>\n      {\n        step === 0 && (\n          renderStepOne?.() || (\n            <SelectChannelType\n              onCancel={onCancel}\n            />\n          )\n        )\n      }\n      {\n        step === 1 && (\n          <InviteUsers\n            userListQuery={userListQuery}\n            onCancel={() => {\n              setStep(0);\n              onCancel();\n            }}\n          />\n        )\n      }\n    </>\n  );\n};\n\nexport default CreateChannel;\n", "import React from 'react';\n\nimport CreateChannelUI, {\n  CreateChannelUIProps,\n} from './components/CreateChannelUI';\nimport {\n  CreateChannelProvider,\n  CreateChannelProviderProps,\n} from './context/CreateChannelProvider';\n\nexport interface CreateChannelProps extends CreateChannelProviderProps, CreateChannelUIProps {\n}\n\nconst CreateChannel: React.FC<CreateChannelProps> = (props: CreateChannelProps) => {\n  const {\n    onBeforeCreateChannel,\n    userListQuery,\n    onCreateChannel,\n    overrideInviteUser,\n    onCancel,\n    renderStepOne,\n  } = props;\n  return (\n    <CreateChannelProvider\n      onBeforeCreateChannel={onBeforeCreateChannel}\n      userListQuery={userListQuery}\n      onCreateChannel={onCreateChannel}\n      overrideInviteUser={overrideInviteUser}\n    >\n      <CreateChannelUI\n        renderStepOne={renderStepOne}\n        onCancel={onCancel}\n      />\n    </CreateChannelProvider>\n  );\n};\n\nexport default CreateChannel;\n", "import React, { useState } from 'react';\n\nimport IconButton from '../../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\n\nimport CreateChannel from '../../../CreateChannel';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\n\nexport const AddChannel: React.VoidFunctionComponent = () => {\n  const [showModal, setShowModal] = useState(false);\n  const state = useSendbirdStateContext();\n  const isOnline = state?.config?.isOnline;\n  const disabled = !isOnline;\n  const {\n    overrideInviteUser,\n    onBeforeCreateChannel,\n  } = useChannelListContext();\n\n  return (\n    <>\n      <IconButton\n        height=\"32px\"\n        width=\"32px\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n        disabled={disabled}\n      >\n        <Icon\n          type={IconTypes.CREATE}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </IconButton>\n      {\n        showModal && (\n          <CreateChannel\n            onCancel={() => {\n              setShowModal(false);\n            }}\n            overrideInviteUser={overrideInviteUser}\n            onCreateChannel={() => {\n              setShowModal(false);\n            }}\n            onBeforeCreateChannel={onBeforeCreateChannel}\n          />\n        )\n      }\n    </>\n  );\n};\n\nexport default AddChannel;\n", "import React, { ReactElement, useContext } from 'react';\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nexport interface BadgeProps {\n  count: number;\n  maxLevel?: number;\n  className?: string | Array<string>;\n}\n\nexport default function Badge({\n  count,\n  maxLevel = 2,\n  className = '',\n}: BadgeProps): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const maximumNumber = parseInt('9'.repeat((maxLevel > 6) ? 6 : maxLevel), 10);\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-badge',\n      ].join(' ')}\n    >\n      <div className=\"sendbird-badge__text\">\n        <Label\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONCONTENT_1}\n        >\n          {\n            (count > maximumNumber)\n              ? `${maximumNumber}${stringSet.BADGE__OVER}`\n              : count\n          }\n        </Label>\n      </div>\n    </div>\n  );\n}\n", "import './index.scss';\n\nimport React from 'react';\nimport { MENTION_USER_LABEL_CLASSNAME } from './consts';\n\ninterface MentionUserLabelProps {\n  className?: string\n  children?: string;\n  isReverse?: boolean;\n  color?: string;\n  userId?: string;\n}\n\nexport default function MentionUserLabel({\n  className = '',\n  children,\n  isReverse = false,\n  color,\n  userId,\n}: MentionUserLabelProps): JSX.Element {\n  return (\n    <span\n      className={`${MENTION_USER_LABEL_CLASSNAME} ${className} ${isReverse ? 'reverse' : ''} ${color}`}\n      contentEditable={false}\n      data-userid={userId}\n      data-sb-mention={true}\n    >\n      {children}\n    </span>\n  );\n}\n", "import './channel-preview.scss';\n\nimport React, { useState } from 'react';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { FileMessage } from '@sendbird/chat/message';\n\nimport ChannelAvatar from '../../../../ui/ChannelAvatar';\nimport Badge from '../../../../ui/Badge';\nimport Icon, { IconColors, IconTypes } from '../../../../ui/Icon';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport * as utils from './utils';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport MentionUserLabel from '../../../../ui/MentionUserLabel';\nimport Modal from '../../../../ui/Modal';\nimport TextButton from '../../../../ui/TextButton';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport { TypingIndicatorText } from '../../../Channel/components/TypingIndicator';\nimport MessageStatus from '../../../../ui/MessageStatus';\nimport { CoreMessageType, isVoiceMessage, SendableMessageType } from '../../../../utils';\nimport { useMediaQueryContext } from '../../../../lib/MediaQueryContext';\nimport useLongPress from '../../../../hooks/useLongPress';\n\ninterface ChannelPreviewInterface {\n  channel: GroupChannel;\n  isActive?: boolean;\n  isTyping?: boolean;\n  onClick: () => void;\n  onLeaveChannel?: () => void;\n  renderChannelAction: (props: { channel: GroupChannel }) => React.ReactElement;\n  tabIndex: number;\n}\n\nconst ChannelPreview: React.FC<ChannelPreviewInterface> = ({\n  channel,\n  isActive = false,\n  isTyping = false,\n  renderChannelAction,\n  onLeaveChannel,\n  onClick,\n  tabIndex,\n}: ChannelPreviewInterface) => {\n  const sbState = useSendbirdStateContext();\n  const {\n    isTypingIndicatorEnabled = false,\n    isMessageReceiptStatusEnabled = false,\n  } = useChannelListContext();\n  const { dateLocale, stringSet } = useLocalization();\n  const { isMobile } = useMediaQueryContext();\n\n  const [showMobileLeave, setShowMobileLeave] = useState(false);\n\n  const userId = sbState?.stores?.userStore?.user?.userId;\n  const theme = sbState?.config?.theme;\n  const isMentionEnabled = sbState?.config?.isMentionEnabled;\n  const isFrozen = channel?.isFrozen || false;\n  const isBroadcast = channel?.isBroadcast || false;\n  const isChannelTyping = isTypingIndicatorEnabled && isTyping;\n  const isMessageStatusEnabled = isMessageReceiptStatusEnabled\n    && (channel?.lastMessage?.messageType === 'user' || channel?.lastMessage?.messageType === 'file')\n    && (channel?.lastMessage as SendableMessageType)?.sender?.userId === userId;\n\n  const onLongPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMobileLeave(true);\n      }\n    },\n    onClick,\n  }, {\n    delay: 1000,\n  });\n  const channelName = utils.getChannelTitle(channel, userId, stringSet);\n  return (\n    <>\n      <div\n        className={[\n          'sendbird-channel-preview',\n          isActive ? 'sendbird-channel-preview--active' : '',\n        ].join(' ')}\n        role=\"link\"\n        tabIndex={tabIndex}\n        {...(isMobile ? { ...onLongPress } : { onClick })}\n      >\n        <div\n          className=\"sendbird-channel-preview__avatar\"\n        >\n          <ChannelAvatar\n            channel={channel}\n            userId={userId}\n            theme={theme}\n          />\n        </div>\n        <div className=\"sendbird-channel-preview__content\">\n          <div className=\"sendbird-channel-preview__content__upper\">\n            <div className=\"sendbird-channel-preview__content__upper__header\">\n              {\n                isBroadcast\n                && (\n                  <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                    <Icon\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.SECONDARY}\n                      height=\"16px\"\n                      width=\"16px\"\n                    />\n                  </div>\n                )\n              }\n              <Label\n                className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {channelName}\n              </Label>\n              <Label\n                className=\"sendbird-channel-preview__content__upper__header__total-members\"\n                type={LabelTypography.CAPTION_2}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {utils.getTotalMembers(channel)}\n              </Label>\n              {\n                isFrozen\n                && (\n                  <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                    <Icon\n                      type={IconTypes.FREEZE}\n                      fillColor={IconColors.PRIMARY}\n                      height={12}\n                      width={12}\n                    />\n                  </div>\n                )\n              }\n            </div>\n            {\n              (!channel?.isEphemeral && isMessageStatusEnabled) && (\n                <MessageStatus\n                  className=\"sendbird-channel-preview__content__upper__last-message-at\"\n                  channel={channel}\n                  message={channel?.lastMessage as CoreMessageType}\n                  isDateSeparatorConsidered={false}\n                />\n              )\n            }\n            {\n              (!channel?.isEphemeral && !isMessageStatusEnabled) && (\n                <Label\n                  className=\"sendbird-channel-preview__content__upper__last-message-at\"\n                  type={LabelTypography.CAPTION_3}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {utils.getLastMessageCreatedAt({\n                    channel,\n                    locale: dateLocale,\n                    stringSet,\n                  })}\n                </Label>\n              )\n            }\n          </div>\n          <div className=\"sendbird-channel-preview__content__lower\">\n            <Label\n              className=\"sendbird-channel-preview__content__lower__last-message\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_3}\n            >\n              {\n                isChannelTyping && (\n                  <TypingIndicatorText members={channel?.getTypingUsers()} />\n                )\n              }\n              {\n                !isChannelTyping && !isVoiceMessage(channel?.lastMessage as FileMessage) && (\n                  utils.getLastMessage(channel, stringSet)\n                )\n              }\n              {\n                !isChannelTyping && isVoiceMessage(channel?.lastMessage as FileMessage) && (\n                  stringSet.VOICE_MESSAGE\n                )\n              }\n            </Label>\n            {\n              !channel?.isEphemeral && (\n                <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n                  {\n                    (isMentionEnabled && channel?.unreadMentionCount > 0)\n                      ? (\n                        <MentionUserLabel\n                          className=\"sendbird-channel-preview__content__lower__unread-message-count__mention\"\n                          color=\"purple\"\n                        >\n                          {'@'}\n                        </MentionUserLabel>\n                      )\n                      : null\n                  }\n                  {\n                    utils.getChannelUnreadMessageCount(channel) // return number\n                      ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                      : null\n                  }\n                </div>\n              )\n            }\n          </div>\n        </div>\n        {\n          !isMobile && (\n            <div\n              className=\"sendbird-channel-preview__action\"\n            >\n              {renderChannelAction({ channel })}\n            </div>\n          )\n        }\n      </div>\n      {/*\n        Event from portal is transferred to parent\n        If this modal goes inside channel preview, it will propogate event to\n        ChannelPreview and cause many issues with click/touchEnd etc\n        https://github.com/facebook/react/issues/11387#issuecomment-340019419\n      */}\n      {\n        showMobileLeave && isMobile && (\n          <Modal\n            className=\"sendbird-channel-preview__leave--mobile\"\n            titleText={channelName}\n            hideFooter\n            isCloseOnClickOutside\n            onCancel={() => setShowMobileLeave(false)}\n          >\n            <TextButton\n              onClick={() => {\n                onLeaveChannel();\n                setShowMobileLeave(false);\n              }}\n              className=\"sendbird-channel-preview__leave-label--mobile\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE}\n              </Label>\n            </TextButton>\n          </Modal>\n        )\n      }\n    </>\n  );\n};\n\nexport default ChannelPreview;\n", "import React from 'react';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { noop } from '../../../../utils/utils';\n\nimport Modal from '../../../../ui/Modal';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\nexport type LeaveChannelProps = {\n  channel?: GroupChannel;\n  onSubmit: () => void;\n  onCancel: () => void;\n};\n\nconst LeaveChannel: React.FC<LeaveChannelProps> = (props: LeaveChannelProps) => {\n  const {\n    channel = null,\n    onSubmit = noop,\n    onCancel = noop,\n  } = props;\n\n  const channelFromContext = useChannelListContext()?.currentChannel;\n  const leavingChannel = channel || channelFromContext;\n  const state = useSendbirdStateContext();\n  const { stringSet } = useLocalization();\n\n  const logger = state?.config?.logger;\n  const isOnline = state?.config?.isOnline;\n  if (leavingChannel) {\n    return (\n      <Modal\n        disabled={!isOnline}\n        onCancel={onCancel}\n        onSubmit={() => {\n          logger.info('ChannelSettings: Leaving channel', leavingChannel);\n          leavingChannel?.leave()\n            .then(() => {\n              logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);\n              onSubmit();\n            });\n        }}\n        submitText={stringSet.MODAL__LEAVE_CHANNEL__FOOTER}\n        titleText={stringSet.MODAL__LEAVE_CHANNEL__TITLE}\n      />\n    );\n  }\n};\n\nexport default LeaveChannel;\n", "import React, { useState, useRef, useContext } from 'react';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from './LeaveChannel';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\ntype ChannelPreviewActionProps = {\n  channel?: GroupChannel;\n  disabled: boolean;\n  onLeaveChannel(): void;\n};\n\nexport default function ChannelPreviewAction({ channel, disabled = false, onLeaveChannel }: ChannelPreviewActionProps) {\n  const parentRef = useRef(null);\n  const parentContainerRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      ref={parentContainerRef}\n      tabIndex={0}\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => e.stopPropagation()}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown) => (\n          <IconButton ref={parentRef} onClick={toggleDropdown} height=\"32px\" width=\"32px\">\n            <Icon type={IconTypes.MORE} fillColor={IconColors.PRIMARY} width=\"24px\" height=\"24px\" />\n          </IconButton>\n        )}\n        menuItems={(closeDropdown) => (\n          <MenuItems parentRef={parentRef} parentContainRef={parentContainerRef} closeDropdown={closeDropdown}>\n            <MenuItem\n              onClick={() => {\n                if (disabled) {\n                  return;\n                }\n                setShowModal(true);\n                closeDropdown();\n              }}\n              dataSbId=\"channel_list_item_context_menu_leave_channel\"\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {showModal && (\n        <LeaveChannelModal\n          channel={channel}\n          onSubmit={() => {\n            setShowModal(false);\n            onLeaveChannel();\n          }}\n          onCancel={() => setShowModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n", "import type { User } from '@sendbird/chat';\nimport React, { useMemo } from 'react';\n\nconst EditUserProfileProviderContext = React.createContext(undefined);\n\nexport interface EditUserProfileProps {\n  children?: React.ReactElement;\n  onCancel?(): void;\n  onThemeChange?(theme: string): void;\n  onEditProfile?(updatedUser: User): void;\n}\n\nexport interface EditUserProfileProviderInterface {\n  onCancel?(): void;\n  onThemeChange?(theme: string): void;\n  onEditProfile?(updatedUser: User): void;\n}\n\nconst EditUserProfileProvider: React.FC<EditUserProfileProps> = (props: EditUserProfileProps) => {\n  const {\n    children,\n    onEditProfile,\n    onCancel,\n    onThemeChange,\n  } = props;\n\n  const value = useMemo(() => {\n    return {\n      onEditProfile,\n      onCancel,\n      onThemeChange,\n    };\n  }, []);\n\n  return (\n    <EditUserProfileProviderContext.Provider value={value}>\n      {children}\n    </EditUserProfileProviderContext.Provider>\n  );\n};\n\nconst useEditUserProfileContext = (): EditUserProfileProviderInterface => (\n  React.useContext(EditUserProfileProviderContext)\n);\n\nexport {\n  EditUserProfileProvider,\n  useEditUserProfileContext,\n};\n", "import React, { ReactElement, RefObject, useState } from 'react';\n\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nexport interface InputLabelProps {\n  children: ReactElement;\n}\nexport const InputLabel = ({ children }: InputLabelProps): ReactElement => (\n  <Label\n    className=\"sendbird-input-label\"\n    type={LabelTypography.CAPTION_3}\n    color={LabelColors.ONBACKGROUND_1}\n  >\n    {children}\n  </Label>\n);\n\nexport interface InputProps {\n  name: string;\n  required?: boolean;\n  disabled?: boolean;\n  value?: string;\n  placeHolder?: string;\n}\nconst Input = React.forwardRef((props: InputProps, ref: RefObject<HTMLInputElement>) => {\n  const {\n    name,\n    required,\n    disabled,\n    value,\n    placeHolder,\n  } = props;\n  const [inputValue, setInputValue] = useState(value);\n  return (\n    <div className=\"sendbird-input\">\n      <input\n        className=\"sendbird-input__input\"\n        ref={ref}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={inputValue}\n        onChange={(e) => {\n          setInputValue(e.target.value);\n        }}\n      />\n      {(placeHolder && !inputValue) && (\n        <Label\n          className=\"sendbird-input__placeholder\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {placeHolder}\n        </Label>\n      )}\n    </div>\n  );\n});\n\nexport default Input;\n", "import './edit-user-profile.scss';\n\nimport React, {\n  ReactElement,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport { useEditUserProfileContext } from '../../context/EditUserProfileProvider';\n\nimport Modal from '../../../../ui/Modal';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nimport Input, { InputLabel } from '../../../../ui/Input';\nimport Avatar from '../../../../ui/Avatar';\nimport Icon, { IconTypes } from '../../../../ui/Icon';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport Label, { LabelColors, LabelTypography } from '../../../../ui/Label';\nimport TextButton from '../../../../ui/TextButton';\nimport { noop } from '../../../../utils/utils';\nimport { USER_ACTIONS } from '../../../../lib/dux/user/actionTypes';\n\nexport default function EditUserProfile(): ReactElement {\n  const editProfileProps = useEditUserProfileContext();\n  const store = useSendbirdStateContext();\n  const hiddenInputRef = useRef(null);\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n\n  const {\n    onEditProfile,\n    onCancel,\n    onThemeChange,\n  } = editProfileProps;\n\n  const theme = store?.config?.theme || 'light';\n  const changeTheme = store?.config?.setCurrentTheme || noop;\n  const user = store?.stores?.userStore?.user;\n  const sdk = store?.stores?.sdkStore?.sdk;\n  const userDispatcher = store?.dispatchers?.userDispatcher;\n\n  return (\n    <Modal\n      titleText={stringSet.EDIT_PROFILE__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      type={ButtonTypes.PRIMARY}\n      onCancel={onCancel}\n      isFullScreenOnMobile\n      onSubmit={() => {\n        if (user?.nickname !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        sdk?.updateCurrentUserInfo({\n          nickname: inputRef?.current?.value,\n          profileImage: newFile,\n        }).then((updatedUser) => {\n          userDispatcher({ type: USER_ACTIONS.UPDATE_USER_INFO, payload: updatedUser });\n          if (onEditProfile && typeof onEditProfile === 'function') {\n            onEditProfile(updatedUser);\n          }\n        });\n      }}\n    >\n      <form\n        className=\"sendbird-edit-user-profile\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <section className=\"sendbird-edit-user-profile__img\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__IMAGE_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__img__avatar\">\n            <Avatar\n              width=\"80px\"\n              height=\"80px\"\n              src={currentImg || user?.profileUrl}\n            />\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"sendbird-edit-user-profile__img__avatar-button\"\n            disableUnderline\n            onClick={() => hiddenInputRef.current.click()}\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.EDIT_PROFILE__IMAGE_UPLOAD}\n            </Label>\n          </TextButton>\n        </section>\n        <section className=\"sendbird-edit-user-profile__name\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__NICKNAME_LABEL}\n          </InputLabel>\n          <Input\n            required={user?.nickname !== ''}\n            name=\"sendbird-edit-user-profile__name__input\"\n            ref={inputRef}\n            value={user?.nickname}\n            placeHolder={stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__userid\">\n          <InputLabel>\n            {/*  userID */}\n            {stringSet.EDIT_PROFILE__USERID_LABEL}\n          </InputLabel>\n          <Input\n            disabled\n            name=\"sendbird-edit-user-profile__userid__input\"\n            value={user?.userId}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__theme\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__THEME_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__theme__theme-icon\">\n            {\n              theme === 'dark'\n                ? (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('light');\n                      onThemeChange?.('light');\n                      // if (onThemeChange && typeof onThemeChange === 'function') {\n                      //   onThemeChange('light');\n                      // }\n                    }}\n                    type={IconTypes.TOGGLE_ON}\n                    width={44}\n                    height={24}\n                  />\n                )\n                : (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('dark');\n                      onThemeChange?.('dark');\n                      // if (onThemeChange && typeof onThemeChange === 'function') {\n                      //   onThemeChange('dark');\n                      // }\n                    }}\n                    type={IconTypes.TOGGLE_OFF}\n                    width={44}\n                    height={24}\n                  />\n                )\n            }\n          </div>\n        </section>\n      </form>\n    </Modal>\n  );\n}\n", "import React from 'react';\n\nimport {\n  EditUserProfileProvider,\n  EditUserProfileProps,\n} from './context/EditUserProfileProvider';\n\nimport EditUserProfile from './components/EditUserProfileUI';\n\nconst EditProfile: React.FC<EditUserProfileProps> = (props: EditUserProfileProps) => {\n  const {\n    onEditProfile,\n    onCancel,\n    onThemeChange,\n  } = props;\n  return (\n    <EditUserProfileProvider\n      onEditProfile={onEditProfile}\n      onCancel={onCancel}\n      onThemeChange={onThemeChange}\n    >\n      <EditUserProfile />\n    </EditUserProfileProvider>\n  );\n};\n\nexport default EditProfile;\n", "import './channel-list-ui.scss';\n\nimport React, { useState } from 'react';\nimport type { GroupChannel, Member } from '@sendbird/chat/groupChannel';\nimport type { User } from '@sendbird/chat';\n\nimport ChannelListHeader from '../ChannelListHeader';\nimport AddChannel from '../AddChannel';\nimport ChannelPreview from '../ChannelPreview';\nimport ChannelPreviewAction from '../ChannelPreviewAction';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport * as channelListActions from '../../dux/actionTypes';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport EditUserProfile from '../../../EditUserProfile';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport { isAboutSame } from '../../../../utils/utils';\n\ninterface RenderChannelPreviewProps {\n  channel: GroupChannel;\n  onLeaveChannel(\n    channel: GroupChannel,\n    onLeaveChannelCb?: (c: GroupChannel) => void,\n  ): void;\n}\n\ninterface RenderUserProfileProps {\n  user: Member | User;\n  currentUserId: string;\n  close(): void;\n}\n\nexport interface ChannelListUIProps {\n  renderChannelPreview?: (props: RenderChannelPreviewProps) => React.ReactElement;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  renderHeader?: (props: void) => React.ReactElement;\n  renderPlaceHolderError?: (props: void) => React.ReactElement;\n  renderPlaceHolderLoading?: (props: void) => React.ReactElement;\n  renderPlaceHolderEmptyList?: (props: void) => React.ReactElement;\n}\n\nconst ChannelListUI: React.FC<ChannelListUIProps> = (props: ChannelListUIProps) => {\n  const {\n    renderHeader,\n    renderChannelPreview,\n    renderPlaceHolderError,\n    renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList,\n  } = props;\n\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n\n  const {\n    onThemeChange,\n    allowProfileEdit,\n    allChannels,\n    loading,\n    currentChannel,\n    channelListDispatcher,\n    typingChannels,\n    initialized,\n    fetchChannelList,\n  } = useChannelListContext();\n\n  const state = useSendbirdStateContext();\n  const sdkStore = state?.stores?.sdkStore;\n  const config = state?.config;\n  const {\n    logger,\n    isOnline = false,\n  } = config;\n  const sdkError = sdkStore?.error;\n\n  return (\n    <>\n      <div className=\"sendbird-channel-list__header\">\n        {\n          renderHeader?.() || (\n            <ChannelListHeader\n              onEdit={() => {\n                if (allowProfileEdit) {\n                  setShowProfileEdit(true);\n                }\n              }}\n              allowProfileEdit={allowProfileEdit}\n              renderIconButton={() => (\n                <AddChannel />\n              )}\n            />\n          )\n        }\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onEditProfile={() => {\n              setShowProfileEdit(false);\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const target = e?.target as HTMLDivElement;\n          if (isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {\n            fetchChannelList();\n          }\n        }}\n      >\n        {\n          (sdkError && !loading) && (\n            (renderPlaceHolderError && typeof renderPlaceHolderError === 'function') ? (\n              renderPlaceHolderError?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.WRONG} />\n            )\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            allChannels && allChannels.map((channel, idx) => {\n              // todo: Refactor and move this inside channel - preview\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel?.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel?.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel?.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      onLeaveChannel={() => onLeaveChannel(channel, null)}\n                      isActive={channel?.url === currentChannel?.url}\n                      isTyping={typingChannels?.some(({ url }) => url === channel?.url)}\n                      renderChannelAction={(() => (\n                        <ChannelPreviewAction\n                          channel={channel}\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel, null)}\n                        />\n                      ))}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!initialized && loading) && (\n            (renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function') ? (\n              renderPlaceHolderLoading?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.LOADING} />\n            )\n          )\n        }\n        {\n          (initialized && allChannels?.length === 0) && (\n            (renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function') ? (\n              renderPlaceHolderEmptyList?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} />\n            )\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nexport default ChannelListUI;\n", "import React from 'react';\nimport {\n  ChannelListProvider,\n  ChannelListProviderProps,\n} from './context/ChannelListProvider';\n\nimport ChannelListUI, { ChannelListUIProps } from './components/ChannelListUI';\n\ninterface ChannelListProps extends ChannelListProviderProps, ChannelListUIProps {}\n\nconst ChannelList: React.FC<ChannelListProps> = (props: ChannelListProps) => {\n  return (\n    <ChannelListProvider\n      className={props?.className}\n      disableUserProfile={props?.disableUserProfile}\n      allowProfileEdit={props?.allowProfileEdit}\n      onBeforeCreateChannel={props?.onBeforeCreateChannel}\n      onThemeChange={props?.onThemeChange}\n      overrideInviteUser={props?.overrideInviteUser}\n      onProfileEditSuccess={props?.onProfileEditSuccess}\n      onChannelSelect={props?.onChannelSelect}\n      sortChannelList={props?.sortChannelList}\n      queries={props?.queries}\n      disableAutoSelect={props?.disableAutoSelect}\n      activeChannelUrl={props?.activeChannelUrl}\n      isTypingIndicatorEnabled={props?.isTypingIndicatorEnabled}\n      isMessageReceiptStatusEnabled={props?.isMessageReceiptStatusEnabled}\n    >\n      <ChannelListUI\n        renderChannelPreview={props?.renderChannelPreview}\n        renderUserProfile={props?.renderUserProfile}\n        renderHeader={props?.renderHeader}\n        renderPlaceHolderEmptyList={props?.renderPlaceHolderEmptyList}\n        renderPlaceHolderError={props?.renderPlaceHolderError}\n        renderPlaceHolderLoading={props?.renderPlaceHolderLoading}\n      />\n    </ChannelListProvider>\n  );\n};\n\nexport default ChannelList;\n"],
  "mappings": "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",
  "names": ["RESET_CHANNEL_LIST", "CREATE_CHANNEL", "LEAVE_CHANNEL_SUCCESS", "SET_CURRENT_CHANNEL", "FETCH_CHANNELS_START", "FETCH_CHANNELS_SUCCESS", "FETCH_CHANNELS_FAILURE", "INIT_CHANNELS_START", "INIT_CHANNELS_SUCCESS", "INIT_CHANNELS_FAILURE", "ON_USER_JOINED", "ON_CHANNEL_DELETED", "ON_LAST_MESSAGE_UPDATED", "ON_USER_LEFT", "ON_CHANNEL_CHANGED", "ON_CHANNEL_ARCHIVED", "ON_CHANNEL_FROZEN", "ON_CHANNEL_UNFROZEN", "ON_READ_RECEIPT_UPDATED", "ON_DELIVERY_RECEIPT_UPDATED", "CHANNEL_REPLACED_TO_TOP", "CHANNEL_LIST_PARAMS_UPDATED", "DELIVERY_RECEIPT", "createEventHandler", "_a", "sdk", "sdkChannelHandlerId", "channelListDispatcher", "logger", "ChannelHandler", "GroupChannelHandler", "onChannelChanged", "channel", "isGroupChannel", "info", "type", "channelActions", "payload", "onChannelDeleted", "channelUrl", "onUserJoined", "onUserBanned", "user", "isMe", "userId", "currentUser", "onUserLeft", "onUnreadMemberStatusUpdated", "onUndeliveredMemberStatusUpdated", "lastMessage", "onMessageUpdated", "message", "isEqual", "onChannelHidden", "onChannelFrozen", "onChannelUnfrozen", "groupChannel", "addGroupChannelHandler", "createChannelListQuery", "_b", "userFilledChannelListQuery", "params", "includeEmpty", "limit", "order", "Object", "keys", "forEach", "key", "createMyGroupChannelListQuery", "setupChannelList", "setChannelSource", "onChannelSelect", "sortChannelList", "disableAutoSelect", "markAsDeliveredScheduler", "disableMarkAsDelivered", "warning", "channelListQuery", "currentUserId", "hasNext", "next", "then", "channelList", "sortedChannelList", "canSetMarkAsDelivered", "appInfo", "premiumFeatureList", "find", "feature", "push", "catch", "err", "error", "pubSubHandleRemover", "subscriber", "s", "remove", "pubSubHandler", "pubSub", "Map", "set", "topics", "subscribe", "msg", "UPDATE_USER_MESSAGE", "updatedChannel", "messageId", "LEAVE_CHANNEL", "url", "SEND_MESSAGE_START", "getNextChannel", "currentChannel", "allChannels", "nextChannel", "length", "firstChannel", "secondChannel", "initialState", "initialized", "loading", "channelListReducer", "state", "action", "match", "with", "channelListActions", "__assign", "currentChannels", "map", "c", "filteredChannels", "filter", "__spreadArray", "filterChannelListParams", "getChannelsWithUpsertedChannel", "ch", "P", "union", "nextChannels", "_c", "unreadMessageCount", "sender", "isFrozen", "otherwise", "useActiveChannelUrl", "activeChannelUrl", "channels", "useEffect", "activeChannel", "messageActionTypes", "getChannel", "useFetchChannelList", "channelSource", "useCallback", "__awaiter", "sent", "error_1", "ChannelListContext", "React", "createContext", "disableUserProfile", "allowProfileEdit", "onBeforeCreateChannel", "onThemeChange", "onProfileEditSuccess", "queries", "className", "typingChannels", "fetchChannelList", "noop", "ChannelListProvider", "props", "children", "overrideInviteUser", "isTypingIndicatorEnabled", "_d", "isMessageReceiptStatusEnabled", "globalStore", "useSendbirdStateContext", "config", "stores", "sdkStore", "onUserProfileMessage", "_e", "_f", "isTypingIndicatorEnabledOnChannelList", "_g", "isMessageReceiptStatusEnabledOnChannelList", "_h", "userDefinedDisableUserProfile", "userDefinedRenderProfile", "renderUserProfile", "enableEditProfile", "userFilledApplicationUserListQuery", "applicationUserListQuery", "sdkIntialized", "_j", "useReducer", "channelListReducers", "channelListInitialState", "channelListStore", "_k", "useState", "_l", "setTypingChannels", "uuidv4", "removeGroupChannelHandler", "typingHandlerId", "handler", "onTypingStatusUpdated", "typingMemberCount", "getTypingUsers", "getChannelWithoutCache", "onMentionReceived", "queries_", "useMemo", "sortedChannels", "console", "warn", "before", "after", "some", "createElement", "Provider", "value", "UserProfileProvider", "concat", "useChannelListContext", "context", "useContext", "ChannelListHeader", "_a", "renderHeader", "renderTitle", "renderIconButton", "onEdit", "allowProfileEdit", "_b", "useSendbirdStateContext", "stores", "config", "user", "userStore", "logger", "stringSet", "useContext", "LocalizationContext", "warning", "titleRenderer", "React", "createElement", "className", "join", "role", "onClick", "onKeyDown", "tabIndex", "Avatar", "width", "height", "src", "profileUrl", "alt", "nickname", "Label", "type", "LabelTypography", "SUBTITLE_2", "color", "LabelColors", "ONBACKGROUND_1", "NO_NAME", "BODY_2", "ONBACKGROUND_2", "userId", "CHANNEL_TYPE", "CreateChannelContext", "React", "createContext", "undefined", "CreateChannelProvider", "props", "children", "onCreateChannel", "onBeforeCreateChannel", "overrideInviteUser", "userListQuery", "store", "useSendbirdStateContext", "userListQuery_", "_a", "config", "createChannel", "getCreateGroupChannel", "_b", "useState", "step", "setStep", "_c", "GROUP", "type", "setType", "createElement", "Provider", "value", "useCreateChannelContext", "useContext", "filterUser", "idsToFilter", "currentId", "includes", "setChannelType", "params", "type", "isBroadcast", "isSuper", "createDefaultUserListQuery", "_a", "sdk", "userFilledApplicationUserListQuery", "createApplicationUserListQuery", "params_1", "Object", "keys", "forEach", "key", "appHeight", "doc", "document", "documentElement", "style", "setProperty", "window", "innerHeight", "BUFFER", "InviteUsers", "onCancel", "userListQuery", "_e", "useCreateChannelContext", "onBeforeCreateChannel", "onCreateChannel", "overrideInviteUser", "createChannel", "globalStore", "useSendbirdStateContext", "userId", "_b", "config", "_d", "_c", "stores", "sdkStore", "_f", "useState", "users", "setUsers", "_g", "selectedUsers", "setSelectedUsers", "stringSet", "useContext", "LocalizationContext", "_h", "usersDataSource", "setUsersDataSource", "selectedCount", "length", "titleText", "MODAL__CREATE_CHANNEL__TITLE", "submitText", "BUTTON__CREATE", "userQueryCreator", "useEffect", "applicationUserListQuery", "isLoading", "next", "then", "users_", "addEventListener", "removeEventListener", "React", "createElement", "Modal", "isFullScreenOnMobile", "ButtonTypes", "PRIMARY", "disabled", "onSubmit", "selectedUserList", "onClose", "noop", "channelType", "channel", "invitedUserIds", "isDistinct", "operatorUserIds", "Label", "color", "LabelColors", "ONBACKGROUND_3", "LabelTypography", "CAPTION_1", "concat", "MODAL__INVITE_MEMBER__SELECTED", "className", "onScroll", "e", "eventTarget", "target", "hasNext", "fetchMore", "clientHeight", "scrollTop", "scrollHeight", "usersBatch", "__spreadArray", "map", "user", "UserListItem", "checkBox", "checked", "onChange", "event", "modifiedSelectedUsers", "__assign", "id", "isBroadcastChannelEnabled", "sdk", "ALLOW_BROADCAST_CHANNEL", "applicationAttributes", "_a", "appInfo", "Array", "isArray", "includes", "isSuperGroupChannelEnabled", "ALLOW_SUPER_GROUP_CHANNEL", "SelectChannelType", "props", "onCancel", "store", "useSendbirdStateContext", "sendbirdSelectors", "createChannelProps", "useCreateChannelContext", "setStep", "setType", "stringSet", "useContext", "LocalizationContext", "isBroadcastAvailable", "isSupergroupAvailable", "React", "createElement", "Modal", "titleText", "MODAL__CREATE_CHANNEL__TITLE", "hideFooter", "className", "onClick", "CHANNEL_TYPE", "GROUP", "role", "tabIndex", "onKeyDown", "Icon", "type", "IconTypes", "CHAT", "fillColor", "IconColors", "PRIMARY", "width", "height", "Label", "LabelTypography", "SUBTITLE_1", "color", "LabelColors", "ONBACKGROUND_1", "MODAL__CREATE_CHANNEL__GROUP", "SUPERGROUP", "MODAL__CREATE_CHANNEL__SUPER", "BROADCAST", "MODAL__CREATE_CHANNEL__BROADCAST", "CreateChannel", "props", "onCancel", "renderStepOne", "_a", "useCreateChannelContext", "step", "setStep", "userListQuery", "React", "createElement", "Fragment", "SelectChannelType", "InviteUsers", "CreateChannel", "props", "onBeforeCreateChannel", "userListQuery", "onCreateChannel", "overrideInviteUser", "onCancel", "renderStepOne", "React", "createElement", "CreateChannelProvider", "CreateChannelUI", "AddChannel", "_b", "useState", "showModal", "setShowModal", "state", "useSendbirdStateContext", "isOnline", "_a", "config", "disabled", "_c", "useChannelListContext", "overrideInviteUser", "onBeforeCreateChannel", "React", "createElement", "Fragment", "IconButton", "height", "width", "onClick", "Icon", "type", "IconTypes", "CREATE", "fillColor", "IconColors", "PRIMARY", "CreateChannel", "onCancel", "onCreateChannel", "Badge", "_a", "count", "_b", "maxLevel", "_c", "className", "stringSet", "useContext", "LocalizationContext", "maximumNumber", "parseInt", "repeat", "React", "createElement", "__spreadArray", "Array", "isArray", "join", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONCONTENT_1", "concat", "BADGE__OVER", "MentionUserLabel", "_a", "_b", "className", "children", "_c", "isReverse", "color", "userId", "React", "createElement", "concat", "MENTION_USER_LABEL_CLASSNAME", "contentEditable", "ChannelPreview", "_a", "channel", "_l", "isActive", "_m", "isTyping", "renderChannelAction", "onLeaveChannel", "onClick", "tabIndex", "sbState", "useSendbirdStateContext", "_o", "useChannelListContext", "_p", "isTypingIndicatorEnabled", "_q", "isMessageReceiptStatusEnabled", "_r", "useLocalization", "dateLocale", "stringSet", "isMobile", "useMediaQueryContext", "_s", "useState", "showMobileLeave", "setShowMobileLeave", "userId", "_d", "_b", "stores", "userStore", "user", "theme", "_e", "config", "isMentionEnabled", "_f", "isFrozen", "isBroadcast", "isChannelTyping", "isMessageStatusEnabled", "_g", "lastMessage", "messageType", "_h", "_k", "_j", "sender", "onLongPress", "useLongPress", "delay", "channelName", "utils", "React", "createElement", "Fragment", "_extends", "className", "join", "role", "__assign", "ChannelAvatar", "Icon", "type", "IconTypes", "BROADCAST", "fillColor", "IconColors", "SECONDARY", "height", "width", "Label", "LabelTypography", "SUBTITLE_2", "color", "LabelColors", "ONBACKGROUND_1", "CAPTION_2", "ONBACKGROUND_2", "title", "FREEZE", "PRIMARY", "isEphemeral", "MessageStatus", "message", "isDateSeparatorConsidered", "CAPTION_3", "locale", "BODY_2", "ONBACKGROUND_3", "TypingIndicatorText", "members", "getTypingUsers", "isVoiceMessage", "VOICE_MESSAGE", "unreadMentionCount", "MentionUserLabel", "Badge", "count", "Modal", "titleText", "hideFooter", "isCloseOnClickOutside", "onCancel", "TextButton", "SUBTITLE_1", "CHANNEL_PREVIEW_MOBILE_LEAVE", "LeaveChannel", "props", "_d", "channel", "_e", "onSubmit", "noop", "_f", "onCancel", "channelFromContext", "_a", "useChannelListContext", "currentChannel", "leavingChannel", "state", "useSendbirdStateContext", "stringSet", "useLocalization", "logger", "_b", "config", "isOnline", "_c", "React", "createElement", "Modal", "disabled", "info", "leave", "then", "submitText", "MODAL__LEAVE_CHANNEL__FOOTER", "titleText", "MODAL__LEAVE_CHANNEL__TITLE", "ChannelPreviewAction", "onLeaveChannel", "parentRef", "useRef", "parentContainerRef", "useState", "showModal", "setShowModal", "useContext", "LocalizationContext", "ref", "tabIndex", "role", "style", "display", "onKeyDown", "e", "stopPropagation", "onClick", "ContextMenu", "menuTrigger", "toggleDropdown", "IconButton", "height", "width", "Icon", "type", "IconTypes", "MORE", "fillColor", "IconColors", "PRIMARY", "menuItems", "closeDropdown", "MenuItems", "parentContainRef", "MenuItem", "dataSbId", "CHANNEL_SETTING__LEAVE_CHANNEL__TITLE", "LeaveChannelModal", "EditUserProfileProviderContext", "React", "createContext", "undefined", "EditUserProfileProvider", "props", "children", "onEditProfile", "onCancel", "onThemeChange", "value", "useMemo", "createElement", "Provider", "useEditUserProfileContext", "useContext", "InputLabel", "_a", "children", "React", "createElement", "Label", "className", "type", "LabelTypography", "CAPTION_3", "color", "LabelColors", "ONBACKGROUND_1", "Input", "forwardRef", "props", "ref", "name", "required", "disabled", "value", "placeHolder", "useState", "inputValue", "setInputValue", "onChange", "e", "target", "BODY_1", "ONBACKGROUND_3", "EditUserProfile", "editProfileProps", "useEditUserProfileContext", "store", "useSendbirdStateContext", "hiddenInputRef", "useRef", "inputRef", "formRef", "stringSet", "useContext", "LocalizationContext", "_h", "useState", "currentImg", "setCurrentImg", "_j", "newFile", "setNewFile", "onEditProfile", "onCancel", "onThemeChange", "theme", "_a", "config", "changeTheme", "_b", "setCurrentTheme", "noop", "user", "_d", "_c", "stores", "userStore", "sdk", "_f", "_e", "sdkStore", "userDispatcher", "_g", "dispatchers", "React", "createElement", "Modal", "titleText", "EDIT_PROFILE__TITLE", "submitText", "BUTTON__SAVE", "type", "ButtonTypes", "PRIMARY", "isFullScreenOnMobile", "onSubmit", "nickname", "current", "value", "reportValidity", "updateCurrentUserInfo", "profileImage", "then", "updatedUser", "USER_ACTIONS", "UPDATE_USER_INFO", "payload", "className", "ref", "e", "preventDefault", "InputLabel", "EDIT_PROFILE__IMAGE_LABEL", "Avatar", "width", "height", "src", "profileUrl", "accept", "style", "display", "onChange", "URL", "createObjectURL", "target", "files", "TextButton", "disableUnderline", "onClick", "click", "Label", "LabelTypography", "BUTTON_1", "color", "LabelColors", "EDIT_PROFILE__IMAGE_UPLOAD", "EDIT_PROFILE__NICKNAME_LABEL", "Input", "required", "name", "placeHolder", "EDIT_PROFILE__NICKNAME_PLACEHOLDER", "EDIT_PROFILE__USERID_LABEL", "disabled", "userId", "EDIT_PROFILE__THEME_LABEL", "Icon", "IconTypes", "TOGGLE_ON", "TOGGLE_OFF", "EditProfile", "props", "onEditProfile", "onCancel", "onThemeChange", "React", "createElement", "EditUserProfileProvider", "EditUserProfile", "ChannelListUI", "props", "renderHeader", "renderChannelPreview", "renderPlaceHolderError", "renderPlaceHolderLoading", "renderPlaceHolderEmptyList", "_b", "useState", "showProfileEdit", "setShowProfileEdit", "_c", "useChannelListContext", "onThemeChange", "allowProfileEdit", "allChannels", "loading", "currentChannel", "channelListDispatcher", "typingChannels", "initialized", "fetchChannelList", "state", "useSendbirdStateContext", "sdkStore", "_a", "stores", "config", "logger", "_d", "isOnline", "sdkError", "error", "React", "createElement", "Fragment", "className", "ChannelListHeader", "onEdit", "renderIconButton", "AddChannel", "EditUserProfile", "onCancel", "onEditProfile", "onScroll", "e", "target", "isAboutSame", "clientHeight", "scrollTop", "scrollHeight", "PlaceHolder", "type", "PlaceHolderTypes", "WRONG", "map", "channel", "idx", "onLeaveChannel", "c", "cb", "info", "leave", "then", "res", "channelListActions", "payload", "url", "catch", "err", "onClick", "key", "ChannelPreview", "tabIndex", "isActive", "isTyping", "some", "renderChannelAction", "ChannelPreviewAction", "disabled", "LOADING", "length", "NO_CHANNELS", "ChannelList", "props", "React", "createElement", "ChannelListProvider", "className", "disableUserProfile", "allowProfileEdit", "onBeforeCreateChannel", "onThemeChange", "overrideInviteUser", "onProfileEditSuccess", "onChannelSelect", "sortChannelList", "queries", "disableAutoSelect", "activeChannelUrl", "isTypingIndicatorEnabled", "isMessageReceiptStatusEnabled", "ChannelListUI", "renderChannelPreview", "renderUserProfile", "renderHeader", "renderPlaceHolderEmptyList", "renderPlaceHolderError", "renderPlaceHolderLoading"]
}
