{
  "version": 3,
  "sources": ["../../@sendbird/src/ui/ConnectionStatus/index.tsx", "../../@sendbird/src/modules/Channel/components/ChannelHeader/utils.ts", "../../@sendbird/src/modules/Channel/components/ChannelHeader/index.tsx", "../../@sendbird/src/ui/MessageInput/const.ts", "../../@sendbird/src/modules/Thread/types.tsx", "../../@sendbird/src/modules/Thread/consts.ts", "../../@sendbird/src/modules/Thread/context/dux/actionTypes.ts", "../../@sendbird/src/modules/Thread/context/dux/reducer.ts", "../../@sendbird/src/modules/Thread/context/dux/initialState.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetChannel.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetAllEmoji.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetThreadList.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetParentMessage.ts", "../../@sendbird/src/modules/Thread/context/hooks/useHandleThreadPubsubEvents.ts", "../../@sendbird/src/modules/Thread/context/hooks/useHandleChannelEvents.ts", "../../@sendbird/src/modules/Thread/context/hooks/useSendFileMessage.ts", "../../@sendbird/src/modules/Thread/context/hooks/useUpdateMessageCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useDeleteMessageCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetPrevThreadsCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useGetNextThreadsCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useToggleReactionsCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useSendUserMessageCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useResendMessageCallback.ts", "../../@sendbird/src/modules/Thread/context/hooks/useSendVoiceMessageCallback.ts", "../../@sendbird/src/modules/Thread/context/ThreadProvider.tsx", "../../@sendbird/src/modules/Channel/components/SuggestedMentionList/SuggestedUserMentionItem.tsx", "../../@sendbird/src/modules/Channel/components/SuggestedMentionList/index.tsx", "../../@sendbird/src/ui/DateSeparator/index.tsx", "../../dompurify/src/utils.js", "../../dompurify/src/tags.js", "../../dompurify/src/attrs.js", "../../dompurify/src/regexp.js", "../../dompurify/src/purify.js", "../../@sendbird/src/ui/TextMessageItemBody/consts.ts", "../../@sendbird/src/ui/OGMessageItemBody/consts.ts", "../../@sendbird/src/ui/MentionUserLabel/renderToString.ts", "../../@sendbird/src/ui/MessageInput/utils.js", "../../@sendbird/src/ui/MessageInput/hooks/usePaste/insertTemplate.ts", "../../@sendbird/src/ui/MessageInput/hooks/usePaste/consts.ts", "../../@sendbird/src/ui/MessageInput/hooks/usePaste/utils.ts", "../../@sendbird/src/ui/MessageInput/hooks/usePaste/index.ts", "../../@sendbird/src/modules/Message/consts.ts", "../../@sendbird/src/modules/Message/utils/tokens/types.ts", "../../@sendbird/src/modules/Message/utils/tokens/tokenize.ts", "../../@sendbird/src/ui/MessageInput/messageInputUtils.ts", "../../@sendbird/src/ui/MessageInput/index.jsx", "../../@sendbird/src/lib/types.ts", "../../@sendbird/src/ui/MessageItemMenu/index.tsx", "../../@sendbird/src/ui/ReactionButton/index.tsx", "../../@sendbird/src/ui/MessageItemReactionMenu/index.tsx", "../../@sendbird/src/ui/ReactionBadge/index.tsx", "../../@sendbird/src/ui/BottomSheet/index.tsx", "../../@sendbird/src/ui/Tooltip/index.tsx", "../../@sendbird/src/ui/TooltipWrapper/index.tsx", "../../@sendbird/src/modules/Message/context/MessageProvider.tsx", "../../@sendbird/src/ui/MobileMenu/ReactedMembersBottomSheet.tsx", "../../@sendbird/src/ui/EmojiReactions/ReactionItem.tsx", "../../@sendbird/src/ui/EmojiReactions/AddReactionBadgeItem.tsx", "../../@sendbird/src/ui/MobileMenu/MobileEmojisBottomSheet.tsx", "../../@sendbird/src/ui/EmojiReactions/index.tsx", "../../@sendbird/src/ui/AdminMessage/index.tsx", "../../@sendbird/src/ui/MentionLabel/index.tsx", "../../@sendbird/src/ui/LinkLabel/index.jsx", "../../@sendbird/src/modules/Message/utils/tokens/keyGenerator.ts", "../../@sendbird/src/modules/Message/components/TextFragment/index.tsx", "../../@sendbird/src/ui/TextMessageItemBody/index.tsx", "../../@sendbird/src/ui/FileMessageItemBody/index.tsx", "../../@sendbird/src/ui/QuoteMessage/utils.ts", "../../@sendbird/src/ui/ThumbnailMessageItemBody/index.tsx", "../../@sendbird/src/ui/OGMessageItemBody/index.tsx", "../../@sendbird/src/ui/UnknownMessageItemBody/index.tsx", "../../@sendbird/src/ui/QuoteMessage/index.tsx", "../../@sendbird/src/ui/MobileMenu/MobileContextMenu.tsx", "../../@sendbird/src/ui/MobileMenu/MobileBottomSheet.tsx", "../../@sendbird/src/ui/MobileMenu/index.tsx", "../../@sendbird/src/ui/ThreadReplies/index.tsx", "../../@sendbird/src/ui/ProgressBar/index.tsx", "../../@sendbird/src/hooks/VoicePlayer/utils.ts", "../../@sendbird/src/hooks/VoicePlayer/useVoicePlayer.tsx", "../../@sendbird/src/ui/PlaybackTime/index.tsx", "../../@sendbird/src/ui/VoiceMessageItemBody/index.tsx", "../../@sendbird/src/ui/FileViewer/types.ts", "../../@sendbird/src/ui/FileViewer/hooks/useKeyDown.ts", "../../@sendbird/src/ui/FileViewer/utils.ts", "../../@sendbird/src/ui/FileViewer/DeleteButton.tsx", "../../@sendbird/src/ui/FileViewer/Slider.tsx", "../../@sendbird/src/ui/FileViewer/index.tsx", "../../@sendbird/src/ui/ImageGrid/index.tsx", "../../@sendbird/src/ui/MultipleFilesMessageItemBody/const.ts", "../../@sendbird/src/ui/MultipleFilesMessageItemBody/index.tsx", "../../@sendbird/src/modules/Channel/context/hooks/useThreadMessageKindKeySelector.ts", "../../@sendbird/src/utils/createStatefulFileInfoList.ts", "../../@sendbird/src/modules/Channel/context/hooks/useStatefulFileInfoList.ts", "../../@sendbird/src/ui/MessageContent/index.tsx", "../../@sendbird/src/modules/Channel/components/FileViewer/index.tsx", "../../@sendbird/src/ui/Label/stringFormatterUtils.ts", "../../@sendbird/src/modules/Channel/components/RemoveMessageModal.tsx", "../../@sendbird/src/hooks/useDebounce.ts", "../../@sendbird/src/hooks/useHandleOnScrollCallback/index.ts", "../../@sendbird/src/modules/Message/utils/getMentionNodes.ts", "../../@sendbird/src/modules/Message/hooks/useDirtyGetMentions.ts", "../../@sendbird/src/utils/useDidMountEffect.ts", "../../@sendbird/src/modules/Channel/components/Message/index.tsx", "../../@sendbird/src/modules/Channel/context/compareMessagesForGrouping.ts", "../../@sendbird/src/modules/Channel/components/MessageList/getMessagePartsInfo.ts", "../../@sendbird/src/modules/Channel/components/UnreadCount/index.tsx", "../../@sendbird/src/modules/Channel/components/FrozenNotification/index.tsx", "../../@sendbird/src/modules/Channel/components/MessageList/hooks/useSetScrollToBottom.ts", "../../@sendbird/src/modules/Channel/components/MessageList/hooks/useScrollBehavior.ts", "../../@sendbird/src/modules/Channel/components/MessageList/index.tsx", "../../@sendbird/src/ui/QuoteMessageInput/QuoteMessageThumbnail.tsx", "../../@sendbird/src/ui/QuoteMessageInput/index.tsx", "../../@sendbird/src/hooks/VoiceRecorder/useVoiceRecorder.tsx", "../../@sendbird/src/ui/VoiceMessageInput/types.ts", "../../@sendbird/src/ui/VoiceMessageInput/controlerIcons.tsx", "../../@sendbird/src/ui/VoiceMessageInput/index.tsx", "../../@sendbird/src/modules/Channel/components/MessageInput/VoiceMessageInputWrapper.tsx", "../../@sendbird/src/modules/Channel/components/MessageInput/useHandleUploadFiles.tsx", "../../@sendbird/src/modules/Channel/components/MessageInput/index.tsx", "../../@sendbird/src/modules/Channel/components/ChannelUI/index.tsx", "../../@sendbird/src/modules/Channel/index.tsx"],
  "sourcesContent": ["import React, { ReactElement, useContext } from 'react';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport './index.scss';\n\nfunction ConnectionStatus(): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-connection-status\">\n      <Label\n        type={LabelTypography.BODY_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.TRYING_TO_CONNECT}\n      </Label>\n      <Icon\n        type={IconTypes.DISCONNECTED}\n        fillColor={IconColors.SENT}\n        width=\"14px\"\n        height=\"14px\"\n      />\n    </div>\n  );\n}\n\nexport default ConnectionStatus;\n", "import type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { LabelStringSet } from '../../../../ui/Label';\n\nexport const getChannelTitle = (\n  channel: GroupChannel,\n  currentUserId: string,\n  stringSet: { [label: string]: string },\n): string => {\n  const LABEL_STRING_SET: { [label: string]: string } = stringSet || LabelStringSet;\n  if (!channel?.name && !channel?.members) {\n    return LABEL_STRING_SET.NO_TITLE;\n  }\n  if (channel?.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel?.members?.length === 1) {\n    return LABEL_STRING_SET.NO_MEMBERS;\n  }\n\n  return channel?.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || LABEL_STRING_SET.NO_NAME))\n    .join(', ');\n};\n", "import './channel-header.scss';\nimport React, { useContext } from 'react';\n\nimport * as utils from './utils';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport IconButton from '../../../../ui/IconButton';\nimport ChannelAvatar from '../../../../ui/ChannelAvatar/index';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport { useMediaQueryContext } from '../../../../lib/MediaQueryContext';\nimport { noop } from '../../../../utils/utils';\n\ninterface ChannelHeaderProps {\n  className?: string;\n}\n\nconst ChannelHeader: React.FC<ChannelHeaderProps> = ({\n  className = '',\n}) => {\n  const globalStore = useSendbirdStateContext();\n  const userId = globalStore?.config?.userId;\n  const theme = globalStore?.config?.theme;\n\n  const channelStore = useChannelContext();\n  const { isMobile } = useMediaQueryContext();\n  const {\n    currentGroupChannel,\n    showSearchIcon,\n    onSearchClick,\n    onChatHeaderActionClick,\n    onBackClick = noop,\n  } = channelStore;\n  const subTitle = (currentGroupChannel?.members\n    && currentGroupChannel?.members?.length !== 2);\n  const isMuted = currentGroupChannel?.myMutedState === 'muted';\n\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={`sendbird-chat-header ${className}`}>\n      <div className=\"sendbird-chat-header__left\">\n        {\n          isMobile && (\n            <Icon\n              className=\"sendbird-chat-header__icon_back\"\n              onClick={onBackClick}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n              type={IconTypes.ARROW_LEFT}\n            />\n          )\n        }\n        <ChannelAvatar\n          theme={theme}\n          channel={currentGroupChannel}\n          userId={userId}\n          height={32}\n          width={32}\n        />\n        <Label\n          className=\"sendbird-chat-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {utils.getChannelTitle(currentGroupChannel, userId, stringSet)}\n        </Label>\n        <Label\n          className=\"sendbird-chat-header__left__subtitle\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle}\n        </Label>\n      </div>\n      <div className=\"sendbird-chat-header__right\">\n        {\n          ((typeof isMuted === 'string' && isMuted === 'true') || (typeof isMuted === 'boolean' && isMuted))\n            && (\n              <Icon\n                className=\"sendbird-chat-header__right__mute\"\n                type={IconTypes.NOTIFICATIONS_OFF_FILLED}\n                fillColor={IconColors.ON_BACKGROUND_2}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            )\n        }\n        {\n          (showSearchIcon && !currentGroupChannel?.isEphemeral) && (\n            <IconButton\n              className=\"sendbird-chat-header__right__search\"\n              width=\"32px\"\n              height=\"32px\"\n              onClick={onSearchClick}\n            >\n              <Icon\n                type={IconTypes.SEARCH}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </IconButton>\n          )\n        }\n        <IconButton\n          className=\"sendbird-chat-header__right__info\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onChatHeaderActionClick}\n        >\n          <Icon\n            type={IconTypes.INFO}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n};\n\nexport default ChannelHeader;\n", "export const MessageInputKeys = {\n  Enter: 'Enter',\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n  Backspace: 'Backspace',\n};\n\nexport const NodeTypes = {\n  ElementNode: 1,\n  TextNode: 3,\n};\n\nexport const NodeNames = {\n  Span: 'SPAN',\n  Br: 'BR',\n  Div: 'DIV',\n};\n", "// Initializing status\nexport enum ChannelStateTypes {\n  NIL = 'NIL',\n  LOADING = 'LOADING',\n  INVALID = 'INVALID',\n  INITIALIZED = 'INITIALIZED',\n}\nexport enum ParentMessageStateTypes {\n  NIL = 'NIL',\n  LOADING = 'LOADING',\n  INVALID = 'INVALID',\n  INITIALIZED = 'INITIALIZED',\n}\nexport enum ThreadListStateTypes {\n  NIL = 'NIL',\n  LOADING = 'LOADING',\n  INVALID = 'INVALID',\n  INITIALIZED = 'INITIALIZED',\n}\n", "export const PREV_THREADS_FETCH_SIZE = 30;\nexport const NEXT_THREADS_FETCH_SIZE = 30;\n", "export enum ThreadContextActionTypes {\n  // initialize\n  INIT_USER_ID = 'INIT_USER_ID',\n  // channel\n  GET_CHANNEL_START = 'GET_CHANNEL_START',\n  GET_CHANNEL_SUCCESS = 'GET_CHANNEL_SUCCESS',\n  GET_CHANNEL_FAILURE = 'GET_CHANNEL_FAILURE',\n  // emojis\n  SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER',\n  // parent message\n  GET_PARENT_MESSAGE_START = 'GET_PARENT_MESSAGE_START',\n  GET_PARENT_MESSAGE_SUCCESS = 'GET_PARENT_MESSAGE_SUCCESS',\n  GET_PARENT_MESSAGE_FAILURE = 'GET_PARENT_MESSAGE_FAILURE',\n  // fetch threads\n  INITIALIZE_THREAD_LIST_START = 'INITIALIZE_THREAD_LIST_START',\n  INITIALIZE_THREAD_LIST_SUCCESS = 'INITIALIZE_THREAD_LIST_SUCCESS',\n  INITIALIZE_THREAD_LIST_FAILURE = 'INITIALIZE_THREAD_LIST_FAILURE',\n  GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START',\n  GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS',\n  GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE',\n  GET_NEXT_MESSAGES_START = 'GET_NEXT_MESSAGES_START',\n  GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS',\n  GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE',\n  // handle messages\n  SEND_MESSAGE_START = 'SEND_MESSAGE_START',\n  SEND_MESSAGE_SUCESS = 'SEND_MESSAGE_SUCESS',\n  SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE',\n  RESEND_MESSAGE_START = 'RESEND_MESSAGE_START',\n  ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID',\n  // event handlers - message status change\n  ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED',\n  ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED',\n  ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED',\n  ON_REACTION_UPDATED = 'ON_REACTION_UPDATED',\n  ON_FILE_INFO_UPLOADED = 'ON_FILE_INFO_UPLOADED',\n  // event handlers - user status change\n  ON_USER_MUTED = 'ON_USER_MUTED',\n  ON_USER_UNMUTED = 'ON_USER_UNMUTED',\n  ON_USER_BANNED = 'ON_USER_BANNED',\n  ON_USER_UNBANNED = 'ON_USER_UNBANNED',\n  ON_USER_LEFT = 'ON_USER_LEFT',\n  // event handler - channel status change\n  ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN',\n  ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN',\n  ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED',\n}\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MultipleFilesMessage, ReactionEvent, UserMessage } from '@sendbird/chat/message';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ChannelStateTypes, ParentMessageStateTypes, ThreadListStateTypes } from '../../types';\nimport { compareIds } from '../utils';\nimport { ThreadContextActionTypes as actionTypes } from './actionTypes';\nimport { ThreadContextInitialState } from './initialState';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface ActionInterface {\n  type: actionTypes;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: ThreadContextInitialState,\n  action: ActionInterface,\n): ThreadContextInitialState {\n  switch (action.type) {\n    // initialize\n    case actionTypes.INIT_USER_ID: {\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    }\n    case actionTypes.GET_CHANNEL_START: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.LOADING,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.GET_CHANNEL_SUCCESS: {\n      const groupChannel = action.payload.groupChannel as GroupChannel;\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INITIALIZED,\n        currentChannel: groupChannel,\n        // only support in normal group channel\n        isMuted: groupChannel?.members?.find((member) => member?.userId === state.currentUserId)?.isMuted || false,\n        isChannelFrozen: groupChannel?.isFrozen || false,\n      };\n    }\n    case actionTypes.GET_CHANNEL_FAILURE: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INVALID,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      const { emojiContainer } = action.payload;\n      return {\n        ...state,\n        emojiContainer: emojiContainer,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_START: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.LOADING,\n        parentMessage: null,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_SUCCESS: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INITIALIZED,\n        parentMessage: action.payload.parentMessage,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_FAILURE: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INVALID,\n        parentMessage: null,\n      };\n    }\n    // fetch threads\n    case actionTypes.INITIALIZE_THREAD_LIST_START: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.LOADING,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_SUCCESS: {\n      const { parentMessage, anchorMessage, threadedMessages } = action.payload;\n      const anchorMessageCreatedAt = (!anchorMessage?.messageId) ? parentMessage?.createdAt : anchorMessage?.createdAt;\n      const anchorIndex = threadedMessages.findIndex((message) => message?.createdAt > anchorMessageCreatedAt);\n      const prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;\n      const anchorThreadMessage = anchorMessage?.messageId ? [anchorMessage] : [];\n      const nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INITIALIZED,\n        hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE,\n        hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat(),\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_FAILURE: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INVALID,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMoreNext: threadedMessages.length === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [...state.allThreadMessages, ...threadedMessages],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMorePrev: threadedMessages.length === PREV_THREADS_FETCH_SIZE,\n        allThreadMessages: [...threadedMessages, ...state.allThreadMessages],\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMorePrev: false,\n      };\n    }\n    // event handlers - message status change\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message }: { channel: GroupChannel, message: SendableMessageType } = action.payload;\n\n      if (\n        state.currentChannel?.url !== channel?.url\n        || state.hasMoreNext\n        || message?.parentMessage?.messageId !== state?.parentMessage?.messageId\n      ) {\n        return state;\n      }\n      const isAlreadyReceived = state.allThreadMessages.findIndex((m) => (\n        m.messageId === message.messageId\n      )) > -1;\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId ? message : state.parentMessage,\n        allThreadMessages: isAlreadyReceived\n          ? state.allThreadMessages.map((m) => (\n            m.messageId === message.messageId ? message : m\n          ))\n          : [\n            ...state.allThreadMessages.filter((m) => (m as SendableMessageType)?.reqId !== message?.reqId),\n            message,\n          ],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId\n          ? message\n          : state.parentMessage,\n        allThreadMessages: state.allThreadMessages?.map((msg) => (\n          (msg?.messageId === message?.messageId) ? message : msg\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const { channel, messageId } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      if (state?.parentMessage?.messageId === messageId) {\n        return {\n          ...state,\n          parentMessage: null,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          allThreadMessages: [],\n        };\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n        localThreadMessages: state.localThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        localThreadMessages: state.localThreadMessages.filter((m) => (\n          !compareIds((m as SendableMessageType).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      const reactionEvent = action.payload?.reactionEvent as ReactionEvent;\n      if (state?.parentMessage?.messageId === reactionEvent?.messageId) {\n        state.parentMessage?.applyReactionEvent?.(reactionEvent);\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => {\n          if (reactionEvent?.messageId === m?.messageId) {\n            m?.applyReactionEvent?.(reactionEvent);\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    // event handlers - user status change\n    case actionTypes.ON_USER_MUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: true,\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: false,\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_USER_LEFT: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    // event handler - channel status change\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: false,\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const { channel } = action.payload;\n      if (channel?.url === state.currentChannel?.url) {\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return state;\n    }\n    // message\n    case actionTypes.SEND_MESSAGE_START: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        localThreadMessages: [\n          ...state.localThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_SUCESS: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: [\n          ...state.allThreadMessages.filter((m) => (\n            !compareIds((m as UserMessage)?.reqId, message?.reqId)\n          )),\n          message,\n        ],\n        localThreadMessages: state.localThreadMessages.filter((m) => (\n          !compareIds((m as UserMessage)?.reqId, message?.reqId)\n        )),\n      };\n    }\n    case actionTypes.SEND_MESSAGE_FAILURE: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        localThreadMessages: state.localThreadMessages.map((m) => (\n          compareIds((m as UserMessage)?.reqId, message?.reqId)\n            ? message\n            : m\n        )),\n      };\n    }\n    case actionTypes.RESEND_MESSAGE_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_FILE_INFO_UPLOADED: {\n      const { channelUrl, requestId, index, uploadableFileInfo, error } = action.payload;\n      if (!compareIds(channelUrl, state.currentChannel?.url)) {\n        return state;\n      }\n      /**\n       * We don't have to do anything here because\n       * onFailed() will be called so handle error there instead.\n       */\n      if (error) return state;\n      const { localThreadMessages } = state;\n      const messageToUpdate = localThreadMessages.find((message) => compareIds(hasReqId(message) && message.reqId, requestId),\n      );\n      const fileInfoList = (messageToUpdate as MultipleFilesMessage)\n        .messageParams?.fileInfoList;\n      if (Array.isArray(fileInfoList)) {\n        fileInfoList[index] = uploadableFileInfo;\n      }\n      return {\n        ...state,\n        localThreadMessages,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction hasReqId<T extends object>(\n  message: T,\n): message is T & { reqId: string } {\n  return 'reqId' in message;\n}\n", "import { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport {\n  ChannelStateTypes,\n  ParentMessageStateTypes,\n  ThreadListStateTypes,\n} from '../../types';\nimport { CoreMessageType, SendableMessageType } from '../../../../utils';\n\nexport interface ThreadContextInitialState {\n  currentChannel: GroupChannel;\n  allThreadMessages: Array<CoreMessageType>;\n  localThreadMessages: Array<CoreMessageType>;\n  parentMessage: SendableMessageType;\n  channelState: ChannelStateTypes;\n  parentMessageState: ParentMessageStateTypes;\n  threadListState: ThreadListStateTypes;\n  hasMorePrev: boolean;\n  hasMoreNext: boolean;\n  emojiContainer: EmojiContainer;\n  isMuted: boolean;\n  isChannelFrozen: boolean;\n  currentUserId: string;\n}\n\nconst initialState: ThreadContextInitialState = {\n  currentChannel: null,\n  allThreadMessages: [],\n  localThreadMessages: [],\n  parentMessage: null,\n  channelState: ChannelStateTypes.NIL,\n  parentMessageState: ParentMessageStateTypes.NIL,\n  threadListState: ThreadListStateTypes.NIL,\n  hasMorePrev: false,\n  hasMoreNext: false,\n  emojiContainer: {} as EmojiContainer,\n  isMuted: false,\n  isChannelFrozen: false,\n  currentUserId: '',\n};\n\nexport default initialState;\n", "import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  message: SendableMessageType;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: (props: { type: string, payload?: any }) => void;\n}\n\nexport default function useGetChannel({\n  channelUrl,\n  sdkInit,\n  message,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && channelUrl && sdk?.groupChannel) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_CHANNEL_START,\n        payload: null,\n      });\n      sdk.groupChannel.getChannel?.(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Thread | useInitialize: Get channel succeeded', groupChannel);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,\n            payload: { groupChannel },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useInitialize: Get channel failed', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [message, sdkInit]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n", "import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DanamicPrpos {\n  sdk: SendbirdGroupChat;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetAllEmoji({\n  sdk,\n}: DanamicPrpos, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    if (sdk?.getAllEmoji) { // validation check\n      sdk?.getAllEmoji()\n        .then((emojiContainer) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis succeeded.', emojiContainer);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,\n            payload: { emojiContainer },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis failed.', error);\n        });\n    }\n  }, [sdk]);\n}\n", "import { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadedMessageListParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  parentMessage: SendableMessageType;\n  anchorMessage?: SendableMessageType;\n  isReactionEnabled?: boolean;\n}\n\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetThreadList({\n  sdkInit,\n  parentMessage,\n  anchorMessage,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && parentMessage?.getThreadedMessagesByTimestamp) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,\n        payload: null,\n      });\n      const timeStamp = anchorMessage?.createdAt || 0;\n      const params = {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true,\n      } as ThreadedMessageListParams;\n      logger.info('Thread | useGetThreadList: Initialize thread list start.', { timeStamp, params });\n      parentMessage.getThreadedMessagesByTimestamp?.(timeStamp, params)\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetThreadList: Initialize thread list succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,\n            payload: {\n              parentMessage,\n              anchorMessage,\n              threadedMessages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.info('Therad | useGetThreadList: Initialize thread list failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId, anchorMessage]);\n}\n", "import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { BaseMessage, MessageRetrievalParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { ChannelType } from '@sendbird/chat';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  parentMessage?: BaseMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetParentMessage({\n  channelUrl,\n  sdkInit,\n  parentMessage,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && sdk?.message?.getMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,\n        payload: null,\n      });\n      const params: MessageRetrievalParams = {\n        channelUrl,\n        channelType: ChannelType.GROUP,\n        messageId: parentMessage?.messageId,\n        includeMetaArray: true,\n        includeReactions: true,\n        includeThreadInfo: true,\n        includeParentMessageInfo: true,\n      };\n      logger.info('Thread | useGetParentMessage: Get parent message start.', params);\n      const fetchParentMessage = async () => {\n        const data = await sdk.message.getMessage?.(params);\n        return data;\n      };\n      fetchParentMessage()\n        .then((parentMsg) => {\n          logger.info('Thread | useGetParentMessage: Get parent message succeeded.', parentMessage);\n          parentMsg.ogMetaData = parentMessage?.ogMetaData || null;// ogMetaData is not included for now\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,\n            payload: { parentMessage: parentMsg },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetParentMessage: Get parent message failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n", "import { useEffect } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport topics, { PUBSUB_TOPICS } from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\nimport { FileUploadedPayload, PublishingModuleType } from './useSendMultipleFilesMessage';\nimport * as channelActions from '../../../Channel/context/dux/actionTypes';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  currentChannel: GroupChannel;\n  parentMessage: SendableMessageType\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleThreadPubsubEvents({\n  sdkInit,\n  currentChannel,\n  parentMessage,\n}: DynamicProps, {\n  pubSub,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const subscriber = new Map();\n    if (pubSub?.subscribe) {\n      // TODO: subscribe ON_FILE_INFO_UPLOADED\n      subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          // TODO: const clonedMessage = cloneMessage(message);\n          const pendingMessage: Record<string, any> = { ...message };\n          if (message.isMultipleFilesMessage()) {\n            pendingMessage.fileInfoList = message.messageParams.fileInfoList.map((fileInfo) => ({\n              ...fileInfo,\n              url: URL.createObjectURL(fileInfo.file as File),\n            }));\n          }\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: {\n              message: pendingMessage,\n            },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, pubSub.subscribe(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, (props) => {\n        const {\n          response,\n          publishingModules,\n        } = props as { response: FileUploadedPayload, publishingModules: PublishingModuleType[] };\n        if (\n          currentChannel?.url === response.channelUrl\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: channelActions.ON_FILE_INFO_UPLOADED,\n            payload: response,\n          });\n        }\n      }));\n      subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n        } = props as { channel: GroupChannel, message: SendableMessageType };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.SEND_MESSAGE_FAILED, pubSub.subscribe(topics.SEND_MESSAGE_FAILED, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { message },\n          });\n        }\n      }));\n      subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n          publishingModules,\n        } = props as { channel: GroupChannel, message: SendableMessageType, publishingModules: PublishingModuleType[] };\n        if (currentChannel?.url === channel?.url\n          && publishingModules.includes(PublishingModuleType.THREAD)\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (props) => {\n        const {\n          channel,\n          message,\n        } = props as { channel: GroupChannel, message: SendableMessageType };\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        }\n      }));\n      subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (props) => {\n        const { channel, messageId } = props as { channel: GroupChannel, messageId: number };\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { messageId },\n          });\n        }\n      }));\n    }\n    return () => {\n      subscriber?.forEach((s) => {\n        try {\n          s?.remove();\n        } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInit, currentChannel, parentMessage?.messageId]);\n}\n", "import { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdk: SendbirdGroupChat;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleChannelEvents({\n  sdk,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const handlerId = uuidv4();\n    // validation check\n    if (sdk?.groupChannel?.addGroupChannelHandler\n      && currentChannel\n    ) {\n      const channelHandlerParams: GroupChannelHandler = {\n        // message status change\n        onMessageReceived(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageReceived', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onMessageUpdated(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageUpdated', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted(channel, messageId) {\n          logger.info('Thread | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onReactionUpdated(channel, reactionEvent) {\n          logger.info('Thread | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_REACTION_UPDATED,\n            payload: { channel, reactionEvent },\n          });\n        },\n        // user status change\n        onUserMuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserMuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnmuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserBanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_BANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnbanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnbanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserLeft(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserLeft', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_LEFT,\n            payload: { channel, user },\n          });\n        },\n        // channel status change\n        onChannelFrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelFrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,\n            payload: { channel },\n          });\n        },\n        onChannelUnfrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelUnfrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: { channel },\n          });\n        },\n        onOperatorUpdated(channel, users) {\n          logger.info('Thread | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, users },\n          });\n        },\n      };\n      const channelHandler = new GroupChannelHandler(channelHandlerParams);\n      sdk.groupChannel.addGroupChannelHandler?.(handlerId, channelHandler);\n      logger.info('Thread | useHandleChannelEvents: Added channelHandler in Thread', { handlerId, channelHandler });\n    }\n    return () => {\n      // validation check\n      if (handlerId && sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler?.(handlerId);\n        logger.info('Thread | useHandleChannelEvents: Removed channelHandler in Thread.', handlerId);\n      }\n    };\n  }, [\n    sdk?.groupChannel,\n    currentChannel,\n  ]);\n}\n", "import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from './useSendMultipleFilesMessage';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  onBeforeSendFileMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport type SendFileMessageFunctionType = (file: File, quoteMessage?: SendableMessageType) => Promise<FileMessage>;\n\nexport default function useSendFileMessageCallback({\n  currentChannel,\n  onBeforeSendFileMessage,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): SendFileMessageFunctionType {\n  const sendMessage = useCallback((file, quoteMessage): Promise<FileMessage> => {\n    return new Promise((resolve, reject) => {\n      const createParamsDefault = () => {\n        const params = {} as FileMessageCreateParams;\n        params.file = file;\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n      const params = onBeforeSendFileMessage?.(file, quoteMessage) ?? createParamsDefault();\n      logger.info('Thread | useSendFileMessageCallback: Sending file message start.', params);\n\n      currentChannel?.sendFileMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: {\n              /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */\n              message: {\n                ...pendingMessage,\n                url: URL.createObjectURL(file),\n                // pending thumbnail message seems to be failed\n                requestState: 'pending',\n              },\n            },\n          });\n          setTimeout(() => scrollIntoLast(), 1000);\n        })\n        .onFailed((error, message) => {\n          (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n          (message as LocalFileMessage).file = file;\n          logger.info('Thread | useSendFileMessageCallback: Sending file message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { message, error },\n          });\n          reject(error);\n        })\n        .onSucceeded((message: FileMessage) => {\n          logger.info('Thread | useSendFileMessageCallback: Sending file message succeeded.', message);\n          pubSub.publish(topics.SEND_FILE_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          });\n          resolve(message);\n        });\n    });\n  }, [currentChannel]);\n  return sendMessage;\n}\n", "import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessage, UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\nimport topics from '../../../../lib/pubSub/topics';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  isMentionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useUpdateMessageCallback({\n  currentChannel,\n  isMentionEnabled,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  return useCallback((props) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {} as UserMessageUpdateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const params = createParamsDefault();\n    logger.info('Thread | useUpdateMessageCallback: Message update start.', params);\n\n    currentChannel?.updateUserMessage?.(messageId, params)\n      .then((message: UserMessage) => {\n        logger.info('Thread | useUpdateMessageCallback: Message update succeeded.', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentChannel,\n            message: message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            fromSelector: true,\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          },\n        );\n      });\n  }, [currentChannel, isMentionEnabled]);\n}\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useDeleteMessageCallback({\n  currentChannel,\n  threadDispatcher,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message: SendableMessageType) => Promise<SendableMessageType> {\n  return useCallback((message: SendableMessageType): Promise<SendableMessageType> => {\n    logger.info('Thread | useDeleteMessageCallback: Deleting message.', message);\n    const { sendingStatus } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Thread | useDeleteMessageCallback: Deleting message requestState:', sendingStatus);\n      // Message is only on local\n      if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n        logger.info('Thread | useDeleteMessageCallback: Deleted message from local:', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Thread | useDeleteMessageCallback: Deleting message from remote:', sendingStatus);\n      currentChannel?.deleteMessage?.(message)\n        .then(() => {\n          logger.info('Thread | useDeleteMessageCallback: Deleting message success!', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { message, channel: currentChannel },\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentChannel]);\n}\n", "import { useCallback } from 'react';\nimport { BaseMessage, ThreadedMessageListParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  hasMorePrev: boolean;\n  parentMessage: SendableMessageType;\n  threadListState: ThreadListStateTypes;\n  oldestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetPrevThreadsCallback({\n  hasMorePrev,\n  parentMessage,\n  threadListState,\n  oldestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback?: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && oldestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        oldestMessageTimeStamp,\n        {\n          prevResultSize: PREV_THREADS_FETCH_SIZE,\n          nextResultSize: 0,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    oldestMessageTimeStamp,\n  ]);\n}\n", "import { BaseMessage, ThreadedMessageListParams } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { SendableMessageType } from '../../../../utils';\n\ninterface DynamicProps {\n  hasMoreNext: boolean;\n  parentMessage: SendableMessageType;\n  threadListState: ThreadListStateTypes;\n  latestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetNextThreadsCallback({\n  hasMoreNext,\n  parentMessage,\n  threadListState,\n  latestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && latestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        latestMessageTimeStamp,\n        {\n          prevResultSize: 0,\n          nextResultSize: NEXT_THREADS_FETCH_SIZE,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    latestMessageTimeStamp,\n  ]);\n}\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useToggleReactionCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message, key, isReacted) => void {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentChannel?.deleteReaction?.(message, key)\n        .then((res) => {\n          logger.info('Thread | useToggleReactionsCallback: Delete reaction succeeded.', res);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useToggleReactionsCallback: Delete reaction failed.', err);\n        });\n      return;\n    }\n    currentChannel?.addReaction?.(message, key)\n      .then((res) => {\n        logger.info('Thread | useToggleReactionsCallback: Add reaction succeeded.', res);\n      })\n      .catch((err) => {\n        logger.warning('Thread | useToggleReactionsCallback: Add reaction failed.', err);\n      });\n  }, [currentChannel]);\n}\n", "import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessageCreateParams } from '@sendbird/chat/message';\nimport { User } from '@sendbird/chat';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\nexport type OnBeforeSendUserMessageType = (message: string, quoteMessage?: SendableMessageType) => UserMessageCreateParams;\ninterface DynamicProps {\n  isMentionEnabled: boolean;\n  currentChannel: GroupChannel;\n  onBeforeSendUserMessage?: OnBeforeSendUserMessageType;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport type SendMessageParams = {\n  message: string;\n  quoteMessage?: SendableMessageType;\n  mentionTemplate?: string;\n  mentionedUsers?: Array<User>;\n};\n\nexport default function useSendUserMessageCallback({\n  isMentionEnabled,\n  currentChannel,\n  onBeforeSendUserMessage,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props: SendMessageParams) => void {\n  const sendMessage = useCallback((props: SendMessageParams) => {\n    const {\n      message,\n      quoteMessage,\n      mentionTemplate,\n      mentionedUsers,\n    } = props;\n    const createDefaultParams = () => {\n      const params = {} as UserMessageCreateParams;\n      params.message = message;\n      const mentionedUsersLength = mentionedUsers?.length || 0;\n      if (isMentionEnabled && mentionedUsersLength) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate && mentionedUsersLength) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    const params = onBeforeSendUserMessage?.(message, quoteMessage) ?? createDefaultParams();\n    logger.info('Thread | useSendUserMessageCallback: Sending user message start.', params);\n\n    if (currentChannel?.sendUserMessage) {\n      currentChannel?.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: { message: pendingMessage },\n          });\n        })\n        .onFailed((error, message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { error, message },\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message succeeded.', message);\n          // because Thread doesn't subscribe SEND_USER_MESSAGE\n          pubSub.publish(topics.SEND_USER_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n            publishingModules: [PublishingModuleType.THREAD],\n          });\n        });\n    }\n  }, [isMentionEnabled, currentChannel]);\n  return sendMessage;\n}\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, MessageType, MultipleFilesMessage, SendingStatus, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useResendMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (failedMessage: SendableMessageType) => void {\n  return useCallback((failedMessage: SendableMessageType) => {\n    if ((failedMessage as SendableMessageType)?.isResendable) {\n      failedMessage.sendingStatus = SendingStatus.PENDING;\n      logger.info('Thread | useResendMessageCallback: Resending failedMessage start.', failedMessage);\n      threadDispatcher({\n        type: ThreadContextActionTypes.RESEND_MESSAGE_START,\n        payload: failedMessage,\n      });\n\n      if (failedMessage?.isUserMessage?.() || failedMessage?.messageType === MessageType.USER) {\n        currentChannel?.resendUserMessage(failedMessage as UserMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_USER_MESSAGE, {\n              channel: currentChannel,\n              message: message,\n              publishingModules: [PublishingModuleType.THREAD],\n\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n          });\n      } else if (failedMessage?.isFileMessage?.() || failedMessage?.messageType === MessageType.FILE) {\n        currentChannel?.resendFileMessage?.(failedMessage as FileMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message: failedMessage,\n              publishingModules: [PublishingModuleType.THREAD],\n            });\n          });\n      } else if (failedMessage?.isMultipleFilesMessage?.()) {\n        currentChannel?.resendMessage?.(failedMessage as MultipleFilesMessage)\n          // TODO: Handle on pending event (Same goes for the other message types).\n          // TODO: Handle on file info upload event.\n          .onSucceeded((message: MultipleFilesMessage) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .onFailed((error: Error, message: MultipleFilesMessage) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message,\n              publishingModules: [PublishingModuleType.THREAD],\n            });\n          });\n      } else {\n        logger.warning('Thread | useResendMessageCallback: Message is not resendable.', failedMessage);\n        failedMessage.sendingStatus = SendingStatus.FAILED;\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message: failedMessage },\n        });\n      }\n    }\n  }, [currentChannel]);\n}\n", "import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray } from '@sendbird/chat/message';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\nimport { SendableMessageType } from '../../../../utils';\nimport { PublishingModuleType } from '../../../internalInterfaces';\n\ninterface DynamicParams {\n  currentChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: SendableMessageType) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: SendableMessageType) => void;\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport const useSendVoiceMessageCallback = ({\n  currentChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticParams): FuncType => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: SendableMessageType) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Thread | useSendVoiceMessageCallback:  Start sending voice message', messageParams);\n    currentChannel?.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n          publishingModules: [PublishingModuleType.THREAD],\n        });\n      });\n  }, [\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return sendMessage;\n};\n\nexport default useSendVoiceMessageCallback;\n", "import React, { useReducer, useMemo, useEffect, ReactElement } from 'react';\nimport { User } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type {\n  BaseMessage,\n  FileMessageCreateParams,\n  MultipleFilesMessageCreateParams,\n  UserMessageCreateParams,\n} from '@sendbird/chat/message';\n\nimport { getNicknamesMapFromMembers, getParentMessageFrom } from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport threadReducer from './dux/reducer';\nimport { ThreadContextActionTypes } from './dux/actionTypes';\nimport threadInitialState, { ThreadContextInitialState } from './dux/initialState';\n\nimport useGetChannel from './hooks/useGetChannel';\nimport useGetAllEmoji from './hooks/useGetAllEmoji';\nimport useGetThreadList from './hooks/useGetThreadList';\nimport useGetParentMessage from './hooks/useGetParentMessage';\nimport useHandleThreadPubsubEvents from './hooks/useHandleThreadPubsubEvents';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useSendFileMessageCallback from './hooks/useSendFileMessage';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useGetPrevThreadsCallback from './hooks/useGetPrevThreadsCallback';\nimport useGetNextThreadsCallback from './hooks/useGetNextThreadsCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionsCallback';\nimport useSendUserMessageCallback, { SendMessageParams } from './hooks/useSendUserMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\nimport { PublishingModuleType, useSendMultipleFilesMessage } from './hooks/useSendMultipleFilesMessage';\nimport { SendableMessageType } from '../../../utils';\n\nexport type ThreadProviderProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  message: SendableMessageType | null;\n  onHeaderActionClick?: () => void;\n  onMoveToParentMessage?: (props: { message: SendableMessageType, channel: GroupChannel }) => void;\n  onBeforeSendUserMessage?: (message: string, quotedMessage?: SendableMessageType) => UserMessageCreateParams;\n  onBeforeSendFileMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: SendableMessageType) => FileMessageCreateParams;\n  onBeforeSendMultipleFilesMessage?: (files: Array<File>, quotedMessage?: SendableMessageType) => MultipleFilesMessageCreateParams;\n  // User Profile\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: { user: User, close: () => void }) => ReactElement;\n  isMultipleFilesMessageEnabled?: boolean;\n};\nexport interface ThreadProviderInterface extends ThreadProviderProps, ThreadContextInitialState {\n  // hooks for fetching threads\n  fetchPrevThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  fetchNextThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  toggleReaction: (message, key, isReacted) => void;\n  sendMessage: (props: SendMessageParams) => void;\n  sendFileMessage: (file: File, quoteMessage?: SendableMessageType) => void;\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: SendableMessageType) => void;\n  sendMultipleFilesMessage: (files: Array<File>, quoteMessage?: SendableMessageType) => void,\n  resendMessage: (failedMessage: SendableMessageType) => void;\n  updateMessage: (props, callback?: () => void) => void;\n  deleteMessage: (message: SendableMessageType) => Promise<SendableMessageType>;\n  nicknamesMap: Map<string, string>;\n}\nconst ThreadContext = React.createContext<ThreadProviderInterface | null>(null);\n\nexport const ThreadProvider: React.FC<ThreadProviderProps> = (props: ThreadProviderProps) => {\n  const {\n    children,\n    channelUrl,\n    onHeaderActionClick,\n    onMoveToParentMessage,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeSendVoiceMessage,\n    onBeforeSendMultipleFilesMessage,\n    isMultipleFilesMessageEnabled,\n    // User Profile\n    disableUserProfile,\n    renderUserProfile,\n  } = props;\n  const propsMessage = props?.message;\n  const propsParentMessage = getParentMessageFrom(propsMessage);\n  // Context from SendbirdProvider\n  const globalStore = useSendbirdStateContext();\n  const { stores, config } = globalStore;\n  // // stores\n  const { sdkStore, userStore } = stores;\n  const { sdk } = sdkStore;\n  const { user } = userStore;\n  const sdkInit = sdkStore?.initialized;\n  // // config\n  const {\n    logger,\n    pubSub,\n    replyType,\n    isMentionEnabled,\n    isReactionEnabled,\n    onUserProfileMessage,\n  } = config;\n\n  // dux of Thread\n  const [threadStore, threadDispatcher] = useReducer(\n    threadReducer,\n    threadInitialState,\n  ) as [ThreadContextInitialState, CustomUseReducerDispatcher];\n  const {\n    currentChannel,\n    allThreadMessages,\n    localThreadMessages,\n    parentMessage,\n    channelState,\n    threadListState,\n    parentMessageState,\n    hasMorePrev,\n    hasMoreNext,\n    emojiContainer,\n    isMuted,\n    isChannelFrozen,\n    currentUserId,\n  }: ThreadContextInitialState = threadStore;\n\n  // Initialization\n  useEffect(() => {\n    threadDispatcher({\n      type: ThreadContextActionTypes.INIT_USER_ID,\n      payload: user?.userId,\n    });\n  }, [user]);\n  useGetChannel({\n    channelUrl,\n    sdkInit,\n    message: propsMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetParentMessage({\n    channelUrl,\n    sdkInit,\n    parentMessage: propsParentMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetThreadList({\n    sdkInit,\n    parentMessage,\n    isReactionEnabled,\n    anchorMessage: propsMessage?.messageId !== propsParentMessage?.messageId ? propsMessage : null,\n    // anchorMessage should be null when parentMessage doesn't exist\n  }, { logger, threadDispatcher });\n  useGetAllEmoji({ sdk }, { logger, threadDispatcher });\n  // Handle channel events\n  useHandleChannelEvents({\n    sdk,\n    currentChannel,\n  }, { logger, threadDispatcher });\n  useHandleThreadPubsubEvents({\n    sdkInit,\n    currentChannel,\n    parentMessage,\n  }, { logger, pubSub, threadDispatcher });\n\n  // callbacks\n  const fetchPrevThreads = useGetPrevThreadsCallback({\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    oldestMessageTimeStamp: allThreadMessages[0]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const fetchNextThreads = useGetNextThreadsCallback({\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    latestMessageTimeStamp: allThreadMessages[allThreadMessages.length - 1]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const toggleReaction = useToggleReactionCallback({ currentChannel }, { logger });\n\n  // Send Message Hooks\n  const sendMessage = useSendUserMessageCallback({\n    isMentionEnabled,\n    currentChannel,\n    onBeforeSendUserMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const sendFileMessage = useSendFileMessageCallback({\n    currentChannel,\n    onBeforeSendFileMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const sendVoiceMessage = useSendVoiceMessageCallback({\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  }, {\n    logger,\n    pubSub,\n    threadDispatcher,\n  });\n  const [sendMultipleFilesMessage] = useSendMultipleFilesMessage({\n    currentChannel,\n    onBeforeSendMultipleFilesMessage,\n    publishingModules: [PublishingModuleType.THREAD],\n  }, {\n    logger,\n    pubSub,\n  });\n\n  const resendMessage = useResendMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const updateMessage = useUpdateMessageCallback({\n    currentChannel,\n    isMentionEnabled,\n  }, { logger, pubSub, threadDispatcher });\n  const deleteMessage = useDeleteMessageCallback({ currentChannel, threadDispatcher }, { logger });\n\n  // memo\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (replyType && currentChannel)\n      ? getNicknamesMapFromMembers(currentChannel?.members)\n      : new Map()\n  ), [currentChannel?.members]);\n\n  return (\n    <ThreadContext.Provider\n      value={{\n        // ThreadProviderProps\n        channelUrl,\n        message: propsMessage,\n        onHeaderActionClick,\n        onMoveToParentMessage,\n        isMultipleFilesMessageEnabled,\n        // ThreadContextInitialState\n        currentChannel,\n        allThreadMessages,\n        localThreadMessages,\n        parentMessage,\n        channelState,\n        threadListState,\n        parentMessageState,\n        hasMorePrev,\n        hasMoreNext,\n        emojiContainer,\n        // hooks\n        fetchPrevThreads,\n        fetchNextThreads,\n        toggleReaction,\n        sendMessage,\n        sendFileMessage,\n        sendVoiceMessage,\n        sendMultipleFilesMessage,\n        resendMessage,\n        updateMessage,\n        deleteMessage,\n        // context\n        nicknamesMap,\n        isMuted,\n        isChannelFrozen,\n        currentUserId,\n      }}\n    >\n      {/* UserProfileProvider */}\n      <UserProfileProvider\n        disableUserProfile={disableUserProfile ?? config.disableUserProfile}\n        renderUserProfile={renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ThreadContext.Provider>\n  );\n};\n\nexport type UseThreadContextType = () => ThreadProviderInterface;\nexport const useThreadContext: UseThreadContextType = () => React.useContext(ThreadContext);\n", "import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport type { Member } from '@sendbird/chat/groupChannel';\nimport type { User } from '@sendbird/chat';\n\nimport Avatar from '../../../../ui/Avatar';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { MentionItemUIEvent } from '../../../..';\nimport uuidv4 from '../../../../utils/uuid';\n\ninterface SuggestedUserMentionItemProps {\n  member: User | Member;\n  isFocused?: boolean;\n  parentScrollRef?: React.RefObject<HTMLDivElement>;\n  onClick?: (props: MentionItemUIEvent) => void;\n  onMouseOver?: (props: MentionItemUIEvent) => void;\n  onMouseMove?: (props: MentionItemUIEvent) => void;\n  renderUserMentionItem?: (props: { user: User | Member }) => JSX.Element;\n}\n\nfunction SuggestedUserMentionItem(props: SuggestedUserMentionItemProps): JSX.Element {\n  const {\n    member,\n    isFocused = false,\n    parentScrollRef,\n    onClick,\n    onMouseOver,\n    onMouseMove,\n    renderUserMentionItem,\n  } = props;\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const { stringSet = {} } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (isFocused && parentScrollRef?.current != null && scrollRef?.current != null\n      && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop\n        || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop\n      )) {\n      scrollRef.current.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n    }\n  }, [isFocused]);\n  const customMentionItem = useMemo(() => {\n    if (renderUserMentionItem) {\n      return (\n        <div\n          className=\"sendbird-mention-suggest-list__user-item\"\n          onClick={(event) => onClick?.({ event, member: (member as Member), itemRef: scrollRef })}\n          onMouseOver={(event) => onMouseOver?.({ event, member: (member as Member), itemRef: scrollRef })}\n          onMouseMove={(event) => onMouseMove?.({ event, member: (member as Member), itemRef: scrollRef })}\n          key={member?.userId || uuidv4()}\n          ref={scrollRef}\n        >\n          {renderUserMentionItem({ user: member })}\n        </div>\n      );\n    }\n  }, [renderUserMentionItem]);\n  if (customMentionItem) {\n    return customMentionItem;\n  }\n  return (\n    <div\n      className={`sendbird-mention-suggest-list__user-item ${isFocused ? 'focused' : ''}`}\n      onClick={(event) => onClick?.({ event, member: (member as Member), itemRef: scrollRef })}\n      onMouseOver={(event) => onMouseOver?.({ event, member: (member as Member), itemRef: scrollRef })}\n      onMouseMove={(event) => onMouseMove?.({ event, member: (member as Member), itemRef: scrollRef })}\n      key={member?.userId || uuidv4()}\n      ref={scrollRef}\n    >\n      <Avatar\n        className=\"sendbird-mention-suggest-list__user-item__avatar\"\n        src={member?.profileUrl}\n        alt=\"user-profile\"\n        width=\"24px\"\n        height=\"24px\"\n      />\n      <Label\n        className=\"sendbird-mention-suggest-list__user-item__nickname\"\n        type={LabelTypography.SUBTITLE_2}\n        color={member?.nickname ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3}\n      >\n        {member?.nickname || stringSet?.MENTION_NAME__NO_NAME}\n      </Label>\n      <Label\n        className=\"sendbird-mention-suggest-list__user-item__user-id\"\n        type={LabelTypography.SUBTITLE_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {member?.userId}\n      </Label>\n    </div>\n  );\n}\n\nexport default SuggestedUserMentionItem;\n", "import './index.scss';\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport type { User } from '@sendbird/chat';\nimport type { Member } from '@sendbird/chat/groupChannel';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport SuggestedUserMentionItem from './SuggestedUserMentionItem';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { MAX_USER_MENTION_COUNT, MAX_USER_SUGGESTION_COUNT, USER_MENTION_TEMP_CHAR } from '../../context/const';\nimport { MessageInputKeys } from '../../../../ui/MessageInput/const';\nimport uuidv4 from '../../../../utils/uuid';\nimport { useThreadContext } from '../../../Thread/context/ThreadProvider';\n\nexport interface SuggestedMentionListProps {\n  className?: string;\n  targetNickname: string;\n  memberListQuery?: Record<string, string>;\n  onUserItemClick?: (member: User) => void;\n  onFocusItemChange?: (member: User) => void;\n  onFetchUsers?: (users: Array<User>) => void;\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n  ableAddMention: boolean;\n  maxMentionCount?: number;\n  maxSuggestionCount?: number;\n  inputEvent?: React.KeyboardEvent<HTMLDivElement>;\n}\n\nconst DEBOUNCING_TIME = 300;\n\nfunction SuggestedMentionList(props: SuggestedMentionListProps): JSX.Element {\n  const {\n    className,\n    targetNickname = '',\n    // memberListQuery,\n    onUserItemClick,\n    onFocusItemChange,\n    onFetchUsers,\n    renderUserMentionItem,\n    inputEvent,\n    ableAddMention = true,\n    maxMentionCount = MAX_USER_MENTION_COUNT,\n    maxSuggestionCount = MAX_USER_SUGGESTION_COUNT,\n  } = props;\n  const currentGroupChannel = useChannelContext?.()?.currentGroupChannel;\n  const currentChannel = useThreadContext?.()?.currentChannel;\n  const channelInstance = currentGroupChannel || currentChannel;\n  const { config, stores } = useSendbirdStateContext();\n  const { logger } = config;\n  const currentUserId = stores?.sdkStore?.sdk?.currentUser?.userId || '';\n  const scrollRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [timer, setTimer] = useState(null);\n  const [searchString, setSearchString] = useState('');\n  const [lastSearchString, setLastSearchString] = useState('');\n  const [currentUser, setCurrentUser] = useState<User>(null);\n  const [currentMemberList, setCurrentMemberList] = useState<Array<Member>>([]);\n\n  useEffect(() => {\n    clearTimeout(timer);\n    setTimer(\n      setTimeout(() => {\n        setSearchString(targetNickname);\n      }, DEBOUNCING_TIME),\n    );\n  }, [targetNickname]);\n\n  useEffect(() => {\n    if (inputEvent?.key === MessageInputKeys.Enter) {\n      if (currentMemberList.length > 0) {\n        onUserItemClick(currentUser);\n      }\n    }\n    if (inputEvent?.key === MessageInputKeys.ArrowUp) {\n      const currentUserIndex = currentMemberList.findIndex((member) => (\n        member?.userId === currentUser?.userId\n      ));\n      if (0 < currentUserIndex) {\n        setCurrentUser(currentMemberList[currentUserIndex - 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex - 1]);\n      }\n    }\n    if (inputEvent?.key === MessageInputKeys.ArrowDown) {\n      const currentUserIndex = currentMemberList.findIndex((member) => (\n        member?.userId === currentUser?.userId\n      ));\n      if (currentUserIndex < currentMemberList.length - 1) {\n        setCurrentUser(currentMemberList[currentUserIndex + 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex + 1]);\n      }\n    }\n  }, [inputEvent]);\n\n  /* Fetch member list */\n  useEffect(() => {\n    if (!channelInstance?.createMemberListQuery) {\n      logger.warning('SuggestedMentionList: Creating member list query failed');\n      return;\n    }\n    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {\n      // Don't need to request query again\n      return;\n    }\n\n    const query = channelInstance?.createMemberListQuery({\n      limit: maxSuggestionCount + 1, // because current user could be included\n      nicknameStartsWithFilter: searchString.slice(USER_MENTION_TEMP_CHAR.length),\n    });\n    // Add member list query for customization\n    query.next()\n      .then((memberList) => {\n        const suggestingMembers = memberList\n          .filter((member) => currentUserId !== member?.userId)\n          .slice(0, maxSuggestionCount);\n        if (suggestingMembers.length < 1) {\n          logger.info('SuggestedMentionList: Fetched member list is empty');\n        } else {\n          logger.info('SuggestedMentionList: Fetching member list succeeded', { memberListQuery: query, memberList: suggestingMembers });\n          setCurrentUser(suggestingMembers[0]);\n        }\n        setLastSearchString(searchString);\n        onFetchUsers(suggestingMembers);\n        setCurrentMemberList(suggestingMembers);\n      })\n      .catch((error) => {\n        if (error) {\n          logger.error('SuggestedMentionList: Fetching member list failed', error);\n        }\n      });\n  }, [channelInstance?.url, searchString]);\n\n  if (!ableAddMention && currentMemberList.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={`sendbird-mention-suggest-list ${className}`}\n      key=\"sendbird-mention-suggest-list\"\n      ref={scrollRef}\n    >\n      {\n        ableAddMention && currentMemberList?.map((member) => (\n          <SuggestedUserMentionItem\n            key={member?.userId || uuidv4()}\n            member={member}\n            isFocused={member?.userId === currentUser?.userId}\n            parentScrollRef={scrollRef}\n            onClick={({ member }) => {\n              onUserItemClick(member);\n            }}\n            onMouseOver={({ member }) => {\n              setCurrentUser(member);\n            }}\n            renderUserMentionItem={renderUserMentionItem}\n          />\n        ))\n      }\n      {\n        !ableAddMention && (\n          <div className=\"sendbird-mention-suggest-list__notice-item\">\n            <Icon\n              className=\"sendbird-mention-suggest-list__notice-item__icon\"\n              type={IconTypes.INFO}\n              fillColor={IconColors.ON_BACKGROUND_2}\n              width=\"20px\"\n              height=\"20px\"\n            />\n            <Label\n              className=\"sendbird-mention-suggest-list__notice-item__text\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', maxMentionCount)}\n            </Label>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default SuggestedMentionList;\n", "import React, { ReactElement } from 'react';\n\nimport './index.scss';\n\nimport {\n  Colors,\n  changeColorToClassName,\n} from '../../utils/color';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nexport interface DateSeparatorProps {\n  children?: string | ReactElement;\n  className?: string | Array<string>;\n  separatorColor?: Colors;\n}\nconst DateSeparator = ({\n  children = null,\n  className = '',\n  separatorColor = Colors.ONBACKGROUND_4,\n}: DateSeparatorProps): ReactElement => {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-separator',\n      ].join(' ')}\n    >\n      <div className={['sendbird-separator__left', `${changeColorToClassName(separatorColor)}--background-color`].join(' ')} />\n      <div className=\"sendbird-separator__text\">\n        {\n          children\n          || (\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              Date Separator\n            </Label>\n          )\n        }\n      </div>\n      <div className={['sendbird-separator__right', `${changeColorToClassName(separatorColor)}--background-color`].join(' ')} />\n    </div>\n  );\n};\n\nexport default DateSeparator;\n", "const {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n} = Object;\n\nlet { freeze, seal, create } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!freeze) {\n  freeze = function (x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function (x) {\n    return x;\n  };\n}\n\nif (!apply) {\n  apply = function (fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!construct) {\n  construct = function (Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst regExpTest = unapply(RegExp.prototype.test);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param {Function} func - The function to be wrapped and called.\n * @returns {Function} A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return (thisArg, ...args) => apply(func, thisArg, args);\n}\n\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param {Function} func - The constructor function to be wrapped and called.\n * @returns {Function} A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return (...args) => construct(func, args);\n}\n\n/**\n * Add properties to a lookup table\n *\n * @param {Object} set - The set to which elements will be added.\n * @param {Array} array - The array containing elements to be added to the set.\n * @param {Function} transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns {Object} The modified set with added elements.\n */\nfunction addToSet(set, array, transformCaseFunc = stringToLowerCase) {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/**\n * Shallow clone an object\n *\n * @param {Object} object - The object to be cloned.\n * @returns {Object} A new object that copies the original.\n */\nexport function clone(object) {\n  const newObject = create(null);\n\n  for (const [property, value] of entries(object)) {\n    if (getOwnPropertyDescriptor(object, property) !== undefined) {\n      newObject[property] = value;\n    }\n  }\n\n  return newObject;\n}\n\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param {Object} object - The object to look up the getter function in its prototype chain.\n * @param {String} prop - The property name for which to find the getter function.\n * @returns {Function} The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  function fallbackValue(element) {\n    console.warn('fallback value for', element);\n    return null;\n  }\n\n  return fallbackValue;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  // Object\n  entries,\n  freeze,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n  isFrozen,\n  setPrototypeOf,\n  seal,\n  create,\n  // RegExp\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n  // Other\n  lookupGetter,\n  addToSet,\n  // Reflect\n  unapply,\n  unconstruct,\n};\n", "import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n]);\n\n// SVG\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'view',\n  'vkern',\n]);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n]);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nexport const svgDisallowed = freeze([\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use',\n]);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n  'mprescripts',\n]);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nexport const mathMlDisallowed = freeze([\n  'maction',\n  'maligngroup',\n  'malignmark',\n  'mlongdiv',\n  'mscarries',\n  'mscarry',\n  'msgroup',\n  'mstack',\n  'msline',\n  'msrow',\n  'semantics',\n  'annotation',\n  'annotation-xml',\n  'mprescripts',\n  'none',\n]);\n\nexport const text = freeze(['#text']);\n", "import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocapitalize',\n  'autocomplete',\n  'autopictureinpicture',\n  'autoplay',\n  'background',\n  'bgcolor',\n  'border',\n  'capture',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'controlslist',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'decoding',\n  'default',\n  'dir',\n  'disabled',\n  'disablepictureinpicture',\n  'disableremoteplayback',\n  'download',\n  'draggable',\n  'enctype',\n  'enterkeyhint',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'inputmode',\n  'integrity',\n  'ismap',\n  'kind',\n  'label',\n  'lang',\n  'list',\n  'loading',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'muted',\n  'name',\n  'nonce',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'playsinline',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'translate',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'xmlns',\n  'slot',\n]);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clippathunits',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'startoffset',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'systemlanguage',\n  'tabindex',\n  'targetx',\n  'targety',\n  'transform',\n  'transform-origin',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n]);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n]);\n", "import { seal } from './utils.js';\n\n// eslint-disable-next-line unicorn/better-regex\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nexport const TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nexport const DOCTYPE_NAME = seal(/^html$/i);\n", "import * as TAGS from './tags.js';\nimport * as ATTRS from './attrs.js';\nimport * as EXPRESSIONS from './regexp.js';\nimport {\n  addToSet,\n  clone,\n  entries,\n  freeze,\n  arrayForEach,\n  arrayPop,\n  arrayPush,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  typeErrorCreate,\n  lookupGetter,\n  create,\n} from './utils.js';\n\nconst getGlobal = function () {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function (trustedTypes, purifyHostElement) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      },\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nfunction createDOMPurify(window = getGlobal()) {\n  const DOMPurify = (root) => createDOMPurify(root);\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = VERSION;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  let { document } = window;\n\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  const ElementPrototype = Element.prototype;\n\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    typeof entries === 'function' &&\n    typeof getParentNode === 'function' &&\n    implementation &&\n    implementation.createHTMLDocument !== undefined;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /*\n   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(\n    create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false,\n      },\n    })\n  );\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'noscript',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n    'track',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'role',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet(\n    {},\n    [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE],\n    stringToString\n  );\n\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  const isRegexOrFunction = function (testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function (cfg = {}) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n\n    PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1\n        ? (PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE)\n        : (PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE);\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc =\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml'\n        ? stringToString\n        : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS =\n      'ALLOWED_TAGS' in cfg\n        ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc)\n        : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR =\n      'ALLOWED_ATTR' in cfg\n        ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc)\n        : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES =\n      'ALLOWED_NAMESPACES' in cfg\n        ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString)\n        : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES =\n      'ADD_URI_SAFE_ATTR' in cfg\n        ? addToSet(\n            clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n            cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n            transformCaseFunc // eslint-disable-line indent\n          ) // eslint-disable-line indent\n        : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS =\n      'ADD_DATA_URI_TAGS' in cfg\n        ? addToSet(\n            clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n            cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n            transformCaseFunc // eslint-disable-line indent\n          ) // eslint-disable-line indent\n        : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS =\n      'FORBID_CONTENTS' in cfg\n        ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc)\n        : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS =\n      'FORBID_TAGS' in cfg\n        ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc)\n        : {};\n    FORBID_ATTR =\n      'FORBID_ATTR' in cfg\n        ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc)\n        : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || EXPRESSIONS.IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements ===\n        'boolean'\n    ) {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements =\n        cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, [...TAGS.text]);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.'\n        );\n      }\n\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.'\n        );\n      }\n\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(\n          trustedTypes,\n          currentScript\n        );\n      }\n\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n    'mi',\n    'mo',\n    'mn',\n    'ms',\n    'mtext',\n  ]);\n\n  const HTML_INTEGRATION_POINTS = addToSet({}, [\n    'foreignobject',\n    'desc',\n    'title',\n    'annotation-xml',\n  ]);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n    'title',\n    'style',\n    'font',\n    'a',\n    'script',\n  ]);\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, TAGS.svg);\n  addToSet(ALL_SVG_TAGS, TAGS.svgFilters);\n  addToSet(ALL_SVG_TAGS, TAGS.svgDisallowed);\n\n  const ALL_MATHML_TAGS = addToSet({}, TAGS.mathMl);\n  addToSet(ALL_MATHML_TAGS, TAGS.mathMlDisallowed);\n\n  /**\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function (element) {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template',\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return (\n          tagName === 'svg' &&\n          (parentTagName === 'annotation-xml' ||\n            MATHML_TEXT_INTEGRATION_POINTS[parentTagName])\n        );\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (\n        parent.namespaceURI === SVG_NAMESPACE &&\n        !HTML_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      if (\n        parent.namespaceURI === MATHML_NAMESPACE &&\n        !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return (\n        !ALL_MATHML_TAGS[tagName] &&\n        (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName])\n      );\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      ALLOWED_NAMESPACES[element.namespaceURI]\n    ) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  const _forceRemove = function (node) {\n    arrayPush(DOMPurify.removed, { element: node });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      node.parentNode.removeChild(node);\n    } catch (_) {\n      node.remove();\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  const _removeAttribute = function (name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node,\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node,\n      });\n    }\n\n    node.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\"\" attributes\n    if (name === 'is' && !ALLOWED_ATTR[name]) {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(node);\n        } catch (_) {}\n      } else {\n        try {\n          node.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  const _initDocument = function (dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      NAMESPACE === HTML_NAMESPACE\n    ) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty =\n        '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' +\n        dirty +\n        '</body></html>';\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT\n          ? emptyHTML\n          : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n\n    const body = doc.body || doc.documentElement;\n\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(\n        doc,\n        WHOLE_DOCUMENT ? 'html' : 'body'\n      )[0];\n    }\n\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param  {Node} root The root element or node to start traversing on.\n   * @return {NodeIterator} The created NodeIterator\n   */\n  const _createNodeIterator = function (root) {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT,\n      null\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  const _isClobbered = function (elm) {\n    return (\n      elm instanceof HTMLFormElement &&\n      (typeof elm.nodeName !== 'string' ||\n        typeof elm.textContent !== 'string' ||\n        typeof elm.removeChild !== 'function' ||\n        !(elm.attributes instanceof NamedNodeMap) ||\n        typeof elm.removeAttribute !== 'function' ||\n        typeof elm.setAttribute !== 'function' ||\n        typeof elm.namespaceURI !== 'string' ||\n        typeof elm.insertBefore !== 'function' ||\n        typeof elm.hasChildNodes !== 'function')\n    );\n  };\n\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param  {Node} object object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  const _isNode = function (object) {\n    return typeof Node === 'function' && object instanceof Node;\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  const _executeHook = function (entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    arrayForEach(hooks[entryPoint], (hook) => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function (currentNode) {\n    let content = null;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (\n      currentNode.hasChildNodes() &&\n      !_isNode(currentNode.firstElementChild) &&\n      regExpTest(/<[/\\w]/g, currentNode.innerHTML) &&\n      regExpTest(/<[/\\w]/g, currentNode.textContent)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n          regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)\n        ) {\n          return false;\n        }\n\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)\n        ) {\n          return false;\n        }\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n\n          for (let i = childCount - 1; i >= 0; --i) {\n            parentNode.insertBefore(\n              cloneNode(childNodes[i], true),\n              getNextSibling(currentNode)\n            );\n          }\n        }\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if (\n      (tagName === 'noscript' ||\n        tagName === 'noembed' ||\n        tagName === 'noframes') &&\n      regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        content = stringReplace(content, expr, ' ');\n      });\n\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function (lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (\n      ALLOW_DATA_ATTR &&\n      !FORBID_ATTR[lcName] &&\n      regExpTest(DATA_ATTR, lcName)\n    ) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        (_isBasicCustomElement(lcTag) &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag))) &&\n          ((CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName)) ||\n            (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)))) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        (lcName === 'is' &&\n          CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))))\n      ) {\n        // If user has supplied a regexp or function in CUSTOM_ELEMENT_HANDLING.tagNameCheck, we need to also allow derived custom elements using the same tagName test.\n        // Additionally, we need to allow attributes passing the CUSTOM_ELEMENT_HANDLING.attributeNameCheck user has configured, as custom elements can define these at their own discretion.\n      } else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n    } else if (value) {\n      return false;\n    } else {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    }\n\n    return true;\n  };\n\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param {string} tagName name of the tag of the node to sanitize\n   * @returns {boolean} Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function (tagName) {\n    return tagName.indexOf('-') > 0;\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  const _sanitizeAttributes = function (currentNode) {\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    const { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n    };\n    let l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const { name, namespaceURI, value: attrValue } = attr;\n      const lcName = transformCaseFunc(name);\n\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (\n        trustedTypesPolicy &&\n        typeof trustedTypes === 'object' &&\n        typeof trustedTypes.getAttributeType === 'function'\n      ) {\n        if (namespaceURI) {\n          /* Namespaces are not yet supported, see https://bugs.chromium.org/p/chromium/issues/detail?id=1305293 */\n        } else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML': {\n              value = trustedTypesPolicy.createHTML(value);\n              break;\n            }\n\n            case 'TrustedScriptURL': {\n              value = trustedTypesPolicy.createScriptURL(value);\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        arrayPop(DOMPurify.removed);\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function (fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} cfg object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg = {}) {\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate(\n            'root node is forbidden and cannot be sanitized in-place'\n          );\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (\n      WHOLE_DOCUMENT &&\n      ALLOWED_TAGS['!doctype'] &&\n      body.ownerDocument &&\n      body.ownerDocument.doctype &&\n      body.ownerDocument.doctype.name &&\n      regExpTest(EXPRESSIONS.DOCTYPE_NAME, body.ownerDocument.doctype.name)\n    ) {\n      serializedHTML =\n        '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function (cfg = {}) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {String} tag Tag name of containing element.\n   * @param  {String} attr Attribute name.\n   * @param  {String} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   * @return {Function} removed(popped) hook\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      return arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n", "export const TEXT_MESSAGE_BODY_CLASSNAME = 'sendbird-text-message-item-body';\n", "export const OG_MESSAGE_BODY_CLASSNAME = 'sendbird-og-message-item-body__text-bubble';\n", "// cretes a sanitized string from a mention user label\nimport DOMPurify from 'dompurify';\nimport { MENTION_USER_LABEL_CLASSNAME } from './consts';\n\ntype renderToStringParams = {\n  userId: string;\n  nickname: string;\n};\n\nexport default function renderToString({ userId, nickname }: renderToStringParams): string {\n  // donot change this template, it wont work\n  const el = `<span data-userid=\"${userId}\" data-sb-mention=\"true\" class=\"${MENTION_USER_LABEL_CLASSNAME}\">${nickname}</span>`;\n  const purifier = DOMPurify(window);\n  const sanitized_ = purifier.sanitize(el);\n  const token = sanitized_.split(' ');\n  const [spanTag, ...rest] = token;\n  // we do this because DOMPurify removes the contenteditable attribute\n  const sanitized = [spanTag, 'contenteditable=\"false\"', ...rest].join(' ');\n  return sanitized;\n}\n", "// https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n  let timeout;\n  return function _debounce() {\n    const context = this;\n    // eslint-disable-next-line prefer-rest-params\n    const args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n// Sanitize that special characters of HTML tags cause XSS issue\nexport const sanitizeString = (str) => (\n  str?.replace(/[\\u00A0-\\u9999<>]/gim, (i) => ''.concat('&#', i.charCodeAt(0), ';'))\n);\n\n/**\n * NodeList cannot be used with Array methods\n * @param {childNodes} NodeList\n * @returns Array of child nodes\n */\nexport const nodeListToArray = (childNodes) => {\n  try {\n    return Array.from(childNodes);\n  } catch (error) {\n    return [];\n  }\n};\n\nexport function isChannelTypeSupportsMultipleFilesMessage(channel) {\n  return channel\n    && channel?.isGroupChannel?.()\n    && !channel.isBroadcast\n    && !channel.isSuper;\n}\n", "import { Word } from './types';\nimport { sanitizeString } from '../../utils';\nimport renderMentionLabelToString from '../../../MentionUserLabel/renderToString';\n\nexport function inserTemplateToDOM(templateList: Word[]): void {\n  const nodes = templateList.map((template) => {\n    const { text, userId } = template;\n    if (userId) {\n      return renderMentionLabelToString({ userId, nickname: text });\n    }\n    return sanitizeString(text);\n  })\n    .join(' ')\n  // add a space at the end of the mention, else cursor/caret wont work\n    .concat(' ');\n  document.execCommand('insertHTML', false, nodes);\n}\n", "export const PASTE_NODE = 'sendbird-uikit__paste-node';\nexport const TEXT_MESSAGE_CLASS = 'sendbird-word';\nexport const MENTION_CLASS = 'sendbird-word__mention';\nexport const MENTION_CLASS_IN_INPUT = 'sendbird-mention-user-label';\nexport const MENTION_CLASS_COMBINED_QUERY = `.${MENTION_CLASS}, .${MENTION_CLASS_IN_INPUT}`;\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { User } from '@sendbird/chat';\n\nimport {\n  PASTE_NODE,\n  MENTION_CLASS,\n  TEXT_MESSAGE_CLASS,\n  MENTION_CLASS_COMBINED_QUERY,\n  MENTION_CLASS_IN_INPUT,\n} from './consts';\nimport { Word } from './types';\nimport { TEXT_MESSAGE_BODY_CLASSNAME } from '../../../TextMessageItemBody/consts';\nimport { OG_MESSAGE_BODY_CLASSNAME } from '../../../OGMessageItemBody/consts';\nimport { nodeListToArray } from '../../utils';\n\nexport function querySelectorIncludingSelf(\n  master: HTMLElement,\n  selector: string,\n): HTMLElement | null {\n  const result = [\n    master,\n    ...Array.from(master.querySelectorAll(selector)),\n  ].find((el) => el.matches(selector)) as HTMLElement | null;\n  return result;\n}\n\n// Pasted dom node can be OG_MESSAGE or partial message or full message\n// full messsage would have TEXT_MESSAGE_BODY_CLASSNAME and have childNodes\n// partial message would not have TEXT_MESSAGE_BODY_CLASSNAME\nexport function getLeafNodes(master: HTMLElement): ChildNode[] {\n  // og message\n  const ogMessage = querySelectorIncludingSelf(master, `.${OG_MESSAGE_BODY_CLASSNAME}`);\n  if (ogMessage) {\n    return nodeListToArray(ogMessage.childNodes);\n  }\n\n  const textMessageBody = querySelectorIncludingSelf(master, `.${TEXT_MESSAGE_BODY_CLASSNAME}`);\n  if (textMessageBody) {\n    return nodeListToArray(textMessageBody.childNodes);\n  }\n\n  return nodeListToArray(master.childNodes);\n}\n\nexport function createPasteNode(): HTMLDivElement | null {\n  const pasteNode = document.body.querySelector(`#${PASTE_NODE}`);\n  // remove existing paste node\n  if (pasteNode) {\n    pasteNode?.remove();\n  }\n\n  // create new paste node and return\n  const node = document.createElement('div');\n  node.id = PASTE_NODE;\n  node.style.display = 'none';\n  return node;\n}\n\nexport function hasMention(parent: HTMLDivElement): boolean {\n  return parent?.querySelector(MENTION_CLASS_COMBINED_QUERY) ? true : false;\n}\n\nexport const extractTextFromNodes = (nodes: HTMLSpanElement[]): string => {\n  let text = '';\n  nodes.forEach((node) => {\n    // to preserve space between words\n    const textNodes = node.querySelectorAll(`.${TEXT_MESSAGE_CLASS}`);\n    if (textNodes.length > 0) {\n      text += ((extractTextFromNodes(Array.from(textNodes) as HTMLSpanElement[])) + ' ');\n    }\n    text += (node.innerText + ' ');\n  });\n  return text;\n};\n\nexport function domToMessageTemplate(nodeArray: ChildNode[]): Word[] {\n  const templates: Word[] = nodeArray?.reduce((accumulator, currentValue) => {\n    // currentValue can be node(from messageBody or messageInput) or text\n    let mentionNode;\n    // this looks awkward, but it is a fallback to set default text\n    let text = (currentValue as HTMLSpanElement)?.innerText;\n\n    // if text node, set text\n    if (currentValue instanceof Text) {\n      mentionNode = false;\n      text = currentValue.textContent;\n    }\n\n    if (currentValue instanceof HTMLElement) {\n      mentionNode = (currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT))\n        ? currentValue\n        : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);\n    }\n\n    // if mentionNode is not null, it is a mention\n    if (mentionNode) {\n      const text = (currentValue as HTMLSpanElement)?.innerText;\n      const userId = mentionNode.dataset?.userid;\n      return [\n        ...accumulator,\n        {\n          text,\n          userId,\n        },\n      ];\n    }\n\n    return [\n      ...accumulator,\n      {\n        text,\n      },\n    ];\n  }, [] as Word[]);\n  return templates;\n}\n\nexport function getUsersFromWords(templates: Word[], channel: GroupChannel): User[] {\n  const userMap = {};\n  const users = channel.members;\n  templates.forEach((template) => {\n    if (template.userId) {\n      const mentionedMember = users.find((user) => user.userId === template.userId);\n      // Object.values would return array-> [undefined] if the user is not in the channel\n      if (mentionedMember) {\n        userMap[template.userId] = mentionedMember;\n      }\n    }\n  });\n  return Object.values(userMap);\n}\n", "import { useCallback } from 'react';\nimport DOMPurify from 'dompurify';\n\nimport { inserTemplateToDOM } from './insertTemplate';\nimport { sanitizeString } from '../../utils';\nimport { DynamicProps } from './types';\nimport {\n  createPasteNode,\n  hasMention,\n  domToMessageTemplate,\n  getUsersFromWords,\n  extractTextFromNodes,\n  getLeafNodes,\n} from './utils';\n\n// exported, should be backward compatible\n// conditions to test:\n// 1. paste simple text\n// 2. paste text with mention\n// 3. paste text with mention and text\n// 4. paste text with mention and text and paste again before and after\n// 5. copy message with mention(only one mention, no other text) and paste\n// 6. copy message with mention from input and paste(before and after)\nexport function usePaste({\n  ref,\n  setIsInput,\n  setHeight,\n  channel,\n  setMentionedUsers,\n}: DynamicProps): (e: React.ClipboardEvent<HTMLDivElement>) => void {\n  return useCallback((e) => {\n    e.preventDefault();\n    const html = e?.clipboardData.getData('text/html');\n    // simple text, continue as normal\n    if (!html) {\n      const text = e?.clipboardData.getData('text');\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has html, check if there are mentions, sanitize and insert\n    const purifier = DOMPurify(window);\n    const clean = purifier.sanitize(html);\n    const pasteNode = createPasteNode();\n    pasteNode.innerHTML = clean;\n    // does not have mention, continue as normal\n    if (!hasMention(pasteNode)) {\n      // to preserve space between words\n      const text = extractTextFromNodes(Array.from(pasteNode.children) as HTMLSpanElement[]);\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      pasteNode.remove();\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has mention, collect leaf nodes and parse words\n    const leafNodes = getLeafNodes(pasteNode);\n    const words = domToMessageTemplate(leafNodes);\n    const mentionedUsers = getUsersFromWords(words, channel);\n\n    // side effects\n    setMentionedUsers(mentionedUsers);\n    inserTemplateToDOM(words);\n    pasteNode.remove();\n    setIsInput(true);\n    setHeight();\n  }, [ref, setIsInput, setHeight, channel, setMentionedUsers]);\n}\n\n// to do -> In the future donot export default\nexport default usePaste;\n", "export const USER_MENTION_PREFIX = '@';\n", "import { User } from '@sendbird/chat';\nimport { ObjectValues } from '../../../../utils/typeHelpers/objectValues';\n\nexport const TOKEN_TYPES = {\n  string: 'string',\n  mention: 'mention',\n  url: 'url',\n  undetermined: 'undetermined',\n} as const;\n\nexport type TokenType = ObjectValues<typeof TOKEN_TYPES>;\n\nexport type StringToken = {\n  type: typeof TOKEN_TYPES.string;\n  value: string;\n};\n\nexport type MentionToken = {\n  type: TokenType;\n  value: string;\n  userId: string;\n};\n\nexport type UrlToken = {\n  type: typeof TOKEN_TYPES.url;\n  value: string;\n};\n\nexport type UndeterminedToken = {\n  type: typeof TOKEN_TYPES.undetermined;\n  value: string;\n};\n\nexport type Token = StringToken | MentionToken | UrlToken | UndeterminedToken;\n\nexport type TokenParams = {\n  messageText: string;\n  mentionedUsers?: User[];\n  templatePrefix?: string;\n};\n\nexport type IdentifyMentionsType = {\n  tokens: UndeterminedToken[];\n  mentionedUsers: User[];\n  templatePrefix: string;\n};\n", "import { User } from '@sendbird/chat';\nimport { USER_MENTION_PREFIX } from '../../consts';\nimport { IdentifyMentionsType, MentionToken, Token, TOKEN_TYPES, TokenParams, UndeterminedToken } from './types';\nimport { isUrl } from '../../../../utils';\n\nexport function getUserMentionRegex(mentionedUsers: User[], templatePrefix_: string): RegExp {\n  const templatePrefix = templatePrefix_ || USER_MENTION_PREFIX;\n\n  return RegExp(`(${mentionedUsers.map(u => {\n    const userId = u.userId.replace(\n      // If user.id includes these patterns, need to convert it into an escaped one\n      /([.*+?^${}()|[\\]\\\\])/g,\n      '\\\\$1');\n      /**\n       * //{ And //} are also for escaping\n       * because curly braces `{}` are metacharacters in regular expressions used to specify repetition\n       */\n    return `${templatePrefix}\\\\{${userId}\\\\}`;\n  }).join('|')})`, 'g');\n}\n\nexport function identifyMentions({\n  tokens,\n  mentionedUsers = [],\n  templatePrefix = USER_MENTION_PREFIX,\n}: IdentifyMentionsType): (MentionToken | UndeterminedToken)[] {\n  if (!mentionedUsers?.length) {\n    return tokens;\n  }\n  const userMentionRegex = getUserMentionRegex(mentionedUsers, templatePrefix);\n  const results: (UndeterminedToken | MentionToken)[] = tokens.map((token) => {\n    // if the token is not undetermined, return it as is\n    // is kinda unnecessary with TS, but just in case\n    if (token.type !== TOKEN_TYPES.undetermined) {\n      return token;\n    }\n    const { value } = token;\n    const parts = value.split(userMentionRegex);\n\n    const tokens = parts.map((part) => {\n      if (part.match(userMentionRegex)) {\n        const matchedUser = mentionedUsers.find((user) => `@{${user?.userId}}` === part);\n        const nickname = matchedUser?.nickname || '(No name)';\n        return { value: nickname, type: TOKEN_TYPES.mention, userId: matchedUser?.userId };\n      } else {\n        return { value: part, type: TOKEN_TYPES.undetermined };\n      }\n    });\n    return tokens;\n  }).flat();\n  return results;\n}\n\nexport function identifyUrlsAndStrings(token: Token[]): Token[] {\n  const results: Token[] = token.map((token) => {\n    if (token.type !== TOKEN_TYPES.undetermined) {\n      return token;\n    }\n    const { value = '' } = token;\n    const parts = value.split(' ');\n    const tokens = parts.map((part) => {\n      if (isUrl(part)) {\n        return { value: part, type: TOKEN_TYPES.url };\n      } else {\n        return { value: part, type: TOKEN_TYPES.string };\n      }\n    });\n    return tokens;\n  }).flat();\n\n  return results;\n}\n\nexport function combineNearbyStrings(tokens: Token[]): Token[] {\n  const results: Token[] = tokens.reduce((acc, token) => {\n    const lastToken = acc[acc.length - 1];\n    if (lastToken?.type === TOKEN_TYPES.string && token.type === TOKEN_TYPES.string) {\n      lastToken.value = `${lastToken.value} ${token.value}`;\n      return acc;\n    }\n    return [...acc, token];\n  }, []);\n  return results;\n}\n\n/**\n * Converts text into set of rich tokens\n */\nexport function tokenizeMessage({\n  messageText,\n  mentionedUsers = [],\n  templatePrefix = USER_MENTION_PREFIX,\n}: TokenParams): Token[] {\n  // mention can be squeezed-in(no-space-between) with other mentions and urls\n  // if no users are mentioned, return the messageText as a single token\n  const partialResult = [{\n    type: TOKEN_TYPES.undetermined,\n    value: messageText,\n  }];\n\n  // order is important because we want to identify mentions first\n  // identifyMentions will return a token with type mention or undetermined\n  const partialWithMentions = identifyMentions({\n    tokens: partialResult,\n    mentionedUsers,\n    templatePrefix,\n  });\n  const partialsWithUrlsAndMentions = identifyUrlsAndStrings(partialWithMentions);\n  const result = combineNearbyStrings(partialsWithUrlsAndMentions);\n\n  return result;\n}\n\n/**\n * Don't need to use this util in DOM element since the white spaces will be kept as is,\n * but will need if the text is wrapped \\w React.Fragement or </>\n * @link https://sendbird.slack.com/archives/GPGHESTL3/p1681180484341369\n * Or!!! -> convert any space or tab in leading/trailing to nbsp\n * to preserve the leading & trailing white spaces\n */\nexport function getWhiteSpacePreservedText(text: string): string {\n  const NON_BREAKING_SPACE = '\\u00A0';\n  // Split the input string into lines\n  const lines = text.split('\\n');\n\n  // Process each line and convert leading and trailing white spaces to \"\\u00A0\"\n  const processedLines = lines.map((line) => {\n    const leadingWhitespace = line.match(/^\\s*/)?.[0] || '';\n    const trailingWhitespace = line.match(/\\s*$/)?.[0] || '';\n\n    const convertedLeadingWhitespace = leadingWhitespace.replace(/ /g, NON_BREAKING_SPACE);\n    const convertedTrailingWhitespace = trailingWhitespace.replace(/ /g, NON_BREAKING_SPACE);\n\n    return convertedLeadingWhitespace + line.trim() + convertedTrailingWhitespace;\n  });\n\n  // Combine the processed lines into a new string with \"\\n\"\n  const result = processedLines.join('\\n');\n\n  return result;\n}\n", "/**\n * Write new utils here\n * Migrate old utils as needed, and delete utils.js\n */\n// import { ChannelType } from '@sendbird/chat';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { match } from 'ts-pattern';\n\nimport type { SendBirdStateConfig } from '../../lib/types';\n\n/**\n * FIXME:\n * Import this ChannelType enum from @sendbird/chat\n * once MessageInput.spec unit tests can be run \\wo jest <-> ESM issue\n */\nenum ChannelType {\n  BASE = 'base',\n  GROUP = 'group',\n  OPEN = 'open',\n}\n/**\n * FIXME: Simplify this in UIKit@v4\n * If customer is using MessageInput inside our modules(ie: Channel, Thread, etc),\n * we should use the config from the module.\n * If customer is using MessageInput outside our modules(ie: custom UI),\n * we expect Channel to be undefined and customer gets control to show/hide file-upload.\n * @param {*} channel GroupChannel | OpenChannel\n * @param {*} config SendBirdStateConfig\n * @returns boolean\n */\nexport const checkIfFileUploadEnabled = ({ channel, config }: {\n  channel?: GroupChannel | OpenChannel,\n  config?: SendBirdStateConfig,\n}) => {\n  const isEnabled = match(channel?.channelType)\n    .with(ChannelType.GROUP, () => config?.groupChannel?.enableDocument)\n    .with(ChannelType.OPEN, () => config?.openChannel?.enableDocument)\n    .otherwise(() => true);\n\n  return isEnabled;\n};\n", "import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport { MessageInputKeys, NodeNames, NodeTypes } from './const';\n\nimport { USER_MENTION_TEMP_CHAR } from '../../modules/Channel/context/const';\nimport IconButton from '../IconButton';\nimport Button, { ButtonTypes, ButtonSizes } from '../Button';\nimport renderMentionLabelToString from '../MentionUserLabel/renderToString';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\n\nimport {\n  isChannelTypeSupportsMultipleFilesMessage,\n  nodeListToArray,\n  sanitizeString,\n} from './utils';\nimport {\n  arrayEqual,\n  getClassName,\n  getMimeTypesUIKitAccepts,\n} from '../../utils';\nimport usePaste from './hooks/usePaste';\nimport { tokenizeMessage } from '../../modules/Message/utils/tokens/tokenize';\nimport { USER_MENTION_PREFIX } from '../../modules/Message/consts';\nimport { TOKEN_TYPES } from '../../modules/Message/utils/tokens/types';\nimport { checkIfFileUploadEnabled } from './messageInputUtils';\n\nconst TEXT_FIELD_ID = 'sendbird-message-input-text-field';\nconst LINE_HEIGHT = 76;\nconst noop = () => { };\n\nconst displayCaret = (element, position) => {\n  const range = document.createRange();\n  const sel = window.getSelection();\n  range.setStart(element.childNodes[0], position);\n  range.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(range);\n  element.focus();\n};\n\nconst resetInput = (ref) => {\n  try {\n    /* eslint-disable no-param-reassign */\n    ref.current.innerHTML = '';\n  } catch {\n    //\n  }\n};\n\nconst initialTargetStringInfo = {\n  targetString: '',\n  startNodeIndex: null,\n  startOffsetIndex: null,\n  endNodeIndex: null,\n  endOffsetIndex: null,\n};\n\nconst MessageInput = React.forwardRef((props, ref) => {\n  const {\n    className,\n    messageFieldId,\n    isEdit,\n    isMentionEnabled,\n    isVoiceMessageEnabled,\n    isSelectingMultipleFilesEnabled,\n    disabled,\n    message,\n    placeholder,\n    maxLength,\n    onFileUpload,\n    onSendMessage,\n    onUpdateMessage,\n    onCancelEdit,\n    onStartTyping,\n    channelUrl,\n    channel,\n    mentionSelectedUser,\n    onUserMentioned,\n    onMentionStringChange,\n    onMentionedUserIdsUpdated,\n    onVoiceMessageIconClick,\n    onKeyUp,\n    onKeyDown,\n    renderFileUploadIcon,\n    renderVoiceMessageIcon,\n    renderSendMessageIcon,\n    setMentionedUsers,\n    acceptableMimeTypes,\n  } = props;\n  const textFieldId = messageFieldId || TEXT_FIELD_ID;\n  const { stringSet } = useLocalization();\n  const { config } = useSendbirdStateContext();\n\n  const isFileUploadEnabled = checkIfFileUploadEnabled({\n    channel,\n    config,\n  });\n\n  const fileInputRef = useRef(null);\n  const [isInput, setIsInput] = useState(false);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [targetStringInfo, setTargetStringInfo] = useState({ ...initialTargetStringInfo });\n  const setHeight = useMemo(() => (\n    () => {\n      try {\n        const elem = ref?.current;\n        const MAX_HEIGHT = window.document.body.offsetHeight * 0.6;\n        if (elem && elem.scrollHeight >= LINE_HEIGHT) {\n          if (MAX_HEIGHT < elem.scrollHeight) {\n            elem.style.height = 'auto';\n            elem.style.height = `${MAX_HEIGHT}px`;\n          } else {\n            elem.style.height = 'auto';\n            elem.style.height = `${elem.scrollHeight}px`;\n          }\n        } else {\n          elem.style.height = '';\n        }\n      } catch (error) {\n        // error\n      }\n    }\n  ), []);\n\n  // #Edit mode\n  // for easilly initialize input value from outside, but\n  // useEffect(_, [channelUrl]) erase it\n  const initialValue = props?.value;\n  useEffect(() => {\n    const textField = ref?.current;\n    try {\n      textField.innerHTML = initialValue;\n      displayCaret(textField, initialValue?.length);\n    } catch {\n      //\n    }\n    setMentionedUserIds([]);\n    setIsInput(textField?.textContent?.trim().length > 0);\n    setHeight();\n  }, [initialValue]);\n\n  // #Mention | Clear input value when channel changes\n  useEffect(() => {\n    if (!isEdit) {\n      setIsInput(false);\n      resetInput(ref);\n    }\n  }, [channelUrl]);\n\n  // #Mention & #Edit | Fill message input values\n  useEffect(() => {\n    if (isEdit && message?.messageId) {\n      // const textField = document.getElementById(textFieldId);\n      const textField = ref?.current;\n      if (isMentionEnabled\n        && message?.mentionedUsers?.length > 0\n        && message?.mentionedMessageTemplate?.length > 0\n      ) {\n        /* mention enabled */\n        const { mentionedUsers = [] } = message;\n        const tokens = tokenizeMessage({\n          messageText: message?.mentionedMessageTemplate,\n          mentionedUsers,\n        });\n        textField.innerHTML = tokens.map((token) => {\n          if (token.type === TOKEN_TYPES.mention) {\n            const mentionedUser = mentionedUsers.find((user) => user.userId === token.userId);\n            const nickname = `${USER_MENTION_PREFIX}${mentionedUser?.nickname || token.value || stringSet.MENTION_NAME__NO_NAME}`;\n            return renderMentionLabelToString({\n              userId: token.userId,\n              nickname,\n            });\n          }\n          return sanitizeString(token.value);\n        }).join(' ');\n      } else {\n        /* mention disabled */\n        try {\n          textField.innerHTML = sanitizeString(message?.message);\n        } catch {\n          //\n        }\n        setMentionedUserIds([]);\n      }\n      setIsInput(textField?.textContent?.trim().length > 0);\n      setHeight();\n    }\n  }, [isEdit, message]);\n\n  // #Mention | Detect MentionedLabel modified\n  const useMentionedLabelDetection = useCallback(() => {\n    const textField = ref?.current;\n    if (isMentionEnabled) {\n      const newMentionedUserIds = [...textField.getElementsByClassName('sendbird-mention-user-label')].map((node) => node?.dataset?.userid);\n      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {\n        onMentionedUserIdsUpdated(newMentionedUserIds);\n        setMentionedUserIds(newMentionedUserIds);\n      }\n    }\n    setIsInput(textField.textContent?.trim().length > 0);\n  }, [targetStringInfo, isMentionEnabled]);\n\n  // #Mention | Replace selected user nickname to the MentionedUserLabel\n  useEffect(() => {\n    if (isMentionEnabled && mentionSelectedUser) {\n      const {\n        targetString,\n        startNodeIndex,\n        startOffsetIndex,\n        endNodeIndex,\n        endOffsetIndex,\n      } = targetStringInfo;\n      if (targetString && startNodeIndex !== null && startOffsetIndex !== null) {\n        // const textField = document.getElementById(textFieldId);\n        const textField = ref?.current;\n        const childNodes = nodeListToArray(textField?.childNodes);\n        const frontTextNode = document?.createTextNode(\n          childNodes[startNodeIndex]?.textContent.slice(0, startOffsetIndex),\n        );\n        const backTextNode = document?.createTextNode(\n          `\\u00A0${childNodes[endNodeIndex]?.textContent.slice(endOffsetIndex)}`,\n        );\n        const mentionLabel = renderMentionLabelToString({\n          userId: mentionSelectedUser?.userId,\n          nickname: `${USER_MENTION_TEMP_CHAR}${mentionSelectedUser?.nickname || stringSet.MENTION_NAME__NO_NAME}`,\n        });\n        const div = document.createElement('div');\n        div.innerHTML = mentionLabel;\n        const newNodes = [\n          ...childNodes.slice(0, startNodeIndex),\n          frontTextNode,\n          div.childNodes[0],\n          backTextNode,\n          ...childNodes.slice(endNodeIndex + 1),\n        ];\n        textField.innerHTML = '';\n        newNodes.forEach((newNode) => {\n          textField.appendChild(newNode);\n        });\n        onUserMentioned(mentionSelectedUser);\n        if (window.getSelection || document.getSelection) {\n          // set caret postion\n          const selection = window.getSelection() || document.getSelection();\n          selection.removeAllRanges();\n          const range = new Range();\n          range.selectNodeContents(textField);\n          range.setStart(textField.childNodes[startNodeIndex + 2], 1);\n          range.setEnd(textField.childNodes[startNodeIndex + 2], 1);\n          range.collapse(false);\n          selection.addRange(range);\n          textField.focus();\n        }\n        setTargetStringInfo({ ...initialTargetStringInfo });\n        setHeight();\n        useMentionedLabelDetection();\n      }\n    }\n  }, [mentionSelectedUser, isMentionEnabled]);\n\n  // #Mention | Detect mentioning user nickname\n  const useMentionInputDetection = useCallback(() => {\n    const selection = window?.getSelection?.() || document?.getSelection?.();\n    const textField = ref?.current;\n    if (selection.anchorNode === textField) {\n      onMentionStringChange('');\n    }\n    if (isMentionEnabled && selection\n      && selection.anchorNode === selection.focusNode\n      && selection.anchorOffset === selection.focusOffset\n    ) {\n      let textStack = '';\n      let startNodeIndex = null;\n      let startOffsetIndex = null;\n      for (let index = 0; index < textField.childNodes.length; index += 1) {\n        const currentNode = textField.childNodes[index];\n        if (currentNode.nodeType === NodeTypes.TextNode) {\n          /* text node */\n          const textContent = (currentNode === selection.anchorNode)\n            ? currentNode?.textContent.slice(0, selection.anchorOffset) || ''\n            : currentNode?.textContent || '';\n          if (textStack.length > 0) {\n            textStack += textContent;\n          } else {\n            let charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);\n            for (let i = charLastIndex - 1; i > -1; i -= 1) {\n              if (textContent[i] === USER_MENTION_TEMP_CHAR) {\n                charLastIndex = i;\n              } else {\n                break;\n              }\n            }\n            if (charLastIndex > -1) {\n              textStack = textContent;\n              startNodeIndex = index;\n              startOffsetIndex = charLastIndex;\n            }\n          }\n        } else {\n          /* other nodes */\n          textStack = '';\n          startNodeIndex = null;\n          startOffsetIndex = null;\n        }\n        if (currentNode === selection.anchorNode) {\n          /**\n           * targetString could be ''\n           * startNodeIndex and startOffsetIndex could be null\n           */\n          const targetString = textStack ? textStack.slice(startOffsetIndex) : '';// include template character\n          setTargetStringInfo({\n            targetString,\n            startNodeIndex,\n            startOffsetIndex,\n            endNodeIndex: index,\n            endOffsetIndex: selection.anchorOffset,\n          });\n          onMentionStringChange(targetString);\n          return;\n        }\n      }\n    }\n  }, [isMentionEnabled]);\n\n  const sendMessage = () => {\n    const textField = ref?.current;\n    if (!isEdit && textField?.textContent) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach((node) => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const { innerText, dataset = {} } = node;\n          const { userid = '' } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n        } else if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Br) {\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else if (node?.nodeType === NodeTypes.ElementNode && node?.nodeName === NodeNames.Div) {\n          // handles newline in safari\n          const { textContent = '' } = node;\n          messageText += `\\n${textContent}`;\n          mentionTemplate += `\\n${textContent}`;\n        } else { // other nodes including text node\n          const { textContent = '' } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = { message: messageText, mentionTemplate };\n      onSendMessage(params);\n      resetInput(ref);\n      // important: keeps the keyboard open -> must add test on refactor\n      textField.focus();\n      setIsInput(false);\n      setHeight();\n    }\n  };\n  const isEditDisabled = !(ref?.current?.textContent?.trim());\n  const editMessage = () => {\n    const textField = ref?.current;\n    const messageId = message?.messageId;\n    if (isEdit && messageId) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach((node) => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const { innerText, dataset = {} } = node;\n          const { userid = '' } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else { // other nodes including text node\n          const { textContent = '' } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = { messageId, message: messageText, mentionTemplate };\n      onUpdateMessage(params);\n      resetInput(ref);\n    }\n  };\n  const onPaste = usePaste({\n    ref,\n    setMentionedUserIds,\n    setMentionedUsers,\n    channel,\n    setIsInput,\n    setHeight,\n  });\n\n  return (\n    <form\n      className={getClassName([\n        className,\n        isEdit ? 'sendbird-message-input__edit' : '',\n        disabled ? 'sendbird-message-input-form__disabled' : '',\n      ])}\n    >\n      <div\n        className={getClassName([\n          'sendbird-message-input',\n          disabled ? 'sendbird-message-input__disabled' : '',\n        ])}\n      >\n        <div\n          id={`${textFieldId}${isEdit ? message?.messageId : ''}`}\n          className={`sendbird-message-input--textarea ${textFieldId}`}\n          contentEditable={!disabled}\n          role=\"textbox\"\n          aria-label=\"Text Input\"\n          disabled={disabled}\n          ref={ref}\n          maxLength={maxLength}\n          onKeyDown={(e) => {\n            const preventEvent = onKeyDown(e);\n            if (preventEvent) {\n              e.preventDefault();\n            } else {\n              if (!e.shiftKey && e.key === MessageInputKeys.Enter\n                && ref?.current?.textContent?.trim().length > 0\n                && e?.nativeEvent?.isComposing !== true\n              ) {\n                e.preventDefault();\n                sendMessage();\n              }\n              if (e.key === MessageInputKeys.Backspace\n                && ref?.current?.childNodes?.length === 2\n                && !ref?.current?.childNodes?.[0]?.textContent\n                && ref?.current.childNodes?.[1]?.nodeType === NodeTypes.ElementNode\n              ) {\n                ref?.current.removeChild(ref?.current.childNodes[1]);\n              }\n            }\n          }}\n          onKeyUp={(e) => {\n            const preventEvent = onKeyUp(e);\n            if (preventEvent) {\n              e.preventDefault();\n            } else {\n              useMentionInputDetection();\n            }\n          }}\n          onClick={() => {\n            useMentionInputDetection();\n          }}\n          onInput={() => {\n            setHeight();\n            onStartTyping();\n            setIsInput(ref?.current?.textContent?.trim().length > 0);\n            useMentionedLabelDetection();\n          }}\n          onPaste={onPaste}\n        />\n        {/* placeholder */}\n        {(ref?.current?.textContent?.length ?? 0) === 0 && (\n          <Label\n            className=\"sendbird-message-input--placeholder\"\n            type={LabelTypography.BODY_1}\n            color={disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3}\n          >\n            {placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER}\n          </Label>\n        )}\n        {/* send icon */}\n        {\n          (!isEdit && isInput) && (\n            <IconButton\n              className=\"sendbird-message-input--send\"\n              height=\"32px\"\n              width=\"32px\"\n              onClick={() => sendMessage()}\n            >\n              {\n                renderSendMessageIcon?.() || (\n                  <Icon\n                    type={IconTypes.SEND}\n                    fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY}\n                    width=\"20px\"\n                    height=\"20px\"\n                  />\n                )\n              }\n            </IconButton>\n          )\n        }\n        {/* file upload icon */}\n        {\n          (!isEdit && !isInput) && (\n            (renderFileUploadIcon?.()\n              // UIKit Dashboard configuration should have lower priority than\n              // renderFileUploadIcon which is set in code level\n              || (isFileUploadEnabled && (\n              <IconButton\n                className={`sendbird-message-input--attach ${isVoiceMessageEnabled ? 'is-voice-message-enabled' : ''}`}\n                height=\"32px\"\n                width=\"32px\"\n                onClick={() => {\n                  // todo: clear previous input\n                  fileInputRef?.current?.click?.();\n                }}\n              >\n                <Icon\n                  type={IconTypes.ATTACH}\n                  fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE}\n                  width=\"20px\"\n                  height=\"20px\"\n                />\n                <input\n                  className=\"sendbird-message-input--attach-input\"\n                  type=\"file\"\n                  ref={fileInputRef}\n                  // It will affect to <Channel /> and <Thread />\n                  onChange={(event) => {\n                    const { files } = event.currentTarget;\n                    onFileUpload(files && files.length === 1 ? [files[0]] : [...files]);\n                    event.target.value = '';\n                  }}\n                  accept={getMimeTypesUIKitAccepts(acceptableMimeTypes)}\n                  multiple={\n                    isSelectingMultipleFilesEnabled\n                    && isChannelTypeSupportsMultipleFilesMessage(channel)\n                  }\n                />\n              </IconButton>\n              )\n              ))\n          )\n        }\n        {/* voice message input trigger */}\n        {(isVoiceMessageEnabled && !isEdit && !isInput) && (\n          <IconButton\n            className=\"sendbird-message-input--voice-message\"\n            width=\"32px\"\n            height=\"32px\"\n            onClick={onVoiceMessageIconClick}\n          >\n            {\n              renderVoiceMessageIcon?.() || (\n                <Icon\n                  type={IconTypes.AUDIO_ON_LINED}\n                  fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE}\n                  width=\"20px\"\n                  height=\"20px\"\n                />\n              )\n            }\n          </IconButton>\n        )}\n      </div>\n      {/* Edit */}\n      {\n        isEdit && (\n          <div className=\"sendbird-message-input--edit-action\">\n            <Button\n              className=\"sendbird-message-input--edit-action__cancel\"\n              type={ButtonTypes.SECONDARY}\n              size={ButtonSizes.SMALL}\n              onClick={onCancelEdit}\n            >\n              {stringSet.BUTTON__CANCEL}\n            </Button>\n            <Button\n              className=\"sendbird-message-input--edit-action__save\"\n              type={ButtonTypes.PRIMARY}\n              size={ButtonSizes.SMALL}\n              disabled={isEditDisabled}\n              onClick={() => editMessage()}\n            >\n              {stringSet.BUTTON__SAVE}\n            </Button>\n          </div>\n        )\n      }\n    </form>\n  );\n});\n\nMessageInput.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  isEdit: PropTypes.bool,\n  isMentionEnabled: PropTypes.bool,\n  isVoiceMessageEnabled: PropTypes.bool,\n  isSelectingMultipleFilesEnabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  maxLength: PropTypes.number,\n  onFileUpload: PropTypes.func,\n  onSendMessage: PropTypes.func,\n  onUpdateMessage: PropTypes.func,\n  onStartTyping: PropTypes.func,\n  onCancelEdit: PropTypes.func,\n  channelUrl: PropTypes.string,\n  channel: PropTypes.shape({\n    channelType: PropTypes.string,\n  }).isRequired,\n  messageFieldId: PropTypes.string,\n  acceptableMimeTypes: PropTypes.arrayOf(PropTypes.string),\n  // Mention\n  message: PropTypes.shape({\n    messageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    message: PropTypes.string,\n    mentionedMessageTemplate: PropTypes.string,\n    mentionedUsers: PropTypes.arrayOf(PropTypes.shape({})),\n  }),\n  setMentionedUsers: PropTypes.func,\n  mentionSelectedUser: PropTypes.shape({\n    userId: PropTypes.string,\n    nickname: PropTypes.string,\n  }),\n  onUserMentioned: PropTypes.func,\n  onMentionStringChange: PropTypes.func,\n  onMentionedUserIdsUpdated: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  // Voice Message\n  onVoiceMessageIconClick: PropTypes.func,\n  renderVoiceMessageIcon: PropTypes.func,\n  renderSendMessageIcon: PropTypes.func,\n  renderFileUploadIcon: PropTypes.func,\n};\n\nMessageInput.defaultProps = {\n  className: '',\n  messageFieldId: '',\n  channelUrl: '',\n  onSendMessage: noop,\n  onUpdateMessage: noop,\n  value: null,\n  message: null,\n  isEdit: false,\n  isMentionEnabled: false,\n  isVoiceMessageEnabled: true,\n  isSelectingMultipleFilesEnabled: false,\n  onVoiceMessageIconClick: noop,\n  disabled: false,\n  placeholder: '',\n  maxLength: 5000,\n  onFileUpload: noop,\n  onCancelEdit: noop,\n  onStartTyping: noop,\n  mentionSelectedUser: null,\n  onUserMentioned: noop,\n  onMentionStringChange: noop,\n  onMentionedUserIdsUpdated: noop,\n  onKeyUp: noop,\n  onKeyDown: noop,\n  setMentionedUsers: noop,\n  renderVoiceMessageIcon: noop,\n  renderFileUploadIcon: noop,\n  renderSendMessageIcon: noop,\n  acceptableMimeTypes: null,\n};\n\nexport default MessageInput;\n", "import React from 'react';\nimport type SendbirdChat from '@sendbird/chat';\nimport type { User, SendbirdChatParams } from '@sendbird/chat';\nimport type {\n  GroupChannel,\n  GroupChannelCreateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\nimport type {\n  OpenChannel,\n  OpenChannelCreateParams,\n  SendbirdOpenChat,\n} from '@sendbird/chat/openChannel';\nimport type {\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport { SBUConfig } from '@sendbird/uikit-tools';\nimport { Module } from '@sendbird/chat/lib/__definition';\n\nimport type {\n  RenderUserProfileProps,\n  ReplyType,\n  UserListQuery,\n} from '../types';\nimport { UikitMessageHandler } from './selectors';\nimport { Logger } from './SendbirdState';\nimport { MarkAsReadSchedulerType } from './hooks/useMarkAsReadScheduler';\nimport { MarkAsDeliveredSchedulerType } from './hooks/useMarkAsDeliveredScheduler';\nimport { PartialDeep } from '../utils/typeHelpers/partialDeep';\nimport { CoreMessageType } from '../utils';\nimport { UserActionTypes } from './dux/user/actionTypes';\nimport { SdkActionTypes } from './dux/sdk/actionTypes';\nimport { ReconnectType } from './hooks/useConnect/types';\n\n// note to SDK team:\n// using enum inside .d.ts won’t work for jest, but const enum will work.\nexport const Role = {\n  OPERATOR: 'operator',\n  NONE: 'none',\n} as const;\n\nexport interface SBUEventHandlers {\n  reaction?: {\n    onPressUserProfile?(member: User): void;\n  },\n}\n\nexport interface SendBirdStateConfig {\n  disableUserProfile: boolean;\n  disableMarkAsDelivered: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  onUserProfileMessage?: (props: GroupChannel) => void;\n  allowProfileEdit: boolean;\n  isOnline: boolean;\n  userId: string;\n  appId: string;\n  accessToken: string;\n  theme: string;\n  pubSub: any;\n  logger: Logger;\n  setCurrentTheme: (theme: 'light' | 'dark') => void;\n  /** @deprecated Please use setCurrentTheme instead * */\n  setCurrenttheme: (theme: 'light' | 'dark') => void;\n  userListQuery?(): UserListQuery;\n  isReactionEnabled: boolean;\n  isMentionEnabled: boolean;\n  isMultipleFilesMessageEnabled: boolean;\n  isVoiceMessageEnabled?: boolean;\n  uikitUploadSizeLimit: number;\n  uikitMultipleFilesMessageLimit: number;\n  voiceRecord?: {\n    maxRecordingTime: number;\n    minRecordingTime: number;\n  };\n  userMention: {\n    maxMentionCount: number,\n    maxSuggestionCount: number,\n  };\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n  markAsReadScheduler: MarkAsReadSchedulerType;\n  markAsDeliveredScheduler: MarkAsDeliveredSchedulerType;\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n  replyType: ReplyType;\n  showSearchIcon?: boolean;\n  // Remote configs set from dashboard by UIKit feature configuration\n  groupChannel: {\n    enableOgtag: SBUConfig['groupChannel']['channel']['enableOgtag'];\n    enableTypingIndicator: SBUConfig['groupChannel']['channel']['enableTypingIndicator'];\n    enableDocument: SBUConfig['groupChannel']['channel']['input']['enableDocument'];\n    threadReplySelectType: SBUConfig['groupChannel']['channel']['threadReplySelectType'];\n  },\n  openChannel: {\n    enableOgtag: SBUConfig['openChannel']['channel']['enableOgtag'];\n    enableDocument: SBUConfig['openChannel']['channel']['input']['enableDocument'];\n  },\n}\nexport interface SdkStore {\n  error: boolean;\n  initialized: boolean;\n  loading: boolean;\n  sdk: SendbirdChat & SendbirdGroupChat & SendbirdOpenChat;\n}\nexport interface UserStore {\n  initialized: boolean;\n  loading: boolean;\n  user: User;\n}\nexport interface SendBirdStateStore {\n  sdkStore: SdkStore;\n  userStore: UserStore;\n}\n\nexport type SendBirdState = {\n  config: SendBirdStateConfig;\n  stores: SendBirdStateStore;\n  dispatchers: {\n    sdkDispatcher: React.Dispatch<SdkActionTypes>,\n    userDispatcher: React.Dispatch<UserActionTypes>,\n    reconnect: ReconnectType,\n  },\n  // Customer provided callbacks\n  eventHandlers?: SBUEventHandlers;\n};\n\ntype GetSdk = SendbirdChat | undefined;\ntype GetConnect = (\n  userId: string,\n  accessToken?: string\n) => Promise<User>;\ntype GetDisconnect = () => Promise<void>;\ntype GetUpdateUserInfo = (\n  nickName: string,\n  profileUrl?: string\n) => Promise<User>;\ntype GetCreateGroupChannel = (channelParams: GroupChannelCreateParams) => Promise<GroupChannel>;\ntype GetCreateOpenChannel = (channelParams: OpenChannelCreateParams) => Promise<OpenChannel>;\ntype GetGetGroupChannel = (\n  channelUrl: string,\n  isSelected?: boolean,\n) => Promise<GroupChannel>;\ntype GetGetOpenChannel = (\n  channelUrl: string,\n) => Promise<OpenChannel>;\ntype GetLeaveGroupChannel = (channel: GroupChannel) => Promise<void>;\ntype GetEnterOpenChannel = (channel: OpenChannel) => Promise<OpenChannel>;\ntype GetExitOpenChannel = (channel: OpenChannel) => Promise<void>;\ntype GetFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetUnFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetSendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  userMessageParams: UserMessageCreateParams,\n) => UikitMessageHandler;\ntype GetSendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  fileMessageParams: FileMessageCreateParams\n) => UikitMessageHandler;\ntype GetUpdateUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  messageId: string | number,\n  params: UserMessageUpdateParams\n) => Promise<UserMessage>;\n// type getUpdateFileMessage = (\n//   channel: GroupChannel | OpenChannel,\n//   messageId: string | number,\n//   params: FileMessageUpdateParams,\n// ) => Promise<FileMessage>;\ntype GetDeleteMessage = (\n  channel: GroupChannel | OpenChannel,\n  message: CoreMessageType\n) => Promise<void>;\ntype GetResendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: UserMessage\n) => Promise<UserMessage>;\ntype GetResendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: FileMessage\n) => Promise<FileMessage>;\n\nexport interface sendbirdSelectorsInterface {\n  getSdk: (store: SendBirdState) => GetSdk;\n  getConnect: (store: SendBirdState) => GetConnect\n  getDisconnect: (store: SendBirdState) => GetDisconnect;\n  getUpdateUserInfo: (store: SendBirdState) => GetUpdateUserInfo;\n  getCreateGroupChannel: (store: SendBirdState) => GetCreateGroupChannel;\n  getCreateOpenChannel: (store: SendBirdState) => GetCreateOpenChannel;\n  getGetGroupChannel: (store: SendBirdState) => GetGetGroupChannel;\n  getGetOpenChannel: (store: SendBirdState) => GetGetOpenChannel;\n  getLeaveGroupChannel: (store: SendBirdState) => GetLeaveGroupChannel;\n  getEnterOpenChannel: (store: SendBirdState) => GetEnterOpenChannel;\n  getExitOpenChannel: (store: SendBirdState) => GetExitOpenChannel;\n  getFreezeChannel: (store: SendBirdState) => GetFreezeChannel;\n  getUnFreezeChannel: (store: SendBirdState) => GetUnFreezeChannel;\n  getSendUserMessage: (store: SendBirdState) => GetSendUserMessage;\n  getSendFileMessage: (store: SendBirdState) => GetSendFileMessage;\n  getUpdateUserMessage: (store: SendBirdState) => GetUpdateUserMessage;\n  // getUpdateFileMessage: (store: SendBirdState) => GetUpdateFileMessage;\n  getDeleteMessage: (store: SendBirdState) => GetDeleteMessage;\n  getResendUserMessage: (store: SendBirdState) => GetResendUserMessage;\n  getResendFileMessage: (store: SendBirdState) => GetResendFileMessage;\n}\n\nexport interface CommonUIKitConfigProps {\n  replyType?: 'NONE' | 'QUOTE_REPLY' | 'THREAD';\n  isMentionEnabled?: boolean;\n  isReactionEnabled?: boolean;\n  disableUserProfile?: boolean;\n  isVoiceMessageEnabled?: boolean;\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n  showSearchIcon?: boolean;\n}\n\nexport type UIKitOptions = PartialDeep<{\n  common: SBUConfig['common'];\n  groupChannel: SBUConfig['groupChannel']['channel'];\n  groupChannelList: SBUConfig['groupChannel']['channelList'];\n  groupChannelSettings: SBUConfig['groupChannel']['setting'];\n  openChannel: SBUConfig['openChannel']['channel'];\n}>;\n\nexport type SendbirdChatInitParams = Omit<SendbirdChatParams<Module[]>, 'appId'>;\nexport type CustomExtensionParams = Record<string, string>;\n", "import './index.scss';\nimport React, { ReactElement, useContext, useRef } from 'react';\nimport type { UserMessage } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\n\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport {\n  getClassName,\n  copyToClipboard,\n  isUserMessage,\n  isSentMessage,\n  isFailedMessage,\n  isPendingMessage,\n  SendableMessageType,\n} from '../../utils/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { Role } from '../../lib/types';\nimport { ReplyType } from '../../types';\nimport { useChannelContext } from '../../modules/Channel/context/ChannelProvider';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendableMessageType;\n  channel: GroupChannel | OpenChannel;\n  isByMe?: boolean;\n  disabled?: boolean;\n  replyType?: ReplyType;\n  disableDeleteMessage?: boolean;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  resendMessage?: (message: SendableMessageType) => void;\n  setQuoteMessage?: (message: SendableMessageType) => void;\n  setSupposedHover?: (bool: boolean) => void;\n  onReplyInThread?: (props: { message: SendableMessageType }) => void;\n  onMoveToParentMessage?: () => void;\n}\n\nexport default function MessageItemMenu({\n  className,\n  message,\n  channel,\n  isByMe = false,\n  disabled = false,\n  replyType,\n  disableDeleteMessage = null,\n  showEdit,\n  showRemove,\n  resendMessage,\n  setQuoteMessage,\n  setSupposedHover,\n  onReplyInThread,\n  onMoveToParentMessage = null,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n  const channelStore = useChannelContext();\n\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemEdit: boolean = (!channel?.isEphemeral && isUserMessage(message as UserMessage) && isSentMessage(message) && isByMe);\n  const showMenuItemResend: boolean = (isFailedMessage(message) && message?.isResendable && isByMe);\n  const showMenuItemDelete: boolean = !channel?.isEphemeral && !isPendingMessage(message) && isByMe;\n  const showMenuItemOpenInChannel: boolean = onMoveToParentMessage !== null;\n  /**\n   * TODO: Manage timing issue\n   * User delete pending message -> Sending message success\n   */\n  const isReplyTypeEnabled = !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && (channel?.isGroupChannel?.()\n    && !channel?.isEphemeral\n    && (\n      ((channel as GroupChannel)?.isBroadcast && channel?.myRole === Role.OPERATOR)\n      || !(channel as GroupChannel)?.isBroadcast\n    ));\n  const showMenuItemReply = isReplyTypeEnabled && replyType === 'QUOTE_REPLY';\n  const showMenuItemThread = isReplyTypeEnabled && replyType === 'THREAD' && !message?.parentMessageId && onReplyInThread;\n\n  if (!(showMenuItemCopy\n    || showMenuItemReply\n    || showMenuItemThread\n    || showMenuItemOpenInChannel\n    || showMenuItemEdit\n    || showMenuItemResend\n    || showMenuItemDelete\n  )) {\n    return null;\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-menu__trigger__icon\"\n              type={IconTypes.MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <MenuItems\n              className=\"sendbird-message-item-menu__list\"\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              openLeft={isByMe}\n            >\n              {showMenuItemCopy && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-copy\"\n                  onClick={() => {\n                    copyToClipboard((message as UserMessage)?.message);\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_copy\"\n                >\n                  {stringSet.MESSAGE_MENU__COPY}\n                </MenuItem>\n              )}\n              {showMenuItemReply && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-reply\"\n                  onClick={() => {\n                    setQuoteMessage(message);\n                    closeDropdown();\n                  }}\n                  disable={message?.parentMessageId > 0}\n                  dataSbId=\"ui_message_item_menu_reply\"\n                >\n                  {stringSet.MESSAGE_MENU__REPLY}\n                </MenuItem>\n              )}\n              {showMenuItemThread && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-thread\"\n                  onClick={() => {\n                    onReplyInThread?.({ message });\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_thread\"\n                >\n                  {stringSet.MESSAGE_MENU__THREAD}\n                </MenuItem>\n              )}\n              {showMenuItemOpenInChannel && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-open-channel\"\n                  onClick={() => {\n                    onMoveToParentMessage?.();\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_open_in_channel\"\n                >\n                  {stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL}\n                </MenuItem>\n              )}\n              {showMenuItemEdit && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-edit\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showEdit(true);\n                      closeDropdown();\n                    }\n                  }}\n                  dataSbId=\"ui_message_item_menu_edit\"\n                >\n                  {stringSet.MESSAGE_MENU__EDIT}\n                </MenuItem>\n              )}\n              {showMenuItemResend && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-resend\"\n                  onClick={() => {\n                    if (!disabled) {\n                      resendMessage(message);\n                      closeDropdown();\n                    }\n                  }}\n                  dataSbId=\"ui_message_item_menu_resend\"\n                >\n                  {stringSet.MESSAGE_MENU__RESEND}\n                </MenuItem>\n              )}\n              {showMenuItemDelete && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-delete\"\n                  onClick={() => {\n                    if (isFailedMessage(message)) {\n                      channelStore?.deleteMessage?.(message);\n                    } else if (!disabled) {\n                      showRemove(true);\n                      closeDropdown();\n                    }\n                  }}\n                  disable={\n                    typeof disableDeleteMessage === 'boolean'\n                      ? disableDeleteMessage\n                      : message?.threadInfo?.replyCount > 0\n                  }\n                  dataSbId=\"ui_message_item_menu_delete\"\n                >\n                  {stringSet.MESSAGE_MENU__DELETE}\n                </MenuItem>\n              )}\n            </MenuItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n", "import React, {\n  ForwardedRef,\n  KeyboardEvent,\n  MouseEvent,\n  ReactElement,\n  TouchEvent,\n} from 'react';\n\nimport './index.scss';\nimport useLongPress from '../../hooks/useLongPress';\nimport { noop } from '../../utils/utils';\n\nexport interface ReactionButtonProps {\n  children: ReactElement;\n  className?: string | Array<string>;\n  width?: string | number;\n  height?: string | number;\n  selected?: boolean;\n  dataSbId?: string;\n  onClick?: (\n    e: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement> | TouchEvent<HTMLDivElement>\n  ) => void;\n}\n\nconst ReactionButton = React.forwardRef((props: ReactionButtonProps, ref: ForwardedRef<HTMLDivElement>) => {\n  const {\n    className,\n    width,\n    height,\n    selected,\n    dataSbId = '',\n    onClick,\n    children,\n  } = props;\n\n  const onClickHandler = useLongPress({\n    onLongPress: noop,\n    onClick,\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true,\n  });\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-button${selected ? '--selected' : ''}`,\n      ].join(' ')}\n      ref={ref}\n      role=\"button\"\n      style={{ width, height }}\n      {...onClickHandler}\n      tabIndex={0}\n      data-sb-id={dataSbId}\n    >\n      <div className=\"sendbird-reaction-button__inner\">\n        {children}\n      </div>\n    </div>\n  );\n});\n\nexport default ReactionButton;\n", "import './index.scss';\nimport React, { ReactElement, useRef } from 'react';\nimport type { Reaction } from '@sendbird/chat/message';\nimport type { Emoji, EmojiContainer } from '@sendbird/chat';\n\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport ReactionButton from '../ReactionButton';\nimport { getClassName, getEmojiListAll, isPendingMessage, isFailedMessage, SendableMessageType } from '../../utils';\nimport { SpaceFromTriggerType } from '../../types';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendableMessageType;\n  userId: string;\n  spaceFromTrigger?: SpaceFromTriggerType;\n  emojiContainer?: EmojiContainer;\n  toggleReaction?: (message: SendableMessageType, reactionKey: string, isReacted: boolean) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemReactionMenu({\n  className,\n  message,\n  userId,\n  spaceFromTrigger = { x: 0, y: 0 },\n  emojiContainer,\n  toggleReaction,\n  setSupposedHover,\n}: Props): ReactElement {\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  if (isPendingMessage(message) || isFailedMessage(message)) {\n    return null;\n  }\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-reaction-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-reaction-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-reaction-menu__trigger__icon\"\n              type={IconTypes.EMOJI_MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <EmojiListItems\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions\n                  ?.filter((reaction: Reaction) => reaction.key === emoji.key)[0]?.userIds\n                  ?.some((reactorId: string) => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={() => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                    dataSbId={`ui_emoji_reactions_menu_${emoji.key}`}\n                  >\n                    <ImageRenderer\n                      url={emoji.url}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style) => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n", "import React, {\n  KeyboardEvent,\n  MouseEvent,\n  ReactElement,\n  RefObject,\n  TouchEvent,\n} from 'react';\n\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nexport interface ReactionBadgeProps {\n  className?: string | Array<string>;\n  children: ReactElement;\n  count?: number | string;\n  isAdd?: boolean;\n  selected?: boolean;\n  onClick?: (\n    e: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement> | TouchEvent<HTMLDivElement>\n  ) => void;\n}\nconst ReactionBadge = React.forwardRef((props: ReactionBadgeProps, ref: RefObject<HTMLDivElement>): ReactElement => {\n  const {\n    className = '',\n    children,\n    count = '',\n    isAdd = false,\n    selected = false,\n    onClick = () => { /* noop */ },\n  } = props;\n\n  const getClassNameTail = (): string => {\n    if (selected && !isAdd) {\n      return '--selected';\n    }\n    if (isAdd) {\n      return '--is-add';\n    }\n    return '';\n  };\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        `sendbird-reaction-badge${getClassNameTail()}`,\n      ].join(' ')}\n      role=\"button\"\n      ref={ref}\n      onClick={onClick}\n      onKeyDown={onClick}\n      onTouchEnd={onClick}\n      tabIndex={0}\n    >\n      <div className=\"sendbird-reaction-badge__inner\">\n        <div className=\"sendbird-reaction-badge__inner__icon\">\n          {children}\n        </div>\n        <Label\n          className={(children && count) && 'sendbird-reaction-badge__inner__count'}\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {count}\n        </Label>\n      </div>\n    </div>\n  );\n});\n\nexport default ReactionBadge;\n", "import './bottom-sheet.scss';\nimport React, { useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { MODAL_ROOT } from '../../hooks/useModal';\n\ninterface BottomSheetProps {\n  className?: string;\n  children: React.ReactElement;\n  onBackdropClick?: () => void;\n}\n\nconst BottomSheet: React.FunctionComponent<BottomSheetProps> = (props: BottomSheetProps) => {\n  const {\n    className = '',\n    children,\n    onBackdropClick,\n  } = props;\n\n  // https://github.com/testing-library/react-testing-library/issues/62#issuecomment-438653348\n  const portalRoot = useRef<HTMLElement>();\n  portalRoot.current = document.getElementById(MODAL_ROOT);\n  if (!portalRoot.current) {\n    portalRoot.current = document.createElement('div');\n    portalRoot.current.setAttribute('id', MODAL_ROOT);\n    document.body.appendChild(portalRoot.current);\n  }\n  return createPortal(\n    <div\n      className={`${className} sendbird-bottomsheet`}\n    >\n      <div\n        className={'sendbird-bottomsheet__content'}\n        role='dialog'\n        aria-modal='true'\n        aria-expanded='true'\n      >\n        {children}\n      </div>\n      <div\n        className={`\n          sendbird-bottomsheet__backdrop\n        `}\n        onClick={(e) => {\n          e?.stopPropagation();\n          onBackdropClick();\n        }}\n      />\n    </div>,\n    portalRoot.current);\n};\n\nexport default BottomSheet;\n", "import React, { ReactElement } from 'react';\n\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\nexport interface TooltipProps {\n  className?: string | Array<string>;\n  children?: string | ReactElement;\n}\nexport default function Tooltip({\n  className = '',\n  children = '',\n}: TooltipProps): ReactElement {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-tooltip__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONCONTENT_1}\n      >\n        {children}\n      </Label>\n    </div>\n  );\n}\n", "import React, { useState, useRef, ReactElement } from 'react';\n\nimport './index.scss';\n\nconst SPACE_FROM_TRIGGER = 8;\n\nexport interface TooltipWrapperProps {\n  className?: string | Array<string>;\n  children: ReactElement;\n  hoverTooltip: ReactElement;\n}\nexport default function TooltipWrapper({\n  className = '',\n  children,\n  hoverTooltip,\n  // clickTooltip can be added later\n}: TooltipWrapperProps): ReactElement {\n  const [showHoverTooltip, setShowHoverTooltip] = useState(false);\n  const childrenRef = useRef(null);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-tooltip-wrapper',\n      ].join(' ')}\n      onMouseOver={() => { setShowHoverTooltip(true); }}\n      onFocus={() => { setShowHoverTooltip(true); }}\n      onMouseOut={() => { setShowHoverTooltip(false); }}\n      onBlur={() => { setShowHoverTooltip(false); }}\n    >\n      <div\n        className=\"sendbird-tooltip-wrapper__children\"\n        ref={childrenRef}\n      >\n        {children}\n      </div>\n      {\n        showHoverTooltip && (\n          <div\n            className=\"sendbird-tooltip-wrapper__hover-tooltip\"\n            style={{ bottom: `calc(100% + ${SPACE_FROM_TRIGGER}px)` }}\n          >\n            <div className=\"sendbird-tooltip-wrapper__hover-tooltip__inner\">\n              <div\n                className=\"sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container\"\n                style={{ left: childrenRef.current && `calc(${childrenRef.current.offsetWidth / 2}px - 50%)` }}\n              >\n                {hoverTooltip}\n              </div>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n", "// todo@v4.0.0: combine with the provider in core-ts, see:\n// https://github.com/sendbird/sendbird-uikit-core-ts\n// packages/react-uikit-message-template-view/src/context/MessageContextProvider.tsx\nimport React from 'react';\nimport { BaseMessage } from '@sendbird/chat/message';\n\nexport type MessageProviderProps = {\n  children: React.ReactNode;\n  message: BaseMessage;\n  isByMe?: boolean;\n};\n\nexport type MessageProviderInterface = Omit<MessageProviderProps, 'children'>;\n\nconst defaultValue = {\n  message: {} as BaseMessage,\n  isByMe: false,\n};\n\nconst MessageContext = React.createContext<MessageProviderInterface>(defaultValue);\n\nconst MessageProvider: React.FC<MessageProviderProps> = (props) => {\n  const {\n    children,\n    message,\n    isByMe = false,\n  } = props;\n\n  return (\n    <MessageContext.Provider value={{\n      message,\n      isByMe,\n    }}>\n      {children}\n    </MessageContext.Provider>\n  );\n};\n\nconst useMessageContext = (): MessageProviderInterface => {\n  const value = React.useContext(MessageContext);\n  if (value === undefined) {\n    throw new Error('useMessageContext must be used within a MessageProvider');\n  }\n  return value;\n};\n\nexport {\n  MessageProvider,\n  useMessageContext,\n};\n", "import React, { ReactElement, useState } from 'react';\nimport { EmojiContainer, User } from '@sendbird/chat';\nimport { GroupChannel, Member } from '@sendbird/chat/groupChannel';\nimport { Reaction } from '@sendbird/chat/message';\n\nimport './mobile-menu-reacted-members.scss';\n\nimport BottomSheet from '../BottomSheet';\nimport { getEmojiUrl, SendableMessageType } from '../../utils';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport UserListItem from '../UserListItem';\n\nexport interface ReactedMembersBottomSheetProps {\n  message: SendableMessageType;\n  channel: GroupChannel;\n  emojiKey: string;\n  hideMenu: () => void;\n  emojiContainer?: EmojiContainer;\n  onPressUserProfileHandler?: (member: User) => void;\n}\n\nexport const ReactedMembersBottomSheet = ({\n  message,\n  channel,\n  emojiKey = '',\n  hideMenu,\n  emojiContainer,\n  onPressUserProfileHandler,\n}: ReactedMembersBottomSheetProps): ReactElement => {\n  const { members = [] } = channel;\n  const [selectedEmoji, setSelectedEmoji] = useState(emojiKey);\n\n  function onPressUserProfileCallBack() {\n    if (onPressUserProfileHandler && message) {\n      const sender = (message as SendableMessageType)?.sender;\n      onPressUserProfileHandler(sender);\n    }\n  }\n\n  return (\n    <BottomSheet onBackdropClick={hideMenu}>\n      <div className=\"sendbird-message__bottomsheet\">\n        <div className=\"sendbird-message__bottomsheet__reacted-members\">\n          {message.reactions?.map((reaction: Reaction): ReactElement => {\n            const emojiUrl = getEmojiUrl(emojiContainer, reaction.key);\n            return (\n              <div\n                key={reaction.key}\n                className={`\n                  sendbird-message__bottomsheet__reacted-members__item\n                  ${selectedEmoji === reaction.key ? 'sendbird-message__bottomsheet__reacted-members__item__selected' : ''}\n                `}\n                onClick={() => {\n                  setSelectedEmoji(reaction.key);\n                }}\n              >\n                <ImageRenderer\n                  url={emojiUrl}\n                  width=\"28px\"\n                  height=\"28px\"\n                  placeHolder={(style) => (\n                    <div style={style}>\n                      <Icon\n                        type={IconTypes.QUESTION}\n                        fillColor={IconColors.ON_BACKGROUND_3}\n                        width=\"28px\"\n                        height=\"28px\"\n                      />\n                    </div>\n                  )}\n                />\n                <Label\n                  type={LabelTypography.BUTTON_2}\n                  color={selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3}\n                >\n                  {reaction.userIds.length}\n                </Label>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"sendbird-message__bottomsheet__reactor-list\">\n          { // making a member list who reacted to the message with the `selectedEmoji`\n            (\n              message.reactions?.find(reaction => reaction.key === selectedEmoji)\n                ?.userIds.map((userId) => members.find((member) => member.userId === userId))\n                .filter((member) => member !== undefined) as Array<Member>\n            )\n              .map((member) => (\n                <UserListItem\n                  key={member.userId}\n                  className=\"sendbird-message__bottomsheet__reactor-list__item\"\n                  user={member}\n                  avatarSize=\"36px\"\n                  onClick={onPressUserProfileCallBack}\n                />\n              ))\n          }\n        </div>\n      </div>\n    </BottomSheet>\n  );\n};\n", "import React, { useContext } from 'react';\n\nimport { Emoji } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { OpenChannel } from '@sendbird/chat/openChannel';\nimport { Reaction, UserMessage } from '@sendbird/chat/message';\n\nimport Tooltip from '../Tooltip';\nimport TooltipWrapper from '../TooltipWrapper';\nimport ReactionBadge from '../ReactionBadge';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes } from '../Icon';\n\nimport { Nullable } from '../../types';\nimport { getEmojiTooltipString, isReactedBy, SendableMessageType } from '../../utils';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport useLongPress from '../../hooks/useLongPress';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\nimport { useMessageContext } from '../../modules/Message/context/MessageProvider';\n\ntype Props = {\n  reaction: Reaction;\n  memberNicknamesMap: Map<string, string>;\n  setEmojiKey: React.Dispatch<React.SetStateAction<string>>;\n  toggleReaction?: (message: SendableMessageType, key: string, byMe: boolean) => void;\n  emojisMap: Map<string, Emoji>;\n  channel: Nullable<GroupChannel | OpenChannel>;\n};\n\nexport default function ReactionItem({\n  reaction,\n  memberNicknamesMap,\n  setEmojiKey,\n  toggleReaction,\n  emojisMap,\n  channel,\n}: Props) {\n  const store = useSendbirdStateContext();\n  const { isMobile } = useMediaQueryContext();\n  const messageStore = useMessageContext();\n  const message = messageStore?.message as UserMessage;\n  const { stringSet } = useContext(LocalizationContext);\n\n  const userId = store.config.userId;\n  const reactedByMe = isReactedBy(userId, reaction);\n  const showHoverTooltip = (reaction.userIds.length > 0)\n    && (channel?.isGroupChannel() && !channel.isSuper);\n\n  const handleOnClick = () => {\n    setEmojiKey('');\n    toggleReaction?.((message), reaction.key, reactedByMe);\n  };\n  const longPress = useLongPress({\n    onLongPress: () => {\n      setEmojiKey(reaction.key);\n    },\n    onClick: handleOnClick,\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true,\n  });\n\n  return (\n    <TooltipWrapper\n      className=\"sendbird-emoji-reactions__reaction-badge\"\n      hoverTooltip={showHoverTooltip ? (\n        <Tooltip>\n          {getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)}\n        </Tooltip>\n      ) : <></>}\n    >\n      <div\n        {...(\n          isMobile\n            ? longPress\n            : { onClick: handleOnClick }\n        )}\n      >\n        <ReactionBadge\n          count={reaction.userIds.length}\n          selected={reactedByMe}\n        >\n          <ImageRenderer\n            circle\n            url={emojisMap.get(reaction?.key)?.url || ''}\n            width=\"20px\"\n            height=\"20px\"\n            defaultComponent={(\n              <Icon width=\"20px\" height=\"20px\" type={IconTypes.QUESTION} />\n            )}\n          />\n        </ReactionBadge>\n      </div>\n    </TooltipWrapper>\n  );\n}\n", "import React, {\n  KeyboardEvent,\n  MouseEvent,\n  TouchEvent,\n} from 'react';\nimport ReactionBadge from '../ReactionBadge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport useLongPress from '../../hooks/useLongPress';\n\nexport interface AddReactionBadgeItemProps {\n  onClick: (e: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement> | TouchEvent<HTMLDivElement>) => void;\n}\n\nexport const AddReactionBadgeItem = ({\n  onClick,\n}: AddReactionBadgeItemProps): React.ReactElement => {\n  const onlyClick = useLongPress({\n    onLongPress: () => { /* noop */ },\n    onClick,\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true,\n  });\n\n  return (\n    <div\n      className=\"sendbird-emoji-reactions__add-reaction-badge\"\n      {...onlyClick}\n    >\n      <ReactionBadge\n        isAdd\n      >\n        <Icon\n          type={IconTypes.EMOJI_MORE}\n          fillColor={IconColors.ON_BACKGROUND_3}\n          width=\"20px\"\n          height=\"20px\"\n        />\n      </ReactionBadge>\n    </div>\n  );\n};\n", "import React, { ReactElement, useMemo } from 'react';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { Reaction } from '@sendbird/chat/message';\n\nimport BottomSheet from '../BottomSheet';\nimport { getEmojiListAll, SendableMessageType } from '../../utils';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconColors, IconTypes } from '../Icon';\n\nexport interface MobileEmojisBottomSheetProps {\n  userId: string;\n  message: SendableMessageType;\n  emojiContainer: EmojiContainer;\n  hideMenu: () => void;\n  toggleReaction?: (message: SendableMessageType, key: string, byMe: boolean) => void;\n}\n\nexport const MobileEmojisBottomSheet = ({\n  userId,\n  message,\n  emojiContainer,\n  hideMenu,\n  toggleReaction,\n}: MobileEmojisBottomSheetProps): ReactElement => {\n  const emojiAllList = useMemo(() => {\n    return getEmojiListAll(emojiContainer);\n  }, [emojiContainer]);\n  return (\n    <BottomSheet onBackdropClick={hideMenu}>\n      <div className=\"sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet\">\n        {emojiAllList.map((emoji) => {\n          const isReacted: boolean = (message?.reactions\n            ?.find((reaction: Reaction): boolean => reaction.key === emoji.key)?.userIds\n            ?.some((reactorId: string): boolean => reactorId === userId)) ?? false;\n          return (\n            <ReactionButton\n              key={emoji.key}\n              width=\"44px\"\n              height=\"44px\"\n              selected={isReacted}\n              onClick={(e) => {\n                e?.stopPropagation();\n                toggleReaction?.(message, emoji.key, isReacted);\n                hideMenu();\n              }}\n              dataSbId={`ui_mobile_emoji_reactions_menu_${emoji.key}`}\n            >\n              <ImageRenderer\n                url={emoji.url}\n                width=\"38px\"\n                height=\"38px\"\n                placeHolder={(style: Record<string, unknown>): ReactElement => (\n                  <div style={style}>\n                    <Icon\n                      type={IconTypes.QUESTION}\n                      fillColor={IconColors.ON_BACKGROUND_3}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                  </div>\n                )}\n              />\n            </ReactionButton>\n          );\n        })}\n      </div>\n    </BottomSheet>\n  );\n};\n", "import './index.scss';\nimport React, { ReactElement, useRef, useState } from 'react';\nimport type { Emoji, EmojiContainer } from '@sendbird/chat';\nimport type { Reaction } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\n\nimport ReactionBadge from '../ReactionBadge';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport { Nullable, SpaceFromTriggerType } from '../../types';\n\nimport { getClassName, getEmojiListAll, getEmojiMapAll, SendableMessageType } from '../../utils';\nimport { ReactedMembersBottomSheet } from '../MobileMenu/ReactedMembersBottomSheet';\nimport ReactionItem from './ReactionItem';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport { AddReactionBadgeItem } from './AddReactionBadgeItem';\nimport { MobileEmojisBottomSheet } from '../MobileMenu/MobileEmojisBottomSheet';\nimport { User } from '@sendbird/chat';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  message: SendableMessageType;\n  channel: Nullable<GroupChannel>;\n  emojiContainer: EmojiContainer;\n  memberNicknamesMap: Map<string, string>;\n  spaceFromTrigger?: SpaceFromTriggerType;\n  isByMe?: boolean;\n  toggleReaction?: (message: SendableMessageType, key: string, byMe: boolean) => void;\n  onPressUserProfile?: (member: User) => void;\n}\n\nconst EmojiReactions = ({\n  className = '',\n  userId,\n  message,\n  channel,\n  emojiContainer,\n  memberNicknamesMap,\n  spaceFromTrigger = { x: 0, y: 0 },\n  isByMe = false,\n  toggleReaction,\n  onPressUserProfile,\n}: Props): ReactElement => {\n  const { isMobile } = useMediaQueryContext();\n  const addReactionRef = useRef(null);\n  const [showEmojiList, setShowEmojiList] = useState(false);\n  const [selectedEmojiKey, setSelectedEmojiKey] = useState('');\n\n  const emojisMap = getEmojiMapAll(emojiContainer);\n  const showAddReactionBadge = (message.reactions?.length ?? 0) < emojisMap.size;\n\n  return (\n    <div className={getClassName([\n      className, 'sendbird-emoji-reactions',\n      isByMe ? 'outgoing' : 'incoming',\n    ])}>\n      {((message.reactions?.length ?? 0) > 0) && (\n        message.reactions?.map((reaction: Reaction): ReactElement => {\n          return (\n            <ReactionItem\n              key={reaction?.key}\n              reaction={reaction}\n              memberNicknamesMap={memberNicknamesMap}\n              setEmojiKey={setSelectedEmojiKey}\n              toggleReaction={toggleReaction}\n              emojisMap={emojisMap}\n              channel={channel}\n            />\n          );\n        })\n      )}\n      {(!isMobile && showAddReactionBadge) && (\n        <ContextMenu\n          menuTrigger={(toggleDropdown: () => void): ReactElement => (\n            <ReactionBadge\n              className=\"sendbird-emoji-reactions__add-reaction-badge\"\n              ref={addReactionRef}\n              isAdd\n              onClick={(e) => {\n                toggleDropdown();\n                e?.stopPropagation?.();\n              }}\n            >\n              <Icon\n                type={IconTypes.EMOJI_MORE}\n                fillColor={IconColors.ON_BACKGROUND_3}\n                width=\"20px\"\n                height=\"20px\"\n              />\n            </ReactionBadge>\n          )}\n          menuItems={(closeDropdown: () => void): ReactElement => (\n            <EmojiListItems\n              parentRef={addReactionRef}\n              parentContainRef={addReactionRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = (message?.reactions\n                  ?.find((reaction: Reaction): boolean => reaction.key === emoji.key)?.userIds\n                  ?.some((reactorId: string): boolean => reactorId === userId)) || false;\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={(e): void => {\n                      closeDropdown();\n                      toggleReaction?.(message, emoji.key, isReacted);\n                      e?.stopPropagation();\n                    }}\n                    dataSbId={`ui_emoji_reactions_menu_${emoji.key}`}\n                  >\n                    <ImageRenderer\n                      url={emoji?.url || ''}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style: Record<string, unknown>): ReactElement => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          )}\n        />\n      )}\n      {(isMobile && showAddReactionBadge) && (\n        <AddReactionBadgeItem\n          onClick={() => {\n            setShowEmojiList(true);\n          }}\n        />\n      )}\n      {(isMobile && showEmojiList) && (\n        <MobileEmojisBottomSheet\n          userId={userId}\n          message={message}\n          emojiContainer={emojiContainer}\n          hideMenu={() => {\n            setShowEmojiList(false);\n          }}\n          toggleReaction={toggleReaction}\n        />\n      )}\n      {(isMobile && selectedEmojiKey && channel !== null) && (\n        <ReactedMembersBottomSheet\n          message={message}\n          channel={channel}\n          emojiKey={selectedEmojiKey}\n          hideMenu={() => {\n            setSelectedEmojiKey('');\n          }}\n          emojiContainer={emojiContainer}\n          onPressUserProfileHandler={onPressUserProfile}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EmojiReactions;\n", "import React, { ReactElement } from 'react';\nimport { AdminMessage as AdminMessageType } from '@sendbird/chat/message';\n\nimport './index.scss';\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\ninterface AdminMessageProps {\n  className?: string | Array<string>;\n  message: AdminMessageType;\n}\n\nexport default function AdminMessage({\n  className = '',\n  message,\n}: AdminMessageProps): ReactElement {\n  if (!(message?.isAdminMessage || message?.messageType) || !message?.isAdminMessage?.() || message?.messageType !== 'admin') {\n    return null;\n  }\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message?.message}\n      </Label>\n    </div>\n  );\n}\n", "import './index.scss';\n\nimport React, {\n  ReactElement,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport type { User } from '@sendbird/chat';\n\nimport ContextMenu, { MenuItems } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport UserProfile from '../UserProfile';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\n\ninterface MentionLabelProps {\n  mentionTemplate: string;\n  mentionedUserId: string;\n  mentionedUserNickname: string;\n  isByMe: boolean;\n}\n\nexport default function MentionLabel(props: MentionLabelProps): JSX.Element {\n  const {\n    mentionTemplate,\n    mentionedUserId,\n    mentionedUserNickname,\n    isByMe,\n  } = props;\n\n  const mentionRef = useRef();\n\n  const sendbirdState = useSendbirdStateContext();\n  const userId = sendbirdState?.config?.userId;\n  const sdk = sendbirdState?.stores?.sdkStore?.sdk;\n  const amIBeingMentioned = userId === mentionedUserId;\n  const [user, setUser] = useState<User| null>();\n  const fetchUser = useCallback(\n    (toggleDropdown) => {\n      if (user || !sdk?.createApplicationUserListQuery) {\n        toggleDropdown();\n        return;\n      }\n      const query = sdk?.createApplicationUserListQuery({\n        userIdsFilter: [mentionedUserId],\n      });\n      query.next().then((members) => {\n        if (members?.length > 0) {\n          setUser(members[0]);\n        }\n        toggleDropdown();\n      });\n    },\n    [sdk, mentionedUserId],\n  );\n  return (\n    <ContextMenu\n      menuTrigger={(toggleDropdown: () => void): ReactElement => (\n        <a\n          className={`\n            sendbird-word__mention\n            ${amIBeingMentioned ? 'sendbird-word__mention--me' : ''}\n          `}\n          onClick={() => fetchUser(toggleDropdown)}\n          ref={mentionRef}\n          data-userid={mentionedUserId}\n          data-nickname={mentionedUserNickname}\n          data-sb-mention={true}\n        >\n          <Label\n            type={LabelTypography.CAPTION_1}\n            color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n          >\n            {`${mentionTemplate}${mentionedUserNickname}`}\n          </Label>\n        </a>\n      )}\n      menuItems={(closeDropdown: () => void): ReactElement => (\n        <MenuItems\n          /**\n          * parentRef: For catching location(x, y) of MenuItems\n          * parentContainRef: For toggling more options(menus & reactions)\n          */\n          parentRef={mentionRef}\n          parentContainRef={mentionRef}\n          closeDropdown={closeDropdown}\n          style={{ paddingTop: '0px', paddingBottom: '0px' }}\n        >\n          <UserProfile\n            user={user}\n            onSuccess={closeDropdown}\n            currentUserId={userId}\n          />\n        </MenuItems>\n      )}\n    />\n  );\n}\n", "import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { changeColorToClassName } from '../Label/utils';\nimport './index.scss';\n\nconst http = /https?:\\/\\//;\n\nexport default function LinkLabel({\n  className,\n  src,\n  type,\n  color,\n  children,\n}) {\n  const url = (http.test(src)) ? src : `http://${src}`;\n\n  return (\n    <a\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-link-label',\n        color ? changeColorToClassName(color) : '',\n      ].join(' ')}\n      href={url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      // for mobile\n      onTouchEnd={(e) => {\n        e.preventDefault();\n        e.nativeEvent.stopImmediatePropagation();\n        window.open(url, '_blank', 'noopener,noreferrer');\n      }}\n    >\n      <Label\n        className=\"sendbird-link-label__label\"\n        type={type}\n        color={color}\n      >\n        {children}\n      </Label>\n    </a>\n  );\n}\n\nLinkLabel.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  src: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  color: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(PropTypes.element),\n  ]).isRequired,\n};\n\nLinkLabel.defaultProps = {\n  className: '',\n  type: '',\n  color: '',\n};\n\nexport const LinkLabelTypography = LabelTypography;\nexport const LinkLabelColors = LabelColors;\n", "// this function is used to generate a unique key for token in message\n// it changes with updated time and index\n// messageUpdatedAt is the key part of this key generator\nexport function keyGenerator(\n  createdAt: number,\n  messageUpdatedAt: number,\n  index: number,\n): string {\n  return `sb-msg_${createdAt}_${messageUpdatedAt}_${index}`;\n}\n", "import React from 'react';\nimport { UserMessage } from '@sendbird/chat/message';\nimport { match } from 'ts-pattern';\n\nimport { TOKEN_TYPES, Token } from '../../utils/tokens/types';\nimport { useMessageContext } from '../../context/MessageProvider';\nimport { keyGenerator } from '../../utils/tokens/keyGenerator';\nimport MentionLabel from '../../../../ui/MentionLabel';\nimport { USER_MENTION_PREFIX } from '../../consts';\nimport LinkLabel from '../../../../ui/LinkLabel';\nimport { LabelTypography } from '../../../../ui/Label';\nimport { getWhiteSpacePreservedText } from '../../utils/tokens/tokenize';\n\nexport type TextFragmentProps = {\n  tokens: Token[];\n};\n\nexport default function TextFragment({\n  tokens,\n}: TextFragmentProps): React.ReactElement {\n  const messageStore = useMessageContext();\n\n  const message = messageStore?.message as UserMessage;\n  const isByMe = messageStore?.isByMe;\n  const { updatedAt, createdAt } = message;\n\n  return (\n    <>\n      {tokens?.map((token, idx) => {\n        const key = keyGenerator(createdAt, updatedAt, idx);\n        return match(token.type)\n          .with(TOKEN_TYPES.mention, () => (\n            <span className=\"sendbird-word\" key={key}>\n              <MentionLabel\n                mentionTemplate={USER_MENTION_PREFIX}\n                mentionedUserId={token.userId}\n                mentionedUserNickname={token.value}\n                isByMe={isByMe}\n              />\n            </span>\n          ))\n          .with(TOKEN_TYPES.url, () => (\n            <span className=\"sendbird-word\" key={key}>\n              <LinkLabel\n                className=\"sendbird-word__url\"\n                src={token.value}\n                type={LabelTypography.BODY_1}\n              >\n                {token.value}\n              </LinkLabel>\n            </span>\n          ))\n          .otherwise(() => <React.Fragment key={key}>{getWhiteSpacePreservedText(token.value)}</React.Fragment>);\n      })}\n    </>\n  );\n}\n", "import './index.scss';\nimport React, { ReactElement, useContext, useMemo } from 'react';\nimport type { UserMessage } from '@sendbird/chat/message';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { getClassName, isEditedMessage } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { tokenizeMessage } from '../../modules/Message/utils/tokens/tokenize';\nimport TextFragment from '../../modules/Message/components/TextFragment';\nimport { TEXT_MESSAGE_BODY_CLASSNAME } from './consts';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isMentionEnabled?: boolean;\n  isReactionEnabled?: boolean;\n}\n\nexport default function TextMessageItemBody({\n  className = '',\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isMentionEnabled = false,\n  isReactionEnabled = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const isMessageMentioned = isMentionEnabled\n    && message?.mentionedMessageTemplate?.length > 0\n    && message?.mentionedUsers?.length > 0;\n  const tokens = useMemo(() => {\n    if (isMessageMentioned) {\n      return tokenizeMessage({\n        mentionedUsers: message?.mentionedUsers,\n        messageText: message?.mentionedMessageTemplate,\n      });\n    }\n    return tokenizeMessage({\n      messageText: message?.message,\n    });\n  }, [message?.updatedAt]);\n  return (\n    <Label\n      type={LabelTypography.BODY_1}\n      color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n    >\n      <div className={getClassName([\n        className,\n        TEXT_MESSAGE_BODY_CLASSNAME,\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n      ])}>\n        <TextFragment tokens={tokens} />\n        {\n          isEditedMessage(message) && (\n            <Label\n              className=\"sendbird-text-message-item-body__message edited\"\n              type={LabelTypography.BODY_1}\n              color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n            >\n              {` ${stringSet.MESSAGE_EDITED} `}\n            </Label>\n          )\n        }\n      </div>\n    </Label>\n  );\n}\n", "import './index.scss';\nimport React, { ReactElement } from 'react';\nimport type { FileMessage } from '@sendbird/chat/message';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport TextButton from '../TextButton';\nimport { getClassName, getUIKitFileType, truncateString } from '../../utils';\nimport { Colors } from '../../utils/color';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isReactionEnabled?: boolean;\n  truncateLimit?: number;\n}\n\nexport default function FileMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isReactionEnabled = false,\n  truncateLimit = null,\n}: Props): ReactElement {\n  const { isMobile } = useMediaQueryContext();\n  const truncateMaxNum = truncateLimit || (isMobile ? 20 : null);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-file-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n    ])}>\n      <div className=\"sendbird-file-message-item-body__file-icon\">\n        <Icon\n          className=\"sendbird-file-message-item-body__file-icon__icon\"\n          type={{\n            IMAGE: IconTypes.PHOTO,\n            VIDEO: IconTypes.PLAY,\n            AUDIO: IconTypes.FILE_AUDIO,\n            GIF: IconTypes.GIF,\n            OTHERS: IconTypes.FILE_DOCUMENT,\n          }[getUIKitFileType(message?.type)]}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n      <TextButton\n        className=\"sendbird-file-message-item-body__file-name\"\n        onClick={() => { window.open(message?.url); }}\n        color={isByMe ? Colors.ONCONTENT_1 : Colors.ONBACKGROUND_1}\n      >\n        <Label\n          className=\"sendbird-file-message-item-body__file-name__text\"\n          type={LabelTypography.BODY_1}\n          color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n        >\n          {truncateString(message?.name || message?.url, truncateMaxNum)}\n        </Label>\n      </TextButton>\n    </div>\n  );\n}\n", "import { CoreMessageType, isFileMessage, isMultipleFilesMessage } from '../../utils';\nimport { match } from 'ts-pattern';\nimport { FileMessage, MultipleFilesMessage, UploadedFileInfo } from '@sendbird/chat/message';\nimport { Thumbnail } from '@sendbird/chat/lib/__definition';\n\nexport function getMessageFirstFileType(message: CoreMessageType): string {\n  return match(message)\n    .when(isFileMessage, () => {\n      return (message as FileMessage)?.type ?? '';\n    })\n    .when(isMultipleFilesMessage, () => {\n      return getFirstFileInfo(message as MultipleFilesMessage)?.mimeType ?? '';\n    })\n    .otherwise(() => {\n      return '';\n    });\n}\n\nfunction getFirstFileInfo(message: MultipleFilesMessage): UploadedFileInfo | null {\n  const fileInfoList: UploadedFileInfo[] = message.fileInfoList;\n  return fileInfoList.length > 0 ? fileInfoList[0] : null;\n}\n\nexport function getMessageFirstFileName(message: CoreMessageType): string {\n  return match(message)\n    .when(isFileMessage, () => {\n      return (message as FileMessage)?.name ?? '';\n    })\n    .when(isMultipleFilesMessage, () => {\n      return getFirstFileInfo(message as MultipleFilesMessage)?.fileName ?? '';\n    })\n    .otherwise(() => {\n      return '';\n    });\n}\n\nexport function getMessageFirstFileUrl(message: CoreMessageType): string {\n  return match(message)\n    .when(isFileMessage, () => {\n      return (message as FileMessage)?.url ?? '';\n    })\n    .when(isMultipleFilesMessage, () => {\n      return getFirstFileInfo(message as MultipleFilesMessage)?.url ?? '';\n    })\n    .otherwise(() => {\n      return '';\n    });\n}\n\nexport function getMessageFirstFileThumbnails(message: CoreMessageType): Thumbnail[] {\n  return match(message)\n    .when(isFileMessage, () => {\n      return (message as FileMessage).thumbnails;\n    })\n    .when(isMultipleFilesMessage, () => {\n      return getFirstFileInfo(message as MultipleFilesMessage)?.thumbnails ?? [];\n    })\n    .otherwise(() => {\n      return [];\n    });\n}\n\nexport function getMessageFirstFileThumbnailUrl(message: CoreMessageType): string {\n  const thumbnails: Thumbnail[] = getMessageFirstFileThumbnails(message);\n  return (thumbnails && thumbnails.length > 0) ? thumbnails[0].url : '';\n}\n", "import './index.scss';\nimport React, { ReactElement, useState } from 'react';\nimport type { FileMessage } from '@sendbird/chat/message';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport { getClassName, isGifMessage, isSentMessage, isVideoMessage } from '../../utils';\nimport { noop } from '../../utils/utils';\nimport useLongPress from '../../hooks/useLongPress';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\nimport { getMessageFirstFileType, getMessageFirstFileUrl, getMessageFirstFileThumbnailUrl } from '../QuoteMessage/utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: FileMessage | MultipleFilesMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isReactionEnabled?: boolean;\n  showFileViewer?: (bool: boolean) => void;\n  style?: Record<string, any>;\n}\n\nexport default function ThumbnailMessageItemBody({\n  className = '',\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isReactionEnabled = false,\n  showFileViewer = noop,\n  style = {},\n}: Props): ReactElement {\n  const thumbnailUrl: string = getMessageFirstFileThumbnailUrl(message);\n  const [imageRendered, setImageRendered] = useState(false);\n\n  const onClickHandler = useLongPress({\n    onLongPress: noop,\n    onClick: () => {\n      if (isSentMessage(message)) {\n        showFileViewer?.(true);\n      }\n    },\n  });\n\n  return (\n    <div\n      className={getClassName([\n        className,\n        'sendbird-thumbnail-message-item-body',\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        (isReactionEnabled && (message.reactions?.length ?? 0) > 0) ? 'reactions' : '',\n      ])}\n      {...onClickHandler}\n    >\n      <ImageRenderer\n        className=\"sendbird-thumbnail-message-item-body__thumbnail\"\n        url={thumbnailUrl || getMessageFirstFileUrl(message)}\n        alt={getMessageFirstFileType(message)}\n        width={style?.width || '360px'}\n        height={style?.height || '270px'}\n        onLoad={() => { setImageRendered(true); }}\n        placeHolder={(style_: Record<string, any>) => (\n          <div\n            className=\"sendbird-thumbnail-message-item-body__placeholder\"\n            style={style_}\n          />\n        )}\n      />\n      {\n        (isVideoMessage(message) && !thumbnailUrl) && !imageRendered && (\n          <video className=\"sendbird-thumbnail-message-item-body__video\">\n            <source src={getMessageFirstFileUrl(message)} type={getMessageFirstFileType(message)} />\n          </video>\n        )\n      }\n      <div className=\"sendbird-thumbnail-message-item-body__image-cover\" />\n      {\n        (isVideoMessage(message) || isGifMessage(message)) && (\n          <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper\">\n            <div className=\"sendbird-thumbnail-message-item-body__icon-wrapper__icon\">\n              <Icon\n                type={isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF}\n                fillColor={IconColors.THUMBNAIL_ICON}\n                width=\"34px\"\n                height=\"34px\"\n              />\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n", "import './index.scss';\nimport React, {\n  ReactElement,\n  useContext,\n  useMemo,\n  useRef,\n} from 'react';\nimport type { UserMessage } from '@sendbird/chat/message';\n\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { getClassName, isEditedMessage } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport TextFragment from '../../modules/Message/components/TextFragment';\nimport { tokenizeMessage } from '../../modules/Message/utils/tokens/tokenize';\nimport { OG_MESSAGE_BODY_CLASSNAME } from './consts';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isMentionEnabled?: boolean;\n  isReactionEnabled?: boolean;\n  onMessageHeightChange?: () => void;\n}\n\nexport default function OGMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isMentionEnabled = false,\n  isReactionEnabled = false,\n  onMessageHeightChange = () => { /* noop */ },\n}: Props): ReactElement {\n  const imageRef = useRef<HTMLDivElement>(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const openOGUrl = (): void => {\n    if (message?.ogMetaData?.url) window.open(message?.ogMetaData?.url);\n  };\n  const isMessageMentioned = isMentionEnabled && message?.mentionedMessageTemplate?.length > 0 && message?.mentionedUsers?.length > 0;\n  const tokens = useMemo(() => {\n    if (isMessageMentioned) {\n      return tokenizeMessage({\n        mentionedUsers: message?.mentionedUsers,\n        messageText: message?.mentionedMessageTemplate,\n      });\n    }\n    return tokenizeMessage({\n      messageText: message?.message,\n    });\n  }, [message?.updatedAt]);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-og-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n    ])}>\n      <Label\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        <div className={OG_MESSAGE_BODY_CLASSNAME}>\n          <TextFragment tokens={tokens} />\n          {\n            isEditedMessage(message) && (\n              <Label\n                className=\"sendbird-og-message-item-body__text-bubble__message\"\n                type={LabelTypography.BODY_1}\n                color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n              >\n                {` ${stringSet.MESSAGE_EDITED} `}\n              </Label>\n            )\n          }\n        </div>\n      </Label>\n      <div\n        ref={imageRef}\n        className={`sendbird-og-message-item-body__og-thumbnail\n          ${message?.ogMetaData?.defaultImage?.url ? '' : 'sendbird-og-message-item-body__og-thumbnail__empty'}\n        `}\n        onClick={openOGUrl}\n      >\n        <ImageRenderer\n          onLoad={onMessageHeightChange}\n          onError={() => {\n            try {\n              imageRef?.current?.classList?.add('sendbird-og-message-item-body__og-thumbnail__empty');\n            } catch (error) {\n              // do nothing\n            }\n          }}\n          className=\"sendbird-og-message-item-body__og-thumbnail__image\"\n          url={message?.ogMetaData?.defaultImage?.url || ''}\n          alt={message?.ogMetaData?.defaultImage?.alt}\n          // TODO: Change fixing width and height lengths\n          defaultComponent={(\n            <div className=\"sendbird-og-message-item-body__og-thumbnail__place-holder\">\n              <Icon\n                className=\"sendbird-og-message-item-body__og-thumbnail__place-holder__icon\"\n                type={IconTypes.THUMBNAIL_NONE}\n                width=\"56px\"\n                height=\"56px\"\n              />\n            </div>\n          )}\n        />\n      </div>\n      <div\n        className=\"sendbird-og-message-item-body__description\"\n        onClick={openOGUrl}\n      >\n        {message?.ogMetaData?.title && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__title\"\n            type={LabelTypography.SUBTITLE_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.title}\n          </Label>\n        )}\n        {message?.ogMetaData?.description && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__description\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {message.ogMetaData.description}\n          </Label>\n        )}\n        {message?.ogMetaData?.url && (\n          <Label\n            className=\"sendbird-og-message-item-body__description__url\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {message.ogMetaData.url}\n          </Label>\n        )}\n      </div>\n      <div className=\"sendbird-og-message-item-body__cover\" />\n    </div>\n  );\n}\n", "import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { getClassName } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { BaseMessage } from '@sendbird/chat/message';\n\ninterface Props {\n  className?: string | Array<string>;\n  isByMe?: boolean;\n  message: BaseMessage;\n  mouseHover?: boolean;\n  isReactionEnabled?: boolean;\n}\n\nexport default function UnknownMessageItemBody({\n  className,\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isReactionEnabled = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={getClassName([\n      className,\n      'sendbird-unknown-message-item-body',\n      isByMe ? 'outgoing' : 'incoming',\n      mouseHover ? 'mouse-hover' : '',\n      (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n    ])}>\n      <Label\n        className=\"sendbird-unknown-message-item-body__header\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      >\n        {stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE}\n      </Label>\n      <Label\n        className=\"sendbird-unknown-message-item-body__description\"\n        type={LabelTypography.BODY_1}\n        color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n      >\n        {stringSet.UNKNOWN__CANNOT_READ_MESSAGE}\n      </Label>\n    </div>\n  );\n}\n", "import './index.scss';\nimport React, { ReactElement, useContext, useState } from 'react';\nimport type { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport ImageRenderer from '../ImageRenderer';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport {\n  CoreMessageType,\n  getClassName,\n  getUIKitFileType,\n  getUIKitFileTypes,\n  getUIKitMessageType,\n  isGif,\n  isMultipleFilesMessage,\n  isThumbnailMessage,\n  isUserMessage,\n  isVideo,\n  isVoiceMessage,\n  SendableMessageType,\n  truncateString,\n  UIKitMessageTypes,\n} from '../../utils';\nimport { getMessageFirstFileName, getMessageFirstFileType, getMessageFirstFileUrl } from './utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message?: SendableMessageType;\n  userId?: string;\n  isByMe?: boolean;\n  isUnavailable?: boolean;\n  onClick?: () => void;\n}\n\nexport default function QuoteMessage({\n  message,\n  userId = '',\n  isByMe = false,\n  className = '',\n  isUnavailable = false,\n  onClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n\n  const { parentMessage } = message;\n  const parentMessageSender = (parentMessage as SendableMessageType)?.sender;\n  const parentMessageSenderNickname = (userId === parentMessageSender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender?.nickname;\n  const parentMessageUrl = getMessageFirstFileUrl(parentMessage as CoreMessageType);\n  const parentMessageType = getMessageFirstFileType(parentMessage as CoreMessageType);\n  const currentMessageSenderNickname = (userId === message?.sender?.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : message?.sender?.nickname;\n\n  const [isThumbnailLoaded, setThumbnailLoaded] = useState(false);\n  const uikitFileTypes = getUIKitFileTypes();\n  const splitFileName = getMessageFirstFileName(parentMessage as CoreMessageType)?.split('/') ?? parentMessageUrl.split('/');\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-quote-message', isByMe ? 'outgoing' : 'incoming', isUnavailable ? 'unavailable' : ''])}\n      key={parentMessage?.messageId}\n      onClick={() => {\n        if (!isUnavailable && onClick) {\n          onClick();\n        }\n      }}\n      onTouchEnd={() => {\n        if (!isUnavailable && onClick) {\n          onClick();\n        }\n      }}\n    >\n      <div className=\"sendbird-quote-message__replied-to\">\n        <Icon\n          className=\"sendbird-quote-message__replied-to__icon\"\n          type={IconTypes.REPLY}\n          fillColor={IconColors.ON_BACKGROUND_3}\n          width=\"12px\"\n          height=\"12px\"\n        />\n        <Label\n          className=\"sendbird-quote-message__replied-to__text\"\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          <span className=\"sendbird-quote-message__replied-to__text__nickname\">{currentMessageSenderNickname}</span>\n          <span className=\"sendbird-quote-message__replied-to__text__text\">{stringSet.QUOTED_MESSAGE__REPLIED_TO}</span>\n          <span className=\"sendbird-quote-message__replied-to__text__nickname\">{parentMessageSenderNickname}</span>\n        </Label>\n      </div>\n      <div className=\"sendbird-quote-message__replied-message\">\n        {isUnavailable && (\n          <div className=\"sendbird-quote-message__replied-message__text-message\">\n            <Label\n              className=\"sendbird-quote-message__replied-message__text-message__word\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {stringSet.QUOTED_MESSAGE__UNAVAILABLE}\n            </Label>\n          </div>\n        )}\n        {/* text message */}\n        {((isUserMessage(parentMessage as UserMessage) && (parentMessage as UserMessage)?.message?.length > 0) && !isUnavailable) && (\n          <div className=\"sendbird-quote-message__replied-message__text-message\">\n            <Label\n              className=\"sendbird-quote-message__replied-message__text-message__word\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {(parentMessage as UserMessage)?.message}\n            </Label>\n          </div>\n        )}\n        {/* voice message */}\n        {(isVoiceMessage(parentMessage as FileMessage) && parentMessageUrl && !isUnavailable) && (\n          <div className=\"sendbird-quote-message__replied-message__text-message\">\n            <Label\n              className=\"sendbird-quote-message__replied-message__text-message__word\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {stringSet.VOICE_MESSAGE}\n            </Label>\n          </div>\n        )}\n        {/* thumbnail message or multiple files message */}\n        {(\n          (\n            isThumbnailMessage(parentMessage as FileMessage)\n            || isMultipleFilesMessage(parentMessage as CoreMessageType)\n          )\n          && parentMessageUrl\n          && !isUnavailable\n        ) && (\n          <div className=\"sendbird-quote-message__replied-message__thumbnail-message\">\n            <ImageRenderer\n              className=\"sendbird-quote-message__replied-message__thumbnail-message__image\"\n              url={parentMessageUrl}\n              alt={parentMessageType}\n              width=\"144px\"\n              height=\"108px\"\n              onLoad={() => setThumbnailLoaded(true)}\n              defaultComponent={(\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon\">\n                    <Icon\n                      type={isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO}\n                      fillColor={IconColors.ON_BACKGROUND_2}\n                      width=\"22px\"\n                      height=\"22px\"\n                    />\n                  </div>\n                </div>\n              )}\n            />\n            {(isVideo(parentMessageType) && !((parentMessage as FileMessage)?.thumbnails?.length > 0)) && (\n              <>\n                <video className=\"sendbird-quote-message__replied-message__thumbnail-message__video\">\n                  <source src={parentMessageUrl} type={parentMessageType} />\n                </video>\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                  <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                    <Icon\n                      type={IconTypes.PLAY}\n                      fillColor={IconColors.ON_BACKGROUND_2}\n                      width=\"14px\"\n                      height=\"14px\"\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            {(isThumbnailLoaded && isGif(parentMessageType)) && (\n              <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover\">\n                <div className=\"sendbird-quote-message__replied-message__thumbnail-message__cover__icon\">\n                  <Icon\n                    type={IconTypes.GIF}\n                    fillColor={IconColors.THUMBNAIL_ICON}\n                    width=\"14px\"\n                    height=\"14px\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        {/* file message */}\n        {(getUIKitMessageType(parentMessage as FileMessage) === UIKitMessageTypes.FILE && parentMessageUrl && !isUnavailable) && (\n          <div className=\"sendbird-quote-message__replied-message__file-message\">\n            <Icon\n              className=\"sendbird-quote-message__replied-message__file-message__type-icon\"\n              type={{\n                [uikitFileTypes.IMAGE]: IconTypes.PHOTO,\n                [uikitFileTypes.VIDEO]: IconTypes.PLAY,\n                [uikitFileTypes.AUDIO]: IconTypes.FILE_AUDIO,\n                [uikitFileTypes.GIF]: IconTypes.GIF,\n                [uikitFileTypes.OTHERS]: IconTypes.FILE_DOCUMENT,\n              }[getUIKitFileType(parentMessageType)]}\n              fillColor={IconColors.ON_BACKGROUND_3}\n              width=\"16px\"\n              height=\"16px\"\n            />\n            <Label\n              className=\"sendbird-quote-message__replied-message__file-message__file-name\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_3}\n            >\n              {truncateString(splitFileName[splitFileName.length - 1])}\n            </Label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import React from 'react';\nimport type { BaseMenuProps } from './types';\nimport type { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\n\nimport {\n  isFailedMessage,\n  isPendingMessage,\n  isSentMessage,\n  isUserMessage,\n  copyToClipboard,\n  isFileMessage,\n  isThreadMessage,\n  isVoiceMessage,\n} from '../../utils';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\nconst MobileContextMenu: React.FunctionComponent<BaseMenuProps> = (props: BaseMenuProps): React.ReactElement => {\n  const {\n    hideMenu,\n    channel,\n    message,\n    replyType,\n    userId,\n    resendMessage,\n    showEdit,\n    showRemove,\n    deleteMenuState,\n    deleteMessage,\n    setQuoteMessage,\n    parentRef,\n    onReplyInThread,\n    isOpenedFromThread = false,\n  } = props;\n  const isByMe = message?.sender?.userId === userId;\n  const { stringSet } = useLocalization();\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemEdit: boolean = (isUserMessage(message as UserMessage) && isSentMessage(message) && isByMe);\n  const showMenuItemResend: boolean = (isFailedMessage(message) && message?.isResendable && isByMe);\n\n  const showMenuItemDelete: boolean = !isPendingMessage(message) && isByMe;\n  const showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n  const showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n\n  const disableDelete = (\n    (deleteMenuState !== undefined && deleteMenuState === 'DISABLE')\n    || (message?.threadInfo?.replyCount ?? 0) > 0\n  );\n\n  const showMenuItemDownload: boolean = !isPendingMessage(message) && isFileMessage(message)\n    && !(isVoiceMessage(message) && ((channel as GroupChannel)?.isSuper || (channel as GroupChannel)?.isBroadcast));\n  const showMenuItemReply: boolean = (replyType === 'QUOTE_REPLY')\n    && !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && channel?.isGroupChannel();\n  const showMenuItemThread: boolean = (replyType === 'THREAD') && !isOpenedFromThread\n    && !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && !isThreadMessage(message)\n    && channel?.isGroupChannel();\n\n  const fileMessage = message as FileMessage;\n  return (\n    <ContextMenu\n      isOpen\n      menuItems={() => (\n        <MenuItems\n          className=\"sendbird-message__mobile-context-menu\"\n          parentRef={parentRef}\n          parentContainRef={parentRef}\n          closeDropdown={hideMenu}\n        >\n          {showMenuItemCopy && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-copy\"\n              onClick={() => {\n                hideMenu();\n                copyToClipboard((message as UserMessage)?.message);\n              }}\n              dataSbId=\"ui_mobile_message_item_menu_copy\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet?.MESSAGE_MENU__COPY}\n              </Label>\n              <Icon\n                type={IconTypes.COPY}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemReply && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-reply\"\n              onClick={() => {\n                hideMenu();\n                setQuoteMessage(message);\n              }}\n              disable={(message?.parentMessageId ?? 0) > 0}\n              dataSbId=\"ui_mobile_message_item_menu_reply\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={\n                  (message?.parentMessageId ?? 0) > 0\n                    ? LabelColors.ONBACKGROUND_4\n                    : LabelColors.ONBACKGROUND_1\n                }\n              >\n                {stringSet.MESSAGE_MENU__REPLY}\n              </Label>\n              <Icon\n                type={IconTypes.REPLY}\n                fillColor={\n                  (message?.parentMessageId ?? 0) > 0\n                    ? IconColors.ON_BACKGROUND_4\n                    : IconColors.PRIMARY\n                }\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemThread && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-reply\"\n              onClick={() => {\n                hideMenu();\n                onReplyInThread?.({ message });\n              }}\n              dataSbId=\"ui_mobile_message_item_menu_thread\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.MESSAGE_MENU__THREAD}\n              </Label>\n              <Icon\n                type={IconTypes.THREAD}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemEdit && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-edit\"\n              onClick={() => {\n                hideMenu();\n                showEdit(true);\n              }}\n              dataSbId=\"ui_mobile_message_item_menu_edit\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.MESSAGE_MENU__EDIT}\n              </Label>\n              <Icon\n                type={IconTypes.EDIT}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemResend && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-resend\"\n              onClick={() => {\n                hideMenu();\n                resendMessage(message);\n              }}\n              dataSbId=\"ui_mobile_message_item_menu_resend\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.MESSAGE_MENU__RESEND}\n              </Label>\n              <Icon\n                type={IconTypes.REFRESH}\n                fillColor={IconColors.PRIMARY}\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemDeleteFinal && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-delete\"\n              onClick={() => {\n                if (isFailedMessage(message)) {\n                  hideMenu();\n                  deleteMessage?.(message);\n                } else if (!disableDelete) {\n                  hideMenu();\n                  showRemove?.(true);\n                }\n              }}\n              disable={disableDelete}\n              dataSbId=\"ui_mobile_message_item_menu_delete\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={\n                  disableDelete\n                    ? LabelColors.ONBACKGROUND_4\n                    : LabelColors.ONBACKGROUND_1\n                }\n              >\n                {stringSet.MESSAGE_MENU__DELETE}\n              </Label>\n              <Icon\n                type={IconTypes.DELETE}\n                fillColor={\n                  disableDelete\n                    ? IconColors.ON_BACKGROUND_4\n                    : IconColors.PRIMARY\n                }\n                width=\"24px\"\n                height=\"24px\"\n              />\n            </MenuItem>\n          )}\n          {showMenuItemDownload && (\n            <MenuItem\n              className=\"sendbird-message__mobile-context-menu-item menu-item-save\"\n              onClick={() => {\n                hideMenu();\n              }}\n              dataSbId=\"ui_mobile_message_item_menu_download_file\"\n            >\n              <a\n                className=\"sendbird-message__contextmenu--hyperlink\"\n                rel=\"noopener noreferrer\"\n                href={fileMessage?.url}\n                target=\"_blank\"\n              >\n                <Label\n                  type={LabelTypography.SUBTITLE_1}\n                  color={LabelColors.ONBACKGROUND_1}\n                >\n                  {stringSet.MESSAGE_MENU__SAVE}\n                </Label>\n                <Icon\n                  type={IconTypes.DOWNLOAD}\n                  fillColor={IconColors.PRIMARY}\n                  width=\"24px\"\n                  height=\"24px\"\n                />\n              </a>\n            </MenuItem>\n          )}\n        </MenuItems>\n      )}\n    />\n  );\n};\n\nexport default MobileContextMenu;\n", "import type { Emoji } from '@sendbird/chat';\nimport { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\nimport React, { ReactElement, useState } from 'react';\n\nimport type { MobileBottomSheetProps } from './types';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\n\nimport {\n  getEmojiListAll,\n  isFailedMessage,\n  isPendingMessage,\n  isSentMessage,\n  isUserMessage,\n  copyToClipboard,\n  isFileMessage,\n  isVoiceMessage,\n  isThreadMessage,\n} from '../../utils';\nimport BottomSheet from '../BottomSheet';\nimport ImageRenderer from '../ImageRenderer';\nimport ReactionButton from '../ReactionButton';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\n\nconst EMOJI_SIZE = 38;\n\nconst MobileBottomSheet: React.FunctionComponent<MobileBottomSheetProps> = (props: MobileBottomSheetProps) => {\n  const {\n    hideMenu,\n    channel,\n    emojiContainer,\n    message,\n    replyType,\n    userId,\n    resendMessage,\n    deleteMessage,\n    toggleReaction,\n    isReactionEnabled,\n    showEdit,\n    showRemove,\n    deleteMenuState,\n    setQuoteMessage,\n    onReplyInThread,\n    isOpenedFromThread = false,\n  } = props;\n  const isByMe = message?.sender?.userId === userId;\n  const { stringSet } = useLocalization();\n  const globalStore = useSendbirdStateContext();\n  const {\n    isOnline,\n  } = globalStore.config;\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemEdit: boolean = (isUserMessage(message as UserMessage) && isSentMessage(message) && isByMe);\n  const showMenuItemResend: boolean = (isOnline && isFailedMessage(message) && message?.isResendable && isByMe);\n\n  const showMenuItemDelete: boolean = !isPendingMessage(message) && isByMe;\n  const showMenuItemDeleteByState = isByMe && (deleteMenuState === undefined || deleteMenuState !== 'HIDE');\n  const showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete;\n\n  const disableDelete = (\n    (deleteMenuState !== undefined && deleteMenuState === 'DISABLE')\n    || (message?.threadInfo?.replyCount ?? 0) > 0\n  );\n\n  const showMenuItemDownload: boolean = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);\n  const showReaction: boolean = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;\n  const showMenuItemReply: boolean = (replyType === 'QUOTE_REPLY')\n    && !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && (channel?.isGroupChannel() && !(channel as GroupChannel)?.isBroadcast);\n  const showMenuItemThread: boolean = (replyType === 'THREAD') && !isOpenedFromThread\n    && !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && !isThreadMessage(message)\n    && (channel?.isGroupChannel() && !(channel as GroupChannel)?.isBroadcast);\n  const disableReaction = message?.parentMessageId > 0;\n\n  const fileMessage = message as FileMessage;\n  const maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;\n  const [showEmojisOnly, setShowEmojisOnly] = useState<boolean>(false);\n  const emojis = getEmojiListAll(emojiContainer);\n  // calculate max emojis that can be shown in screen\n  const visibleEmojis = showEmojisOnly\n    ? emojis\n    : emojis?.slice(0, maxEmojisPerRow);\n  const canShowMoreEmojis = emojis.length > maxEmojisPerRow;\n  return (\n    <BottomSheet onBackdropClick={hideMenu}>\n      <div className='sendbird-message__bottomsheet'>\n        {\n          showReaction && (\n            <div className='sendbird-message__bottomsheet-reactions'>\n              <ul\n                className=\"sendbird-message__bottomsheet-reaction-bar\"\n              >\n                <div\n                  className={`\n                    sendbird-message__bottomsheet-reaction-bar__row\n                    ${showEmojisOnly ? 'sendbird-message__bottomsheet-reaction-bar__all' : ''}\n                  `}\n                >\n                  {visibleEmojis.map((emoji: Emoji): React.ReactElement => {\n                    const isReacted: boolean = message?.reactions\n                      ?.filter((reaction: Reaction): boolean => reaction.key === emoji.key)[0]\n                      ?.userIds\n                      ?.some((reactorId: string): boolean => reactorId === userId);\n                    return (\n                      <ReactionButton\n                        key={emoji.key}\n                        width={`${EMOJI_SIZE}px`}\n                        height={`${EMOJI_SIZE}px`}\n                        selected={isReacted}\n                        onClick={(): void => {\n                          hideMenu();\n                          toggleReaction(message, emoji.key, isReacted);\n                        }}\n                        dataSbId={`ui_mobile_emoji_reactions_menu_${emoji.key}`}\n                      >\n                        <ImageRenderer\n                          url={emoji?.url || ''}\n                          width=\"28px\"\n                          height=\"28px\"\n                          placeHolder={(style: Record<string, unknown>): ReactElement => (\n                            <div style={style}>\n                              <Icon\n                                type={IconTypes.QUESTION}\n                                fillColor={IconColors.ON_BACKGROUND_3}\n                                width=\"28px\"\n                                height=\"28px\"\n                              />\n                            </div>\n                          )}\n                        />\n                      </ReactionButton>\n                    );\n                  })}\n                  {\n                    canShowMoreEmojis && !showEmojisOnly && (\n                      <ReactionButton\n                        key=\"emoji_more\"\n                        width=\"38px\"\n                        height=\"38px\"\n                        onClick={(): void => {\n                          setShowEmojisOnly(true);\n                        }}\n                        dataSbId=\"ui_mobile_emoji_reactions_menu_emojiadd\"\n                      >\n                        <ImageRenderer\n                          url={''}\n                          width=\"28px\"\n                          height=\"28px\"\n                          placeHolder={(style: Record<string, unknown>): React.ReactElement => (\n                            <div style={style}>\n                              <Icon\n                                type={IconTypes.EMOJI_MORE}\n                                fillColor={IconColors.ON_BACKGROUND_3}\n                                width=\"28px\"\n                                height=\"28px\"\n                              />\n                            </div>\n                          )}\n                        />\n                      </ReactionButton>\n                    )\n                  }\n                </div>\n              </ul>\n            </div>\n          )\n        }\n        {\n          !showEmojisOnly && (\n            <div className='sendbird-message__bottomsheet--actions'>\n              {showMenuItemCopy && (\n                <div\n                  className='sendbird-message__bottomsheet--action'\n                  onClick={() => {\n                    hideMenu();\n                    copyToClipboard((message as UserMessage)?.message);\n                  }}\n                >\n                  <Icon\n                    type={IconTypes.COPY}\n                    fillColor={IconColors.PRIMARY}\n                    width=\"24px\"\n                    height=\"24px\"\n                  />\n                  <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                    {stringSet?.MESSAGE_MENU__COPY}\n                  </Label>\n                </div>\n              )}\n              {\n                showMenuItemEdit && (\n                  <div\n                    className='sendbird-message__bottomsheet--action'\n                    onClick={() => {\n                      hideMenu();\n                      showEdit(true);\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.EDIT}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet?.MESSAGE_MENU__EDIT}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                showMenuItemResend && (\n                  <div\n                    className='sendbird-message__bottomsheet--action'\n                    onClick={() => {\n                      hideMenu();\n                      resendMessage(message);\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.REFRESH}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet?.MESSAGE_MENU__RESEND}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                showMenuItemReply && (\n                  <div\n                    className={`sendbird-message__bottomsheet--action\n                      ${disableReaction ? 'sendbird-message__bottomsheet--action-disabled' : ''}\n                    `}\n                    role=\"menuitem\"\n                    aria-disabled={disableReaction ? true : false}\n                    onClick={() => {\n                      if (!disableReaction) {\n                        hideMenu();\n                        setQuoteMessage(message);\n                      }\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.REPLY}\n                      fillColor={disableReaction\n                        ? IconColors.ON_BACKGROUND_3\n                        : IconColors.PRIMARY\n                      }\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                    <Label\n                      type={LabelTypography.SUBTITLE_1}\n                      color={disableReaction ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1}\n                    >\n                      {stringSet?.MESSAGE_MENU__REPLY}\n                    </Label>\n                  </div>\n                )\n              }\n              {showMenuItemThread && (\n                <div\n                  className='sendbird-message__bottomsheet--action'\n                  onClick={() => {\n                    hideMenu();\n                    onReplyInThread?.({ message });\n                  }}\n                >\n                  <Icon\n                    type={IconTypes.THREAD}\n                    fillColor={IconColors.PRIMARY}\n                    width=\"24px\"\n                    height=\"24px\"\n                  />\n                  <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                    {stringSet.MESSAGE_MENU__THREAD}\n                  </Label>\n                </div>\n              )}\n              {\n                showMenuItemDeleteFinal && (\n                  <div\n                    className='sendbird-message__bottomsheet--action'\n                    onClick={() => {\n                      if (isFailedMessage(message)) {\n                        hideMenu();\n                        deleteMessage?.(message);\n                      } else if (!disableDelete) {\n                        hideMenu();\n                        showRemove?.(true);\n                      }\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.DELETE}\n                      fillColor={\n                        disableDelete\n                          ? IconColors.ON_BACKGROUND_4\n                          : IconColors.PRIMARY\n                      }\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                    <Label\n                      type={LabelTypography.SUBTITLE_1}\n                      color={\n                        disableDelete\n                          ? LabelColors.ONBACKGROUND_4\n                          : LabelColors.ONBACKGROUND_1\n                      }\n                    >\n                      {stringSet?.MESSAGE_MENU__DELETE}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                showMenuItemDownload && (\n                  <div\n                    className='sendbird-message__bottomsheet--action'\n                    onClick={() => {\n                      hideMenu();\n                    }}\n                  >\n                    <a\n                      className=\"sendbird-message__bottomsheet--hyperlink\"\n                      rel=\"noopener noreferrer\"\n                      href={fileMessage?.url}\n                      target=\"_blank\"\n                    >\n                      <Icon\n                        type={IconTypes.DOWNLOAD}\n                        fillColor={IconColors.PRIMARY}\n                        width=\"24px\"\n                        height=\"24px\"\n                      />\n                      <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                        {stringSet?.MESSAGE_MENU__SAVE}\n                      </Label>\n                    </a>\n                  </div>\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n    </BottomSheet>\n  );\n};\n\nexport default MobileBottomSheet;\n", "import './mobile-menu.scss';\n\nimport React from 'react';\nimport MobileContextMenu from './MobileContextMenu';\nimport MobileBottomSheet from './MobileBottomSheet';\nimport type { MobileBottomSheetProps } from './types';\n\nconst MobileMenu: React.FC<MobileBottomSheetProps> = (props: MobileBottomSheetProps) => {\n  const {\n    message,\n    hideMenu,\n    userId,\n    channel,\n    isReactionEnabled = false,\n    isByMe,\n    replyType,\n    disabled,\n    deleteMenuState,\n    showRemove,\n    showEdit,\n    resendMessage,\n    deleteMessage,\n    setQuoteMessage,\n    emojiContainer,\n    toggleReaction,\n    parentRef,\n    onReplyInThread,\n    isOpenedFromThread,\n  } = props;\n  return (\n    <>\n      {\n        isReactionEnabled\n          ? (\n            <MobileBottomSheet\n              channel={channel}\n              message={message}\n              hideMenu={hideMenu}\n              isByMe={isByMe}\n              userId={userId}\n              replyType={replyType}\n              disabled={disabled}\n              showRemove={showRemove}\n              showEdit={showEdit}\n              deleteMenuState={deleteMenuState}\n              resendMessage={resendMessage}\n              deleteMessage={deleteMessage}\n              setQuoteMessage={setQuoteMessage}\n              emojiContainer={emojiContainer}\n              toggleReaction={toggleReaction}\n              isReactionEnabled={isReactionEnabled}\n              onReplyInThread={onReplyInThread}\n              isOpenedFromThread={isOpenedFromThread}\n            />\n          ) : (\n            <MobileContextMenu\n              channel={channel}\n              userId={userId}\n              message={message}\n              hideMenu={hideMenu}\n              isByMe={isByMe}\n              showEdit={showEdit}\n              replyType={replyType}\n              disabled={disabled}\n              deleteMenuState={deleteMenuState}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              deleteMessage={deleteMessage}\n              setQuoteMessage={setQuoteMessage}\n              parentRef={parentRef}\n              onReplyInThread={onReplyInThread}\n              isOpenedFromThread={isOpenedFromThread}\n            />\n          )\n      }\n    </>\n  );\n};\n\nexport default MobileMenu;\n", "import React from 'react';\nimport { ThreadInfo } from '@sendbird/chat/message';\n\nimport './index.scss';\nimport Avatar from '../Avatar';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../../ui/Label';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport uuidv4 from '../../utils/uuid';\n\nexport interface ThreadRepliesProps {\n  className?: string;\n  threadInfo: ThreadInfo;\n  onClick?: (e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => void;\n}\n\nexport default function ThreadReplies({\n  className,\n  threadInfo,\n  onClick,\n}: ThreadRepliesProps): React.ReactElement {\n  const {\n    mostRepliedUsers = [],\n    replyCount,\n  } = threadInfo;\n  const { stringSet } = useLocalization();\n  return (\n    <div\n      className={`sendbird-ui-thread-replies ${className}`}\n      role=\"button\"\n      onClick={(e) => {\n        onClick(e);\n        e?.stopPropagation();\n      }}\n      onKeyDown={(e) => {\n        onClick(e);\n        e?.stopPropagation();\n      }}\n    >\n      <div className=\"sendbird-ui-thread-replies__user-profiles\">\n        {mostRepliedUsers.slice(0, 4).map((user) => {\n          return (\n            <Avatar\n              key={uuidv4()}\n              className=\"sendbird-ui-thread-replies__user-profiles__avatar\"\n              src={user?.profileUrl}\n              alt=\"user profile\"\n              width=\"20px\"\n              height=\"20px\"\n            />\n          );\n        })}\n        {mostRepliedUsers?.length >= 5 && (\n          <div className=\"sendbird-ui-thread-replies__user-profiles__avatar\">\n            <Avatar\n              className=\"sendbird-ui-thread-replies__user-profiles__avatar__image\"\n              src={mostRepliedUsers?.[4]?.profileUrl}\n              alt=\"user profile\"\n              width=\"20px\"\n              height=\"20px\"\n            />\n            <div className=\"sendbird-ui-thread-replies__user-profiles__avatar__cover\" />\n            <div className=\"sendbird-ui-thread-replies__user-profiles__avatar__plus\">\n              <Icon\n                type={IconTypes.PLUS}\n                fillColor={IconColors.WHITE}\n                width=\"16px\"\n                height=\"16px\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      <Label\n        className=\"sendbird-ui-thread-replies__reply-counts\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.PRIMARY}\n      >\n        {\n          replyCount === 1\n            ? `${replyCount} ${stringSet.CHANNEL__THREAD_REPLY}`\n            : `${replyCount > 99 ? stringSet.CHANNEL__THREAD_OVER_MAX : replyCount} ${stringSet.CHANNEL__THREAD_REPLIES}`\n        }\n      </Label>\n      <Icon\n        className=\"sendbird-ui-thread-replies__icon\"\n        type={IconTypes.CHEVRON_RIGHT}\n        fillColor={IconColors.PRIMARY}\n        width=\"16px\"\n        height=\"16px\"\n      />\n    </div>\n  );\n}\n", "import React, { useMemo } from 'react';\nimport './index.scss';\n\n/* eslint-disable no-redeclare */\nexport const ProgressBarColorTypes = {\n  PRIMARY: 'progress-bar-color--primary',\n  GRAY: 'progress-bar-color--gray',\n} as const;\nexport type ProgressBarColorTypes = typeof ProgressBarColorTypes[keyof typeof ProgressBarColorTypes];\n\nexport interface ProgressBarProps {\n  className?: string;\n  disabled?: boolean;\n  maxSize: number;\n  currentSize: number;\n  colorType?: ProgressBarColorTypes;\n}\n\nexport const ProgressBar = ({\n  className = '',\n  disabled = false,\n  maxSize,\n  currentSize = 0,\n  colorType = ProgressBarColorTypes.PRIMARY,\n}: ProgressBarProps): React.ReactElement => {\n  const width = useMemo(() => {\n    return `${currentSize / maxSize * 100}%`;\n  }, [currentSize, maxSize]);\n  return (\n    <div className={`sendbird-progress-bar ${className} ${colorType} ${disabled ? 'progress-bar--disabled' : ''}`}>\n      <div className=\"sendbird-progress-bar__fill\" style={{ width }} />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n", "export type GroupKey = string;\nexport const generateGroupKey = (channelUrl = '', key = ''): GroupKey => (`${channelUrl}-${key}`);\n", "import { useEffect, useState } from 'react';\nimport { useVoicePlayerContext } from '.';\nimport { VOICE_PLAYER_AUDIO_ID } from '../../utils/consts';\nimport { useVoiceRecorderContext } from '../VoiceRecorder';\n\nimport { AudioUnitDefaultValue, VoicePlayerStatusType } from './dux/initialState';\nimport { generateGroupKey } from './utils';\n\nexport interface UseVoicePlayerProps {\n  key: string;\n  channelUrl: string;\n  audioFile?: File;\n  audioFileUrl?: string;\n}\n\nexport interface UseVoicePlayerContext {\n  play: () => void;\n  pause: () => void;\n  stop: (text?: string) => void;\n  playbackTime: number;\n  duration: number;\n  playingStatus: VoicePlayerStatusType;\n}\n\nexport const useVoicePlayer = ({\n  key = '',\n  channelUrl = '',\n  audioFile = null,\n  audioFileUrl = '',\n}: UseVoicePlayerProps): UseVoicePlayerContext => {\n  const [groupKey] = useState<string>(generateGroupKey(channelUrl, key));\n  const {\n    play,\n    pause,\n    stop,\n    voicePlayerStore,\n  } = useVoicePlayerContext();\n  const { isRecordable } = useVoiceRecorderContext();\n  const currentAudioUnit = voicePlayerStore?.audioStorage?.[groupKey] || AudioUnitDefaultValue();\n\n  const playVoicePlayer = () => {\n    if (!isRecordable) {\n      play?.({\n        groupKey,\n        audioFile,\n        audioFileUrl,\n      });\n    }\n  };\n\n  const pauseVoicePlayer = () => {\n    pause?.(groupKey);\n  };\n\n  const stopVoicePlayer = (text = '') => {\n    stop?.(text);\n  };\n\n  useEffect(() => {\n    return () => {\n      if (audioFile || audioFileUrl) {\n        // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope\n        const voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n        (voiceAudioPlayerElement as HTMLAudioElement)?.pause?.();\n      }\n    };\n  }, []);\n\n  return ({\n    play: playVoicePlayer,\n    pause: pauseVoicePlayer,\n    stop: stopVoicePlayer,\n    playbackTime: currentAudioUnit.playbackTime * 1000,\n    duration: currentAudioUnit.duration * 1000,\n    // the unit of playbackTime and duration should be millisecond\n    playingStatus: currentAudioUnit.playingStatus,\n  });\n};\n", "import React from 'react';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\n\nexport interface PlaybackTimeProps {\n  className?: string;\n  time: number;// millisec\n  labelType?: string;\n  labelColor?: string;\n}\n\nexport const PlaybackTime = ({\n  className,\n  time = 0,\n  labelType = LabelTypography.CAPTION_2,\n  labelColor = LabelColors.ONCONTENT_1,\n}: PlaybackTimeProps): React.ReactElement => {\n  const naturalTime = time < 0 ? 0 : time;\n\n  const hour = Math.floor(naturalTime / 3600000);\n  const min = Math.floor(naturalTime % 3600000 / 60000);\n  const sec = Math.floor((naturalTime % 3600000 % 60000) / 1000);\n  return (\n    <div className={`sendbird-ui-play-time ${className}`}>\n      <Label\n        type={labelType}\n        color={labelColor}\n      >\n        {`${hour ? hour + ':' : ''}${min < 10 ? '0' : ''}${min ? min : '0'}:${sec < 10 ? '0' : ''}${sec}`}\n      </Label>\n    </div>\n  );\n};\n\nexport default PlaybackTime;\n", "import React, { useEffect, useMemo, useState } from 'react';\nimport { FileMessage } from '@sendbird/chat/message';\n\nimport './index.scss';\n\nimport ProgressBar, { ProgressBarColorTypes } from '../ProgressBar';\nimport { useVoicePlayer } from '../../hooks/VoicePlayer/useVoicePlayer';\nimport PlaybackTime from '../PlaybackTime';\nimport Loader from '../Loader';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport { LabelTypography, LabelColors } from '../Label';\nimport { VOICE_PLAYER_STATUS } from '../../hooks/VoicePlayer/dux/initialState';\n\nexport interface VoiceMessageItemBodyProps {\n  className?: string;\n  message: FileMessage;\n  channelUrl: string;\n  isByMe?: boolean;\n  isReactionEnabled?: boolean;\n}\n\nexport const VoiceMessageItemBody = ({\n  className,\n  message,\n  channelUrl,\n  isByMe = false,\n  isReactionEnabled = false,\n}: VoiceMessageItemBodyProps): React.ReactElement => {\n  const [usingReaction, setUsingReaction] = useState(false);\n  const {\n    play,\n    // do not pause on unmount, because on desktop layout\n    // the component can be paused when it is played from\n    // channel and same message is unmounted from the thread\n    pause,\n    playbackTime = 0,\n    duration,\n    playingStatus = VOICE_PLAYER_STATUS.IDLE,\n  } = useVoicePlayer({\n    channelUrl,\n    key: `${message?.messageId}`,\n    audioFileUrl: message?.url,\n  });\n\n  useEffect(() => {\n    if (isReactionEnabled && message?.reactions?.length > 0) {\n      setUsingReaction(true);\n    } else {\n      setUsingReaction(false);\n    }\n  }, [isReactionEnabled, message?.reactions?.length]);\n  const progresBarMaxSize = useMemo(() => {\n    if (message?.metaArrays) {\n      const duration = message?.metaArrays.find((metaArray) => metaArray.key === 'KEY_VOICE_MESSAGE_DURATION')?.value[0];\n      return duration && parseInt(duration);\n    }\n    return 1;\n  }, [message?.metaArrays]);\n\n  return (\n    <div className={`sendbird-voice-message-item-body ${className} ${usingReaction ? 'is-reactions-contained' : ''}`}>\n      <ProgressBar\n        className=\"sendbird-voice-message-item-body__progress-bar\"\n        maxSize={duration || progresBarMaxSize}\n        currentSize={playbackTime}\n        colorType={isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY}\n      />\n      <div className=\"sendbird-voice-message-item-body__status-button\">\n        {(playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && (\n          <div\n            className=\"sendbird-voice-message-item-body__status-button__button\"\n            onClick={play}\n          >\n            <Icon\n              width=\"18px\"\n              height=\"18px\"\n              type={IconTypes.PLAY}\n              fillColor={IconColors.PRIMARY}\n            />\n          </div>\n        )}\n        {playingStatus === VOICE_PLAYER_STATUS.PREPARING && (\n          <Loader width=\"22.2px\" height=\"22.2px\">\n            <Icon\n              width=\"22.2px\"\n              height=\"22.2px\"\n              type={IconTypes.SPINNER}\n              fillColor={IconColors.PRIMARY_2}\n            />\n          </Loader>\n        )}\n        {playingStatus === VOICE_PLAYER_STATUS.PLAYING && (\n          <div\n            className=\"sendbird-voice-message-item-body__status-button__button\"\n            onClick={() => { pause(); }}\n          >\n            <div className=\"sendbird-voice-message-item-body__status-button__button__pause\">\n              <div className=\"sendbird-voice-message-item-body__status-button__button__pause__inner\" />\n              <div className=\"sendbird-voice-message-item-body__status-button__button__pause__inner\" />\n            </div>\n          </div>\n        )}\n      </div>\n      <PlaybackTime\n        className=\"sendbird-voice-message-item-body__playback-time\"\n        time={progresBarMaxSize - playbackTime}\n        labelType={LabelTypography.BODY_1}\n        labelColor={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      />\n    </div>\n  );\n};\n\nexport default VoiceMessageItemBody;\n", "// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n\n// TODO: refactor this to -> as const pattern\nexport type SupportedImageMimesType = 'image/jpeg' | 'image/jpg' | 'image/png' | 'image/gif' | 'image/svg+xml' | 'image/webp';\nexport type SupportedVideoMimesType = 'video/mpeg' | 'video/ogg' | 'video/webm' | 'video/mp4';\nexport type SupportedMimesType = SupportedImageMimesType | SupportedVideoMimesType;\n\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp',\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const isImage = (type: SupportedImageMimesType): boolean => SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\nexport const isVideo = (type: SupportedVideoMimesType): boolean => SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\nexport const isGif = (type: SupportedMimesType): boolean => type === 'image/gif';\nexport const unSupported = (type: SupportedMimesType): boolean => (\n  !(\n    isImage(type as SupportedImageMimesType)\n    || isVideo(type as SupportedVideoMimesType)\n  )\n);\n\nexport default { ...SUPPORTED_MIMES };\n\nexport const ViewerTypes = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI',\n} as const;\n\nexport type ViewerType = keyof typeof ViewerTypes;\n\nexport interface SenderInfo {\n  profileUrl: string;\n  nickname: string;\n}\nexport interface FileInfo {\n  name: string;\n  type: string;\n  url: string;\n}\n\nexport interface BaseViewer {\n  onClose: (e: React.MouseEvent) => void;\n}\n\nexport interface SingleFileViewer extends SenderInfo, FileInfo, BaseViewer {\n  viewerType?: typeof ViewerTypes.SINGLE;\n  isByMe?: boolean;\n  disableDelete?: boolean;\n  onDelete: (e: React.MouseEvent) => void;\n}\n\nexport interface MultiFilesViewer extends SenderInfo, BaseViewer {\n  viewerType: typeof ViewerTypes.MULTI;\n  fileInfoList: FileInfo[];\n  currentIndex: number;\n  onClickLeft: () => void;\n  onClickRight: () => void;\n}\n\nexport type FileViewerComponentProps = SingleFileViewer | MultiFilesViewer;\n", "import { useCallback, useLayoutEffect } from 'react';\nimport { noop } from '../../../utils/utils';\nimport { FileViewerComponentProps, ViewerTypes } from '../types';\n\nexport function useKeyDown({ props, ref }: {\n  props: FileViewerComponentProps,\n  ref: React.RefObject<HTMLDivElement>;\n}): {\n  onKeyDown: React.KeyboardEventHandler<HTMLDivElement>;\n} {\n  const { onClose } = props;\n  let onClickLeft = noop;\n  let onClickRight = noop;\n  if (props.viewerType === ViewerTypes.MULTI) {\n    onClickLeft = props.onClickLeft;\n    onClickRight = props.onClickRight;\n  }\n\n  useLayoutEffect(() => {\n    ref.current?.focus();\n  }, [ref.current]);\n\n  // this usecallback is not super necessary\n  // discuss with others and remove it if it's not needed\n  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = useCallback((event) => {\n    switch (event.key) {\n      case 'Escape':\n        // @ts-ignore\n        onClose(event);\n        break;\n      case 'ArrowLeft':\n        onClickLeft();\n        break;\n      case 'ArrowRight':\n        onClickRight();\n        break;\n      default:\n        break;\n    }\n    event.stopPropagation();\n  }, [onClose, onClickLeft, onClickRight]);\n\n  return {\n    onKeyDown,\n  };\n}\n", "import { FileInfo, FileViewerComponentProps, MultiFilesViewer, SingleFileViewer, ViewerTypes } from './types';\n\nexport function mapFileViewerComponentProps({ props }: {\n  props: FileViewerComponentProps;\n}): FileInfo {\n  if (props.viewerType === ViewerTypes.MULTI) {\n    const { fileInfoList, currentIndex } = props as MultiFilesViewer;\n    return fileInfoList[currentIndex];\n  }\n  const fileInfo: FileInfo = props as SingleFileViewer;\n  return {\n    name: fileInfo.name,\n    type: fileInfo.type,\n    url: fileInfo.url,\n  };\n}\n", "import React from 'react';\nimport { FileViewerComponentProps, ViewerTypes } from './types';\nimport Icon, { IconColors, IconTypes } from '../Icon';\n\nexport function DeleteButton(props: FileViewerComponentProps & { className?: string }): React.ReactElement {\n  if (props.viewerType !== ViewerTypes.MULTI) {\n    const { onDelete, isByMe, disableDelete, className } = props;\n    return (isByMe)\n      ? (\n        <div className={`sendbird-fileviewer__header__right__actions__delete ${className}`}>\n          <Icon\n            className={disableDelete ? 'disabled' : ''}\n            type={IconTypes.DELETE}\n            fillColor={disableDelete ? IconColors.GRAY : IconColors.ON_BACKGROUND_1}\n            height=\"24px\"\n            width=\"24px\"\n            onClick={(e) => { if (!disableDelete) { onDelete?.(e); } }}\n          />\n        </div>\n      )\n      : <></>;\n  }\n  return <></>;\n}\n", "import React from 'react';\nimport { FileViewerComponentProps, ViewerTypes } from './types';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport { SLIDER_BUTTON_ICON_SIDE_LENGTH } from '../../utils/consts';\n\n// this is a slider component that is used to navigate between images\nexport function Slider(props: FileViewerComponentProps): React.ReactElement {\n  if (props.viewerType === ViewerTypes.MULTI) {\n    const { onClickLeft, onClickRight } = props;\n    return (\n      <div className=\"sendbird-file-viewer-slider\">\n        <div className=\"sendbird-file-viewer-arrow--left\">\n          <Icon\n            type={IconTypes.SLIDE_LEFT}\n            fillColor={IconColors.ON_BACKGROUND_1}\n            height={SLIDER_BUTTON_ICON_SIDE_LENGTH}\n            width={SLIDER_BUTTON_ICON_SIDE_LENGTH}\n            onClick={(e) => {\n              onClickLeft?.();\n              e.stopPropagation();\n            }}\n          />\n        </div>\n        <div className=\"sendbird-file-viewer-arrow--right\">\n          <Icon\n            type={IconTypes.SLIDE_LEFT}\n            fillColor={IconColors.ON_BACKGROUND_1}\n            height={SLIDER_BUTTON_ICON_SIDE_LENGTH}\n            width={SLIDER_BUTTON_ICON_SIDE_LENGTH}\n            onClick={(e) => {\n              e.stopPropagation();\n              onClickRight?.();\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n  // return empty fragment if viewerType is not ViewerTypes.MULTI\n  return <></>;\n}\n", "import './index.scss';\n\nimport React, { MouseEvent, ReactElement, useContext, useRef } from 'react';\nimport { FileMessage, MultipleFilesMessage } from '@sendbird/chat/message';\nimport { createPortal } from 'react-dom';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { MODAL_ROOT } from '../../hooks/useModal';\nimport { isFileMessage, isImage, isMultipleFilesMessage, isSupportedFileView, isVideo } from '../../utils';\nimport { noop } from '../../utils/utils';\nimport Avatar from '../Avatar/index';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport { FileInfo, FileViewerComponentProps, ViewerTypes } from './types';\nimport { useKeyDown } from './hooks/useKeyDown';\nimport { mapFileViewerComponentProps } from './utils';\nimport { DeleteButton } from './DeleteButton';\nimport { Slider } from './Slider';\nimport { StatefulFileInfo } from '../../utils/createStatefulFileInfoList';\n\nexport const FileViewerComponent = (props: FileViewerComponentProps): ReactElement => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { profileUrl, nickname, onClose } = props;\n  const { onKeyDown } = useKeyDown({ props, ref });\n  const { name, type, url } = mapFileViewerComponentProps({ props });\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className=\"sendbird-fileviewer\"\n      onKeyDown={onKeyDown}\n      // to focus\n      tabIndex={1}\n      ref={ref}\n    >\n      <div className=\"sendbird-fileviewer__header\">\n        <div className=\"sendbird-fileviewer__header__left\">\n          <div className=\"sendbird-fileviewer__header__left__avatar\">\n            <Avatar height=\"32px\" width=\"32px\" src={profileUrl} />\n          </div>\n          <Label\n            className=\"sendbird-fileviewer__header__left__filename\"\n            type={LabelTypography.H_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {name}\n          </Label>\n          <Label\n            className=\"sendbird-fileviewer__header__left__sender-name\"\n            type={LabelTypography.BODY_1}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {nickname}\n          </Label>\n        </div>\n        <div\n          className=\"sendbird-fileviewer__header__right\"\n        >\n          {\n            isSupportedFileView(type) && (\n              <div className=\"sendbird-fileviewer__header__right__actions\" >\n                <a\n                  className=\"sendbird-fileviewer__header__right__actions__download\"\n                  rel=\"noopener noreferrer\"\n                  href={url}\n                  target=\"_blank\"\n                >\n                  <Icon\n                    type={IconTypes.DOWNLOAD}\n                    fillColor={IconColors.ON_BACKGROUND_1}\n                    height=\"24px\"\n                    width=\"24px\"\n                  />\n                </a>\n                <DeleteButton\n                  className='sendbird-fileviewer__header__right__actions__delete'\n                  {...props}\n                />\n              </div>\n            )\n          }\n          <div className=\"sendbird-fileviewer__header__right__actions__close\">\n            <Icon\n              type={IconTypes.CLOSE}\n              fillColor={IconColors.ON_BACKGROUND_1}\n              height=\"24px\"\n              width=\"24px\"\n              onClick={(e) => onClose?.(e)}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"sendbird-fileviewer__content\">\n        {isVideo(type) && (\n          <video\n            controls\n            className=\"sendbird-fileviewer__content__video\"\n          >\n            <source src={url} type={type} />\n          </video>\n        )}\n        {\n          isImage(type) && (\n            <img\n              src={url}\n              alt={name}\n              className={\n                props.viewerType === ViewerTypes.MULTI\n                  ? 'sendbird-fileviewer__content__img__multi'\n                  : 'sendbird-fileviewer__content__img'\n              }\n            />\n          )\n        }\n        {\n          !isSupportedFileView(type) && (\n            <div className=\"sendbird-fileviewer__content__unsupported\">\n              <Label type={LabelTypography.H_1} color={LabelColors.ONBACKGROUND_1}>\n                {stringSet?.UI__FILE_VIEWER__UNSUPPORT || 'Unsupported message'}\n              </Label>\n            </div>\n          )\n        }\n        <Slider {...props} />\n      </div>\n    </div>\n  );\n};\n\nexport interface FileViewerProps {\n  message?: FileMessage | MultipleFilesMessage;\n  statefulFileInfoList?: StatefulFileInfo[]\n  isByMe?: boolean;\n  currentIndex?: number;\n  onClose: (e: MouseEvent) => void;\n  onDelete?: (e: MouseEvent) => void;\n  onClickLeft?: () => void;\n  onClickRight?: () => void;\n}\n\nexport default function FileViewer({\n  message,\n  statefulFileInfoList = [],\n  onClose,\n  isByMe = false,\n  onDelete,\n  currentIndex,\n  onClickLeft,\n  onClickRight,\n}: FileViewerProps): ReactElement {\n  if (isMultipleFilesMessage(message)) {\n    const castedMessage = message as MultipleFilesMessage;\n    return (\n      <FileViewerComponent\n        profileUrl={castedMessage.sender.profileUrl}\n        nickname={castedMessage.sender.nickname}\n        viewerType={ViewerTypes.MULTI}\n        fileInfoList={\n          statefulFileInfoList.filter((fileInfo: StatefulFileInfo) => {\n            return fileInfo.url; // Caution: This assumes that defined url means file upload has completed.\n          }).map((fileInfo: StatefulFileInfo): FileInfo => {\n            return {\n              name: fileInfo.fileName || '',\n              type: fileInfo.mimeType || '',\n              url: fileInfo.url,\n            };\n          })\n        }\n        currentIndex={currentIndex || 0}\n        onClickLeft={onClickLeft || noop}\n        onClickRight={onClickRight || noop}\n        onClose={onClose}\n      />\n    );\n  } else if (isFileMessage(message)) {\n    const castedMessage = message as FileMessage;\n    return createPortal(\n      (\n        <FileViewerComponent\n          profileUrl={castedMessage.sender?.profileUrl}\n          nickname={castedMessage.sender?.nickname}\n          name={castedMessage.name}\n          type={castedMessage.type}\n          url={castedMessage?.url}\n          isByMe={isByMe}\n          disableDelete={(castedMessage.threadInfo?.replyCount || 0) > 0}\n          onClose={onClose}\n          onDelete={onDelete || noop}\n        />\n      ),\n      (document.getElementById(MODAL_ROOT) as HTMLElement),\n    );\n  }\n  return <></>;\n}\n", "import React, { ReactElement } from 'react';\nimport './index.scss';\nimport { getClassName } from '../../utils';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\n\ninterface ImageGridProps {\n  children: ReactElement[];\n  className?: string;\n  message: MultipleFilesMessage;\n  isReactionEnabled?: boolean;\n}\n\nexport default function ImageGrid({\n  children,\n  className,\n  message,\n  isReactionEnabled,\n}: ImageGridProps): ReactElement {\n  return (\n    <div className='sendbird-image-grid-wrap'>\n      <div className={getClassName([\n        className,\n        'sendbird-image-grid',\n        (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n      ])}>\n        { children }\n      </div>\n    </div>\n  );\n}\n", "const GRID_WIDTH_CHAT_WEB = 400;\nconst GRID_SIDE_PADDING = 8;\nconst GRID_GAP = 4;\nconst TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 54;\nconst PROFILE_IMAGE_WIDTH = 40;\n\nconst CHAT_MOBILE_SIDE_PADDING = 48;\n\nconst THREAD_PARENT_WIDTH = 320;\nconst THREAD_PARENT_SIDE_PADDING = 28;\nconst THREAD_PARENT_GRID_MARGIN_LEFT = 12;\n\nconst THREAD_CHILD_WIDTH = 200;\nconst THREAD_CHILD_SIDE_PADDING = 8;\nconst THREAD_CHILD_MOBILE_SIDE_PADDING = 32;\nconst THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 60;\n\nexport const MULTIPLE_FILES_IMAGE_SIDE_LENGTH = {\n  CHAT_WEB: `calc(${GRID_WIDTH_CHAT_WEB / 2}px - ${(GRID_SIDE_PADDING + GRID_GAP) / 2}px)`,\n  CHAT_MOBILE: `calc(50vw - ${(CHAT_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2}px)`,\n  THREAD_PARENT_WEB: `calc(${(THREAD_PARENT_WIDTH - (THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP)) / 2}px)`,\n  THREAD_PARENT_MOBILE: `calc(50vw - ${(THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP) / 2}px)`,\n  THREAD_CHILD_WEB: `calc(${(THREAD_CHILD_WIDTH - THREAD_CHILD_SIDE_PADDING - GRID_GAP) / 2}px)`,\n  THREAD_CHILD_MOBILE: `calc(50vw - ${(THREAD_CHILD_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2}px)`,\n};\nexport const MULTIPLE_FILES_IMAGE_BORDER_RADIUS = {\n  CHAT_WEB: '6px',\n  CHAT_MOBILE: '6px',\n  THREAD_PARENT_WEB: '6px',\n  THREAD_PARENT_MOBILE: '6px',\n  THREAD_CHILD_WEB: '6px',\n  THREAD_CHILD_MOBILE: '6px',\n};\nexport const MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH = '34px';\n", "import React, { ReactElement, useState } from 'react';\n\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport { MultipleFilesMessage, SendingStatus } from '@sendbird/chat/message';\nimport ImageRenderer, { getBorderRadiusForMultipleImageRenderer } from '../ImageRenderer';\nimport ImageGrid from '../ImageGrid';\nimport FileViewer from '../FileViewer';\nimport './index.scss';\nimport {\n  MULTIPLE_FILES_IMAGE_BORDER_RADIUS,\n  MULTIPLE_FILES_IMAGE_SIDE_LENGTH,\n  MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH,\n} from './const';\nimport { isGif } from '../../utils';\nimport { StatefulFileInfo } from '../../utils/createStatefulFileInfoList';\n\nexport const ThreadMessageKind = {\n  PARENT: 'parent',\n  CHILD: 'child',\n} as const;\n\nexport type ThreadMessageKindType = typeof ThreadMessageKind[keyof typeof ThreadMessageKind];\n\ninterface Props {\n  className?: string;\n  message: MultipleFilesMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isReactionEnabled?: boolean;\n  truncateLimit?: number;\n  threadMessageKindKey?: string;\n  statefulFileInfoList?: StatefulFileInfo[];\n}\n\nexport default function MultipleFilesMessageItemBody({\n  className,\n  message,\n  isReactionEnabled = false,\n  threadMessageKindKey,\n  statefulFileInfoList = [],\n}: Props): ReactElement {\n  const [currentFileViewerIndex, setCurrentFileViewerIndex] = useState(-1);\n\n  function onClose() {\n    setCurrentFileViewerIndex(-1);\n  }\n\n  function onClickLeft() {\n    setCurrentFileViewerIndex(\n      currentFileViewerIndex === 0\n        ? statefulFileInfoList.length - 1\n        : currentFileViewerIndex - 1,\n    );\n  }\n\n  function onClickRight() {\n    setCurrentFileViewerIndex(\n      currentFileViewerIndex === statefulFileInfoList.length - 1\n        ? 0\n        : currentFileViewerIndex + 1,\n    );\n  }\n\n  return threadMessageKindKey && (\n    <>\n      {\n        currentFileViewerIndex > -1 && (\n          <FileViewer\n            message={message}\n            statefulFileInfoList={statefulFileInfoList}\n            currentIndex={currentFileViewerIndex}\n            onClickLeft={onClickLeft}\n            onClickRight={onClickRight}\n            onClose={onClose}\n          />\n        )\n      }\n      <ImageGrid\n        className={className}\n        message={message}\n        isReactionEnabled={isReactionEnabled}\n      >\n        {\n          statefulFileInfoList.map((fileInfo: StatefulFileInfo, index: number) => {\n            const isGifValue = isGif(fileInfo.mimeType);\n            return <div\n              className='sendbird-multiple-files-image-renderer-wrapper'\n              onClick={\n                message.sendingStatus === SendingStatus.SUCCEEDED\n                  ? () => setCurrentFileViewerIndex(index)\n                  : undefined\n              }\n              key={`sendbird-multiple-files-image-renderer-${index}-${fileInfo.url}`}\n            >\n              <ImageRenderer\n                url={fileInfo.url}\n                fixedSize={false}\n                width={MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey]}\n                maxSideLength={MULTIPLE_FILES_IMAGE_SIDE_LENGTH.CHAT_WEB}\n                height={MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey]}\n                borderRadius={getBorderRadiusForMultipleImageRenderer(\n                  MULTIPLE_FILES_IMAGE_BORDER_RADIUS[threadMessageKindKey],\n                  index,\n                  statefulFileInfoList.length,\n                )}\n                shadeOnHover={true}\n                isUploaded={!!fileInfo.isUploaded}\n                placeHolder={\n                  (style_: Record<string, any>) => (\n                    <div\n                      className=\"sendbird-multiple-files-image-renderer__thumbnail__placeholder\"\n                      style={style_}\n                    >\n                      {\n                        isGifValue\n                          ? <div className=\"sendbird-multiple-files-image-renderer__thumbnail__placeholder__icon\">\n                            <Icon\n                              type={IconTypes.GIF}\n                              fillColor={IconColors.THUMBNAIL_ICON}\n                              width={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                              height={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                            />\n                          </div>\n                          : <Icon\n                            type={IconTypes.PHOTO}\n                            fillColor={IconColors.ON_BACKGROUND_2}\n                            width={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                            height={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                          />\n                      }\n                    </div>\n                  )\n                }\n                defaultComponent={\n                  <div className=\"sendbird-multiple-files-image-renderer__thumbnail__placeholder\">\n                    {\n                      <Icon\n                        type={IconTypes.THUMBNAIL_NONE}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                        height={MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH}\n                      />\n                    }\n                  </div>\n                }\n              />\n            </div>;\n          })\n        }\n      </ImageGrid>\n    </>\n  );\n}\n", "import { useMemo } from 'react';\nimport { ThreadMessageKind, ThreadMessageKindType } from '../../../../ui/MultipleFilesMessageItemBody';\nimport { match } from 'ts-pattern';\n\ninterface DynamicSideLengthProps {\n  threadMessageKind?: ThreadMessageKindType;\n  isMobile: boolean;\n}\n\nexport function useThreadMessageKindKeySelector({\n  threadMessageKind,\n  isMobile,\n}: DynamicSideLengthProps): string {\n  const threadMessageKindKey = useMemo(() => {\n    return match(threadMessageKind)\n      .with(ThreadMessageKind.PARENT, () => (isMobile\n        ? 'THREAD_PARENT_MOBILE'\n        : 'THREAD_PARENT_WEB'\n      ))\n      .with(ThreadMessageKind.CHILD, () => (isMobile\n        ? 'THREAD_CHILD_MOBILE'\n        : 'THREAD_CHILD_WEB'\n      ))\n      .otherwise(() => (isMobile\n        ? 'CHAT_MOBILE'\n        : 'CHAT_WEB'\n      ));\n  }, [isMobile, threadMessageKind]);\n  return threadMessageKindKey;\n}\n", "import { MultipleFilesMessage, SendingStatus, UploadableFileInfo, UploadedFileInfo } from '@sendbird/chat/message';\nimport { Thumbnail } from '@sendbird/chat/lib/__definition';\n\nexport type StatefulFileInfo = {\n  fileName?: string,\n  fileSize?: number,\n  mimeType?: string,\n  thumbnails?: Thumbnail[];\n  url?: string,\n  isUploaded?: boolean;\n};\n\nexport function createStatefulFileInfoList(message: MultipleFilesMessage, oldStatefulFileInfoList: StatefulFileInfo[]): StatefulFileInfo[] {\n  if (!message) return null;\n\n  // Handle sent messages.\n  if (message.sendingStatus === SendingStatus.SUCCEEDED) {\n    return message.fileInfoList.map((fileInfo: UploadedFileInfo) => {\n      return {\n        fileName: fileInfo.fileName,\n        fileSize: fileInfo.fileSize,\n        mimeType: fileInfo.mimeType,\n        thumbnails: fileInfo.thumbnails,\n        url: fileInfo.url,\n        isUploaded: true,\n      };\n    });\n  }\n  // Handle unsent message.\n  if (!Array.isArray(message.messageParams?.fileInfoList)) return null;\n  return message.messageParams.fileInfoList\n    .map((fileInfo: UploadableFileInfo, index: number): StatefulFileInfo => ({\n      fileName: fileInfo.fileName,\n      fileSize: fileInfo.fileSize,\n      mimeType: fileInfo.mimeType,\n      /**\n       * Note here, we prioritize using fileUrl (implying uploaded state) over file.\n       * This is necessary because cache loaded pending/failed mfms is mixed with\n       * files (not yet uploaded ones) and fileUrls (uploaded).\n       *\n       * Notice that if file is used in the old state, it will not be replace with the new fileUrl\n       * because doing so will rerender the ImageRenderer component which makes rendering process awkward and slow.\n       * */\n      url: oldStatefulFileInfoList[index]?.url ?? fileInfo.fileUrl ?? (\n        fileInfo.file instanceof Blob\n          ? URL.createObjectURL(fileInfo.file)\n          : undefined\n      ),\n      /**\n       * Side note: It was a bad design to not include this property by SDK.\n       * Because if original object has fileUrl set and no file, then uploaded result remains\n       * the same so customer cannot know whether it has been uploaded or not.\n       */\n      isUploaded: !fileInfo.file && typeof fileInfo.fileUrl === 'string' && fileInfo.fileUrl.length > 0,\n    }));\n}\n", "import { useEffect, useState } from 'react';\nimport { MultipleFilesMessage, UploadableFileInfo } from '@sendbird/chat/message';\nimport { createStatefulFileInfoList, StatefulFileInfo } from '../../../../utils/createStatefulFileInfoList';\nimport { CoreMessageType, isMultipleFilesMessage } from '../../../../utils';\n\nexport const useStatefulFileInfoList = (message: CoreMessageType): StatefulFileInfo[] => {\n  const [statefulFileInfoList, setStatefulFileInfoList] = useState<StatefulFileInfo[]>([]);\n\n  useEffect(() => {\n    if (isMultipleFilesMessage(message)) {\n      const newStatefulFileInfoList: StatefulFileInfo[] = createStatefulFileInfoList(\n        message as MultipleFilesMessage,\n        statefulFileInfoList,\n      );\n      setStatefulFileInfoList(newStatefulFileInfoList);\n    }\n  }, [\n    // Sent message dependency.\n    (message as MultipleFilesMessage).fileInfoList?.length,\n    // Unsent message dependency.\n    /**\n     * Side note: It was a bad design to not include 'isUploaded' property by SDK.\n     * Because if original object has fileUrl set and no file, then uploaded result remains\n     * the same so customer cannot know whether it has been uploaded or not.\n     */\n    (message as MultipleFilesMessage).messageParams?.fileInfoList\n      ?.map((fileInfo: UploadableFileInfo) => fileInfo.fileUrl).join(','),\n  ]);\n  return statefulFileInfoList;\n};\n", "import React, {\n  ReactElement,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport UserProfile from '../UserProfile';\nimport MessageStatus from '../MessageStatus';\nimport MessageItemMenu from '../MessageItemMenu';\nimport MessageItemReactionMenu from '../MessageItemReactionMenu';\nimport ContextMenu, { MenuItems } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport EmojiReactions from '../EmojiReactions';\n\nimport ClientAdminMessage from '../AdminMessage';\nimport TextMessageItemBody from '../TextMessageItemBody';\nimport FileMessageItemBody from '../FileMessageItemBody';\nimport ThumbnailMessageItemBody from '../ThumbnailMessageItemBody';\nimport OGMessageItemBody from '../OGMessageItemBody';\nimport UnknownMessageItemBody from '../UnknownMessageItemBody';\nimport QuoteMessage from '../QuoteMessage';\n\nimport {\n  getClassName,\n  getUIKitMessageTypes,\n  getUIKitMessageType,\n  isTextMessage,\n  isOGMessage,\n  isThumbnailMessage,\n  getSenderName,\n  isVoiceMessage,\n  SendableMessageType,\n  CoreMessageType,\n  isMultipleFilesMessage,\n  isSendableMessage,\n} from '../../utils';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { AdminMessage, FileMessage, MultipleFilesMessage, UserMessage } from '@sendbird/chat/message';\nimport useLongPress from '../../hooks/useLongPress';\nimport MobileMenu from '../MobileMenu';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport ThreadReplies from '../ThreadReplies';\nimport { ThreadReplySelectType } from '../../modules/Channel/context/const';\nimport VoiceMessageItemBody from '../VoiceMessageItemBody';\nimport { Nullable, ReplyType } from '../../types';\nimport { noop } from '../../utils/utils';\nimport MultipleFilesMessageItemBody from '../MultipleFilesMessageItemBody';\nimport { useThreadMessageKindKeySelector } from '../../modules/Channel/context/hooks/useThreadMessageKindKeySelector';\nimport { useStatefulFileInfoList } from '../../modules/Channel/context/hooks/useStatefulFileInfoList';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  channel: Nullable<GroupChannel>;\n  message: CoreMessageType;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  isReactionEnabled?: boolean;\n  disableQuoteMessage?: boolean;\n  replyType?: ReplyType;\n  threadReplySelectType?: ThreadReplySelectType;\n  nicknamesMap?: Map<string, string>;\n  emojiContainer?: EmojiContainer;\n  scrollToMessage?: (createdAt: number, messageId: number) => void;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  showFileViewer?: (bool: boolean) => void;\n  resendMessage?: (message: SendableMessageType) => Promise<SendableMessageType>;\n  deleteMessage?: (message: CoreMessageType) => Promise<CoreMessageType>;\n  toggleReaction?: (message: SendableMessageType, reactionKey: string, isReacted: boolean) => void;\n  setQuoteMessage?: (message: SendableMessageType) => void;\n  onReplyInThread?: (props: { message: SendableMessageType }) => void;\n  onQuoteMessageClick?: (props: { message: SendableMessageType }) => void;\n  onMessageHeightChange?: () => void;\n}\nexport default function MessageContent({\n  className,\n  userId,\n  channel,\n  message,\n  disabled = false,\n  chainTop = false,\n  chainBottom = false,\n  isReactionEnabled = false,\n  disableQuoteMessage = false,\n  replyType,\n  threadReplySelectType,\n  nicknamesMap,\n  emojiContainer,\n  scrollToMessage,\n  showEdit,\n  showRemove,\n  showFileViewer,\n  resendMessage,\n  deleteMessage,\n  toggleReaction,\n  setQuoteMessage,\n  onReplyInThread,\n  onQuoteMessageClick,\n  onMessageHeightChange,\n}: Props): ReactElement {\n  const messageTypes = getUIKitMessageTypes();\n  const { dateLocale } = useLocalization();\n  const { config, eventHandlers } = useSendbirdStateContext?.() || {};\n  const onPressUserProfileHandler = eventHandlers?.reaction?.onPressUserProfile;\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const avatarRef = useRef(null);\n  const contentRef = useRef(null);\n  const { isMobile } = useMediaQueryContext();\n  const [showMenu, setShowMenu] = useState(false);\n  const [mouseHover, setMouseHover] = useState(false);\n  const [supposedHover, setSupposedHover] = useState(false);\n\n  const isByMe = (userId === (message as SendableMessageType)?.sender?.userId)\n    || ((message as SendableMessageType)?.sendingStatus === 'pending')\n    || ((message as SendableMessageType)?.sendingStatus === 'failed');\n  const isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  const chainTopClassName = chainTop ? 'chain-top' : '';\n  const isReactionEnabledInChannel = isReactionEnabled && !channel?.isEphemeral;\n  const isReactionEnabledClassName = isReactionEnabledInChannel ? 'use-reactions' : '';\n  const supposedHoverClassName = supposedHover ? 'sendbird-mouse-hover' : '';\n  const useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD')\n    && message?.parentMessageId && message?.parentMessage\n    && !disableQuoteMessage\n  );\n  const useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  const isOgMessageEnabledInGroupChannel = channel?.isGroupChannel() && config.groupChannel.enableOgtag;\n\n  // Thread replies\n  const displayThreadReplies = message?.threadInfo?.replyCount > 0 && replyType === 'THREAD';\n\n  // onMouseDown: (e: React.MouseEvent<T>) => void;\n  // onTouchStart: (e: React.TouchEvent<T>) => void;\n  // onMouseUp: (e: React.MouseEvent<T>) => void;\n  // onMouseLeave: (e: React.MouseEvent<T>) => void;\n  // onTouchEnd: (e: React.TouchEvent<T>) => void;\n  const longPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMenu(true);\n      }\n    },\n    onClick: noop,\n  }, {\n    delay: 300,\n    shouldPreventDefault: false,\n  });\n\n  const threadMessageKindKey = useThreadMessageKindKeySelector({\n    isMobile,\n  });\n  // For MultipleFilesMessage only.\n  const statefulFileInfoList = useStatefulFileInfoList(message);\n\n  if (message?.isAdminMessage?.() || message?.messageType === 'admin') {\n    return (<ClientAdminMessage message={message as AdminMessage} />);\n  }\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-content', isByMeClassName])}\n      onMouseOver={() => setMouseHover(true)}\n      onMouseLeave={() => setMouseHover(false)}\n    >\n      {/* left */}\n      <div className={getClassName(['sendbird-message-content__left', isReactionEnabledClassName, isByMeClassName, useReplyingClassName])}>\n        {(!isByMe && !chainBottom && isSendableMessage(message)) && (\n          /** user profile */\n          <ContextMenu\n            menuTrigger={(toggleDropdown: () => void): ReactElement => (\n              <Avatar\n                className={`sendbird-message-content__left__avatar ${displayThreadReplies ? 'use-thread-replies' : ''}`}\n                // @ts-ignore\n                src={channel?.members?.find((member) => member?.userId === message.sender.userId)?.profileUrl || message.sender.profileUrl || ''}\n                // TODO: Divide getting profileUrl logic to utils\n                ref={avatarRef}\n                width=\"28px\"\n                height=\"28px\"\n                onClick={(): void => { if (!disableUserProfile) toggleDropdown(); }}\n              />\n            )}\n            menuItems={(closeDropdown: () => void): ReactElement => (\n              <MenuItems\n                /**\n                * parentRef: For catching location(x, y) of MenuItems\n                * parentContainRef: For toggling more options(menus & reactions)\n                */\n                parentRef={avatarRef}\n                parentContainRef={avatarRef}\n                closeDropdown={closeDropdown}\n                style={{ paddingTop: '0px', paddingBottom: '0px' }}\n              >\n                {renderUserProfile\n                  ? renderUserProfile({ user: message.sender, close: closeDropdown, currentUserId: userId })\n                  : (<UserProfile user={message.sender} onSuccess={closeDropdown} />)\n                }\n              </MenuItems>\n            )}\n          />\n        )}\n        {/* outgoing menu */}\n        {isByMe && !isMobile && (\n          <div className={getClassName(['sendbird-message-content-menu', isReactionEnabledClassName, supposedHoverClassName, isByMeClassName])}>\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as SendableMessageType}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n              onReplyInThread={({ message }) => {\n                if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onReplyInThread({ message });\n                } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                  scrollToMessage(message.parentMessage?.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n            {isReactionEnabledInChannel && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as SendableMessageType}\n                userId={userId}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n          </div>\n        )}\n      </div>\n      {/* middle */}\n      <div\n        className={'sendbird-message-content__middle'}\n        {...(isMobile ? { ...longPress } : {})}\n        ref={contentRef}\n      >\n        {(!isByMe && !chainTop && !useReplying) && (\n          <Label\n            className=\"sendbird-message-content__middle__sender-name\"\n            type={LabelTypography.CAPTION_2}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {\n              // @ts-ignore\n              channel?.members?.find((member) => member?.userId === message?.sender?.userId)?.nickname\n              || getSenderName(message as SendableMessageType)\n              // TODO: Divide getting profileUrl logic to utils\n            }\n          </Label>\n        )}\n        {/* quote message */}\n        {(useReplying) ? (\n          <div className={getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])}>\n            <QuoteMessage\n              className=\"sendbird-message-content__middle__quote-message__quote\"\n              message={message as SendableMessageType}\n              userId={userId}\n              isByMe={isByMe}\n              isUnavailable={(channel?.messageOffsetTimestamp ?? 0) > (message.parentMessage?.createdAt ?? 0)}\n              onClick={() => {\n                if (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onQuoteMessageClick?.({ message: message as SendableMessageType });\n                }\n                if (\n                  (replyType === 'QUOTE_REPLY' || (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.PARENT))\n                  && message?.parentMessage?.createdAt && message?.parentMessageId\n                ) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        ) : null}\n        {/* container: message item body + emoji reactions */}\n        <div className={getClassName(['sendbird-message-content__middle__body-container'])} >\n          {/* message status component */}\n          {(isByMe && !chainBottom) && (\n            <div className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])}>\n              <div className=\"sendbird-message-content__middle__body-container__created-at__component-container\">\n                <MessageStatus\n                  message={message as SendableMessageType}\n                  channel={channel}\n                />\n              </div>\n            </div>\n          )}\n          {/* message item body components */}\n          {isOgMessageEnabledInGroupChannel && isOGMessage(message as UserMessage) ? (\n            <OGMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isMentionEnabled={config?.isMentionEnabled || false}\n              isReactionEnabled={isReactionEnabledInChannel}\n              onMessageHeightChange={onMessageHeightChange}\n            />\n          ) : isTextMessage(message as UserMessage) && (\n            <TextMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isMentionEnabled={config?.isMentionEnabled || false}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {(getUIKitMessageType((message as CoreMessageType)) === messageTypes.FILE) && (\n            <FileMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {isMultipleFilesMessage(message as CoreMessageType) && (\n            <MultipleFilesMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as MultipleFilesMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n              threadMessageKindKey={threadMessageKindKey}\n              statefulFileInfoList={statefulFileInfoList}\n            />\n          )}\n          {isVoiceMessage(message as FileMessage) && (\n            <VoiceMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              channelUrl={channel?.url ?? ''}\n              isByMe={isByMe}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {(isThumbnailMessage(message as FileMessage)) && (\n            <ThumbnailMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n              showFileViewer={showFileViewer}\n              style={isMobile ? { width: '100%' } : {}}\n            />\n          )}\n          {(getUIKitMessageType((message as CoreMessageType)) === messageTypes.UNKNOWN) && (\n            <UnknownMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {/* reactions */}\n          {(isReactionEnabledInChannel && message?.reactions?.length > 0) && (\n            <div className={getClassName([\n              'sendbird-message-content-reactions',\n              isMultipleFilesMessage(message as CoreMessageType)\n                ? 'image-grid'\n                : (!isByMe || isThumbnailMessage(message as FileMessage) || isOGMessage(message as UserMessage))\n                  ? '' : 'primary',\n              mouseHover ? 'mouse-hover' : '',\n            ])}>\n              <EmojiReactions\n                userId={userId}\n                message={message as SendableMessageType}\n                channel={channel}\n                isByMe={isByMe}\n                emojiContainer={emojiContainer}\n                memberNicknamesMap={nicknamesMap}\n                toggleReaction={toggleReaction}\n                onPressUserProfile={onPressUserProfileHandler}\n              />\n            </div>\n          )}\n          {(!isByMe && !chainBottom) && (\n            <Label\n              className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName])}\n              type={LabelTypography.CAPTION_3}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {format(message?.createdAt || 0, 'p', {\n                locale: dateLocale,\n              })}\n            </Label>\n          )}\n        </div>\n        {/* thread replies */}\n        {displayThreadReplies && (\n          <ThreadReplies\n            className=\"sendbird-message-content__middle__thread-replies\"\n            threadInfo={message?.threadInfo}\n            onClick={() => onReplyInThread?.({ message: message as SendableMessageType })}\n          />\n        )}\n      </div>\n      {/* right */}\n      <div className={getClassName(['sendbird-message-content__right', chainTopClassName, isReactionEnabledClassName, useReplyingClassName])}>\n        {/* incoming menu */}\n        {!isByMe && !isMobile && (\n          <div className={getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])}>\n            {isReactionEnabledInChannel && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as SendableMessageType}\n                userId={userId}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as SendableMessageType}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n              onReplyInThread={({ message }) => {\n                if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onReplyInThread({ message });\n                } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                  scrollToMessage(message.parentMessage?.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n      {\n        showMenu && (\n          message?.isUserMessage?.() || message?.isFileMessage?.() || message?.isMultipleFilesMessage?.()\n        ) && (\n          <MobileMenu\n            parentRef={contentRef}\n            channel={channel}\n            hideMenu={() => { setShowMenu(false); }}\n            message={message}\n            isReactionEnabled={isReactionEnabledInChannel}\n            isByMe={isByMe}\n            userId={userId}\n            replyType={replyType}\n            disabled={disabled}\n            showRemove={showRemove}\n            emojiContainer={emojiContainer}\n            resendMessage={resendMessage}\n            deleteMessage={deleteMessage}\n            setQuoteMessage={setQuoteMessage}\n            toggleReaction={toggleReaction}\n            showEdit={showEdit}\n            onReplyInThread={({ message }) => {\n              if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                onReplyInThread?.({ message });\n              } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                scrollToMessage?.(message?.parentMessage?.createdAt || 0, message?.parentMessageId || 0);\n              }\n            }}\n          />\n        )\n      }\n    </div>\n  );\n}\n", "import React from 'react';\nimport { createPortal } from 'react-dom';\nimport type { FileMessage } from '@sendbird/chat/message';\n\nimport './file-viewer.scss';\nimport Avatar from '../../../../ui/Avatar';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconColors, IconTypes } from '../../../../ui/Icon';\nimport { MODAL_ROOT } from '../../../../hooks/useModal';\n\nimport { isImage, isVideo, isSupportedFileView } from '../../../../utils';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport { EveryMessage } from '../../../../types';\n\ntype FileViewerUIProps = {\n  profileUrl: string;\n  nickname: string;\n  // file\n  name: string;\n  type: string;\n  url: string;\n  // others\n  isByMe: boolean;\n  onCancel: () => void;\n  onDelete: () => void;\n  disableDelete: boolean;\n};\n\nexport const FileViewerComponent: React.FC<FileViewerUIProps> = ({\n  // sender\n  profileUrl,\n  nickname,\n  // file\n  name,\n  type,\n  url,\n  // others\n  isByMe,\n  onCancel,\n  onDelete,\n  disableDelete,\n}: FileViewerUIProps) => (\n  <div className=\"sendbird-fileviewer\">\n    <div className=\"sendbird-fileviewer__header\">\n      <div className=\"sendbird-fileviewer__header__left\">\n        <div className=\"sendbird-fileviewer__header__left__avatar\">\n          <Avatar height=\"32px\" width=\"32px\" src={profileUrl} />\n        </div>\n        <Label\n          className=\"sendbird-fileviewer__header__left__filename\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {name}\n        </Label>\n        <Label\n          className=\"sendbird-fileviewer__header__left__sender-name\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {nickname}\n        </Label>\n      </div>\n      <div className=\"sendbird-fileviewer__header__right\">\n        {\n          isSupportedFileView(type) && (\n            <div className=\"sendbird-fileviewer__header__right__actions\">\n              <a\n                className=\"sendbird-fileviewer__header__right__actions__download\"\n                rel=\"noopener noreferrer\"\n                href={url}\n                target=\"_blank\"\n              >\n                <Icon\n                  type={IconTypes.DOWNLOAD}\n                  fillColor={IconColors.ON_BACKGROUND_1}\n                  height=\"24px\"\n                  width=\"24px\"\n                />\n              </a>\n              {\n                onDelete && isByMe && (\n                  <div className=\"sendbird-fileviewer__header__right__actions__delete\">\n                    <Icon\n                      className={disableDelete ? 'disabled' : ''}\n                      type={IconTypes.DELETE}\n                      fillColor={disableDelete ? IconColors.GRAY : IconColors.ON_BACKGROUND_1}\n                      height=\"24px\"\n                      width=\"24px\"\n                      onClick={() => { if (!disableDelete) { onDelete(); } }}\n                    />\n                  </div>\n                )\n              }\n            </div>\n          )\n        }\n        <div className=\"sendbird-fileviewer__header__right__actions__close\">\n          <Icon\n            type={IconTypes.CLOSE}\n            fillColor={IconColors.ON_BACKGROUND_1}\n            height=\"24px\"\n            width=\"24px\"\n            onClick={onCancel}\n          />\n        </div>\n      </div>\n    </div>\n    <div className=\"sendbird-fileviewer__content\">\n      {isVideo(type) && (\n        <video controls className=\"sendbird-fileviewer__content__video\">\n          <source src={url} type={type} />\n        </video>\n      )}\n      {\n        isImage(type) && (\n          <img\n            src={url}\n            alt={name}\n            className=\"sendbird-fileviewer__content__img\"\n          />\n        )\n      }\n      {\n        !isSupportedFileView(type) && (\n          <div className=\"sendbird-fileviewer__content__unsupported\">\n            <Label type={LabelTypography.H_1} color={LabelColors.ONBACKGROUND_1}>\n              Unsupoprted message\n            </Label>\n          </div>\n        )\n      }\n    </div>\n  </div>\n);\n\ntype FileViewerProps = {\n  onCancel:() => void;\n  message: FileMessage;\n};\n\nconst FileViewer: React.FC<FileViewerProps> = ({ onCancel, message }: FileViewerProps) => {\n  const { deleteMessage } = useChannelContext();\n  const {\n    sender,\n    type,\n    url,\n    name = '',\n    threadInfo,\n  } = message;\n  const user = useSendbirdStateContext()?.config?.userId;\n  const isByMe = user === message?.sender?.userId;\n  const disableDelete = threadInfo?.replyCount > 0;\n  const { profileUrl, nickname = '' } = sender;\n  return createPortal(\n    (\n      <FileViewerComponent\n        profileUrl={profileUrl}\n        nickname={nickname}\n        type={type}\n        url={url}\n        name={name}\n        onCancel={onCancel}\n        onDelete={() => {\n          deleteMessage(message as EveryMessage).then(() => {\n            onCancel();\n          });\n        }}\n        isByMe={isByMe}\n        disableDelete={disableDelete}\n      />\n    ),\n    document.getElementById(MODAL_ROOT),\n  );\n};\n\nexport default FileViewer;\n", "import { CoreMessageType, isMultipleFilesMessage } from '../../utils';\nimport { match } from 'ts-pattern';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\n\nexport function getModalDeleteMessageTitle(stringSet: Record<string, string>, message: CoreMessageType): string {\n  return match(message)\n    .when(isMultipleFilesMessage, () => {\n      const filesCount: number = (message as MultipleFilesMessage).fileInfoList.length;\n      return `Do you want to delete all ${filesCount} photos?`;\n    })\n    .otherwise(() => {\n      return stringSet.MODAL__DELETE_MESSAGE__TITLE;\n    });\n}\n", "import React, { useContext } from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport { ButtonTypes } from '../../../ui/Button';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { useChannelContext } from '../context/ChannelProvider';\nimport { EveryMessage } from '../../../types';\nimport { getModalDeleteMessageTitle } from '../../../ui/Label/stringFormatterUtils';\n\nexport interface RemoveMessageProps {\n  onSubmit?: () => void;\n  onCancel: () => void;\n  message: EveryMessage;\n}\n\nconst RemoveMessage: React.FC<RemoveMessageProps> = (props: RemoveMessageProps) => {\n  const {\n    onSubmit = () => { /* noop */ },\n    onCancel,\n    message,\n  } = props;\n  const { stringSet } = useContext(LocalizationContext);\n  const {\n    deleteMessage,\n  } = useChannelContext();\n  return (\n    <Modal\n      type={ButtonTypes.DANGER}\n      disabled={message?.threadInfo?.replyCount > 0}\n      onCancel={onCancel}\n      onSubmit={() => {\n        deleteMessage(message).then(() => {\n          // For other status such as PENDING, SCHEDULED, and CANCELED,\n          // invalid parameters error is thrown so nothing happens.\n          onSubmit();\n          onCancel();\n        });\n      }}\n      submitText={stringSet.MESSAGE_MENU__DELETE}\n      titleText={getModalDeleteMessageTitle(stringSet, message)}\n    />\n  );\n};\n\nexport default RemoveMessage;\n", "import { useEffect, useRef } from 'react';\n\nexport function useDebounce<T extends(...args: any[]) => void>(callback: T, delay: number): T {\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  useEffect(() => {\n    // Cleanup the timeout on unmount\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  function debounceFunction(...args: Parameters<T>) {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  }\n\n  return debounceFunction as T;\n}\n", "import React, { useCallback } from 'react';\nimport { SCROLL_BUFFER } from '../../utils/consts';\nimport { useDebounce } from '../useDebounce';\n\nconst DELAY = 500;\n\nexport interface UseHandleOnScrollCallbackProps {\n  hasMore: boolean;\n  hasNext?: boolean;\n  onScroll(callback: () => void): void;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setShowScrollDownButton?: React.Dispatch<React.SetStateAction<boolean>>;\n  setIsScrolled?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport function calcScrollBottom(scrollHeight: number, scrollTop: number): number {\n  return scrollHeight - scrollTop;\n}\n\nexport function useHandleOnScrollCallback({\n  hasMore,\n  hasNext,\n  onScroll,\n  scrollRef,\n  setShowScrollDownButton,\n}: UseHandleOnScrollCallbackProps): () => void {\n  const scrollCb = useCallback(() => {\n    const element = scrollRef?.current;\n    if (element == null) {\n      return;\n    }\n\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = element;\n    // https://sendbird.atlassian.net/browse/SBISSUE-11759\n    // the edge case where channel is inside a page that already has scroll\n    // scrollintoView will move the whole page, which we dont want\n    const scrollBottom = calcScrollBottom(scrollHeight, scrollTop);\n    // even if there is more to fetch or not,\n    // we still have to show the scroll to bottom button\n    if (typeof setShowScrollDownButton === 'function') {\n      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);\n    }\n    if (hasMore && scrollTop < SCROLL_BUFFER) {\n      onScroll(() => {\n        // sets the scroll position to the bottom of the new messages\n        element.scrollTop = element.scrollHeight - scrollBottom;\n      });\n    }\n    if (hasNext) {\n      onScroll(() => {\n        // sets the scroll position to the top of the new messages\n        element.scrollTop = scrollTop - (scrollHeight - element.scrollHeight);\n      });\n    }\n  }, [\n    setShowScrollDownButton,\n    hasMore,\n    onScroll,\n    scrollRef,\n  ]);\n\n  return useDebounce(scrollCb, DELAY);\n}\n", "export function getMentionNodes(root: HTMLElement): Element[] {\n  if (root) {\n    const mentions = root.querySelectorAll('[data-sb-mention=\\'true\\']');\n    const mentionsArray = Array.from(mentions);\n    return mentionsArray;\n  }\n  return [];\n}\n", "import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { Logger } from '../../../lib/SendbirdState';\nimport { getMentionNodes } from '../utils/getMentionNodes';\n\ninterface DynamicParams {\n  ref: React.RefObject<HTMLElement>;\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\n/**\n * exported, should be backwords compatible\n * This is a dirty way to get the mentions given DOM node\n */\nexport function useDirtyGetMentions({\n  ref,\n}: DynamicParams, {\n  logger,\n}: StaticParams): Element[] {\n  // Select the node that will be observed for mutations\n  const targetNode = ref.current as HTMLElement;\n  const [mentionNodes, setMentionNodes] = useState<Element[]>([]);\n\n  // to get the initial mentions\n  useLayoutEffect(() => {\n    if (targetNode) {\n      const mentions = getMentionNodes(targetNode);\n      setMentionNodes(mentions);\n    }\n  }, [targetNode]);\n\n  useEffect(() => {\n    // Options for the observer (which mutations to observe)\n    const config = { childList: true, subtree: true };\n\n    // Callback function to execute when mutations are observed\n    const callback = (mutationList: MutationRecord[]): void => {\n      const hasMutation = mutationList.length > 0;\n      if (hasMutation) {\n        setMentionNodes(getMentionNodes(targetNode));\n      }\n    };\n\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n\n    if (targetNode) {\n      // Start observing the target node for configured mutations\n      observer.observe(targetNode, config);\n      logger.info('useDirtyGetMentions: observer started', { observer, config });\n    }\n\n    return () => {\n      try {\n        observer.disconnect();\n        logger.info('useDirtyGetMentions: observer disconnected', { observer });\n      } catch (error) {\n        logger.error('useDirtyGetMentions: observer disconnect failed', { observer });\n      }\n    };\n  }, [targetNode]);\n  return mentionNodes;\n}\n", "import { useEffect, useState } from 'react';\n\nconst useDidMountEffect = (func: () => void, deps: Array<unknown>): void => {\n  const [didMount, setDidmount] = useState(false);\n  useEffect(() => {\n    if (didMount) {\n      func();\n    } else {\n      setDidmount(true);\n    }\n  }, deps);\n};\n\nexport default useDidMountEffect;\n", "import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useLayoutEffect,\n} from 'react';\nimport type { FileMessage } from '@sendbird/chat/message';\nimport format from 'date-fns/format';\n\nimport useDidMountEffect from '../../../../utils/useDidMountEffect';\nimport SuggestedMentionList from '../SuggestedMentionList';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport { getClassName } from '../../../../utils';\nimport { isDisabledBecauseFrozen, isDisabledBecauseMuted } from '../../context/utils';\nimport { MAX_USER_MENTION_COUNT, MAX_USER_SUGGESTION_COUNT } from '../../context/const';\n\nimport DateSeparator from '../../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport MessageInput from '../../../../ui/MessageInput';\nimport MessageContent from '../../../../ui/MessageContent';\nimport FileViewer from '../FileViewer';\nimport RemoveMessageModal from '../RemoveMessageModal';\nimport { MessageInputKeys } from '../../../../ui/MessageInput/const';\nimport { EveryMessage, RenderCustomSeparatorProps, RenderMessageProps } from '../../../../types';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { useHandleOnScrollCallback } from '../../../../hooks/useHandleOnScrollCallback';\nimport { useDirtyGetMentions } from '../../../Message/hooks/useDirtyGetMentions';\n\ntype MessageUIProps = {\n  message: EveryMessage;\n  hasSeparator?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  handleScroll?: (isBottomMessageAffected?: boolean) => void;\n  // for extending\n  renderMessage?: (props: RenderMessageProps) => React.ReactElement;\n  renderCustomSeparator?: (props: RenderCustomSeparatorProps) => React.ReactElement;\n  renderEditInput?: () => React.ReactElement;\n  renderMessageContent?: () => React.ReactElement;\n};\n\n// todo: Refactor this component, is too complex now\nconst Message = ({\n  message,\n  hasSeparator,\n  chainTop,\n  chainBottom,\n  handleScroll,\n  renderCustomSeparator,\n  renderEditInput,\n  renderMessage,\n  renderMessageContent,\n}: MessageUIProps): React.ReactElement => {\n  const { dateLocale } = useLocalization();\n  const globalStore = useSendbirdStateContext();\n\n  const {\n    userId,\n    isOnline,\n    isMentionEnabled,\n    userMention,\n    logger,\n  } = globalStore.config;\n  const maxUserMentionCount = userMention?.maxMentionCount || MAX_USER_MENTION_COUNT;\n  const maxUserSuggestionCount = userMention?.maxSuggestionCount || MAX_USER_SUGGESTION_COUNT;\n\n  const {\n    initialized,\n    currentGroupChannel,\n    highLightedMessageId,\n    setHighLightedMessageId,\n    animatedMessageId,\n    setAnimatedMessageId,\n    updateMessage,\n    scrollToMessage,\n    replyType,\n    threadReplySelectType,\n    isReactionEnabled,\n    toggleReaction,\n    emojiContainer,\n    nicknamesMap,\n    setQuoteMessage,\n    resendMessage,\n    deleteMessage,\n    renderUserMentionItem,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageAnimated,\n    onMessageHighlighted,\n    onScrollCallback,\n    setIsScrolled,\n  } = useChannelContext();\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isHighlighted, setIsHighlighted] = useState(false);\n  const [mentionNickname, setMentionNickname] = useState('');\n  const [mentionedUsers, setMentionedUsers] = useState([]);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [messageInputEvent, setMessageInputEvent] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [mentionSuggestedUsers, setMentionSuggestedUsers] = useState([]);\n  const editMessageInputRef = useRef(null);\n  const messageScrollRef = useRef(null);\n  const displaySuggestedMentionList = isOnline\n    && isMentionEnabled\n    && mentionNickname.length > 0\n    && !isDisabledBecauseFrozen(currentGroupChannel)\n    && !isDisabledBecauseMuted(currentGroupChannel);\n  const disabled = !initialized\n    || isDisabledBecauseFrozen(currentGroupChannel)\n    || isDisabledBecauseMuted(currentGroupChannel)\n    || !isOnline;\n\n  const handleOnScroll = useHandleOnScrollCallback({\n    hasMore: false,\n    onScroll: onScrollCallback,\n    scrollRef: messageScrollRef,\n    setIsScrolled,\n  });\n\n  const mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });\n  const ableMention = mentionNodes?.length < maxUserMentionCount;\n\n  useEffect(() => {\n    setMentionedUsers(mentionedUsers.filter(({ userId }) => {\n      const i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n\n  useLayoutEffect(() => {\n    // Keep the scrollBottom value after fetching new message list\n    handleScroll?.();\n  }, []);\n  /**\n   * Move the messsage list scroll\n   * when the message's height is changed by `showEdit` OR `message.reactions`\n   */\n  useDidMountEffect(() => {\n    handleScroll?.();\n  }, [showEdit, message?.reactions?.length]);\n  useDidMountEffect(() => {\n    handleScroll?.(true);\n  }, [message?.updatedAt]);\n\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageHighlightedTimeout = null;\n    if (highLightedMessageId === message.messageId && messageScrollRef?.current) {\n      handleOnScroll();\n      setIsAnimated(false);\n      animationTimeout = setTimeout(() => {\n        setIsHighlighted(true);\n      }, 500);\n      messageHighlightedTimeout = setTimeout(() => {\n        setHighLightedMessageId(0);\n        onMessageHighlighted?.();\n      }, 1600);\n    } else {\n      setIsHighlighted(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageHighlightedTimeout);\n    };\n  }, [highLightedMessageId, messageScrollRef.current, message.messageId]);\n\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageAnimatedTimeout = null;\n    if (animatedMessageId === message.messageId && messageScrollRef?.current) {\n      handleOnScroll();\n      setIsHighlighted(false);\n      animationTimeout = setTimeout(() => {\n        setIsAnimated(true);\n      }, 500);\n      messageAnimatedTimeout = setTimeout(() => {\n        setAnimatedMessageId(0);\n        onMessageAnimated?.();\n      }, 1600);\n    } else {\n      setIsAnimated(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageAnimatedTimeout);\n    };\n  }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);\n  const renderedMessage = useMemo(() => {\n    return renderMessage?.({\n      message,\n      chainTop,\n      chainBottom,\n    });\n  }, [message, renderMessage]);\n  const renderedCustomSeparator = useMemo(() => {\n    if (renderCustomSeparator) {\n      return renderCustomSeparator?.({ message: message });\n    }\n    return null;\n  }, [message, renderCustomSeparator]);\n\n  if (renderedMessage) {\n    return (\n      <div\n        // do not delete this data attribute, used for scroll to given message\n        // and also for testing\n        data-sb-message-id={message.messageId}\n        data-sb-created-at={message.createdAt}\n        ref={messageScrollRef}\n        className={getClassName([\n          'sendbird-msg-hoc sendbird-msg--scroll-ref',\n          isAnimated ? 'sendbird-msg-hoc__animated' : '',\n          isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n        ])}\n      >\n        {/* date-separator */}\n        {\n          // TODO: Add message instance as a function parameter\n          hasSeparator && (renderedCustomSeparator || (\n            <DateSeparator>\n              <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n                {format(message.createdAt, 'MMMM dd, yyyy', {\n                  locale: dateLocale,\n                })}\n              </Label>\n            </DateSeparator>\n          ))\n        }\n        {renderedMessage}\n      </div>\n    );\n  }\n\n  if (showEdit && message?.isUserMessage?.()) {\n    return renderEditInput?.() || (\n      <>\n        {\n          displaySuggestedMentionList && (\n            <SuggestedMentionList\n              targetNickname={mentionNickname}\n              inputEvent={messageInputEvent}\n              renderUserMentionItem={renderUserMentionItem}\n              onUserItemClick={(user) => {\n                if (user) {\n                  setMentionedUsers([...mentionedUsers, user]);\n                }\n                setMentionNickname('');\n                setSelectedUser(user);\n                setMessageInputEvent(null);\n              }}\n              onFocusItemChange={() => {\n                setMessageInputEvent(null);\n              }}\n              onFetchUsers={(users) => {\n                setMentionSuggestedUsers(users);\n              }}\n              ableAddMention={ableMention}\n              maxMentionCount={maxUserMentionCount}\n              maxSuggestionCount={maxUserSuggestionCount}\n            />\n          )\n        }\n        <MessageInput\n          isEdit\n          channel={currentGroupChannel}\n          disabled={disabled}\n          ref={editMessageInputRef}\n          mentionSelectedUser={selectedUser}\n          isMentionEnabled={isMentionEnabled}\n          message={message}\n          onStartTyping={() => {\n            currentGroupChannel?.startTyping?.();\n          }}\n          onUpdateMessage={({ messageId, message, mentionTemplate }) => {\n            updateMessage({\n              messageId,\n              message,\n              mentionedUsers,\n              mentionTemplate,\n            });\n            setShowEdit(false);\n            currentGroupChannel?.endTyping?.();\n          }}\n          onCancelEdit={() => {\n            setMentionNickname('');\n            setMentionedUsers([]);\n            setMentionedUserIds([]);\n            setMentionSuggestedUsers([]);\n            setShowEdit(false);\n            currentGroupChannel?.endTyping?.();\n          }}\n          onUserMentioned={(user) => {\n            if (selectedUser?.userId === user?.userId) {\n              setSelectedUser(null);\n              setMentionNickname('');\n            }\n          }}\n          onMentionStringChange={(mentionText) => {\n            setMentionNickname(mentionText);\n          }}\n          onMentionedUserIdsUpdated={(userIds) => {\n            setMentionedUserIds(userIds);\n          }}\n          onKeyDown={(e) => {\n            if (displaySuggestedMentionList && mentionSuggestedUsers?.length > 0\n              && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)\n            ) {\n              setMessageInputEvent(e);\n              return true;\n            }\n            return false;\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={getClassName([\n        'sendbird-msg-hoc sendbird-msg--scroll-ref',\n        isAnimated ? 'sendbird-msg-hoc__animated' : '',\n        isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n      ])}\n      style={{ marginBottom: '2px' }}\n      data-sb-message-id={message.messageId}\n      data-sb-created-at={message.createdAt}\n      ref={messageScrollRef}\n    >\n      {/* date-separator */}\n      {\n        hasSeparator && (renderedCustomSeparator || (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy', {\n                locale: dateLocale,\n              })}\n            </Label>\n          </DateSeparator>\n        ))\n      }\n      {/* Message */}\n      {\n        renderMessageContent?.() || (\n          <MessageContent\n            className=\"sendbird-message-hoc__message-content\"\n            userId={userId}\n            scrollToMessage={scrollToMessage}\n            channel={currentGroupChannel}\n            message={message}\n            disabled={!isOnline}\n            chainTop={chainTop}\n            chainBottom={chainBottom}\n            isReactionEnabled={isReactionEnabled}\n            replyType={replyType}\n            threadReplySelectType={threadReplySelectType}\n            nicknamesMap={nicknamesMap}\n            emojiContainer={emojiContainer}\n            showEdit={setShowEdit}\n            showRemove={setShowRemove}\n            showFileViewer={setShowFileViewer}\n            resendMessage={resendMessage}\n            deleteMessage={deleteMessage}\n            toggleReaction={toggleReaction}\n            setQuoteMessage={setQuoteMessage}\n            onReplyInThread={onReplyInThread}\n            onQuoteMessageClick={onQuoteMessageClick}\n            onMessageHeightChange={handleScroll}\n          />\n        )\n      }\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            message={message}\n            onCancel={() => setShowRemove(false)}\n          />\n        )\n      }\n      {\n        showFileViewer && (\n          <FileViewer\n            message={message as FileMessage}\n            onCancel={() => setShowFileViewer(false)}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default Message;\n", "import { UserMessage } from '@sendbird/chat/message';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\nimport { isSameGroup } from './utils';\nimport { ReplyType } from '../../../types';\nimport { CoreMessageType } from '../../../utils';\n\n/**\n * exported, should be backward compatible\n */\nexport const compareMessagesForGrouping = (\n  prevMessage: CoreMessageType,\n  currMessage: CoreMessageType,\n  nextMessage: CoreMessageType,\n  currentChannel: GroupChannel,\n  replyType: ReplyType,\n): [\n  chainTop: boolean,\n  chainBottom: boolean,\n] => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = (currMessage as UserMessage)?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n", "import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport isSameDay from 'date-fns/isSameDay';\n\nimport { compareMessagesForGrouping } from '../../context/compareMessagesForGrouping';\nimport { ReplyType } from '../../../../types';\nimport { CoreMessageType } from '../../../../utils';\n\nexport interface GetMessagePartsInfoProps {\n  allMessages: Array<CoreMessageType>;\n  isMessageGroupingEnabled: boolean;\n  currentIndex: number;\n  currentMessage: CoreMessageType;\n  currentChannel: GroupChannel;\n  replyType: string;\n}\n\ninterface OutPuts {\n  chainTop: boolean,\n  chainBottom: boolean,\n  hasSeparator: boolean,\n}\n\n/**\n * exported, should be backward compatible\n */\nexport const getMessagePartsInfo = ({\n  allMessages = [],\n  isMessageGroupingEnabled = true,\n  currentIndex = 0,\n  currentMessage = null,\n  currentChannel = null,\n  replyType = '',\n}: GetMessagePartsInfoProps): OutPuts => {\n  const previousMessage = allMessages[currentIndex - 1];\n  const nextMessage = allMessages[currentIndex + 1];\n  const [chainTop, chainBottom] = isMessageGroupingEnabled\n    ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, currentChannel, (replyType as ReplyType))\n    : [false, false];\n  const previousMessageCreatedAt = previousMessage?.createdAt;\n  const currentCreatedAt = currentMessage.createdAt;\n  // https://stackoverflow.com/a/41855608\n  const hasSeparator = !(previousMessageCreatedAt && (\n    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n  ));\n  return {\n    chainTop,\n    chainBottom,\n    hasSeparator,\n  };\n};\n", "import React, { useContext } from 'react';\n\nimport './unread-count.scss';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\n\nexport interface UnreadCountProps {\n  className?: string;\n  count: number | undefined;\n  time: string;\n  onClick(): void;\n}\n\nconst UnreadCount: React.FC<UnreadCountProps> = ({\n  className = '',\n  count = 0,\n  time = '',\n  onClick,\n}: UnreadCountProps) => {\n  const { stringSet } = useContext(LocalizationContext);\n  const timeArray = time?.toString?.()?.split(' ') || [];\n  timeArray?.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);\n\n  return (\n    <div\n      className={`sendbird-notification${count < 1 ? '--hide' : ''} ${className}`}\n      onClick={onClick}\n    >\n      <Label className=\"sendbird-notification__text\" color={LabelColors.ONCONTENT_1} type={LabelTypography.CAPTION_2}>\n        {`${count} `}\n        {stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE}\n        {` ${timeArray.join(' ')}`}\n      </Label>\n      <Icon\n        width=\"24px\"\n        height=\"24px\"\n        type={IconTypes.CHEVRON_DOWN}\n        fillColor={IconColors.CONTENT}\n      />\n    </div>\n  );\n};\n\nexport default UnreadCount;\n", "import React, { useContext } from 'react';\n\nimport './frozen-notification.scss';\n\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../../ui/Label';\n\ninterface FrozenNotificationProps {\n  className?: string;\n}\n\nconst FrozenNotification = ({\n  className = '',\n}: FrozenNotificationProps): React.ReactElement => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className={`sendbird-notification sendbird-notification--frozen ${className}`}>\n      <Label\n        className=\"sendbird-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n};\n\nexport default FrozenNotification;\n", "import React, { useEffect, useState } from 'react';\nimport { useDebounce } from '../../../../../hooks/useDebounce';\n\nconst DELAY = 500;\n\nexport function useSetScrollToBottom({\n  loading,\n}: {\n  loading: boolean;\n}): ({\n  scrollBottom: number;\n  scrollToBottomHandler: (e: React.UIEvent<HTMLDivElement, UIEvent>) => void;\n}) {\n  const [scrollBottom, setScrollBottom] = useState(0);\n  useEffect(() => {\n    if (loading) {\n      setScrollBottom(0);\n    }\n  }, [loading]);\n  const scrollCb = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.target as HTMLDivElement;\n    try {\n      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);\n    } catch {\n      //\n    }\n  };\n  return {\n    scrollBottom,\n    scrollToBottomHandler: useDebounce(scrollCb, DELAY),\n  };\n}\n", "import { useEffect } from 'react';\nimport { useChannelContext } from '../../../context/ChannelProvider';\n\nexport function useScrollBehavior() {\n  const {\n    scrollRef,\n    scrollBehavior = 'auto',\n  } = useChannelContext();\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.style.scrollBehavior = scrollBehavior;\n    }\n  }, [scrollRef.current]);\n\n  return null;\n}\n", "import './message-list.scss';\n\nimport React from 'react';\n\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Message from '../Message';\nimport { EveryMessage, RenderCustomSeparatorProps, RenderMessageProps } from '../../../../types';\nimport { isAboutSame } from '../../context/utils';\nimport { getMessagePartsInfo } from './getMessagePartsInfo';\nimport UnreadCount from '../UnreadCount';\nimport FrozenNotification from '../FrozenNotification';\nimport { SCROLL_BUFFER } from '../../../../utils/consts';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { UserMessage } from '@sendbird/chat/message';\nimport { MessageProvider } from '../../../Message/context/MessageProvider';\nimport { useHandleOnScrollCallback } from '../../../../hooks/useHandleOnScrollCallback';\nimport { useSetScrollToBottom } from './hooks/useSetScrollToBottom';\nimport { useScrollBehavior } from './hooks/useScrollBehavior';\nimport * as utils from '../../context/utils';\n\nconst SCROLL_BOTTOM_PADDING = 50;\n\nexport interface MessageListProps {\n  className?: string;\n  renderMessage?: (props: RenderMessageProps) => React.ReactElement;\n  renderPlaceholderEmpty?: () => React.ReactElement;\n  renderCustomSeparator?: (props: RenderCustomSeparatorProps) => React.ReactElement;\n  renderPlaceholderLoader?: () => React.ReactElement;\n}\n\nconst MessageList: React.FC<MessageListProps> = ({\n  className = '',\n  renderMessage,\n  renderPlaceholderEmpty,\n  renderCustomSeparator,\n  renderPlaceholderLoader,\n}) => {\n  const {\n    allMessages,\n    localMessages,\n    hasMorePrev,\n    hasMoreNext,\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    setHighLightedMessageId,\n    isMessageGroupingEnabled,\n    scrollRef,\n    onScrollCallback,\n    onScrollDownCallback,\n    messagesDispatcher,\n    messageActionTypes,\n    currentGroupChannel,\n    disableMarkAsRead,\n    filterMessageList,\n    replyType,\n    loading,\n    isScrolled,\n    unreadSince,\n  } = useChannelContext();\n\n  const store = useSendbirdStateContext();\n  const allMessagesFiltered = (typeof filterMessageList === 'function')\n    ? allMessages.filter((filterMessageList as (message: EveryMessage) => boolean))\n    : allMessages;\n  const markAsReadScheduler = store.config.markAsReadScheduler;\n\n  useScrollBehavior();\n\n  const onScroll = () => {\n    const element = scrollRef?.current;\n    if (element == null) {\n      return;\n    }\n\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n\n    if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {\n      onScrollCallback();\n    }\n\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {\n      onScrollDownCallback(([messages]) => {\n        if (messages) {\n          try {\n            setTimeout(() => utils.scrollIntoLast(0, scrollRef),\n              /**\n               * Rendering MFM takes long time so we need this.\n               * But later we should find better solution.\n               */\n              1000,\n            );\n            // element.scrollTop = scrollHeight - clientHeight;\n            // scrollRef.current.scrollTop = scrollHeight - clientHeight;\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (!disableMarkAsRead\n      && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)\n      && !!currentGroupChannel\n    ) {\n      messagesDispatcher({\n        type: messageActionTypes.MARK_AS_READ,\n        payload: { channel: currentGroupChannel },\n      });\n      markAsReadScheduler.push(currentGroupChannel);\n    }\n  };\n\n  const onClickScrollBot = () => {\n    setInitialTimeStamp?.(null);\n    setAnimatedMessageId?.(null);\n    setHighLightedMessageId?.(null);\n    if (scrollRef?.current?.scrollTop > -1) {\n      scrollRef.current.scrollTop = (scrollRef?.current?.scrollHeight ?? 0) - (scrollRef?.current?.offsetHeight ?? 0);\n    }\n  };\n\n  /**\n   * 1. Move the messsage list scroll\n   *    when each message's height is changed by `reactions` OR `showEdit`\n   * 2. Keep the scrollBottom value after fetching new message list\n   */\n  const moveScroll = (isBottomMessageAffected = false): void => {\n    const current = scrollRef?.current;\n    if (current) {\n      const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom\n        && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {\n        // Move the scroll as much as the height of the message has changed\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n\n  const handleOnScroll = useHandleOnScrollCallback({\n    hasMore: hasMorePrev,\n    hasNext: hasMoreNext,\n    onScroll,\n    scrollRef,\n  });\n\n  const { scrollToBottomHandler, scrollBottom } = useSetScrollToBottom({ loading });\n\n  if (loading) {\n    return (typeof renderPlaceholderLoader === 'function')\n      ? renderPlaceholderLoader()\n      : <PlaceHolder type={PlaceHolderTypes.LOADING} />;\n  }\n  if (allMessagesFiltered.length < 1) {\n    if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === 'function') {\n      return renderPlaceholderEmpty();\n    }\n    return <PlaceHolder className=\"sendbird-conversation__no-messages\" type={PlaceHolderTypes.NO_MESSAGES} />;\n  }\n\n  return (\n    <>\n      {\n        !isScrolled && <PlaceHolder type={PlaceHolderTypes.LOADING} />\n      }\n      <div className={`sendbird-conversation__messages ${className}`}>\n        <div className=\"sendbird-conversation__scroll-container\">\n          <div className=\"sendbird-conversation__padding\" />\n          <div\n            className=\"sendbird-conversation__messages-padding\"\n            ref={scrollRef}\n            onScroll={(e) => {\n              handleOnScroll();\n              scrollToBottomHandler(e);\n            }}\n          >\n            {\n              allMessagesFiltered.map((m, idx) => {\n                const {\n                  chainTop,\n                  chainBottom,\n                  hasSeparator,\n                } = getMessagePartsInfo({\n                  allMessages: allMessagesFiltered,\n                  replyType,\n                  isMessageGroupingEnabled,\n                  currentIndex: idx,\n                  currentMessage: m,\n                  currentChannel: currentGroupChannel,\n                });\n                const isByMe = (m as UserMessage)?.sender?.userId === store?.config?.userId;\n                return (\n                  <MessageProvider message={m} key={m?.messageId} isByMe={isByMe}>\n                    <Message\n                      handleScroll={moveScroll}\n                      renderMessage={renderMessage}\n                      message={m as EveryMessage}\n                      hasSeparator={hasSeparator}\n                      chainTop={chainTop}\n                      chainBottom={chainBottom}\n                      renderCustomSeparator={renderCustomSeparator}\n                    />\n                  </MessageProvider>\n                );\n              })\n            }\n            {\n              localMessages.map((m, idx) => {\n                const {\n                  chainTop,\n                  chainBottom,\n                } = getMessagePartsInfo({\n                  allMessages: allMessagesFiltered,\n                  replyType,\n                  isMessageGroupingEnabled,\n                  currentIndex: idx,\n                  currentMessage: m,\n                  currentChannel: currentGroupChannel,\n                });\n                const isByMe = (m as UserMessage)?.sender?.userId === store?.config?.userId;\n                return (\n                  <MessageProvider message={m} key={m?.messageId} isByMe={isByMe}>\n                    <Message\n                      handleScroll={moveScroll}\n                      renderMessage={renderMessage}\n                      message={m as EveryMessage}\n                      chainTop={chainTop}\n                      chainBottom={chainBottom}\n                      renderCustomSeparator={renderCustomSeparator}\n                    />\n                  </MessageProvider>\n                );\n              })\n            }\n            {/* show frozen notifications, */}\n            {/* show new message notifications, */}\n          </div>\n        </div>\n        {currentGroupChannel?.isFrozen && (\n          <FrozenNotification className=\"sendbird-conversation__messages__notification\" />\n        )}\n        {unreadSince && (\n          <UnreadCount\n            className=\"sendbird-conversation__messages__notification\"\n            count={currentGroupChannel?.unreadMessageCount}\n            time={unreadSince}\n            onClick={() => {\n              if (scrollRef?.current?.scrollTop) {\n                scrollRef.current.scrollTop = (scrollRef?.current?.scrollHeight ?? 0) - (scrollRef?.current?.offsetHeight ?? 0);\n              }\n              if (!disableMarkAsRead && !!currentGroupChannel) {\n                markAsReadScheduler.push(currentGroupChannel);\n                messagesDispatcher({\n                  type: messageActionTypes.MARK_AS_READ,\n                  payload: { channel: currentGroupChannel },\n                });\n              }\n              setInitialTimeStamp(null);\n              setAnimatedMessageId(null);\n              setHighLightedMessageId(null);\n            }}\n          />\n        )}\n        {\n          // This flag is an unmatched variable\n          scrollBottom > SCROLL_BOTTOM_PADDING && (\n            <div\n              className=\"sendbird-conversation__scroll-bottom-button\"\n              onClick={onClickScrollBot}\n              onKeyDown={onClickScrollBot}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.PRIMARY}\n              />\n            </div>\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nexport default MessageList;\n", "import React, { ReactElement } from 'react';\nimport type { FileMessage } from '@sendbird/chat/message';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ImageRenderer from '../ImageRenderer';\nimport {\n  isAudioMessage,\n  isFileMessage, isImageFileInfo,\n  isImageMessage,\n  isMultipleFilesMessage,\n  isThumbnailMessage,\n  isVideoMessage,\n  isVoiceMessage,\n} from '../../utils';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\nimport { getMessageFirstFileType, getMessageFirstFileUrl, getMessageFirstFileThumbnailUrl } from '../QuoteMessage/utils';\n\ninterface Props {\n  message: FileMessage | MultipleFilesMessage;\n}\n\nconst componentClassname = 'sendbird-quote_message_input__avatar';\n\nexport default function QuoteMessageThumbnail({ message }: Props): ReactElement {\n  if (!isFileMessage(message) && !isMultipleFilesMessage(message) || isVoiceMessage(message as FileMessage)) {\n    return null;\n  }\n  let thumbnailUrl = getMessageFirstFileThumbnailUrl(message);\n  if (!thumbnailUrl) {\n    if (\n      message.isFileMessage?.()\n      && (\n        isImageMessage(message)\n        || isVideoMessage(message)\n      )\n    ) {\n      thumbnailUrl = getMessageFirstFileUrl(message);\n    } else if (\n      message.isMultipleFilesMessage?.()\n      && (\n        message.fileInfoList.length > 0\n        && isImageFileInfo((message).fileInfoList[0])\n      )\n    ) {\n      thumbnailUrl = message.fileInfoList[0].url;\n    }\n  }\n  if (isVideoMessage(message as FileMessage) && thumbnailUrl) {\n    return (\n      <div className={componentClassname}>\n        <video\n          style={{\n            width: '44px',\n            height: '44px',\n          }}\n          src={thumbnailUrl}\n        />\n      </div>\n    );\n  } else if ((isThumbnailMessage(message) || isMultipleFilesMessage(message)) && thumbnailUrl) {\n    return (\n      <ImageRenderer\n        className={componentClassname}\n        url={thumbnailUrl}\n        alt={getMessageFirstFileType(message)}\n        width=\"44px\"\n        height=\"44px\"\n        fixedSize\n      />\n    );\n  } else if (isAudioMessage(message as FileMessage)) {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_AUDIO}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div className={componentClassname}>\n        <Icon\n          type={IconTypes.FILE_DOCUMENT}\n          fillColor={IconColors.ON_BACKGROUND_2}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </div>\n    );\n  }\n}\n", "import './index.scss';\n\nimport React, { ReactElement, useContext } from 'react';\nimport type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport {\n  CoreMessageType,\n  getClassName,\n  getUIKitMessageType,\n  isFileMessage,\n  isGifMessage,\n  isImageMessage,\n  isMultipleFilesMessage,\n  isUserMessage,\n  isVideoMessage,\n  isVoiceMessage, SendableMessageType,\n  UIKitMessageTypes,\n} from '../../utils';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport QuoteMessageThumbnail from './QuoteMessageThumbnail';\nimport { getMessageFirstFileName } from '../QuoteMessage/utils';\nimport { MultipleFilesMessage } from '@sendbird/chat/message';\n\ninterface Props {\n  className?: string | Array<string>;\n  replyingMessage: SendableMessageType;\n  onClose?: (message: SendableMessageType) => void;\n}\n\nexport default function QuoteMessageInput({\n  className,\n  replyingMessage,\n  onClose,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const fileMessage = replyingMessage as FileMessage | MultipleFilesMessage;\n  const sender = (replyingMessage as SendableMessageType)?.sender;\n  const displayFileIcon = (isFileMessage(replyingMessage) || isMultipleFilesMessage(replyingMessage))\n    && !isVoiceMessage(replyingMessage as FileMessage);\n\n  return (\n    <div className={getClassName(['sendbird-quote_message_input', className])}>\n      {\n        displayFileIcon && (\n          <QuoteMessageThumbnail message={fileMessage} />\n        )\n      }\n      <div\n        className=\"sendbird-quote_message_input__body\"\n        style={{\n          width: `calc(100% - ${displayFileIcon ? '164px' : '120px'})`,\n          left: displayFileIcon ? '92px' : '40px',\n        }}\n      >\n        <Label\n          className=\"sendbird-quote_message_input__body__sender-name\"\n          type={LabelTypography.CAPTION_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {`${stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO} ${(sender && sender.nickname) ? sender.nickname : stringSet.NO_NAME}`}\n        </Label>\n        <Label\n          className=\"sendbird-quote_message_input__body__message-content\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE}\n          {isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO}\n          {isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF}\n          {isUserMessage(replyingMessage as UserMessage) && (replyingMessage as UserMessage).message}\n          {getUIKitMessageType(replyingMessage) === UIKitMessageTypes.FILE && getMessageFirstFileName(fileMessage)}\n          {\n            isMultipleFilesMessage(replyingMessage as CoreMessageType)\n            && `${(fileMessage as MultipleFilesMessage).fileInfoList.length} Photos`}\n          {isVoiceMessage(replyingMessage as FileMessage) && stringSet.VOICE_MESSAGE}\n        </Label>\n      </div>\n      <Icon\n        className=\"sendbird-quote_message_input__close-button\"\n        type={IconTypes.CLOSE}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"24px\"\n        height=\"24px\"\n        onClick={() => onClose(replyingMessage)}\n      />\n    </div>\n  );\n}\n", "import { useCallback, useEffect, useState } from 'react';\nimport { VoiceRecorderEventHandler, useVoiceRecorderContext } from '.';\nimport useSendbirdStateContext from '../useSendbirdStateContext';\n\n// export interface UseVoiceRecorderProps extends VoiceRecorderEventHandler {\n//   /**\n//    * onRecordingStarted\n//    * onRecordingEnded\n//    */\n// }\n/* eslint-disable no-redeclare */\nexport const VoiceRecorderStatus = {\n  PREPARING: 'PREPARING',\n  READY_TO_RECORD: 'READY_TO_RECORD',\n  RECORDING: 'RECORDING',\n  COMPLETED: 'COMPLETED',\n} as const;\nexport type VoiceRecorderStatus = typeof VoiceRecorderStatus[keyof typeof VoiceRecorderStatus];\nexport interface UseVoiceRecorderContext {\n  start: () => void;\n  stop: () => void;\n  cancel: () => void;\n  recordingLimit: number;\n  recordingTime: number;\n  recordedFile: File;\n  recordingStatus: VoiceRecorderStatus;\n}\n\nconst noop = () => { /* noop */ };\n\nexport const useVoiceRecorder = ({\n  onRecordingStarted = noop,\n  onRecordingEnded = noop,\n}: VoiceRecorderEventHandler): UseVoiceRecorderContext => {\n  const { config } = useSendbirdStateContext();\n  const { voiceRecord } = config;\n  const { maxRecordingTime } = voiceRecord;\n  const voiceRecorder = useVoiceRecorderContext();\n  const { isRecordable } = voiceRecorder;\n\n  const [recordedFile, setRecordedFile] = useState<File>(null);\n  const [recordingStatus, setRecordingStatus] = useState<VoiceRecorderStatus>(VoiceRecorderStatus.PREPARING);\n  useEffect(() => {\n    if (isRecordable && recordingStatus === VoiceRecorderStatus.PREPARING) {\n      setRecordingStatus(VoiceRecorderStatus.READY_TO_RECORD);\n    }\n  }, [isRecordable]);\n\n  const start = useCallback(() => {\n    voiceRecorder?.start({\n      onRecordingStarted: () => {\n        setRecordingStatus(VoiceRecorderStatus.RECORDING);\n        onRecordingStarted();\n        startTimer();\n      },\n      onRecordingEnded: (audioFile) => {\n        setRecordingStatus(VoiceRecorderStatus.COMPLETED);\n        onRecordingEnded(audioFile);\n        setRecordedFile(audioFile);\n        stopTimer();\n      },\n    });\n  }, [onRecordingStarted, onRecordingEnded]);\n  const stop = useCallback(() => {\n    voiceRecorder?.stop();\n    stopTimer();\n  }, [voiceRecorder]);\n  const cancel = useCallback(() => {\n    stop();\n    setRecordedFile(null);\n  }, [voiceRecorder]);\n\n  // Timer\n  const [recordingTime, setRecordingTime] = useState<number>(0);\n  let timer: ReturnType<typeof setInterval> = null;\n  function startTimer() {\n    stopTimer();\n    setRecordingTime(0);\n    const interval = setInterval(() => {\n      setRecordingTime(prevTime => {\n        const newTime = prevTime + 100;\n        if (newTime > maxRecordingTime) {\n          stopTimer();\n        }\n        return newTime;\n      });\n    }, 100);\n    timer = interval;\n  }\n  function stopTimer() {\n    clearInterval(timer);\n    timer = null;\n  }\n  useEffect(() => {\n    if (recordingTime > maxRecordingTime) {\n      stop();\n    }\n  }, [recordingTime, maxRecordingTime, stop]);\n\n  return ({\n    start,\n    stop,\n    cancel,\n    recordingStatus,\n    recordingTime,\n    recordedFile,\n    recordingLimit: maxRecordingTime,\n  });\n};\n", "/* eslint-disable no-redeclare */\nexport const VoiceMessageInputStatus = {\n  READY_TO_RECORD: 'READY_TO_RECORD',\n  RECORDING: 'RECORDING',\n  READY_TO_PLAY: 'READY_TO_PLAY',\n  PLAYING: 'PLAYING',\n} as const;\nexport type VoiceMessageInputStatus = typeof VoiceMessageInputStatus[keyof typeof VoiceMessageInputStatus];\n", "import React from 'react';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport { VoiceMessageInputStatus } from './types';\n\nexport interface ControlerIconProps {\n  inputState?: VoiceMessageInputStatus;\n}\n\nexport const ControlerIcon = ({\n  inputState,\n}: ControlerIconProps): React.ReactElement => {\n  switch (inputState) {\n    case VoiceMessageInputStatus.READY_TO_RECORD: {\n      return (\n        <div className=\"sendbird-controler-icon record-icon\" />\n      );\n    }\n    case VoiceMessageInputStatus.RECORDING: {\n      return (\n        <div className=\"sendbird-controler-icon stop-icon\" />\n      );\n    }\n    case VoiceMessageInputStatus.READY_TO_PLAY: {\n      return (\n        <Icon\n          className=\"sendbird-controler-icon play-icon\"\n          width=\"20px\"\n          height=\"20px\"\n          type={IconTypes.PLAY}\n          fillColor={IconColors.ON_BACKGROUND_1}\n        />\n      );\n    }\n    case VoiceMessageInputStatus.PLAYING: {\n      return (\n        <div className=\"sendbird-controler-icon pause-icon\">\n          <div className=\"sendbird-controler-icon pause-icon-inner\"/>\n          <div className=\"sendbird-controler-icon pause-icon-inner\"/>\n        </div>\n      );\n    }\n    default:\n      return null;\n  }\n};\n\nexport default ControlerIcon;\n", "import React, { useCallback, useMemo, useState } from 'react';\nimport './index.scss';\n\nimport PlaybackTime from '../PlaybackTime';\nimport ProgressBar from '../ProgressBar';\nimport TextButton from '../TextButton';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport ControlerIcon from './controlerIcons';\nimport { VOICE_RECORDER_CLICK_BUFFER_TIME, VOICE_RECORDER_DEFAULT_MIN } from '../../utils/consts';\nimport { VoiceMessageInputStatus } from './types';\n\nexport interface VoiceMessageInputProps {\n  minRecordTime?: number;\n  maximumValue: number;\n  currentValue?: number;\n  currentType: VoiceMessageInputStatus;\n  onCancelClick?: () => void;\n  onControlClick?: (type: VoiceMessageInputStatus) => void;\n  onSubmitClick?: () => void;\n  renderCancelButton?: () => React.ReactElement;\n  renderControlButton?: (type: VoiceMessageInputStatus) => React.ReactElement;\n  renderSubmitButton?: () => React.ReactElement;\n}\n\nexport const VoiceMessageInput = ({\n  minRecordTime = VOICE_RECORDER_DEFAULT_MIN,\n  maximumValue,\n  currentValue = 0,\n  currentType,\n  onCancelClick,\n  onControlClick,\n  onSubmitClick,\n  renderCancelButton,\n  renderControlButton,\n  renderSubmitButton,\n}: VoiceMessageInputProps): React.ReactElement => {\n  const [lastClickTime, setLastClickTime] = useState<number>(0);\n  const isReadyToRecord = useMemo(() => currentType === VoiceMessageInputStatus.READY_TO_RECORD, [currentType]);\n  const isRecording = useMemo(() => currentType === VoiceMessageInputStatus.RECORDING, [currentType]);\n  const isSendButtonDisabled = useMemo(() => {\n    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD\n      || currentType === VoiceMessageInputStatus.RECORDING\n    ) {\n      return minRecordTime > currentValue;\n    }\n    return false;\n  }, [currentType, minRecordTime, currentValue]);\n  const isPlayMode = useMemo(() => {\n    return (\n      currentType === VoiceMessageInputStatus.READY_TO_PLAY\n      || currentType === VoiceMessageInputStatus.PLAYING\n    );\n  }, [currentType]);\n  const { stringSet } = useLocalization();\n\n  const handleOnCancelClick = () => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onCancelClick();\n      setLastClickTime(currentTime);\n    }\n  };\n  const handleOnControlClick = useCallback(() => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onControlClick(currentType);\n      setLastClickTime(currentTime);\n    }\n  }, [currentType]);\n  const handleOnSubmitClick = () => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      if (!isSendButtonDisabled) {\n        onSubmitClick();\n      }\n      setLastClickTime(currentTime);\n    }\n  };\n\n  return (\n    <div className=\"sendbird-voice-message-input\">\n      <div className=\"sendbird-voice-message-input__indicator\">\n        <div className=\"sendbird-voice-message-input__indicator__progress-bar\">\n          <ProgressBar\n            className=\"sendbird-voice-message-input__indicator__progress-bar__bar\"\n            disabled={isReadyToRecord}\n            maxSize={maximumValue}\n            currentSize={currentValue}\n          />\n        </div>\n        {(isRecording) ? (<div className=\"sendbird-voice-message-input__indicator__on-rec\" />) : null}\n        <PlaybackTime\n          className=\"sendbird-voice-message-input__indicator__playback-time\"\n          time={isPlayMode ? maximumValue - currentValue : currentValue}\n          labelColor={isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1}\n        />\n      </div>\n      <div className=\"sendbird-voice-message-input__controler\">\n        {\n          renderCancelButton?.() || (\n            <TextButton\n              className=\"sendbird-voice-message-input__controler__cancel\"\n              onClick={handleOnCancelClick}\n              disableUnderline\n            >\n              <Label\n                type={LabelTypography.BUTTON_1}\n                color={LabelColors.PRIMARY}\n              >\n                {stringSet.BUTTON__CANCEL}\n              </Label>\n            </TextButton>\n          )\n        }\n        {\n          renderControlButton?.(currentType) || (\n            <div\n              className=\"sendbird-voice-message-input__controler__main\"\n              onClick={handleOnControlClick}\n            >\n              <ControlerIcon inputState={currentType} />\n            </div>\n          )\n        }\n        {\n          renderSubmitButton?.() || (\n            <div\n              className={`sendbird-voice-message-input__controler__submit ${isSendButtonDisabled ? 'voice-message--disabled' : ''}`}\n              onClick={handleOnSubmitClick}\n            >\n              <Icon\n                width=\"19px\"\n                height=\"19px\"\n                type={IconTypes.SEND}\n                fillColor={isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n", "import React, { useEffect, useRef, useState } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport './voice-message-wrapper.scss';\n\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { useVoicePlayer } from '../../../../hooks/VoicePlayer/useVoicePlayer';\nimport { useVoiceRecorder, VoiceRecorderStatus } from '../../../../hooks/VoiceRecorder/useVoiceRecorder';\nimport { isDisabledBecauseFrozen, isDisabledBecauseMuted } from '../../context/utils';\n\nimport { VoiceMessageInput } from '../../../../ui/VoiceMessageInput';\nimport { VoiceMessageInputStatus } from '../../../../ui/VoiceMessageInput/types';\nimport Modal from '../../../../ui/Modal';\nimport Button, { ButtonSizes, ButtonTypes } from '../../../../ui/Button';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { VOICE_RECORDER_DEFAULT_MIN } from '../../../../utils/consts';\nimport { VOICE_PLAYER_STATUS } from '../../../../hooks/VoicePlayer/dux/initialState';\nimport uuidv4 from '../../../../utils/uuid';\n\nexport interface VoiceMessageInputWrapperProps {\n  channel?: GroupChannel;\n  onCancelClick?: () => void;\n  onSubmitClick?: (file: File, duration: number) => void;\n}\n\nexport const VoiceMessageInputWrapper = ({\n  channel,\n  onCancelClick,\n  onSubmitClick,\n}: VoiceMessageInputWrapperProps): React.ReactElement => {\n  const uuid = useRef<string>(uuidv4()).current;\n  const [audioFile, setAudioFile] = useState<File>(null);\n  const [voiceInputState, setVoiceInputState] = useState<VoiceMessageInputStatus>(VoiceMessageInputStatus.READY_TO_RECORD);\n  const [isSubmitted, setSubmit] = useState(false);\n  const [isDisabled, setDisabled] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useLocalization();\n  const { config } = useSendbirdStateContext();\n  const minRecordingTime = config?.voiceRecord?.minRecordingTime || VOICE_RECORDER_DEFAULT_MIN;\n  const {\n    start,\n    stop,\n    cancel,\n    recordingTime,\n    recordingStatus,\n    recordingLimit,\n  } = useVoiceRecorder({\n    onRecordingStarted: () => {\n      setVoiceInputState(VoiceMessageInputStatus.RECORDING);\n    },\n    onRecordingEnded: (audioFile) => {\n      setAudioFile(audioFile);\n    },\n  });\n  const voicePlayer = useVoicePlayer({\n    channelUrl: channel?.url,\n    key: uuid,\n    audioFile: audioFile,\n  });\n  const {\n    play,\n    pause,\n    playbackTime,\n    playingStatus,\n  } = voicePlayer;\n  const stopVoicePlayer = voicePlayer.stop;\n\n  // disabled state: muted & frozen\n  useEffect(() => {\n    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [channel?.myRole, channel?.isFrozen, channel?.myMutedState]);\n\n  // call onSubmitClick when submit button is clicked and recorded audio file is created\n  useEffect(() => {\n    if (isSubmitted && audioFile) {\n      onSubmitClick(audioFile, recordingTime);\n      setSubmit(false);\n      setAudioFile(null);\n    }\n  }, [isSubmitted, audioFile, recordingTime]);\n  // operate which control button should be displayed\n  useEffect(() => {\n    if (audioFile) {\n      if (recordingTime < minRecordingTime) {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n        setAudioFile(null);\n      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {\n        setVoiceInputState(VoiceMessageInputStatus.PLAYING);\n      } else {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);\n      }\n    }\n  }, [audioFile, recordingTime, playingStatus]);\n\n  return (\n    <div className=\"sendbird-voice-message-input-wrapper\">\n      <VoiceMessageInput\n        currentValue={recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime}\n        maximumValue={recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit}\n        currentType={voiceInputState}\n        onCancelClick={() => {\n          onCancelClick();\n          cancel();\n          stopVoicePlayer();\n        }}\n        onSubmitClick={() => {\n          if (isDisabled) {\n            setShowModal(true);\n            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n          } else {\n            stop();\n            pause();\n            setSubmit(true);\n          }\n        }}\n        onControlClick={(type) => {\n          switch (type) {\n            case VoiceMessageInputStatus.READY_TO_RECORD: {\n              stopVoicePlayer();\n              start();\n              break;\n            }\n            case VoiceMessageInputStatus.RECORDING: {\n              if (recordingTime >= minRecordingTime && !isDisabled) {\n                stop();\n              } else if (isDisabled) {\n                cancel();\n                setShowModal(true);\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n              } else {\n                cancel();\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n              }\n              break;\n            }\n            case VoiceMessageInputStatus.READY_TO_PLAY: {\n              play();\n              break;\n            }\n            case VoiceMessageInputStatus.PLAYING: {\n              pause();\n              break;\n            }\n          }\n        }}\n      />\n      {\n        showModal && (\n          <Modal\n            className=\"sendbird-voice-message-input-wrapper-alert\"\n            titleText={isDisabledBecauseMuted(channel)\n              ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED\n              : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN\n            }\n            hideFooter\n            isCloseOnClickOutside\n            onCancel={() => {\n              setShowModal(false);\n              onCancelClick();\n            }}\n          >\n            <div className=\"sendbird-voice-message-input-wrapper-alert__body\">\n              <Button\n                className=\"sendbird-voice-message-input-wrapper-alert__body__ok-button\"\n                type={ButtonTypes.PRIMARY}\n                size={ButtonSizes.BIG}\n                onClick={() => {\n                  setShowModal(false);\n                  onCancelClick();\n                }}\n              >\n                {stringSet.BUTTON__OK}\n              </Button>\n            </div>\n          </Modal>\n        )\n      }\n    </div>\n  );\n};\n\nexport default VoiceMessageInputWrapper;\n", "import React, { useCallback } from 'react';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { SendMFMFunctionType } from '../../context/hooks/useSendMultipleFilesMessage';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { SendableMessageType, isImage } from '../../../../utils';\n// TODO: get SendFileMessageFunctionType from Channel\nimport { SendFileMessageFunctionType } from '../../../Thread/context/hooks/useSendFileMessage';\nimport { useGlobalModalContext } from '../../../../hooks/useModal';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { ModalFooter } from '../../../../ui/Modal';\nimport { FileMessage, MultipleFilesMessage } from '@sendbird/chat/message';\n\n/**\n * The handleUploadFiles is a function sending a FileMessage and MultipleFilesMessage\n * by the received FileList from the ChangeEvent of MessageInput component.\n */\n\ninterface useHandleUploadFilesDynamicProps {\n  sendFileMessage: SendFileMessageFunctionType;\n  sendMultipleFilesMessage: SendMFMFunctionType;\n  quoteMessage?: SendableMessageType;\n}\ninterface useHandleUploadFilesStaticProps {\n  logger: Logger;\n}\nexport type HandleUploadFunctionType = (files: FileList) => void;\n\nexport const useHandleUploadFiles = ({\n  sendFileMessage,\n  sendMultipleFilesMessage,\n  quoteMessage,\n}: useHandleUploadFilesDynamicProps, {\n  logger,\n}: useHandleUploadFilesStaticProps): Array<HandleUploadFunctionType> => {\n  const { stringSet } = useLocalization();\n  const { config } = useSendbirdStateContext();\n  const uikitUploadSizeLimit = config?.uikitUploadSizeLimit;\n  const uikitMultipleFilesMessageLimit = config?.uikitMultipleFilesMessageLimit;\n  const { openModal } = useGlobalModalContext();\n\n  const handleUploadFiles = useCallback((fileList: FileList) => {\n    const files: File[] = Array.from(fileList);\n\n    // Validate Paremeters\n    if (!sendFileMessage || !sendMultipleFilesMessage) {\n      logger.warning('Channel|useHandleUploadFiles: required functions are undefined', { sendFileMessage, sendMultipleFilesMessage });\n      return;\n    }\n    if (files.length === 0) {\n      logger.warning('Channel|useHandleUploadFiles: given file list is empty.', { files });\n      return;\n    }\n    if (files.length > uikitMultipleFilesMessageLimit) {\n      logger.info(`Channel|useHandleUploadFiles: Cannot upload files more than ${uikitMultipleFilesMessageLimit}`);\n      openModal({\n        modalProps: {\n          titleText: `Up to ${uikitMultipleFilesMessageLimit} files can be attached.`,\n          hideFooter: true,\n        },\n        childElement: ({ closeModal }) => (\n          <ModalFooter\n            type={ButtonTypes.PRIMARY}\n            submitText={stringSet.BUTTON__OK}\n            hideCancelButton\n            onCancel={closeModal}\n            onSubmit={closeModal}\n          />\n        ),\n      });\n      return;\n    }\n    if (files.some((file: File) => file.size > uikitUploadSizeLimit)) {\n      // The default value of uikitUploadSizeLimit is 26MB\n      logger.info(`Channel|useHandleUploadFiles: Cannot upload file size exceeding ${uikitUploadSizeLimit}`);\n      const ONE_MiB = 1024 * 1024;\n      openModal({\n        modalProps: {\n          titleText: `The maximum size per file is ${Math.floor(uikitUploadSizeLimit / ONE_MiB)} MB.`,\n          hideFooter: true,\n        },\n        childElement: ({ closeModal }) => (\n          <ModalFooter\n            type={ButtonTypes.PRIMARY}\n            submitText={stringSet.BUTTON__OK}\n            hideCancelButton\n            onCancel={closeModal}\n            onSubmit={closeModal}\n          />\n        ),\n      });\n      return;\n    }\n\n    if (files.length === 1) {\n      logger.info('Channel|useHandleUploadFiles: sending one file.');\n      const [file] = files;\n      sendFileMessage(file, quoteMessage);\n    } else if (files.length > 1) {\n      logger.info('Channel|useHandleUploadFiles: sending multiple files.');\n      const imageFiles: Array<File> = [];\n      const otherFiles: Array<File> = [];\n      files.forEach((file: File) => {\n        if (isImage(file.type)) {\n          imageFiles.push(file);\n        } else {\n          otherFiles.push(file);\n        }\n      });\n\n      return otherFiles.reduce((\n        previousPromise: Promise<MultipleFilesMessage | FileMessage | void>,\n        item: File,\n      ) => {\n        return previousPromise.then(() => {\n          return sendFileMessage(item as File, quoteMessage);\n        });\n      }, (() => {\n        if (imageFiles.length === 0) {\n          return Promise.resolve();\n        } else if (imageFiles.length === 1) {\n          return sendFileMessage(imageFiles[0], quoteMessage);\n        } else {\n          return sendMultipleFilesMessage(imageFiles, quoteMessage);\n        }\n      })());\n    }\n  }, [\n    sendFileMessage,\n    sendMultipleFilesMessage,\n    quoteMessage,\n  ]);\n\n  return [handleUploadFiles];\n};\n", "import React, { useState, useContext, useEffect } from 'react';\n\nimport './message-input.scss';\nimport * as utils from '../../context/utils';\n\nimport type { Nullable } from '../../../../types';\nimport MessageInput from '../../../../ui/MessageInput';\nimport QuoteMessageInput from '../../../../ui/QuoteMessageInput';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport SuggestedMentionList from '../SuggestedMentionList';\nimport { MessageInputKeys } from '../../../../ui/MessageInput/const';\nimport VoiceMessageInputWrapper from './VoiceMessageInputWrapper';\nimport { useDirtyGetMentions } from '../../../Message/hooks/useDirtyGetMentions';\nimport { useMediaQueryContext } from '../../../../lib/MediaQueryContext';\nimport { useHandleUploadFiles } from './useHandleUploadFiles';\n\nexport type MessageInputWrapperProps = {\n  value?: string;\n  disabled?: boolean;\n  renderFileUploadIcon?: () => React.ReactElement;\n  renderVoiceMessageIcon?: () => React.ReactElement;\n  renderSendMessageIcon?: () => React.ReactElement;\n};\n\nconst MessageInputWrapper = (\n  props: MessageInputWrapperProps,\n  ref: React.MutableRefObject<any>,\n): Nullable<JSX.Element> => {\n  const {\n    value,\n    renderFileUploadIcon,\n    renderVoiceMessageIcon,\n    renderSendMessageIcon,\n  } = props;\n  const propDisabled = props.disabled;\n  const channelContext = useChannelContext();\n  const {\n    currentGroupChannel,\n    initialized,\n    quoteMessage,\n    sendMessage,\n    sendFileMessage,\n    sendVoiceMessage,\n    sendMultipleFilesMessage,\n    setQuoteMessage,\n    messageInputRef,\n    renderUserMentionItem,\n  } = channelContext;\n  const globalStore = useSendbirdStateContext();\n  const { isMobile } = useMediaQueryContext();\n  const channel = currentGroupChannel;\n\n  const {\n    isOnline,\n    isMentionEnabled,\n    userMention,\n    isVoiceMessageEnabled,\n    logger,\n  } = globalStore.config;\n  const isMultipleFilesMessageEnabled = (\n    channelContext.isMultipleFilesMessageEnabled\n    ?? globalStore.config.isMultipleFilesMessageEnabled\n  );\n  const maxUserMentionCount = userMention?.maxMentionCount || 10;\n  const maxUserSuggestionCount = userMention?.maxSuggestionCount || 15;\n\n  const { stringSet } = useContext(LocalizationContext);\n  const [mentionNickname, setMentionNickname] = useState('');\n  // todo: set type\n  const [mentionedUsers, setMentionedUsers] = useState([]);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [mentionSuggestedUsers, setMentionSuggestedUsers] = useState([]);\n  const [messageInputEvent, setMessageInputEvent] = useState(null);\n  const [showVoiceMessageInput, setShowVoiceMessageInput] = useState(false);\n  const disabled = propDisabled\n    || !initialized\n    || utils.isDisabledBecauseFrozen(channel)\n    || utils.isDisabledBecauseMuted(channel)\n    || !isOnline;\n  const isOperator = utils.isOperator(channel);\n  const isBroadcast = channel?.isBroadcast;\n\n  const displaySuggestedMentionList = isOnline\n    && isMentionEnabled\n    && mentionNickname.length > 0\n    && !utils.isDisabledBecauseFrozen(channel)\n    && !utils.isDisabledBecauseMuted(channel)\n    && !isBroadcast;\n\n  // Reset when channel changes\n  useEffect(() => {\n    setMentionNickname('');\n    setMentionedUsers([]);\n    setMentionedUserIds([]);\n    setSelectedUser(null);\n    setMentionSuggestedUsers([]);\n    setMessageInputEvent(null);\n    setShowVoiceMessageInput(false);\n  }, [channel?.url]);\n\n  const mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger });\n  const ableMention = mentionNodes?.length < maxUserMentionCount;\n\n  useEffect(() => {\n    setMentionedUsers(mentionedUsers.filter(({ userId }) => {\n      const i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n\n  // MFM\n  const [handleUploadFiles] = useHandleUploadFiles({\n    sendFileMessage,\n    sendMultipleFilesMessage,\n    quoteMessage,\n  }, {\n    logger,\n  });\n\n  // broadcast channel + not operator\n  if (isBroadcast && !isOperator) {\n    return null;\n  }\n  // other conditions\n  return (\n    <div className={`sendbird-message-input-wrapper${showVoiceMessageInput ? '--voice-message' : ''}`}>\n      {\n        displaySuggestedMentionList && (\n          <SuggestedMentionList\n            targetNickname={mentionNickname}\n            inputEvent={messageInputEvent}\n            renderUserMentionItem={renderUserMentionItem}\n            onUserItemClick={(user) => {\n              if (user) {\n                setMentionedUsers([...mentionedUsers, user]);\n              }\n              setMentionNickname('');\n              setSelectedUser(user);\n              setMessageInputEvent(null);\n            }}\n            onFocusItemChange={() => {\n              setMessageInputEvent(null);\n            }}\n            onFetchUsers={(users) => {\n              setMentionSuggestedUsers(users);\n            }}\n            ableAddMention={ableMention}\n            maxMentionCount={maxUserMentionCount}\n            maxSuggestionCount={maxUserSuggestionCount}\n          />\n        )\n      }\n      {quoteMessage && (\n        <div className=\"sendbird-message-input-wrapper__quote-message-input\">\n          <QuoteMessageInput\n            replyingMessage={quoteMessage}\n            onClose={() => setQuoteMessage(null)}\n          />\n        </div>\n      )}\n      {\n        showVoiceMessageInput\n          ? (\n            <VoiceMessageInputWrapper\n              channel={channel}\n              onSubmitClick={(recordedFile, duration) => {\n                sendVoiceMessage(recordedFile, duration, quoteMessage);\n                setQuoteMessage(null);\n                setShowVoiceMessageInput(false);\n              }}\n              onCancelClick={() => {\n                setShowVoiceMessageInput(false);\n              }}\n            />\n          )\n          : (\n            <MessageInput\n              className=\"sendbird-message-input-wrapper__message-input\"\n              value={value}\n              channelUrl={channel?.url}\n              mentionSelectedUser={selectedUser}\n              isMentionEnabled={isMentionEnabled}\n              isVoiceMessageEnabled={isVoiceMessageEnabled}\n              isSelectingMultipleFilesEnabled={isMultipleFilesMessageEnabled}\n              onVoiceMessageIconClick={() => {\n                setShowVoiceMessageInput(true);\n              }}\n              setMentionedUsers={setMentionedUsers}\n              channel={channel}\n              placeholder={\n                (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)\n                || (utils.isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)\n                || (utils.isDisabledBecauseMuted(channel) && (\n                  isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED\n                ))\n              }\n              ref={ref || messageInputRef}\n              disabled={disabled}\n              renderFileUploadIcon={renderFileUploadIcon}\n              renderSendMessageIcon={renderSendMessageIcon}\n              renderVoiceMessageIcon={renderVoiceMessageIcon}\n              onStartTyping={() => {\n                channel?.startTyping();\n              }}\n              onSendMessage={({ message, mentionTemplate }) => {\n                sendMessage({\n                  message,\n                  quoteMessage,\n                  mentionedUsers,\n                  mentionTemplate,\n                });\n                setMentionNickname('');\n                setMentionedUsers([]);\n                setQuoteMessage(null);\n                channel?.endTyping?.();\n              }}\n              onFileUpload={(fileList: FileList) => {\n                handleUploadFiles(fileList);\n                setQuoteMessage(null);\n              }}\n              onUserMentioned={(user) => {\n                if (selectedUser?.userId === user?.userId) {\n                  setSelectedUser(null);\n                  setMentionNickname('');\n                }\n              }}\n              onMentionStringChange={(mentionText) => {\n                setMentionNickname(mentionText);\n              }}\n              onMentionedUserIdsUpdated={(userIds) => {\n                setMentionedUserIds(userIds);\n              }}\n              onKeyDown={(e) => {\n                if (displaySuggestedMentionList && mentionSuggestedUsers?.length > 0\n                  && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)\n                ) {\n                  setMessageInputEvent(e);\n                  return true;\n                }\n                return false;\n              }}\n            />\n          )\n      }\n    </div>\n  );\n};\n\nexport default React.forwardRef(MessageInputWrapper);\n", "import './channel-ui.scss';\n\nimport React from 'react';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport ConnectionStatus from '../../../../ui/ConnectionStatus';\nimport ChannelHeader from '../ChannelHeader';\nimport MessageList from '../MessageList';\nimport TypingIndicator from '../TypingIndicator';\nimport MessageInputWrapper from '../MessageInput';\nimport { RenderCustomSeparatorProps, RenderMessageProps } from '../../../../types';\n\nexport interface ChannelUIProps {\n  isLoading?: boolean;\n  renderPlaceholderLoader?: () => React.ReactElement;\n  renderPlaceholderInvalid?: () => React.ReactElement;\n  renderPlaceholderEmpty?: () => React.ReactElement;\n  renderChannelHeader?: () => React.ReactElement;\n  renderMessage?: (props: RenderMessageProps) => React.ReactElement;\n  renderMessageInput?: () => React.ReactElement;\n  renderFileUploadIcon?: () => React.ReactElement;\n  renderVoiceMessageIcon?: () => React.ReactElement;\n  renderSendMessageIcon?: () => React.ReactElement;\n  renderTypingIndicator?: () => React.ReactElement;\n  renderCustomSeparator?: (props: RenderCustomSeparatorProps) => React.ReactElement;\n}\n\nconst ChannelUI: React.FC<ChannelUIProps> = ({\n  isLoading,\n  renderPlaceholderLoader,\n  renderPlaceholderInvalid,\n  renderPlaceholderEmpty,\n  renderChannelHeader,\n  renderMessage,\n  renderMessageInput,\n  renderTypingIndicator,\n  renderCustomSeparator,\n  renderFileUploadIcon,\n  renderVoiceMessageIcon,\n  renderSendMessageIcon,\n}: ChannelUIProps) => {\n  const {\n    channelUrl,\n    isInvalid,\n  } = useChannelContext();\n\n  const globalStore = useSendbirdStateContext();\n  const sdkError = globalStore?.stores?.sdkStore?.error;\n  const logger = globalStore?.config?.logger;\n  const isOnline = globalStore?.config?.isOnline;\n\n  if (isLoading) {\n    return (<div className=\"sendbird-conversation\">\n      {\n        renderPlaceholderLoader?.() || (\n          <PlaceHolder type={PlaceHolderTypes.LOADING} />\n        )\n      }\n    </div>);\n  }\n\n  if (!channelUrl) {\n    return (<div className=\"sendbird-conversation\">\n      {\n        renderPlaceholderInvalid?.() || (\n          <PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} />\n        )\n      }\n    </div>);\n  }\n  if (isInvalid) {\n    return (\n      <div className=\"sendbird-conversation\">\n        {\n          renderPlaceholderInvalid?.() || (\n            <PlaceHolder type={PlaceHolderTypes.WRONG} />\n          )\n        }\n      </div>\n    );\n  }\n  if (sdkError) {\n    return (\n      <div className=\"sendbird-conversation\">\n        {\n          renderPlaceholderInvalid?.() || (\n            <PlaceHolder\n              type={PlaceHolderTypes.WRONG}\n              retryToConnect={() => {\n                logger.info('Channel: reconnecting');\n                // reconnect();\n              }}\n            />\n          )\n        }\n      </div>\n    );\n  }\n  return (\n    <div className='sendbird-conversation'>\n      {renderChannelHeader?.() || (\n        <ChannelHeader className=\"sendbird-conversation__channel-header\" />\n      )}\n      <MessageList\n        className=\"sendbird-conversation__message-list\"\n        renderMessage={renderMessage}\n        renderPlaceholderEmpty={renderPlaceholderEmpty}\n        renderCustomSeparator={renderCustomSeparator}\n        renderPlaceholderLoader={renderPlaceholderLoader}\n      />\n      <div className=\"sendbird-conversation__footer\">\n        {\n          renderMessageInput?.() || (\n            <MessageInputWrapper\n              renderFileUploadIcon={renderFileUploadIcon}\n              renderVoiceMessageIcon={renderVoiceMessageIcon}\n              renderSendMessageIcon={renderSendMessageIcon}\n            />\n          )\n        }\n        <div className=\"sendbird-conversation__footer__typing-indicator\">\n          {\n            renderTypingIndicator?.()\n              || globalStore?.config?.groupChannel?.enableTypingIndicator && (\n                <TypingIndicator />\n              )\n          }\n          {\n            !isOnline && (\n              <ConnectionStatus />\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChannelUI;\n", "import React from 'react';\n\nimport {\n  ChannelProvider,\n  ChannelContextProps,\n} from './context/ChannelProvider';\n\nimport ChannelUI, { ChannelUIProps } from './components/ChannelUI';\n\nexport interface ChannelProps extends ChannelContextProps, ChannelUIProps { }\n\nconst Channel: React.FC<ChannelProps> = (props: ChannelProps) => {\n  return (\n    <ChannelProvider\n      channelUrl={props?.channelUrl}\n      isReactionEnabled={props?.isReactionEnabled}\n      isMessageGroupingEnabled={props?.isMessageGroupingEnabled}\n      isMultipleFilesMessageEnabled={props?.isMultipleFilesMessageEnabled}\n      showSearchIcon={props?.showSearchIcon}\n      animatedMessage={props?.animatedMessage}\n      highlightedMessage={props?.highlightedMessage}\n      startingPoint={props?.startingPoint}\n      onBeforeSendUserMessage={props?.onBeforeSendUserMessage}\n      onBeforeSendFileMessage={props?.onBeforeSendFileMessage}\n      onBeforeUpdateUserMessage={props?.onBeforeUpdateUserMessage}\n      onBeforeSendVoiceMessage={props?.onBeforeSendVoiceMessage}\n      onBeforeSendMultipleFilesMessage={props?.onBeforeSendMultipleFilesMessage}\n      onChatHeaderActionClick={props?.onChatHeaderActionClick}\n      onSearchClick={props?.onSearchClick}\n      onBackClick={props?.onBackClick}\n      replyType={props?.replyType}\n      threadReplySelectType={props?.threadReplySelectType}\n      queries={props?.queries}\n      renderUserProfile={props?.renderUserProfile}\n      filterMessageList={props?.filterMessageList}\n      disableUserProfile={props?.disableUserProfile}\n      disableMarkAsRead={props?.disableMarkAsRead}\n      onReplyInThread={props?.onReplyInThread}\n      onQuoteMessageClick={props?.onQuoteMessageClick}\n      onMessageAnimated={props?.onMessageAnimated}\n      onMessageHighlighted={props?.onMessageHighlighted}\n      scrollBehavior={props.scrollBehavior}\n      reconnectOnIdle={props.reconnectOnIdle}\n    >\n      <ChannelUI\n        isLoading={props?.isLoading}\n        renderPlaceholderLoader={props?.renderPlaceholderLoader}\n        renderPlaceholderInvalid={props?.renderPlaceholderInvalid}\n        renderPlaceholderEmpty={props?.renderPlaceholderEmpty}\n        renderChannelHeader={props?.renderChannelHeader}\n        renderMessage={props?.renderMessage}\n        renderMessageInput={props?.renderMessageInput}\n        renderTypingIndicator={props?.renderTypingIndicator}\n        renderCustomSeparator={props?.renderCustomSeparator}\n        renderFileUploadIcon={props?.renderFileUploadIcon}\n        renderVoiceMessageIcon={props?.renderVoiceMessageIcon}\n        renderSendMessageIcon={props?.renderSendMessageIcon}\n      />\n    </ChannelProvider>\n  );\n};\n\nexport default Channel;\n"],
  "mappings": "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KAAKC,KAAK;AACZ,eAAO9C,QAAQ6C,KAAKC,GAAN;MACf;AAED,UAAI,OAAOD,KAAKJ,UAAU,YAAY;AACpC,eAAOzC,QAAQ6C,KAAKJ,KAAN;MACf;IACF;AAEDH,aAASrD,eAAeqD,MAAD;EACxB;AAEQS,WAAAA,cAAcZ,SAAS;AAC9Ba,YAAQC,KAAK,sBAAsBd,OAAnC;AACA,WAAO;EACR;AAED,SAAOY;AACR;AC3JM,IAAMG,SAAO9D,OAAO,CACzB,KACA,QACA,WACA,WACA,QACA,WACA,SACA,SACA,KACA,OACA,OACA,OACA,SACA,cACA,QACA,MACA,UACA,UACA,WACA,UACA,QACA,QACA,OACA,YACA,WACA,QACA,YACA,MACA,aACA,OACA,WACA,OACA,UACA,OACA,OACA,MACA,MACA,WACA,MACA,YACA,cACA,UACA,QACA,UACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,QACA,UACA,UACA,MACA,QACA,KACA,OACA,SACA,OACA,OACA,SACA,UACA,MACA,QACA,OACA,QACA,WACA,QACA,YACA,SACA,OACA,QACA,MACA,YACA,UACA,UACA,KACA,WACA,OACA,YACA,KACA,MACA,MACA,QACA,KACA,QACA,WACA,UACA,UACA,SACA,UACA,UACA,QACA,UACA,UACA,SACA,OACA,WACA,OACA,SACA,SACA,MACA,YACA,YACA,SACA,MACA,SACA,QACA,MACA,SACA,MACA,KACA,MACA,OACA,SACA,KArHyB,CAAD;AAyHnB,IAAM+D,QAAM/D,OAAO,CACxB,OACA,KACA,YACA,eACA,gBACA,gBACA,iBACA,oBACA,UACA,YACA,QACA,QACA,WACA,UACA,QACA,KACA,SACA,YACA,SACA,SACA,QACA,kBACA,UACA,QACA,YACA,SACA,QACA,WACA,WACA,YACA,kBACA,QACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,QACA,SACA,QACA,OA3CwB,CAAD;AA8ClB,IAAMgE,aAAahE,OAAO,CAC/B,WACA,iBACA,uBACA,eACA,oBACA,qBACA,qBACA,kBACA,gBACA,WACA,WACA,WACA,WACA,WACA,kBACA,WACA,WACA,eACA,gBACA,YACA,gBACA,sBACA,eACA,UACA,cAzB+B,CAAD;AAgCzB,IAAMiE,gBAAgBjE,OAAO,CAClC,WACA,iBACA,UACA,WACA,aACA,oBACA,kBACA,iBACA,iBACA,iBACA,SACA,aACA,QACA,gBACA,aACA,WACA,iBACA,UACA,OACA,cACA,WACA,KAtBkC,CAAD;AAyB5B,IAAMkE,WAASlE,OAAO,CAC3B,QACA,YACA,UACA,WACA,SACA,UACA,MACA,cACA,iBACA,MACA,MACA,SACA,WACA,YACA,SACA,QACA,MACA,UACA,SACA,UACA,QACA,QACA,WACA,UACA,OACA,SACA,OACA,UACA,cACA,aA9B2B,CAAD;AAmCrB,IAAMmE,mBAAmBnE,OAAO,CACrC,WACA,eACA,cACA,YACA,aACA,WACA,WACA,UACA,UACA,SACA,aACA,cACA,kBACA,eACA,MAfqC,CAAD;AAkB/B,IAAMoE,OAAOpE,OAAO,CAAC,OAAD,CAAD;ACrRnB,IAAM8D,OAAO9D,OAAO,CACzB,UACA,UACA,SACA,OACA,kBACA,gBACA,wBACA,YACA,cACA,WACA,UACA,WACA,eACA,eACA,WACA,QACA,SACA,SACA,SACA,QACA,WACA,YACA,gBACA,UACA,eACA,YACA,YACA,WACA,OACA,YACA,2BACA,yBACA,YACA,aACA,WACA,gBACA,QACA,OACA,WACA,UACA,UACA,QACA,QACA,YACA,MACA,aACA,aACA,SACA,QACA,SACA,QACA,QACA,WACA,QACA,OACA,OACA,aACA,SACA,UACA,OACA,aACA,YACA,SACA,QACA,SACA,WACA,cACA,UACA,QACA,WACA,WACA,eACA,eACA,UACA,WACA,WACA,cACA,YACA,OACA,YACA,OACA,YACA,QACA,QACA,WACA,cACA,SACA,YACA,SACA,QACA,SACA,QACA,WACA,SACA,OACA,UACA,QACA,SACA,WACA,YACA,SACA,aACA,QACA,UACA,UACA,SACA,SACA,SACA,MA7GyB,CAAD;AAgHnB,IAAM+D,MAAM/D,OAAO,CACxB,iBACA,cACA,YACA,sBACA,UACA,iBACA,iBACA,WACA,iBACA,kBACA,SACA,QACA,MACA,SACA,QACA,iBACA,aACA,aACA,SACA,uBACA,+BACA,iBACA,mBACA,MACA,MACA,KACA,MACA,MACA,mBACA,aACA,WACA,WACA,OACA,YACA,aACA,OACA,QACA,gBACA,aACA,UACA,eACA,eACA,iBACA,eACA,aACA,oBACA,gBACA,cACA,gBACA,eACA,MACA,MACA,MACA,MACA,cACA,YACA,iBACA,qBACA,UACA,QACA,MACA,mBACA,MACA,OACA,KACA,MACA,MACA,MACA,MACA,WACA,aACA,cACA,YACA,QACA,gBACA,kBACA,gBACA,oBACA,kBACA,SACA,cACA,cACA,gBACA,gBACA,eACA,eACA,oBACA,aACA,OACA,QACA,SACA,UACA,QACA,OACA,QACA,cACA,UACA,YACA,WACA,SACA,UACA,eACA,UACA,YACA,eACA,QACA,cACA,uBACA,oBACA,gBACA,UACA,iBACA,uBACA,kBACA,KACA,MACA,MACA,UACA,QACA,QACA,eACA,aACA,WACA,UACA,UACA,SACA,QACA,mBACA,oBACA,oBACA,gBACA,eACA,gBACA,eACA,cACA,gBACA,oBACA,qBACA,kBACA,mBACA,qBACA,kBACA,UACA,gBACA,SACA,gBACA,kBACA,YACA,WACA,WACA,aACA,oBACA,eACA,mBACA,kBACA,cACA,QACA,MACA,MACA,WACA,UACA,WACA,cACA,WACA,cACA,iBACA,iBACA,SACA,gBACA,QACA,gBACA,oBACA,oBACA,KACA,MACA,MACA,SACA,KACA,MACA,MACA,KACA,YAtLwB,CAAD;AAyLlB,IAAMkE,SAASlE,OAAO,CAC3B,UACA,eACA,SACA,YACA,SACA,gBACA,eACA,cACA,cACA,SACA,OACA,WACA,gBACA,YACA,SACA,SACA,UACA,QACA,MACA,WACA,UACA,iBACA,UACA,UACA,kBACA,aACA,YACA,eACA,WACA,WACA,iBACA,YACA,YACA,QACA,YACA,YACA,cACA,WACA,UACA,UACA,eACA,iBACA,wBACA,aACA,aACA,cACA,YACA,kBACA,kBACA,aACA,WACA,SACA,OArD2B,CAAD;AAwDrB,IAAMqE,MAAMrE,OAAO,CACxB,cACA,UACA,eACA,aACA,aALwB,CAAD;AChWlB,IAAMsE,gBAAgBrE,KAAK,2BAAD;AAC1B,IAAMsE,WAAWtE,KAAK,uBAAD;AACrB,IAAMuE,cAAcvE,KAAK,eAAD;AACxB,IAAMwE,YAAYxE,KAAK,4BAAD;AACtB,IAAMyE,YAAYzE,KAAK,gBAAD;AACtB,IAAM0E,iBAAiB1E;EAC5B;;AADgC;AAG3B,IAAM2E,oBAAoB3E,KAAK,uBAAD;AAC9B,IAAM4E,kBAAkB5E;EAC7B;;AADiC;AAG5B,IAAM6E,eAAe7E,KAAK,SAAD;;;;;;;;;;;;;ACQhC,IAAM8E,YAAY,SAAZA,aAAwB;AAC5B,SAAO,OAAOC,WAAW,cAAc,OAAOA;AAC/C;AAUD,IAAMC,4BAA4B,SAA5BA,2BAAsCC,cAAcC,mBAAmB;AAEzE,MAAA,OAAOD,iBAAiB,YACxB,OAAOA,aAAaE,iBAAiB,YACrC;AACA,WAAO;EACR;AAKGC,MAAAA,SAAS;AACPC,QAAAA,YAAY;AACdH,MAAAA,qBAAqBA,kBAAkBI,aAAaD,SAA/B,GAA2C;AAClED,aAASF,kBAAkBK,aAAaF,SAA/B;EACV;AAEKG,QAAAA,aAAa,eAAeJ,SAAS,MAAMA,SAAS;AAEtD,MAAA;AACF,WAAOH,aAAaE,aAAaK,YAAY;MAC3CC,WAAW5B,OAAM;AACf,eAAOA;MACR;MACD6B,gBAAgBC,WAAW;AACzB,eAAOA;MACR;IAN0C,CAAtC;EAQR,SAAQC,GAAG;AAIVjC,YAAQC,KACN,yBAAyB4B,aAAa,wBADxC;AAGA,WAAO;EACR;AACF;AAED,SAASK,kBAAsC;AAAtBd,MAAAA,UAASD,UAAAA,SAAAA,KAAAA,UAAAA,CAAAA,MAAAA,SAAAA,UAAAA,CAAAA,IAAAA,UAAS;AACzC,QAAMgB,YAAaC,UAASF,gBAAgBE,IAAD;AAM3CD,YAAUE,UAAUC;AAMpBH,YAAUI,UAAU,CAAA;AAEpB,MAAI,CAACnB,WAAU,CAACA,QAAOoB,YAAYpB,QAAOoB,SAASC,aAAa,GAAG;AAGjEN,cAAUO,cAAc;AAExB,WAAOP;EACR;AAEG,MAAA;IAAEK,UAAAA;EAAF,IAAepB;AAEbuB,QAAAA,mBAAmBH;AACzB,QAAMI,gBAAgBD,iBAAiBC;AACjC,QAAA;IACJC;IACAC;IACAC;IACAC;IACAC;IACAC,eAAe9B,QAAO8B,gBAAgB9B,QAAO+B;IAC7CC;IACAC;IACA/B;EATI,IAUFF;AAEJ,QAAMkC,mBAAmBN,QAAQ9F;AAEjC,QAAMqG,YAAY5D,aAAa2D,kBAAkB,WAAnB;AAC9B,QAAME,iBAAiB7D,aAAa2D,kBAAkB,aAAnB;AACnC,QAAMG,gBAAgB9D,aAAa2D,kBAAkB,YAAnB;AAC5BI,QAAAA,gBAAgB/D,aAAa2D,kBAAkB,YAAnB;AAQlC,MAAI,OAAOR,wBAAwB,YAAY;AAC7C,UAAMa,WAAWnB,UAASoB,cAAc,UAAvB;AACbD,QAAAA,SAASE,WAAWF,SAASE,QAAQC,eAAe;AACtDtB,MAAAA,YAAWmB,SAASE,QAAQC;IAC7B;EACF;AAED,MAAIC;AACAC,MAAAA,YAAY;AAEV,QAAA;IACJC;IACAC;IACAC;IACAC;EAJI,IAKF5B;AACE,QAAA;IAAE6B;EAAF,IAAiB1B;AAEnB2B,MAAAA,QAAQ,CAAA;AAKZnC,YAAUO,cACR,OAAO5G,YAAY,cACnB,OAAO4H,kBAAkB,cACzBO,kBACAA,eAAeM,uBAAuB7E;AAElC,QAAA;IACJgB,eAAAA;IACAC,UAAAA;IACAC,aAAAA;IACAC,WAAAA;IACAC,WAAAA;IACAE,mBAAAA;IACAC,iBAAAA;EAPI,IAQFuD;AAEA,MAAA;IAAEzD,gBAAAA;EAAF,IAAqByD;AAQrBC,MAAAA,eAAe;AACnB,QAAMC,uBAAuB7F,SAAS,CAAA,GAAI,CACxC,GAAG8F,QACH,GAAGA,OACH,GAAGA,YACH,GAAGA,UACH,GAAGA,IALqC,CAAL;AASjCC,MAAAA,eAAe;AACbC,QAAAA,uBAAuBhG,SAAS,CAAA,GAAI,CACxC,GAAGiG,MACH,GAAGA,KACH,GAAGA,QACH,GAAGA,GAJqC,CAAL;AAajCC,MAAAA,0BAA0B5I,OAAOE,KACnCC,OAAO,MAAM;IACX0I,cAAc;MACZC,UAAU;MACVC,cAAc;MACdC,YAAY;MACZ1F,OAAO;IAJK;IAMd2F,oBAAoB;MAClBH,UAAU;MACVC,cAAc;MACdC,YAAY;MACZ1F,OAAO;IAJW;IAMpB4F,gCAAgC;MAC9BJ,UAAU;MACVC,cAAc;MACdC,YAAY;MACZ1F,OAAO;IAJuB;EAbrB,CAAP,CADsB;AAwB1B6F,MAAAA,cAAc;AAGdC,MAAAA,cAAc;AAGdC,MAAAA,kBAAkB;AAGlBC,MAAAA,kBAAkB;AAGlBC,MAAAA,0BAA0B;AAI1BC,MAAAA,2BAA2B;AAK3BC,MAAAA,qBAAqB;AAGrBC,MAAAA,iBAAiB;AAGjBC,MAAAA,aAAa;AAIbC,MAAAA,aAAa;AAMbC,MAAAA,aAAa;AAIbC,MAAAA,sBAAsB;AAItBC,MAAAA,sBAAsB;AAKtBC,MAAAA,eAAe;AAefC,MAAAA,uBAAuB;AACrBC,QAAAA,8BAA8B;AAGhCC,MAAAA,eAAe;AAIfC,MAAAA,WAAW;AAGXC,MAAAA,eAAe,CAAA;AAGfC,MAAAA,kBAAkB;AAChBC,QAAAA,0BAA0B7H,SAAS,CAAA,GAAI,CAC3C,kBACA,SACA,YACA,QACA,iBACA,QACA,UACA,QACA,MACA,MACA,MACA,MACA,SACA,WACA,YACA,YACA,aACA,UACA,SACA,OACA,YACA,SACA,SACA,SACA,KAzB2C,CAAL;AA6BpC8H,MAAAA,gBAAgB;AACpB,QAAMC,wBAAwB/H,SAAS,CAAA,GAAI,CACzC,SACA,SACA,OACA,UACA,SACA,OANyC,CAAL;AAUlCgI,MAAAA,sBAAsB;AAC1B,QAAMC,8BAA8BjI,SAAS,CAAA,GAAI,CAC/C,OACA,SACA,OACA,MACA,SACA,QACA,WACA,eACA,QACA,WACA,SACA,SACA,SACA,OAd+C,CAAL;AAiBtCkI,QAAAA,mBAAmB;AACnBC,QAAAA,gBAAgB;AAChBC,QAAAA,iBAAiB;AAEnBC,MAAAA,YAAYD;AACZE,MAAAA,iBAAiB;AAGjBC,MAAAA,qBAAqB;AACzB,QAAMC,6BAA6BxI,SACjC,CAAA,GACA,CAACkI,kBAAkBC,eAAeC,cAAlC,GACAtJ,cAHyC;AAOvC2J,MAAAA,oBAAoB;AACxB,QAAMC,+BAA+B,CAAC,yBAAyB,WAA1B;AAC/BC,QAAAA,4BAA4B;AAC9BxI,MAAAA,oBAAoB;AAGpByI,MAAAA,SAAS;AAKb,QAAMC,cAAclF,UAASoB,cAAc,MAAvB;AAEpB,QAAM+D,oBAAoB,SAApBA,mBAA8BC,WAAW;AAC7C,WAAOA,qBAAqBtJ,UAAUsJ,qBAAqBC;EAC5D;AAQD,QAAMC,eAAe,SAAfA,gBAAmC;AAAVC,QAAAA,MAAU,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAJ,CAAA;AACnC,QAAIN,UAAUA,WAAWM,KAAK;AAC5B;IACD;AAGD,QAAI,CAACA,OAAO,OAAOA,QAAQ,UAAU;AACnCA,YAAM,CAAA;IACP;AAGDA,UAAM1I,MAAM0I,GAAD;AAEXT;IAEEC,6BAA6BrJ,QAAQ6J,IAAIT,iBAAzC,MAAgE,KAC3DA,oBAAoBE,4BACpBF,oBAAoBS,IAAIT;AAG/BtI,wBACEsI,sBAAsB,0BAClB3J,iBACAH;AAGNiH,mBACE,kBAAkBsD,MACdlJ,SAAS,CAAA,GAAIkJ,IAAItD,cAAczF,iBAAvB,IACR0F;AACNE,mBACE,kBAAkBmD,MACdlJ,SAAS,CAAA,GAAIkJ,IAAInD,cAAc5F,iBAAvB,IACR6F;AACNuC,yBACE,wBAAwBW,MACpBlJ,SAAS,CAAA,GAAIkJ,IAAIX,oBAAoBzJ,cAA7B,IACR0J;AACNR,0BACE,uBAAuBkB,MACnBlJ;MACEQ,MAAMyH,2BAAD;;MACLiB,IAAIC;;MACJhJ;;IAHM,IAKR8H;AACNH,oBACE,uBAAuBoB,MACnBlJ;MACEQ,MAAMuH,qBAAD;;MACLmB,IAAIE;;MACJjJ;;IAHM,IAKR4H;AACNH,sBACE,qBAAqBsB,MACjBlJ,SAAS,CAAA,GAAIkJ,IAAItB,iBAAiBzH,iBAA1B,IACR0H;AACNpB,kBACE,iBAAiByC,MACblJ,SAAS,CAAA,GAAIkJ,IAAIzC,aAAatG,iBAAtB,IACR,CAAA;AACNuG,kBACE,iBAAiBwC,MACblJ,SAAS,CAAA,GAAIkJ,IAAIxC,aAAavG,iBAAtB,IACR,CAAA;AACNwH,mBAAe,kBAAkBuB,MAAMA,IAAIvB,eAAe;AAC1DhB,sBAAkBuC,IAAIvC,oBAAoB;AAC1CC,sBAAkBsC,IAAItC,oBAAoB;AAC1CC,8BAA0BqC,IAAIrC,2BAA2B;AACzDC,+BAA2BoC,IAAIpC,6BAA6B;AAC5DC,yBAAqBmC,IAAInC,sBAAsB;AAC/CC,qBAAiBkC,IAAIlC,kBAAkB;AACvCG,iBAAa+B,IAAI/B,cAAc;AAC/BC,0BAAsB8B,IAAI9B,uBAAuB;AACjDC,0BAAsB6B,IAAI7B,uBAAuB;AACjDH,iBAAagC,IAAIhC,cAAc;AAC/BI,mBAAe4B,IAAI5B,iBAAiB;AACpCC,2BAAuB2B,IAAI3B,wBAAwB;AACnDE,mBAAeyB,IAAIzB,iBAAiB;AACpCC,eAAWwB,IAAIxB,YAAY;AAC3BxF,uBAAiBgH,IAAIG,sBAAsB1D;AAC3C0C,gBAAYa,IAAIb,aAAaD;AAC7BlC,8BAA0BgD,IAAIhD,2BAA2B,CAAA;AACzD,QACEgD,IAAIhD,2BACJ4C,kBAAkBI,IAAIhD,wBAAwBC,YAA7B,GACjB;AACAD,8BAAwBC,eACtB+C,IAAIhD,wBAAwBC;IAC/B;AAED,QACE+C,IAAIhD,2BACJ4C,kBAAkBI,IAAIhD,wBAAwBK,kBAA7B,GACjB;AACAL,8BAAwBK,qBACtB2C,IAAIhD,wBAAwBK;IAC/B;AAED,QACE2C,IAAIhD,2BACJ,OAAOgD,IAAIhD,wBAAwBM,mCACjC,WACF;AACAN,8BAAwBM,iCACtB0C,IAAIhD,wBAAwBM;IAC/B;AAED,QAAIO,oBAAoB;AACtBH,wBAAkB;IACnB;AAED,QAAIQ,qBAAqB;AACvBD,mBAAa;IACd;AAGD,QAAIQ,cAAc;AAChB/B,qBAAe5F,SAAS,CAAA,GAAI,CAAC,GAAG8F,IAAJ,CAAL;AACvBC,qBAAe,CAAA;AACf,UAAI4B,aAAatG,SAAS,MAAM;AAC9BrB,iBAAS4F,cAAcE,MAAf;AACR9F,iBAAS+F,cAAcE,IAAf;MACT;AAED,UAAI0B,aAAarG,QAAQ,MAAM;AAC7BtB,iBAAS4F,cAAcE,KAAf;AACR9F,iBAAS+F,cAAcE,GAAf;AACRjG,iBAAS+F,cAAcE,GAAf;MACT;AAED,UAAI0B,aAAapG,eAAe,MAAM;AACpCvB,iBAAS4F,cAAcE,UAAf;AACR9F,iBAAS+F,cAAcE,GAAf;AACRjG,iBAAS+F,cAAcE,GAAf;MACT;AAED,UAAI0B,aAAalG,WAAW,MAAM;AAChCzB,iBAAS4F,cAAcE,QAAf;AACR9F,iBAAS+F,cAAcE,MAAf;AACRjG,iBAAS+F,cAAcE,GAAf;MACT;IACF;AAGGiD,QAAAA,IAAII,UAAU;AACZ1D,UAAAA,iBAAiBC,sBAAsB;AACzCD,uBAAepF,MAAMoF,YAAD;MACrB;AAED5F,eAAS4F,cAAcsD,IAAII,UAAUnJ,iBAA7B;IACT;AAEG+I,QAAAA,IAAIK,UAAU;AACZxD,UAAAA,iBAAiBC,sBAAsB;AACzCD,uBAAevF,MAAMuF,YAAD;MACrB;AAED/F,eAAS+F,cAAcmD,IAAIK,UAAUpJ,iBAA7B;IACT;AAEG+I,QAAAA,IAAIC,mBAAmB;AACzBnJ,eAASgI,qBAAqBkB,IAAIC,mBAAmBhJ,iBAA7C;IACT;AAEG+I,QAAAA,IAAItB,iBAAiB;AACnBA,UAAAA,oBAAoBC,yBAAyB;AAC/CD,0BAAkBpH,MAAMoH,eAAD;MACxB;AAED5H,eAAS4H,iBAAiBsB,IAAItB,iBAAiBzH,iBAAvC;IACT;AAGD,QAAIsH,cAAc;AAChB7B,mBAAa,OAAD,IAAY;IACzB;AAGD,QAAIoB,gBAAgB;AAClBhH,eAAS4F,cAAc,CAAC,QAAQ,QAAQ,MAAjB,CAAf;IACT;AAGGA,QAAAA,aAAa4D,OAAO;AACtBxJ,eAAS4F,cAAc,CAAC,OAAD,CAAf;AACDa,aAAAA,YAAYgD;IACpB;AAEGP,QAAAA,IAAIQ,sBAAsB;AACxB,UAAA,OAAOR,IAAIQ,qBAAqBzG,eAAe,YAAY;AACvDtD,cAAAA,gBACJ,6EADmB;MAGtB;AAEG,UAAA,OAAOuJ,IAAIQ,qBAAqBxG,oBAAoB,YAAY;AAC5DvD,cAAAA,gBACJ,kFADmB;MAGtB;AAGDuF,2BAAqBgE,IAAIQ;AAGzBvE,kBAAYD,mBAAmBjC,WAAW,EAA9B;IACb,OAAM;AAEDiC,UAAAA,uBAAuBrE,QAAW;AACpCqE,6BAAqB1C,0BACnBC,cACAsB,aAF4C;MAI/C;AAGGmB,UAAAA,uBAAuB,QAAQ,OAAOC,cAAc,UAAU;AAChEA,oBAAYD,mBAAmBjC,WAAW,EAA9B;MACb;IACF;AAID,QAAI1F,QAAQ;AACVA,aAAO2L,GAAD;IACP;AAEDN,aAASM;EACV;AAED,QAAMS,iCAAiC3J,SAAS,CAAA,GAAI,CAClD,MACA,MACA,MACA,MACA,OALkD,CAAL;AAQ/C,QAAM4J,0BAA0B5J,SAAS,CAAA,GAAI,CAC3C,iBACA,QACA,SACA,gBAJ2C,CAAL;AAWxC,QAAM6J,+BAA+B7J,SAAS,CAAA,GAAI,CAChD,SACA,SACA,QACA,KACA,QALgD,CAAL;AAWvC8J,QAAAA,eAAe9J,SAAS,CAAA,GAAI8F,KAAL;AAC7B9F,WAAS8J,cAAchE,UAAf;AACR9F,WAAS8J,cAAchE,aAAf;AAEFiE,QAAAA,kBAAkB/J,SAAS,CAAA,GAAI8F,QAAL;AAChC9F,WAAS+J,iBAAiBjE,gBAAlB;AAQR,QAAMkE,uBAAuB,SAAvBA,sBAAiC1J,SAAS;AAC9C,QAAI2J,SAASpF,cAAcvE,OAAD;AAI1B,QAAI,CAAC2J,UAAU,CAACA,OAAOC,SAAS;AAC9BD,eAAS;QACPE,cAAc9B;QACd6B,SAAS;MAFF;IAIV;AAED,UAAMA,UAAUvL,kBAAkB2B,QAAQ4J,OAAT;AACjC,UAAME,gBAAgBzL,kBAAkBsL,OAAOC,OAAR;AAEvC,QAAI,CAAC3B,mBAAmBjI,QAAQ6J,YAAT,GAAwB;AAC7C,aAAO;IACR;AAED,QAAI7J,QAAQ6J,iBAAiBhC,eAAe;AAI1C,UAAI8B,OAAOE,iBAAiB/B,gBAAgB;AACnC8B,eAAAA,YAAY;MACpB;AAKD,UAAID,OAAOE,iBAAiBjC,kBAAkB;AAC5C,eACEgC,YAAY,UACXE,kBAAkB,oBACjBT,+BAA+BS,aAAD;MAEnC;AAID,aAAOC,QAAQP,aAAaI,OAAD,CAAb;IACf;AAED,QAAI5J,QAAQ6J,iBAAiBjC,kBAAkB;AAI7C,UAAI+B,OAAOE,iBAAiB/B,gBAAgB;AACnC8B,eAAAA,YAAY;MACpB;AAID,UAAID,OAAOE,iBAAiBhC,eAAe;AACzC,eAAO+B,YAAY,UAAUN,wBAAwBQ,aAAD;MACrD;AAID,aAAOC,QAAQN,gBAAgBG,OAAD,CAAhB;IACf;AAED,QAAI5J,QAAQ6J,iBAAiB/B,gBAAgB;AAKzC6B,UAAAA,OAAOE,iBAAiBhC,iBACxB,CAACyB,wBAAwBQ,aAAD,GACxB;AACA,eAAO;MACR;AAGCH,UAAAA,OAAOE,iBAAiBjC,oBACxB,CAACyB,+BAA+BS,aAAD,GAC/B;AACA,eAAO;MACR;AAID,aACE,CAACL,gBAAgBG,OAAD,MACfL,6BAA6BK,OAAD,KAAa,CAACJ,aAAaI,OAAD;IAE1D;AAICzB,QAAAA,sBAAsB,2BACtBF,mBAAmBjI,QAAQ6J,YAAT,GAClB;AACA,aAAO;IACR;AAMD,WAAO;EACR;AAOD,QAAMG,eAAe,SAAfA,cAAyBC,MAAM;AACnC9L,cAAU6E,UAAUI,SAAS;MAAEpD,SAASiK;IAAX,CAApB;AACL,QAAA;AAEFA,WAAKC,WAAWC,YAAYF,IAA5B;IACD,SAAQnH,GAAG;AACVmH,WAAKG,OAAL;IACD;EACF;AAQKC,QAAAA,mBAAmB,SAAnBA,kBAA6BC,MAAML,MAAM;AACzC,QAAA;AACF9L,gBAAU6E,UAAUI,SAAS;QAC3BmH,WAAWN,KAAKO,iBAAiBF,IAAtB;QACXG,MAAMR;MAFqB,CAApB;IAIV,SAAQnH,GAAG;AACV3E,gBAAU6E,UAAUI,SAAS;QAC3BmH,WAAW;QACXE,MAAMR;MAFqB,CAApB;IAIV;AAEDA,SAAKS,gBAAgBJ,IAArB;AAGIA,QAAAA,SAAS,QAAQ,CAAC7E,aAAa6E,IAAD,GAAQ;AACpCzD,UAAAA,cAAcC,qBAAqB;AACjC,YAAA;AACFkD,uBAAaC,IAAD;QACb,SAAQnH,GAAG;QAAA;MACb,OAAM;AACD,YAAA;AACFmH,eAAKU,aAAaL,MAAM,EAAxB;QACD,SAAQxH,GAAG;QAAA;MACb;IACF;EACF;AAQD,QAAM8H,gBAAgB,SAAhBA,eAA0BC,OAAO;AAEjCC,QAAAA,MAAM;AACNC,QAAAA,oBAAoB;AAExB,QAAInE,YAAY;AACdiE,cAAQ,sBAAsBA;IAC/B,OAAM;AAEL,YAAMG,UAAUtM,YAAYmM,OAAO,aAAR;AAC3BE,0BAAoBC,WAAWA,QAAQ,CAAD;IACvC;AAED,QACE7C,sBAAsB,2BACtBJ,cAAcD,gBACd;AAEA+C,cACE,mEACAA,QACA;IACH;AAEKI,UAAAA,eAAerG,qBACjBA,mBAAmBjC,WAAWkI,KAA9B,IACAA;AAKA9C,QAAAA,cAAcD,gBAAgB;AAC5B,UAAA;AACFgD,cAAM,IAAI5G,UAAJ,EAAgBgH,gBAAgBD,cAAc9C,iBAA9C;MACP,SAAQrF,GAAG;MAAA;IACb;AAGD,QAAI,CAACgI,OAAO,CAACA,IAAIK,iBAAiB;AAChCL,YAAMhG,eAAesG,eAAerD,WAAW,YAAY,IAArD;AACF,UAAA;AACF+C,YAAIK,gBAAgBE,YAAYrD,iBAC5BnD,YACAoG;MACL,SAAQnI,GAAG;MAEX;IACF;AAEKwI,UAAAA,OAAOR,IAAIQ,QAAQR,IAAIK;AAEzBN,QAAAA,SAASE,mBAAmB;AAC9BO,WAAKC,aACHlI,UAASmI,eAAeT,iBAAxB,GACAO,KAAKG,WAAW,CAAhB,KAAsB,IAFxB;IAID;AAGG1D,QAAAA,cAAcD,gBAAgB;AAChC,aAAO7C,qBAAqByG,KAC1BZ,KACApE,iBAAiB,SAAS,MAFrB,EAGL,CAHK;IAIR;AAED,WAAOA,iBAAiBoE,IAAIK,kBAAkBG;EAC/C;AAQD,QAAMK,sBAAsB,SAAtBA,qBAAgC1I,MAAM;AACnC8B,WAAAA,mBAAmB2G;MACxBzI,KAAK0B,iBAAiB1B;MACtBA;;MAEAa,WAAW8H,eAAe9H,WAAW+H,eAAe/H,WAAWgI;MAC/D;IALK;EAOR;AAQD,QAAMC,eAAe,SAAfA,cAAyBC,KAAK;AAClC,WACEA,eAAe/H,oBACd,OAAO+H,IAAIC,aAAa,YACvB,OAAOD,IAAIE,gBAAgB,YAC3B,OAAOF,IAAI7B,gBAAgB,cAC3B,EAAE6B,IAAIG,sBAAsBpI,iBAC5B,OAAOiI,IAAItB,oBAAoB,cAC/B,OAAOsB,IAAIrB,iBAAiB,cAC5B,OAAOqB,IAAInC,iBAAiB,YAC5B,OAAOmC,IAAIT,iBAAiB,cAC5B,OAAOS,IAAII,kBAAkB;EAElC;AAQD,QAAMC,UAAU,SAAVA,SAAoBlM,QAAQ;AAChC,WAAO,OAAOyD,SAAS,cAAczD,kBAAkByD;EACxD;AAUK0I,QAAAA,eAAe,SAAfA,cAAyBC,YAAYC,aAAaC,MAAM;AAC5D,QAAI,CAACtH,MAAMoH,UAAD,GAAc;AACtB;IACD;AAED3O,iBAAauH,MAAMoH,UAAD,GAAeG,UAAS;AACxCA,WAAKhB,KAAK1I,WAAWwJ,aAAaC,MAAMnE,MAAxC;IACD,CAFW;EAGb;AAYD,QAAMqE,oBAAoB,SAApBA,mBAA8BH,aAAa;AAC3C9H,QAAAA,UAAU;AAGd4H,iBAAa,0BAA0BE,aAAa,IAAxC;AAGZ,QAAIT,aAAaS,WAAD,GAAe;AAC7BxC,mBAAawC,WAAD;AACZ,aAAO;IACR;AAGD,UAAM5C,UAAU/J,kBAAkB2M,YAAYP,QAAb;AAGjCK,iBAAa,uBAAuBE,aAAa;MAC/C5C;MACAgD,aAAatH;IAFkC,CAArC;AAMZ,QACEkH,YAAYJ,cAAZ,KACA,CAACC,QAAQG,YAAYK,iBAAb,KACR3N,WAAW,WAAWsN,YAAYnB,SAAxB,KACVnM,WAAW,WAAWsN,YAAYN,WAAxB,GACV;AACAlC,mBAAawC,WAAD;AACZ,aAAO;IACR;AAGG,QAAA,CAAClH,aAAasE,OAAD,KAAazD,YAAYyD,OAAD,GAAW;AAE9C,UAAA,CAACzD,YAAYyD,OAAD,KAAakD,sBAAsBlD,OAAD,GAAW;AAC3D,YACEhE,wBAAwBC,wBAAwB1G,UAChDD,WAAW0G,wBAAwBC,cAAc+D,OAAvC,GACV;AACA,iBAAO;QACR;AAED,YACEhE,wBAAwBC,wBAAwB6C,YAChD9C,wBAAwBC,aAAa+D,OAArC,GACA;AACA,iBAAO;QACR;MACF;AAGD,UAAIzC,gBAAgB,CAACG,gBAAgBsC,OAAD,GAAW;AACvCM,cAAAA,aAAa3F,cAAciI,WAAD,KAAiBA,YAAYtC;AACvDuB,cAAAA,aAAanH,cAAckI,WAAD,KAAiBA,YAAYf;AAEzDA,YAAAA,cAAcvB,YAAY;AAC5B,gBAAM6C,aAAatB,WAAW1L;AAE9B,mBAASiN,IAAID,aAAa,GAAGC,KAAK,GAAG,EAAEA,GAAG;AACxC9C,uBAAWqB,aACTnH,UAAUqH,WAAWuB,CAAD,GAAK,IAAhB,GACT3I,eAAemI,WAAD,CAFhB;UAID;QACF;MACF;AAEDxC,mBAAawC,WAAD;AACZ,aAAO;IACR;AAGGA,QAAAA,uBAAuB3I,WAAW,CAAC6F,qBAAqB8C,WAAD,GAAe;AACxExC,mBAAawC,WAAD;AACZ,aAAO;IACR;AAIC,SAAC5C,YAAY,cACXA,YAAY,aACZA,YAAY,eACd1K,WAAW,+BAA+BsN,YAAYnB,SAA5C,GACV;AACArB,mBAAawC,WAAD;AACZ,aAAO;IACR;AAGD,QAAI/F,sBAAsB+F,YAAYlJ,aAAa,GAAG;AAEpDoB,gBAAU8H,YAAYN;AAEtBtO,mBAAa,CAAC2D,gBAAeC,WAAUC,YAA1B,GAAyCwL,UAAS;AAC7DvI,kBAAU9F,cAAc8F,SAASuI,MAAM,GAAhB;MACxB,CAFW;AAIZ,UAAIT,YAAYN,gBAAgBxH,SAAS;AACvCvG,kBAAU6E,UAAUI,SAAS;UAAEpD,SAASwM,YAAYpI,UAAZ;QAAX,CAApB;AACToI,oBAAYN,cAAcxH;MAC3B;IACF;AAGD4H,iBAAa,yBAAyBE,aAAa,IAAvC;AAEZ,WAAO;EACR;AAWKU,QAAAA,oBAAoB,SAApBA,mBAA8BC,OAAOC,QAAQ9M,OAAO;AAExD,QACE0G,iBACCoG,WAAW,QAAQA,WAAW,YAC9B9M,SAAS+C,aAAY/C,SAASiI,cAC/B;AACA,aAAO;IACR;AAMD,QACEjC,mBACA,CAACF,YAAYgH,MAAD,KACZlO,WAAWwC,YAAW0L,MAAZ;AACV;aAES/G,mBAAmBnH,WAAWyC,YAAWyL,MAAZ;AAAqB;aAGlD,CAAC3H,aAAa2H,MAAD,KAAYhH,YAAYgH,MAAD,GAAU;AAErD;;;;QAGCN,sBAAsBK,KAAD,MAClBvH,wBAAwBC,wBAAwB1G,UAChDD,WAAW0G,wBAAwBC,cAAcsH,KAAvC,KACTvH,wBAAwBC,wBAAwB6C,YAC/C9C,wBAAwBC,aAAasH,KAArC,OACFvH,wBAAwBK,8BAA8B9G,UACtDD,WAAW0G,wBAAwBK,oBAAoBmH,MAA7C,KACTxH,wBAAwBK,8BAA8ByC,YACrD9C,wBAAwBK,mBAAmBmH,MAA3C;;QAGLA,WAAW,QACVxH,wBAAwBM,mCACtBN,wBAAwBC,wBAAwB1G,UAChDD,WAAW0G,wBAAwBC,cAAcvF,KAAvC,KACTsF,wBAAwBC,wBAAwB6C,YAC/C9C,wBAAwBC,aAAavF,KAArC;;AACN;WAGK;AACL,eAAO;MACR;IAEF,WAAUoH,oBAAoB0F,MAAD;AAAU;aAKtClO,WAAW0C,kBAAgBhD,cAAc0B,OAAOwB,kBAAiB,EAAzB,CAA9B;AACV;cAKCsL,WAAW,SAASA,WAAW,gBAAgBA,WAAW,WAC3DD,UAAU,YACVrO,cAAcwB,OAAO,OAAR,MAAqB,KAClCkH,cAAc2F,KAAD;AACb;aAMA5G,2BACA,CAACrH,WAAW2C,oBAAmBjD,cAAc0B,OAAOwB,kBAAiB,EAAzB,CAAjC;AACX;aAGSxB,OAAO;AAChB,aAAO;IACR;AAAM;AAKP,WAAO;EACR;AAUD,QAAMwM,wBAAwB,SAAxBA,uBAAkClD,SAAS;AAC/C,WAAOA,QAAQ7K,QAAQ,GAAhB,IAAuB;EAC/B;AAYD,QAAMsO,sBAAsB,SAAtBA,qBAAgCb,aAAa;AAEjDF,iBAAa,4BAA4BE,aAAa,IAA1C;AAEN,UAAA;MAAEL;IAAF,IAAiBK;AAGnB,QAAA,CAACL,YAAY;AACf;IACD;AAED,UAAMmB,YAAY;MAChBC,UAAU;MACVC,WAAW;MACXC,UAAU;MACVC,mBAAmBjI;IAJH;AAMlB,QAAI3F,IAAIqM,WAAWpM;AAGZD,WAAAA,KAAK;AACV,YAAM6N,OAAOxB,WAAWrM,CAAD;AACjB,YAAA;QAAEwK;QAAMT;QAAcvJ,OAAOkN;MAA7B,IAA2CG;AACjD,YAAMP,SAASvN,kBAAkByK,IAAD;AAE5BhK,UAAAA,QAAQgK,SAAS,UAAUkD,YAAYxO,WAAWwO,SAAD;AAGrDF,gBAAUC,WAAWH;AACrBE,gBAAUE,YAAYlN;AACtBgN,gBAAUG,WAAW;AACrBH,gBAAUM,gBAAgBrN;AAC1B+L,mBAAa,yBAAyBE,aAAac,SAAvC;AACZhN,cAAQgN,UAAUE;AAEdF,UAAAA,UAAUM,eAAe;AAC3B;MACD;AAGDvD,uBAAiBC,MAAMkC,WAAP;AAGhB,UAAI,CAACc,UAAUG,UAAU;AACvB;MACD;AAGG,UAAA,CAACjH,4BAA4BtH,WAAW,QAAQoB,KAAT,GAAiB;AAC1D+J,yBAAiBC,MAAMkC,WAAP;AAChB;MACD;AAGD,UAAI/F,oBAAoB;AACtB7I,qBAAa,CAAC2D,gBAAeC,WAAUC,YAA1B,GAAyCwL,UAAS;AAC7D3M,kBAAQ1B,cAAc0B,OAAO2M,MAAM,GAAd;QACtB,CAFW;MAGb;AAGD,YAAME,QAAQtN,kBAAkB2M,YAAYP,QAAb;AAC3B,UAAA,CAACiB,kBAAkBC,OAAOC,QAAQ9M,KAAhB,GAAwB;AAC5C;MACD;AAKG2G,UAAAA,yBAAyBmG,WAAW,QAAQA,WAAW,SAAS;AAElE/C,yBAAiBC,MAAMkC,WAAP;AAGhBlM,gBAAQ4G,8BAA8B5G;MACvC;AAGD,UACEsE,sBACA,OAAOzC,iBAAiB,YACxB,OAAOA,aAAa0L,qBAAqB,YACzC;AACA,YAAIhE;AAAc;aAEX;AACL,kBAAQ1H,aAAa0L,iBAAiBV,OAAOC,MAArC,GAAR;YACE,KAAK,eAAe;AAClB9M,sBAAQsE,mBAAmBjC,WAAWrC,KAA9B;AACR;YACD;YAED,KAAK,oBAAoB;AACvBA,sBAAQsE,mBAAmBhC,gBAAgBtC,KAAnC;AACR;YACD;UATH;QAeD;MACF;AAGG,UAAA;AACF,YAAIuJ,cAAc;AAChB2C,sBAAYsB,eAAejE,cAAcS,MAAMhK,KAA/C;QACD,OAAM;AAELkM,sBAAY7B,aAAaL,MAAMhK,KAA/B;QACD;AAEDrC,iBAAS+E,UAAUI,OAAX;MACT,SAAQN,GAAG;MAAA;IACb;AAGDwJ,iBAAa,2BAA2BE,aAAa,IAAzC;EACb;AAOD,QAAMuB,qBAAqB,SAArBA,oBAA+BC,UAAU;AACzCC,QAAAA,aAAa;AACjB,UAAMC,iBAAiBvC,oBAAoBqC,QAAD;AAG1C1B,iBAAa,2BAA2B0B,UAAU,IAAtC;AAEZ,WAAQC,aAAaC,eAAeC,SAAf,GAA4B;AAE/C7B,mBAAa,0BAA0B2B,YAAY,IAAvC;AAGZ,UAAItB,kBAAkBsB,UAAD,GAAc;AACjC;MACD;AAGD,UAAIA,WAAWvJ,mBAAmBhB,kBAAkB;AAClDqK,QAAAA,oBAAmBE,WAAWvJ,OAAZ;MACnB;AAGD2I,0BAAoBY,UAAD;IACpB;AAGD3B,iBAAa,0BAA0B0B,UAAU,IAArC;EACb;AAUDhL,YAAUoL,WAAW,SAAUvD,OAAiB;AAAVjC,QAAAA,MAAU,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAJ,CAAA;AACtC0C,QAAAA,OAAO;AACP+C,QAAAA,eAAe;AACf7B,QAAAA,cAAc;AACd8B,QAAAA,aAAa;AAIjBtG,qBAAiB,CAAC6C;AAClB,QAAI7C,gBAAgB;AAClB6C,cAAQ;IACT;AAGG,QAAA,OAAOA,UAAU,YAAY,CAACwB,QAAQxB,KAAD,GAAS;AAChD,UAAI,OAAOA,MAAMpM,aAAa,YAAY;AACxCoM,gBAAQA,MAAMpM,SAAN;AACR,YAAI,OAAOoM,UAAU,UAAU;AACvBxL,gBAAAA,gBAAgB,iCAAD;QACtB;MACF,OAAM;AACCA,cAAAA,gBAAgB,4BAAD;MACtB;IACF;AAGD,QAAI,CAAC2D,UAAUO,aAAa;AAC1B,aAAOsH;IACR;AAGG,QAAA,CAAClE,YAAY;AACfgC,mBAAaC,GAAD;IACb;AAGD5F,cAAUI,UAAU,CAAA;AAGpB,QAAI,OAAOyH,UAAU,UAAU;AAC7BzD,iBAAW;IACZ;AAED,QAAIA,UAAU;AAERyD,UAAAA,MAAMoB,UAAU;AAClB,cAAMrC,UAAU/J,kBAAkBgL,MAAMoB,QAAP;AAC7B,YAAA,CAAC3G,aAAasE,OAAD,KAAazD,YAAYyD,OAAD,GAAW;AAC5CvK,gBAAAA,gBACJ,yDADmB;QAGtB;MACF;IACF,WAAUwL,iBAAiBjH,MAAM;AAGhC0H,aAAOV,cAAc,SAAD;AACpByD,qBAAe/C,KAAK3G,cAAcO,WAAW2F,OAAO,IAArC;AACXwD,UAAAA,aAAa/K,aAAa,KAAK+K,aAAapC,aAAa,QAAQ;AAEnEX,eAAO+C;MACR,WAAUA,aAAapC,aAAa,QAAQ;AAC3CX,eAAO+C;MACR,OAAM;AAEL/C,aAAKiD,YAAYF,YAAjB;MACD;IACF,OAAM;AAGH,UAAA,CAACxH,cACD,CAACJ,sBACD,CAACC;MAEDmE,MAAM9L,QAAQ,GAAd,MAAuB,IACvB;AACO6F,eAAAA,sBAAsBmC,sBACzBnC,mBAAmBjC,WAAWkI,KAA9B,IACAA;MACL;AAGDS,aAAOV,cAAcC,KAAD;AAGhB,UAAA,CAACS,MAAM;AACFzE,eAAAA,aAAa,OAAOE,sBAAsBlC,YAAY;MAC9D;IACF;AAGGyG,QAAAA,QAAQ1E,YAAY;AACtBoD,mBAAasB,KAAKkD,UAAN;IACb;AAGKC,UAAAA,eAAe9C,oBAAoBvE,WAAWyD,QAAQS,IAApB;AAGxC,WAAQkB,cAAciC,aAAaN,SAAb,GAA0B;AAE9C,UAAIxB,kBAAkBH,WAAD,GAAe;AAClC;MACD;AAGD,UAAIA,YAAY9H,mBAAmBhB,kBAAkB;AACnDqK,2BAAmBvB,YAAY9H,OAAb;MACnB;AAGD2I,0BAAoBb,WAAD;IACpB;AAGD,QAAIpF,UAAU;AACZ,aAAOyD;IACR;AAGD,QAAIhE,YAAY;AACd,UAAIC,qBAAqB;AACvBwH,qBAAatJ,uBAAuB0G,KAAKJ,KAAK3G,aAAjC;AAEN2G,eAAAA,KAAKkD,YAAY;AAEtBF,qBAAWC,YAAYjD,KAAKkD,UAA5B;QACD;MACF,OAAM;AACLF,qBAAahD;MACd;AAED,UAAI7F,aAAaiJ,cAAcjJ,aAAakJ,gBAAgB;AAQ1DL,qBAAapJ,WAAWwG,KAAKlI,kBAAkB8K,YAAY,IAA9C;MACd;AAED,aAAOA;IACR;AAEGM,QAAAA,iBAAiBlI,iBAAiB4E,KAAKuD,YAAYvD,KAAKD;AAG5D,QACE3E,kBACApB,aAAa,UAAD,KACZgG,KAAK3G,iBACL2G,KAAK3G,cAAcmK,WACnBxD,KAAK3G,cAAcmK,QAAQxE,QAC3BpL,WAAWmG,cAA0BiG,KAAK3G,cAAcmK,QAAQxE,IAAtD,GACV;AACAsE,uBACE,eAAetD,KAAK3G,cAAcmK,QAAQxE,OAAO,QAAQsE;IAC5D;AAGD,QAAInI,oBAAoB;AACtB7I,mBAAa,CAAC2D,gBAAeC,WAAUC,YAA1B,GAAyCwL,UAAS;AAC7D2B,yBAAiBhQ,cAAcgQ,gBAAgB3B,MAAM,GAAvB;MAC/B,CAFW;IAGb;AAEMrI,WAAAA,sBAAsBmC,sBACzBnC,mBAAmBjC,WAAWiM,cAA9B,IACAA;EACL;AAQD5L,YAAU+L,YAAY,WAAoB;AAAVnG,QAAAA,MAAU,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAJ,CAAA;AACpCD,iBAAaC,GAAD;AACZjC,iBAAa;EACd;AAOD3D,YAAUgM,cAAc,WAAY;AAClC1G,aAAS;AACT3B,iBAAa;EACd;AAYD3D,YAAUiM,mBAAmB,SAAUC,KAAKvB,MAAMrN,OAAO;AAEnD,QAAA,CAACgI,QAAQ;AACXK,mBAAa,CAAA,CAAD;IACb;AAED,UAAMwE,QAAQtN,kBAAkBqP,GAAD;AAC/B,UAAM9B,SAASvN,kBAAkB8N,IAAD;AAChC,WAAOT,kBAAkBC,OAAOC,QAAQ9M,KAAhB;EACzB;AASD0C,YAAUmM,UAAU,SAAU5C,YAAY6C,cAAc;AACtD,QAAI,OAAOA,iBAAiB,YAAY;AACtC;IACD;AAEDjK,UAAMoH,UAAD,IAAepH,MAAMoH,UAAD,KAAgB,CAAA;AACzCpO,cAAUgH,MAAMoH,UAAD,GAAc6C,YAApB;EACV;AAUDpM,YAAUqM,aAAa,SAAU9C,YAAY;AAC3C,QAAIpH,MAAMoH,UAAD,GAAc;AACrB,aAAOtO,SAASkH,MAAMoH,UAAD,CAAN;IAChB;EACF;AAQDvJ,YAAUsM,cAAc,SAAU/C,YAAY;AAC5C,QAAIpH,MAAMoH,UAAD,GAAc;AACrBpH,YAAMoH,UAAD,IAAe,CAAA;IACrB;EACF;AAMDvJ,YAAUuM,iBAAiB,WAAY;AACrCpK,YAAQ,CAAA;EACT;AAED,SAAOnC;AACR;AAED,IAAA,SAAeD,gBAAe;;;ACpmDvB,IAAMyM,8BAA8B;;;ACApC,IAAMC,4BAA4B;;;ACSjB,SAAAC,eAAeC,IAA0C;MAAxCC,SAAMD,GAAAC,QAAEC,WAAQF,GAAAE;AAEvD,MAAMC,KAAK,sBAAsBC,OAAAH,QAAM,kCAAA,EAAA,OAAmCI,8BAA4B,IAAA,EAAAD,OAAKF,UAAQ,SAAA;AACnH,MAAMI,WAAWC,OAAUC,MAAM;AACjC,MAAMC,aAAaH,SAASI,SAASP,EAAE;AACvC,MAAMQ,QAAQF,WAAWG,MAAM,GAAG;AAC3B,MAAAC,UAAoBF,MAAK,CAAA,GAAbG,OAAQH,MAAKI,MAAA,CAAA;AAEhC,MAAMC,YAAYC,cAAC,CAAAJ,SAAS,yBAAyB,GAAKC,MAAM,IAAA,EAAAI,KAAK,GAAG;AACxE,SAAOF;AACT;ACIaG,IAAAA,iBAAkBC,SAC7BA,QAAG,QAAHA,QAAG,SAAA,SAAHA,IAAKC,QAAQ,wBAAyBC,OAAM,GAAGlB,OAAO,MAAMkB,EAAEC,WAAW,CAAC,GAAG,GAAG,CAAC;AAQtEC,IAAAA,kBAAmBC,gBAAe;AAC7C,MAAI;AACF,WAAOC,MAAMC,KAAKF,UAAU;WACrBG,OAAO;AACd,WAAO,CAAA;EACT;AACF;AAEO,SAASC,0CAA0CC,SAAS;AAAA,MAAAC;AACjE,SAAOD,YACFA,YAAO,QAAPA,YAAO,WAAAC,wBAAPD,QAASE,oBAAc,QAAAD,0BAAA,SAAA,SAAvBA,sBAAAE,KAAAH,OAA0B,MAC1B,CAACA,QAAQI,eACT,CAACJ,QAAQK;AAChB;ACzCM,SAAUC,mBAAmBC,cAAoB;AACrD,MAAMC,QAAQD,aAAaE,IAAI,SAACC,UAAQ;AAC9B,QAAAC,QAAiBD,SAAQC,MAAnBxC,SAAWuC,SAAQvC;AACjC,QAAIA,QAAQ;AACV,aAAOyC,eAA2B;QAAEzC;QAAQC,UAAUuC;MAAM,CAAA;IAC7D;AACD,WAAOtB,eAAesB,KAAI;EAC5B,CAAC,EACEvB,KAAK,GAAG,EAERd,OAAO,GAAG;AACbuC,WAASC,YAAY,cAAc,OAAON,KAAK;AACjD;AChBO,IAAMO,aAAa;AACnB,IAAMC,qBAAqB;AAC3B,IAAMC,gBAAgB;AACtB,IAAMC,yBAAyB;AAC/B,IAAMC,+BAA+B,IAAA,OAAIF,eAAa,KAAA,EAAA3C,OAAM4C,sBAAsB;ACWzE,SAAAE,2BACdC,QACAC,UAAgB;AAEhB,MAAMC,SAASpC,cAAA,CACbkC,MAAM,GACHzB,MAAMC,KAAKwB,OAAOG,iBAAiBF,QAAQ,CAAC,GAAC,IAAA,EAChDG,KAAK,SAACpD,IAAE;AAAK,WAAAA,GAAGqD,QAAQJ,QAAQ;EAAnB,CAAoB;AACnC,SAAOC;AACT;AAKM,SAAUI,aAAaN,QAAmB;AAE9C,MAAMO,YAAYR,2BAA2BC,QAAQ,IAAI/C,OAAAuD,yBAAyB,CAAE;AACpF,MAAID,WAAW;AACb,WAAOlC,gBAAgBkC,UAAUjC,UAAU;EAC5C;AAED,MAAMmC,kBAAkBV,2BAA2BC,QAAQ,IAAI/C,OAAAyD,2BAA2B,CAAE;AAC5F,MAAID,iBAAiB;AACnB,WAAOpC,gBAAgBoC,gBAAgBnC,UAAU;EAClD;AAED,SAAOD,gBAAgB2B,OAAO1B,UAAU;AAC1C;SAEgBqC,kBAAe;AAC7B,MAAMC,YAAYpB,SAASqB,KAAKC,cAAc,IAAI7D,OAAAyC,UAAU,CAAE;AAE9D,MAAIkB,WAAW;AACbA,kBAAS,QAATA,cAAS,SAAA,SAATA,UAAWG,OAAM;EAClB;AAGD,MAAMC,OAAOxB,SAASyB,cAAc,KAAK;AACzCD,OAAKE,KAAKxB;AACVsB,OAAKG,MAAMC,UAAU;AACrB,SAAOJ;AACT;AAEM,SAAUK,WAAWC,QAAsB;AAC/C,UAAOA,WAAM,QAANA,WAAA,SAAA,SAAAA,OAAQR,cAAchB,4BAA4B,KAAI,OAAO;AACtE;AAEO,IAAMyB,uBAAuB,SAACpC,OAAwB;AAC3D,MAAIG,QAAO;AACXH,QAAMqC,QAAQ,SAACR,MAAI;AAEjB,QAAMS,YAAYT,KAAKb,iBAAiB,IAAIlD,OAAA0C,kBAAkB,CAAE;AAChE,QAAI8B,UAAUC,SAAS,GAAG;AACxBpC,MAAAA,SAAUiC,qBAAqBhD,MAAMC,KAAKiD,SAAS,CAAsB,IAAK;IAC/E;AACDnC,IAAAA,SAAS0B,KAAKW,YAAY;EAC5B,CAAC;AACD,SAAOrC;AACT;AAEM,SAAUsC,qBAAqBC,WAAsB;AACzD,MAAMC,YAAoBD,cAAS,QAATA,cAAS,SAAA,SAATA,UAAWE,OAAO,SAACC,aAAaC,cAAY;;AAEpE,QAAIC;AAEJ,QAAI5C,QAAQ2C,iBAAgC,QAAhCA,iBAAA,SAAA,SAAAA,aAAkCN;AAG9C,QAAIM,wBAAwBE,MAAM;AAChCD,oBAAc;AACd5C,MAAAA,QAAO2C,aAAaG;IACrB;AAED,QAAIH,wBAAwBI,aAAa;AACvCH,oBAAeD,aAAaK,UAAUC,SAAS3C,aAAa,KAAKqC,aAAaK,UAAUC,SAAS1C,sBAAsB,IACnHoC,eACAA,aAAanB,cAAchB,4BAA4B;IAC5D;AAGD,QAAIoC,aAAa;AACf,UAAMM,SAAQP,iBAAgC,QAAhCA,iBAAA,SAAA,SAAAA,aAAkCN;AAChD,UAAM7E,UAASD,KAAAqF,YAAYO,aAAO,QAAA5F,OAAA,SAAA,SAAAA,GAAE6F;AACpC,aAAA5E,cAAAA,cAAA,CAAA,GACKkE,aAAW,IAAA,GAAA,CACd;QACE1C,MAAIkD;QACJ1F;OACD,GACD,KAAA;IACH;AAED,WAAAgB,cAAAA,cAAA,CAAA,GACKkE,aAAW,IAAA,GAAA,CACd;MACE1C,MAAIA;KACL,GACD,KAAA;KACD,CAAA,CAAY;AACf,SAAOwC;AACT;AAEgB,SAAAa,kBAAkBb,WAAmBnD,SAAqB;AACxE,MAAMiE,UAAU,CAAA;AAChB,MAAMC,QAAQlE,QAAQmE;AACtBhB,YAAUN,QAAQ,SAACnC,UAAQ;AACzB,QAAIA,SAASvC,QAAQ;AACnB,UAAMiG,kBAAkBF,MAAMzC,KAAK,SAAC4C,MAAS;AAAA,eAAAA,KAAKlG,WAAWuC,SAASvC;MAAzB,CAA+B;AAE5E,UAAIiG,iBAAiB;AACnBH,gBAAQvD,SAASvC,MAAM,IAAIiG;MAC5B;IACF;EACH,CAAC;AACD,SAAOE,OAAOC,OAAON,OAAO;AAC9B;AC3GM,SAAUO,SAAStG,IAMV;AALb,MAAAuG,MAAGvG,GAAAuG,KACHC,aAAUxG,GAAAwG,YACVC,YAASzG,GAAAyG,WACT3E,UAAO9B,GAAA8B,SACP4E,oBAAiB1G,GAAA0G;AAEjB,aAAOC,2BAAY,SAACC,GAAC;AACnBA,MAAEC,eAAc;AAChB,QAAMC,QAAOF,MAAC,QAADA,MAAA,SAAA,SAAAA,EAAGG,cAAcC,QAAQ,WAAW;AAEjD,QAAI,CAACF,OAAM;AACT,UAAMrE,QAAOmE,MAAC,QAADA,MAAA,SAAA,SAAAA,EAAGG,cAAcC,QAAQ,MAAM;AAC5CrE,eAASC,YAAY,cAAc,OAAOzB,eAAesB,KAAI,CAAC;AAC9D+D,iBAAW,IAAI;AACfC,gBAAS;AACT;IACD;AAGD,QAAMnG,WAAWC,OAAUC,MAAM;AACjC,QAAMyG,QAAQ3G,SAASI,SAASoG,KAAI;AACpC,QAAM/C,YAAYD,gBAAe;AACjCC,cAAUmD,YAAYD;AAEtB,QAAI,CAACzC,WAAWT,SAAS,GAAG;AAE1B,UAAMtB,QAAOiC,qBAAqBhD,MAAMC,KAAKoC,UAAUoD,QAAQ,CAAsB;AACrFxE,eAASC,YAAY,cAAc,OAAOzB,eAAesB,KAAI,CAAC;AAC9DsB,gBAAUG,OAAM;AAChBsC,iBAAW,IAAI;AACfC,gBAAS;AACT;IACD;AAGD,QAAMW,YAAY3D,aAAaM,SAAS;AACxC,QAAMsD,QAAQtC,qBAAqBqC,SAAS;AAC5C,QAAME,iBAAiBxB,kBAAkBuB,OAAOvF,OAAO;AAGvD4E,sBAAkBY,cAAc;AAChClF,uBAAmBiF,KAAK;AACxBtD,cAAUG,OAAM;AAChBsC,eAAW,IAAI;AACfC,cAAS;EACX,GAAG,CAACF,KAAKC,YAAYC,WAAW3E,SAAS4E,iBAAiB,CAAC;AAC7D;;;ACtEO,IAAMa,sBAAsB;ACG5B,IAAMC,cAAc;EACzBC,QAAQ;EACRC,SAAS;EACTC,KAAK;EACLC,cAAc;;ACFA,SAAAC,oBAAoBC,gBAAwBC,iBAAuB;AACjF,MAAMC,iBAAiBD,mBAAmBR;AAE1C,SAAOU,OAAO,IAAIC,OAAAJ,eAAeK,IAAI,SAAAC,GAAC;AACpC,QAAMC,SAASD,EAAEC,OAAOC;;MAEtB;MACA;IAAM;AAKR,WAAO,GAAGJ,OAAAF,gBAAoB,KAAA,EAAAE,OAAAG,QAAM,KAAA;GACrC,EAAEE,KAAK,GAAG,GAAI,GAAA,GAAE,GAAG;AACtB;AAEM,SAAUC,iBAAiBC,IAIV;AAHrB,MAAAC,SAAMD,GAAAC,QACNC,KAAmBF,GAAAX,gBAAnBA,iBAAiBa,OAAA,SAAA,CAAA,IAAEA,IACnBC,KAAoCH,GAAAT,gBAApCA,iBAAcY,OAAA,SAAGrB,sBAAmBqB;AAEpC,MAAI,EAACd,mBAAA,QAAAA,mBAAc,SAAA,SAAdA,eAAgBe,SAAQ;AAC3B,WAAOH;EACR;AACD,MAAMI,mBAAmBjB,oBAAoBC,gBAAgBE,cAAc;AAC3E,MAAMe,UAAgDL,OAAOP,IAAI,SAACa,OAAK;AAGrE,QAAIA,MAAMC,SAASzB,YAAYI,cAAc;AAC3C,aAAOoB;IACR;AACO,QAAAE,QAAUF,MAAKE;AACvB,QAAMC,QAAQD,MAAME,MAAMN,gBAAgB;AAE1C,QAAMJ,UAASS,MAAMhB,IAAI,SAACkB,MAAI;AAC5B,UAAIA,KAAKC,MAAMR,gBAAgB,GAAG;AAChC,YAAMS,cAAczB,eAAe0B,KAAK,SAACC,MAAS;AAAA,iBAAA,KAAKvB,OAAAuB,SAAI,QAAJA,SAAI,SAAA,SAAJA,KAAMpB,QAAM,GAAA,MAAQgB;QAAzB,CAA6B;AAC/E,YAAMK,YAAWH,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaG,aAAY;AAC1C,eAAO;UAAER,OAAOQ;UAAUT,MAAMzB,YAAYE;UAASW,QAAQkB,gBAAA,QAAAA,gBAAW,SAAA,SAAXA,YAAalB;;MAC3E,OAAM;AACL,eAAO;UAAEa,OAAOG;UAAMJ,MAAMzB,YAAYI;;MACzC;IACH,CAAC;AACD,WAAOc;EACT,CAAC,EAAEiB,KAAI;AACP,SAAOZ;AACT;AAEM,SAAUa,uBAAuBZ,OAAc;AACnD,MAAMD,UAAmBC,MAAMb,IAAI,SAACa,QAAK;AACvC,QAAIA,OAAMC,SAASzB,YAAYI,cAAc;AAC3C,aAAOoB;IACR;AACO,QAAAP,KAAeO,OAALE,OAAVA,QAAQT,OAAA,SAAA,KAAE;AAClB,QAAMU,QAAQD,MAAME,MAAM,GAAG;AAC7B,QAAMV,SAASS,MAAMhB,IAAI,SAACkB,MAAI;AAC5B,UAAIQ,MAAMR,IAAI,GAAG;AACf,eAAO;UAAEH,OAAOG;UAAMJ,MAAMzB,YAAYG;;MACzC,OAAM;AACL,eAAO;UAAEuB,OAAOG;UAAMJ,MAAMzB,YAAYC;;MACzC;IACH,CAAC;AACD,WAAOiB;EACT,CAAC,EAAEiB,KAAI;AAEP,SAAOZ;AACT;AAEM,SAAUe,qBAAqBpB,QAAe;AAClD,MAAMK,UAAmBL,OAAOqB,OAAO,SAACC,KAAKhB,OAAK;AAChD,QAAMiB,YAAYD,IAAIA,IAAInB,SAAS,CAAC;AACpC,SAAIoB,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWhB,UAASzB,YAAYC,UAAUuB,MAAMC,SAASzB,YAAYC,QAAQ;AAC/EwC,gBAAUf,QAAQ,GAAAhB,OAAG+B,UAAUf,OAAK,GAAA,EAAAhB,OAAIc,MAAME,KAAK;AACnD,aAAOc;IACR;AACD,WAAWE,cAAAA,cAAA,CAAA,GAAAF,KAAK,IAAA,GAAA,CAAAhB,KAAK,GAAE,KAAA;KACtB,CAAA,CAAE;AACL,SAAOD;AACT;AAKM,SAAUoB,gBAAgB1B,IAIlB;AAHZ,MAAA2B,cAAW3B,GAAA2B,aACXzB,KAAmBF,GAAAX,gBAAnBA,iBAAiBa,OAAA,SAAA,CAAA,IAAEA,IACnBC,KAAoCH,GAAAT,gBAApCA,iBAAcY,OAAA,SAAGrB,sBAAmBqB;AAIpC,MAAMyB,gBAAgB,CAAC;IACrBpB,MAAMzB,YAAYI;IAClBsB,OAAOkB;EACR,CAAA;AAID,MAAME,sBAAsB9B,iBAAiB;IAC3CE,QAAQ2B;IACRvC;IACAE;EACD,CAAA;AACD,MAAMuC,8BAA8BX,uBAAuBU,mBAAmB;AAC9E,MAAME,SAASV,qBAAqBS,2BAA2B;AAE/D,SAAOC;AACT;AASM,SAAUC,2BAA2BC,OAAY;AACrD,MAAMC,qBAAqB;AAE3B,MAAMC,QAAQF,MAAKtB,MAAM,IAAI;AAG7B,MAAMyB,iBAAiBD,MAAMzC,IAAI,SAAC2C,MAAI;;AACpC,QAAMC,sBAAoBtC,KAAAqC,KAAKxB,MAAM,MAAM,OAAI,QAAAb,OAAA,SAAA,SAAAA,GAAA,CAAC,MAAK;AACrD,QAAMuC,uBAAqBrC,KAAAmC,KAAKxB,MAAM,MAAM,OAAI,QAAAX,OAAA,SAAA,SAAAA,GAAA,CAAC,MAAK;AAEtD,QAAMsC,6BAA6BF,kBAAkBzC,QAAQ,MAAMqC,kBAAkB;AACrF,QAAMO,8BAA8BF,mBAAmB1C,QAAQ,MAAMqC,kBAAkB;AAEvF,WAAOM,6BAA6BH,KAAKK,KAAI,IAAKD;EACpD,CAAC;AAGD,MAAMV,SAASK,eAAetC,KAAK,IAAI;AAEvC,SAAOiC;AACT;;;AC5HA,IAAKY;CAAL,SAAKA,cAAW;AACdA,EAAAA,aAAA,MAAA,IAAA;AACAA,EAAAA,aAAA,OAAA,IAAA;AACAA,EAAAA,aAAA,MAAA,IAAA;AACF,GAJKA,gBAAAA,cAIJ,CAAA,EAAA;AAWM,IAAMC,2BAA2B,SAACC,IAGxC;MAH0CC,UAAOD,GAAAC,SAAEC,SAAMF,GAAAE;AAIxD,MAAMC,YAAYC,EAAMH,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASI,WAAW,EACzCC,KAAKR,YAAYS,OAAO,WAAA;AAAA,QAAAP;AAAM,YAAAA,MAAAE,WAAM,QAANA,WAAM,SAAA,SAANA,OAAQM,kBAAY,QAAAR,QAAA,SAAA,SAAAA,IAAES;GAAc,EAClEH,KAAKR,YAAYY,MAAM,WAAA;AAAA,QAAAV;AAAM,YAAAA,MAAAE,WAAM,QAANA,WAAM,SAAA,SAANA,OAAQS,iBAAW,QAAAX,QAAA,SAAA,SAAAA,IAAES;GAAc,EAChEG,UAAU,WAAM;AAAA,WAAA;EAAA,CAAI;AAEvB,SAAOT;AACT;ACJA,IAAMU,gBAAgB;AACtB,IAAMC,cAAc;AACpB,IAAMC,QAAOA,MAAM;AAAA;AAEnB,IAAMC,eAAeA,CAACC,SAASC,aAAa;AAC1C,QAAMC,QAAQC,SAASC,YAAW;AAClC,QAAMC,MAAMC,OAAOC,aAAY;AAC/BL,QAAMM,SAASR,QAAQS,WAAW,CAAC,GAAGR,QAAQ;AAC9CC,QAAMQ,SAAS,IAAI;AACnBL,MAAIM,gBAAe;AACnBN,MAAIO,SAASV,KAAK;AAClBF,UAAQa,MAAK;AACf;AAEA,IAAMC,aAAcC,SAAQ;AAC1B,MAAI;AAEFA,QAAIC,QAAQC,YAAY;WACxBC,SAAM;EACN;AAEJ;AAEA,IAAMC,0BAA0B;EAC9BC,cAAc;EACdC,gBAAgB;EAChBC,kBAAkB;EAClBC,cAAc;EACdC,gBAAgB;AAClB;AAEMC,IAAAA,eAAeC,cAAAA,QAAMC,WAAW,CAACC,OAAOb,QAAQ;AAAA,MAAAc,cAAAC,uBAAAC;AACpD,QAAM;IACJC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACA/D;IACAgE;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACF,IAAI/B;AACJ,QAAMgC,cAAc3B,kBAAkBrC;AACtC,QAAM;IAAEiE;MAAcC,gBAAe;AACrC,QAAM;IAAE7E;MAAW8E,wBAAuB;AAE1C,QAAMC,sBAAsBlF,yBAAyB;IACnDE;IACAC;EACF,CAAC;AAED,QAAMgF,mBAAeC,sBAAO,IAAI;AAChC,QAAM,CAACC,SAASC,UAAU,QAAIC,wBAAS,KAAK;AAC5C,QAAM,CAACC,kBAAkBC,mBAAmB,QAAIF,wBAAS,CAAA,CAAE;AAC3D,QAAM,CAACG,kBAAkBC,mBAAmB,QAAIJ,wBAAQK,eAAA,CAAA,GAAMvD,uBAAuB,CAAE;AACvF,QAAMwD,gBAAYC,uBAAQ,MACxB,MAAM;AACJ,QAAI;AACF,YAAMC,OAAO9D,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AAClB,YAAM8D,aAAaxE,OAAOH,SAAS4E,KAAKC,eAAe;AACvD,UAAIH,QAAQA,KAAKI,gBAAgBpF,aAAa;AAC5C,YAAIiF,aAAaD,KAAKI,cAAc;AAClCJ,eAAKK,MAAMC,SAAS;AACpBN,eAAKK,MAAMC,SAAU,GAAEL,UAAW;QACpC,OAAO;AACLD,eAAKK,MAAMC,SAAS;AACpBN,eAAKK,MAAMC,SAAU,GAAEN,KAAKI,YAAa;QAC3C;MACF,OAAO;AACLJ,aAAKK,MAAMC,SAAS;MACtB;aACOC,OAAO;IACd;KAGH,CAAA,CAAE;AAKL,QAAMC,eAAezD,UAAK,QAALA,UAAAA,SAAAA,SAAAA,MAAO0D;AAC5BC,+BAAU,MAAM;AAAA,QAAAC;AACd,UAAMC,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,QAAI;AACFyE,gBAAUxE,YAAYoE;AACtBtF,mBAAa0F,WAAWJ,iBAAY,QAAZA,iBAAAA,SAAAA,SAAAA,aAAcK,MAAM;aAC5CC,UAAM;IACN;AAEFpB,wBAAoB,CAAA,CAAE;AACtBH,gBAAWqB,cAAS,QAATA,cAASD,WAAAA,wBAATC,UAAWG,iBAAW,QAAAJ,0BAAA,SAAA,SAAtBA,sBAAwBK,KAAI,EAAGH,UAAS,CAAC;AACpDf,cAAS;EACX,GAAG,CAACU,YAAY,CAAC;AAGjBE,+BAAU,MAAM;AACd,QAAI,CAACrD,QAAQ;AACXkC,iBAAW,KAAK;AAChBtD,iBAAWC,GAAG;IAChB;EACF,GAAG,CAACgC,UAAU,CAAC;AAGfwC,+BAAU,MAAM;AACd,QAAIrD,UAAUK,YAAO,QAAPA,YAAAA,UAAAA,QAASuD,WAAW;AAAA,UAAAC,uBAAAC,uBAAAC;AAEhC,YAAMR,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,UAAImB,qBACCI,YAAO,QAAPA,YAAOwD,WAAAA,wBAAPxD,QAAS2D,oBAAc,QAAAH,0BAAvBA,SAAAA,SAAAA,sBAAyBL,UAAS,MAClCnD,YAAO,QAAPA,YAAOyD,WAAAA,wBAAPzD,QAAS4D,8BAAwB,QAAAH,0BAAjCA,SAAAA,SAAAA,sBAAmCN,UAAS,GAC/C;AAEA,cAAM;UAAEQ,iBAAiB,CAAA;QAAG,IAAI3D;AAChC,cAAM6D,SAASC,gBAAgB;UAC7BC,aAAa/D,YAAO,QAAPA,YAAAA,SAAAA,SAAAA,QAAS4D;UACtBD;QACF,CAAC;AACDT,kBAAUxE,YAAYmF,OAAOG,IAAKC,WAAU;AAC1C,cAAIA,MAAMC,SAASC,YAAYC,SAAS;AACtC,kBAAMC,gBAAgBV,eAAeW,KAAMC,UAASA,KAAKC,WAAWP,MAAMO,MAAM;AAChF,kBAAMC,WAAY,GAAEC,mBAAoB,IAAEL,kBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAeI,aAAYR,MAAMlB,SAASzB,UAAUqD,qBAAsB;AACpH,mBAAOC,eAA2B;cAChCJ,QAAQP,MAAMO;cACdC;YACF,CAAC;UACH;AACA,iBAAOI,eAAeZ,MAAMlB,KAAK;QACnC,CAAC,EAAE+B,KAAK,GAAG;MACb,OAAO;AAEL,YAAI;AACF5B,oBAAUxE,YAAYmG,eAAe7E,YAAAA,QAAAA,YAAAA,SAAAA,SAAAA,QAASA,OAAO;iBACrD+E,UAAM;QACN;AAEF/C,4BAAoB,CAAA,CAAE;MACxB;AACAH,kBAAWqB,cAAS,QAATA,cAASQ,WAAAA,yBAATR,UAAWG,iBAAW,QAAAK,2BAAA,SAAA,SAAtBA,uBAAwBJ,KAAI,EAAGH,UAAS,CAAC;AACpDf,gBAAS;IACX;EACF,GAAG,CAACzC,QAAQK,OAAO,CAAC;AAGpB,QAAMgF,iCAA6BC,2BAAY,MAAM;AAAA,QAAAC;AACnD,UAAMhC,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,QAAImB,kBAAkB;AACpB,YAAMuF,sBAAsB,CAAC,GAAGjC,UAAUkC,uBAAuB,6BAA6B,CAAC,EAAEpB,IAAKqB,UAAI;AAAA,YAAAC;AAAA,eAAKD,SAAI,QAAJA,SAAI,WAAAC,gBAAJD,KAAME,aAAOD,QAAAA,kBAAbA,SAAAA,SAAAA,cAAeE;OAAO;AACrI,UAAI,CAACC,WAAW1D,kBAAkBoD,mBAAmB,KAAKA,oBAAoBhC,WAAW,GAAG;AAC1FvC,kCAA0BuE,mBAAmB;AAC7CnD,4BAAoBmD,mBAAmB;MACzC;IACF;AACAtD,iBAAWqD,yBAAAhC,UAAUG,iBAAW6B,QAAAA,2BAAA,SAAA,SAArBA,uBAAuB5B,KAAI,EAAGH,UAAS,CAAC;EACrD,GAAG,CAAClB,kBAAkBrC,gBAAgB,CAAC;AAGvCoD,+BAAU,MAAM;AACd,QAAIpD,oBAAoBa,qBAAqB;AAC3C,YAAM;QACJ5B;QACAC;QACAC;QACAC;QACAC;MACF,IAAIgD;AACJ,UAAIpD,gBAAgBC,mBAAmB,QAAQC,qBAAqB,MAAM;AAAA,YAAA2G,WAAAC,uBAAAC,YAAAC;AAExE,cAAM3C,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,cAAMP,aAAa4H,gBAAgB5C,cAAAA,QAAAA,cAAAA,SAAAA,SAAAA,UAAWhF,UAAU;AACxD,cAAM6H,iBAAaL,YAAG9H,cAAQ,QAAA8H,cAAA,SAAA,SAARA,UAAUM,gBAAcL,wBAC5CzH,WAAWY,cAAc,OAAC,QAAA6G,0BAAA,SAAA,SAA1BA,sBAA4BtC,YAAY4C,MAAM,GAAGlH,gBAAgB,CACnE;AACA,cAAMmH,gBAAYN,aAAGhI,cAAQgI,QAAAA,eAARA,SAAAA,SAAAA,WAAUI,eAC5B,KAAMH,wBAAE3H,WAAWc,YAAY,OAAC6G,QAAAA,0BAAA,SAAA,SAAxBA,sBAA0BxC,YAAY4C,MAAMhH,cAAc,CAAE,EACvE;AACA,cAAMkH,eAAevB,eAA2B;UAC9CJ,QAAQ/D,wBAAmB,QAAnBA,wBAAAA,SAAAA,SAAAA,oBAAqB+D;UAC7BC,UAAW,GAAE2B,sBAAuB,IAAE3F,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqBgE,aAAYnD,UAAUqD,qBAAsB;QACzG,CAAC;AACD,cAAM0B,MAAMzI,SAAS0I,cAAc,KAAK;AACxCD,YAAI3H,YAAYyH;AAChB,cAAMI,WAAW,CACf,GAAGrI,WAAW+H,MAAM,GAAGnH,cAAc,GACrCiH,eACAM,IAAInI,WAAW,CAAC,GAChBgI,cACA,GAAGhI,WAAW+H,MAAMjH,eAAe,CAAC,CAAC;AAEvCkE,kBAAUxE,YAAY;AACtB6H,iBAASC,QAASC,aAAY;AAC5BvD,oBAAUwD,YAAYD,OAAO;QAC/B,CAAC;AACD/F,wBAAgBD,mBAAmB;AACnC,YAAI1C,OAAOC,gBAAgBJ,SAASI,cAAc;AAEhD,gBAAM2I,YAAY5I,OAAOC,aAAY,KAAMJ,SAASI,aAAY;AAChE2I,oBAAUvI,gBAAe;AACzB,gBAAMT,QAAQ,IAAIiJ,MAAK;AACvBjJ,gBAAMkJ,mBAAmB3D,SAAS;AAClCvF,gBAAMM,SAASiF,UAAUhF,WAAWY,iBAAiB,CAAC,GAAG,CAAC;AAC1DnB,gBAAMmJ,OAAO5D,UAAUhF,WAAWY,iBAAiB,CAAC,GAAG,CAAC;AACxDnB,gBAAMQ,SAAS,KAAK;AACpBwI,oBAAUtI,SAASV,KAAK;AACxBuF,oBAAU5E,MAAK;QACjB;AACA4D,4BAAmBC,eAAMvD,CAAAA,GAAAA,uBAAuB,CAAE;AAClDwD,kBAAS;AACT4C,mCAA0B;MAC5B;IACF;EACF,GAAG,CAACvE,qBAAqBb,gBAAgB,CAAC;AAG1C,QAAMmH,+BAA2B9B,2BAAY,MAAM;AAAA,QAAA+B,SAAAC,sBAAAC,YAAAC;AACjD,UAAMR,cAAYK,UAAAjJ,YAAM,QAAAiJ,YAAA,WAAAC,uBAAND,QAAQhJ,kBAAY,QAAAiJ,yBAApBA,SAAAA,SAAAA,qBAAAG,KAAAJ,OAAuB,QAACE,aAAItJ,cAAQ,QAAAsJ,eAAA,WAAAC,wBAARD,WAAUlJ,kBAAY,QAAAmJ,0BAAtBA,SAAAA,SAAAA,sBAAAC,KAAAF,UAAyB;AACvE,UAAMhE,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,QAAIkI,UAAUU,eAAenE,WAAW;AACtCvC,4BAAsB,EAAE;IAC1B;AACA,QAAIf,oBAAoB+G,aACnBA,UAAUU,eAAeV,UAAUW,aACnCX,UAAUY,iBAAiBZ,UAAUa,aACxC;AACA,UAAIC,YAAY;AAChB,UAAI3I,iBAAiB;AACrB,UAAIC,mBAAmB;AACvB,eAAS2I,QAAQ,GAAGA,QAAQxE,UAAUhF,WAAWiF,QAAQuE,SAAS,GAAG;AACnE,cAAMC,cAAczE,UAAUhF,WAAWwJ,KAAK;AAC9C,YAAIC,YAAYC,aAAaC,UAAUC,UAAU;AAE/C,gBAAMzE,cAAesE,gBAAgBhB,UAAUU,cAC3CM,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAatE,YAAY4C,MAAM,GAAGU,UAAUY,YAAY,MAAK,MAC7DI,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAatE,gBAAe;AAChC,cAAIoE,UAAUtE,SAAS,GAAG;AACxBsE,yBAAapE;UACf,OAAO;AACL,gBAAI0E,gBAAgB1E,YAAY2E,YAAY5B,sBAAsB;AAClE,qBAAS6B,IAAIF,gBAAgB,GAAGE,IAAI,IAAIA,KAAK,GAAG;AAC9C,kBAAI5E,YAAY4E,CAAC,MAAM7B,wBAAwB;AAC7C2B,gCAAgBE;cAClB,OAAO;AACL;cACF;YACF;AACA,gBAAIF,gBAAgB,IAAI;AACtBN,0BAAYpE;AACZvE,+BAAiB4I;AACjB3I,iCAAmBgJ;YACrB;UACF;QACF,OAAO;AAELN,sBAAY;AACZ3I,2BAAiB;AACjBC,6BAAmB;QACrB;AACA,YAAI4I,gBAAgBhB,UAAUU,YAAY;AAKxC,gBAAMxI,eAAe4I,YAAYA,UAAUxB,MAAMlH,gBAAgB,IAAI;AACrEmD,8BAAoB;YAClBrD;YACAC;YACAC;YACAC,cAAc0I;YACdzI,gBAAgB0H,UAAUY;UAC5B,CAAC;AACD5G,gCAAsB9B,YAAY;AAClC;QACF;MACF;IACF;EACF,GAAG,CAACe,gBAAgB,CAAC;AAErB,QAAMsI,cAAcA,MAAM;AACxB,UAAMhF,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,QAAI,CAACkB,UAAUuD,cAAS,QAATA,cAAAA,UAAAA,UAAWG,aAAa;AACrC,UAAIU,cAAc;AAClB,UAAIoE,kBAAkB;AACtBjF,gBAAUhF,WAAWsI,QAASnB,UAAS;AACrC,YAAIA,KAAKuC,aAAaC,UAAUO,eAAe/C,KAAKgD,aAAaC,UAAUC,MAAM;AAC/E,gBAAM;YAAEC;YAAWjD,UAAU,CAAA;UAAG,IAAIF;AACpC,gBAAM;YAAEG,SAAS;UAAG,IAAID;AACxBxB,yBAAeyE;AACfL,6BAAoB,GAAE/B,sBAAuB,IAAGZ,MAAO;QACzD,WAAWH,KAAKuC,aAAaC,UAAUO,eAAe/C,KAAKgD,aAAaC,UAAUG,IAAI;AACpF1E,yBAAe;AACfoE,6BAAmB;oBACV9C,SAAI,QAAJA,SAAI,SAAA,SAAJA,KAAMuC,cAAaC,UAAUO,gBAAe/C,SAAAA,QAAAA,SAAAA,SAAAA,SAAAA,KAAMgD,cAAaC,UAAUI,KAAK;AAEvF,gBAAM;YAAErF,cAAc;UAAG,IAAIgC;AAC7BtB,yBAAgB;EAAIV,WAAY;AAChC8E,6BAAoB;EAAI9E,WAAY;QACtC,OAAO;AACL,gBAAM;YAAEA,cAAc;UAAG,IAAIgC;AAC7BtB,yBAAeV;AACf8E,6BAAmB9E;QACrB;MACF,CAAC;AACD,YAAMsF,SAAS;QAAE3I,SAAS+D;QAAaoE;;AACvC/H,oBAAcuI,MAAM;AACpBpK,iBAAWC,GAAG;AAEd0E,gBAAU5E,MAAK;AACfuD,iBAAW,KAAK;AAChBO,gBAAS;IACX;;AAEF,QAAMwG,iBAAiB,EAAEpK,QAAAA,QAAAA,QAAGc,WAAAA,eAAHd,IAAKC,aAAOa,QAAAA,iBAAAA,WAAAA,eAAZA,aAAc+D,iBAAW/D,QAAAA,iBAAzBA,UAAAA,aAA2BgE,KAAI;AACxD,QAAMuF,cAAcA,MAAM;AACxB,UAAM3F,YAAY1E,QAAG,QAAHA,QAAAA,SAAAA,SAAAA,IAAKC;AACvB,UAAM8E,YAAYvD,YAAO,QAAPA,YAAAA,SAAAA,SAAAA,QAASuD;AAC3B,QAAI5D,UAAU4D,WAAW;AACvB,UAAIQ,cAAc;AAClB,UAAIoE,kBAAkB;AACtBjF,gBAAUhF,WAAWsI,QAASnB,UAAS;AACrC,YAAIA,KAAKuC,aAAaC,UAAUO,eAAe/C,KAAKgD,aAAaC,UAAUC,MAAM;AAC/E,gBAAM;YAAEC;YAAWjD,UAAU,CAAA;UAAG,IAAIF;AACpC,gBAAM;YAAEG,SAAS;UAAG,IAAID;AACxBxB,yBAAeyE;AACfL,6BAAoB,GAAE/B,sBAAuB,IAAGZ,MAAO;AACvDzB,yBAAe;AACfoE,6BAAmB;QACrB,OAAO;AACL,gBAAM;YAAE9E,cAAc;UAAG,IAAIgC;AAC7BtB,yBAAeV;AACf8E,6BAAmB9E;QACrB;MACF,CAAC;AACD,YAAMsF,SAAS;QAAEpF;QAAWvD,SAAS+D;QAAaoE;;AAClD9H,sBAAgBsI,MAAM;AACtBpK,iBAAWC,GAAG;IAChB;;AAEF,QAAMsK,UAAUC,SAAS;IACvBvK;IACAwD;IACAb;IACA1E;IACAoF;IACAO;EACF,CAAC;AAED,SACEjD,cAAAA,QAAAmH,cAAA,QAAA;IACE7G,WAAWuJ,aAAa,CACtBvJ,WACAE,SAAS,iCAAiC,IAC1CI,WAAW,0CAA0C,EAAE,CACxD;KAEDZ,cAAAA,QAAAmH,cAAA,OAAA;IACE7G,WAAWuJ,aAAa,CACtB,0BACAjJ,WAAW,qCAAqC,EAAE,CACnD;KAEDZ,cAAAA,QAAAmH,cAAA,OAAA;IACE2C,IAAK,GAAE5H,WAAY,GAAE1B,SAASK,YAAAA,QAAAA,YAAO,SAAA,SAAPA,QAASuD,YAAY,EAAG;IACtD9D,WAAY,oCAAmC4B,WAAY;IAC3D6H,iBAAiB,CAACnJ;IAClBoJ,MAAK;IACL,cAAW;IACXpJ;IACAvB;IACA0B;IACAa,WAAYqI,OAAM;AAChB,YAAMC,eAAetI,UAAUqI,CAAC;AAChC,UAAIC,cAAc;AAChBD,UAAEE,eAAc;MAClB,OAAO;AAAA,YAAAC,eAAAC,gBAAAC,eAAAC,eAAAC;AACL,YAAI,CAACP,EAAEQ,YAAYR,EAAES,QAAQC,iBAAiBC,UACzCvL,QAAG,QAAHA,QAAG,WAAA+K,gBAAH/K,IAAKC,aAAO,QAAA8K,kBAAA,WAAAA,gBAAZA,cAAclG,iBAAWkG,QAAAA,kBAAzBA,SAAAA,SAAAA,cAA2BjG,KAAI,EAAGH,UAAS,MAC3CiG,MAAC,QAADA,MAAC,WAAAI,iBAADJ,EAAGY,iBAAW,QAAAR,mBAAA,SAAA,SAAdA,eAAgBS,iBAAgB,MACnC;AACAb,YAAEE,eAAc;AAChBpB,sBAAW;QACb;AACA,YAAIkB,EAAES,QAAQC,iBAAiBI,cAC1B1L,QAAG,QAAHA,QAAGiL,WAAAA,gBAAHjL,IAAKC,aAAOgL,QAAAA,kBAAAA,WAAAA,gBAAZA,cAAcvL,gBAAU,QAAAuL,kBAAxBA,SAAAA,SAAAA,cAA0BtG,YAAW,KACrC,EAAC3E,QAAG,QAAHA,QAAG,WAAAkL,gBAAHlL,IAAKC,aAAO,QAAAiL,kBAAA,WAAAA,gBAAZA,cAAcxL,gBAAU,QAAAwL,kBAAA,WAAAA,gBAAxBA,cAA2B,CAAC,OAAC,QAAAA,kBAA7BA,UAAAA,cAA+BrG,iBAChC7E,QAAG,QAAHA,QAAG,WAAAmL,wBAAHnL,IAAKC,QAAQP,gBAAU,QAAAyL,0BAAAA,WAAAA,wBAAvBA,sBAA0B,CAAC,OAACA,QAAAA,0BAAA,SAAA,SAA5BA,sBAA8B/B,cAAaC,UAAUO,aACxD;AACA5J,kBAAG,QAAHA,QAAAA,UAAAA,IAAKC,QAAQ0L,YAAY3L,QAAG,QAAHA,QAAG,SAAA,SAAHA,IAAKC,QAAQP,WAAW,CAAC,CAAC;QACrD;MACF;;IAEF4C,SAAUsI,OAAM;AACd,YAAMC,eAAevI,QAAQsI,CAAC;AAC9B,UAAIC,cAAc;AAChBD,UAAEE,eAAc;MAClB,OAAO;AACLvC,iCAAwB;MAC1B;;IAEFqD,SAASA,MAAM;AACbrD,+BAAwB;;IAE1BsD,SAASA,MAAM;AAAA,UAAAC;AACblI,gBAAS;AACT7B,oBAAa;AACbsB,kBAAWrD,QAAG,QAAHA,QAAG,WAAA8L,gBAAH9L,IAAKC,aAAO,QAAA6L,kBAAAA,WAAAA,gBAAZA,cAAcjH,iBAAWiH,QAAAA,kBAAA,SAAA,SAAzBA,cAA2BhH,KAAI,EAAGH,UAAS,CAAC;AACvD6B,iCAA0B;;IAE5B8D;EAAiB,CAClB,KAEAvJ,wBAACf,QAAG,QAAHA,QAAG,WAAAgB,gBAAHhB,IAAKC,aAAO,QAAAe,kBAAA,WAAAA,gBAAZA,cAAc6D,iBAAW,QAAA7D,kBAAA,SAAA,SAAzBA,cAA2B2D,YAAM,QAAA5D,0BAAA,SAAAA,wBAAI,OAAO,KAC5CJ,cAAAA,QAAAmH,cAACiE,OAAK;IACJ9K,WAAU;IACVyE,MAAMsG,gBAAgBC;IACtBC,OAAO3K,WAAW4K,YAAYC,iBAAiBD,YAAYE;EAAe,GAEzE5K,eAAeqB,UAAUwJ,2BACrB,GAIN,CAACnL,UAAUiC,WACVzC,cAAAA,QAAAmH,cAACyE,YAAU;IACTtL,WAAU;IACVmD,QAAO;IACPoI,OAAM;IACNZ,SAASA,MAAMlC,YAAW;EAAG,IAG3BhH,0BAAAA,QAAAA,0BAAAA,SAAAA,SAAAA,sBAAqB,MACnB/B,cAAAA,QAAAmH,cAAC2E,MAAI;IACH/G,MAAMgH,UAAUC;IAChBC,WAAWrL,WAAWsL,WAAWC,kBAAkBD,WAAWE;IAC9DP,OAAM;IACNpI,QAAO;EAAM,CACd,CAGK,GAKb,CAACjD,UAAU,CAACiC,aACVZ,yBAAAA,QAAAA,yBAAoB,SAAA,SAApBA,qBAAoB,MAGfS,uBACJtC,cAAAA,QAAAmH,cAACyE,YAAU;IACTtL,WAAY,kCAAiCI,wBAAwB,6BAA6B,EAAG;IACrG+C,QAAO;IACPoI,OAAM;IACNZ,SAASA,MAAM;AAAA,UAAAoB,uBAAAC;AAEb/J,uBAAY,QAAZA,iBAAY,WAAA8J,wBAAZ9J,aAAcjD,aAAO+M,QAAAA,0BAAAC,WAAAA,yBAArBD,sBAAuBE,WAAK,QAAAD,2BAAA,UAA5BA,uBAAArE,KAAAoE,qBAA+B;IACjC;EAAE,GAEFrM,cAAAA,QAAAmH,cAAC2E,MAAI;IACH/G,MAAMgH,UAAUS;IAChBP,WAAWrL,WAAWsL,WAAWC,kBAAkBD,WAAWO;IAC9DZ,OAAM;IACNpI,QAAO;EAAM,CACd,GACDzD,cAAAA,QAAAmH,cAAA,SAAA;IACE7G,WAAU;IACVyE,MAAK;IACL1F,KAAKkD;IAELmK,UAAWC,WAAU;AACnB,YAAM;QAAEC;UAAUD,MAAME;AACxB7L,mBAAa4L,SAASA,MAAM5I,WAAW,IAAI,CAAC4I,MAAM,CAAC,CAAC,IAAI,CAAC,GAAGA,KAAK,CAAC;AAClED,YAAMG,OAAOlJ,QAAQ;;IAEvBmJ,QAAQC,yBAAyB/K,mBAAmB;IACpDgL,UACEtM,mCACGuM,0CAA0C5P,OAAO;EACrD,CACF,CACS,IAMhBoD,yBAAyB,CAACF,UAAU,CAACiC,WACrCzC,cAAAA,QAAAmH,cAACyE,YAAU;IACTtL,WAAU;IACVuL,OAAM;IACNpI,QAAO;IACPwH,SAASvJ;EAAwB,IAG/BI,2BAAAA,QAAAA,2BAAAA,SAAAA,SAAAA,uBAAsB,MACpB9B,cAAAA,QAAAmH,cAAC2E,MAAI;IACH/G,MAAMgH,UAAUoB;IAChBlB,WAAWrL,WAAWsL,WAAWC,kBAAkBD,WAAWO;IAC9DZ,OAAM;IACNpI,QAAO;GACR,CAGK,CAEX,GAGHjD,UACER,cAAAA,QAAAmH,cAAA,OAAA;IAAK7G,WAAU;EAAqC,GAClDN,cAAAA,QAAAmH,cAACiG,QAAM;IACL9M,WAAU;IACVyE,MAAMsI,YAAYC;IAClBC,MAAMC,YAAYC;IAClBxC,SAAS9J;KAERgB,UAAUuL,cACL,GACR1N,cAAAA,QAAAmH,cAACiG,QAAM;IACL9M,WAAU;IACVyE,MAAMsI,YAAYjB;IAClBmB,MAAMC,YAAYC;IAClB7M,UAAU6I;IACVwB,SAASA,MAAMvB,YAAW;EAAG,GAE5BvH,UAAUwL,YACL,CACL,CAGL;AAEV,CAAC;AAED5N,aAAa6N,YAAY;EACvBtN,WAAWuN,mBAAAA,QAAUC,UAAU,CAC7BD,mBAAAA,QAAUE,QACVF,mBAAAA,QAAUG,QAAQH,mBAAAA,QAAUE,MAAM,CAAC,CACpC;EACDvN,QAAQqN,mBAAAA,QAAUI;EAClBxN,kBAAkBoN,mBAAAA,QAAUI;EAC5BvN,uBAAuBmN,mBAAAA,QAAUI;EACjCtN,iCAAiCkN,mBAAAA,QAAUI;EAC3CrN,UAAUiN,mBAAAA,QAAUI;EACpBrK,OAAOiK,mBAAAA,QAAUE;EACjBjN,aAAa+M,mBAAAA,QAAUE;EACvBhN,WAAW8M,mBAAAA,QAAUK;EACrBlN,cAAc6M,mBAAAA,QAAUM;EACxBlN,eAAe4M,mBAAAA,QAAUM;EACzBjN,iBAAiB2M,mBAAAA,QAAUM;EAC3B/M,eAAeyM,mBAAAA,QAAUM;EACzBhN,cAAc0M,mBAAAA,QAAUM;EACxB9M,YAAYwM,mBAAAA,QAAUE;EACtBzQ,SAASuQ,mBAAAA,QAAUO,MAAM;IACvB1Q,aAAamQ,mBAAAA,QAAUE;GACxB,EAAEM;EACH9N,gBAAgBsN,mBAAAA,QAAUE;EAC1B9L,qBAAqB4L,mBAAAA,QAAUG,QAAQH,mBAAAA,QAAUE,MAAM;;EAEvDlN,SAASgN,mBAAAA,QAAUO,MAAM;IACvBhK,WAAWyJ,mBAAAA,QAAUC,UAAU,CAACD,mBAAAA,QAAUE,QAAQF,mBAAAA,QAAUK,MAAM,CAAC;IACnErN,SAASgN,mBAAAA,QAAUE;IACnBtJ,0BAA0BoJ,mBAAAA,QAAUE;IACpCvJ,gBAAgBqJ,mBAAAA,QAAUG,QAAQH,mBAAAA,QAAUO,MAAM,CAAA,CAAE,CAAC;EACvD,CAAC;EACDpM,mBAAmB6L,mBAAAA,QAAUM;EAC7B7M,qBAAqBuM,mBAAAA,QAAUO,MAAM;IACnC/I,QAAQwI,mBAAAA,QAAUE;IAClBzI,UAAUuI,mBAAAA,QAAUE;EACtB,CAAC;EACDxM,iBAAiBsM,mBAAAA,QAAUM;EAC3B3M,uBAAuBqM,mBAAAA,QAAUM;EACjC1M,2BAA2BoM,mBAAAA,QAAUM;EACrCxM,SAASkM,mBAAAA,QAAUM;EACnBvM,WAAWiM,mBAAAA,QAAUM;;EAErBzM,yBAAyBmM,mBAAAA,QAAUM;EACnCrM,wBAAwB+L,mBAAAA,QAAUM;EAClCpM,uBAAuB8L,mBAAAA,QAAUM;EACjCtM,sBAAsBgM,mBAAAA,QAAUM;AAClC;AAEApO,aAAauO,eAAe;EAC1BhO,WAAW;EACXC,gBAAgB;EAChBc,YAAY;EACZJ,eAAe7C;EACf8C,iBAAiB9C;EACjBwF,OAAO;EACP/C,SAAS;EACTL,QAAQ;EACRC,kBAAkB;EAClBC,uBAAuB;EACvBC,iCAAiC;EACjCe,yBAAyBtD;EACzBwC,UAAU;EACVE,aAAa;EACbC,WAAW;EACXC,cAAc5C;EACd+C,cAAc/C;EACdgD,eAAehD;EACfkD,qBAAqB;EACrBC,iBAAiBnD;EACjBoD,uBAAuBpD;EACvBqD,2BAA2BrD;EAC3BuD,SAASvD;EACTwD,WAAWxD;EACX4D,mBAAmB5D;EACnB0D,wBAAwB1D;EACxByD,sBAAsBzD;EACtB2D,uBAAuB3D;EACvB6D,qBAAqB;AACvB;;;;;;;;;ACpnBO,IAAMsM,OAAO;EAClBC,UAAU;EACVC,MAAM;;;;;;ACFgB,SAAAC,gBAAgBC,IAehC;;MAdNC,YAASD,GAAAC,WACTC,UAAOF,GAAAE,SACPC,UAAOH,GAAAG,SACPC,KAAcJ,GAAAK,QAAdA,SAAMD,OAAA,SAAG,QAAKA,IACdE,KAAgBN,GAAAO,UAAhBA,WAAQD,OAAA,SAAG,QAAKA,IAChBE,YAASR,GAAAQ,WACTC,KAA2BT,GAAAU,sBAA3BA,uBAAuBD,OAAA,SAAA,OAAIA,IAC3BE,WAAQX,GAAAW,UACRC,aAAUZ,GAAAY,YACVC,gBAAab,GAAAa,eACbC,kBAAe,GAAA,iBACfC,mBAAgBf,GAAAe,kBAChBC,kBAAehB,GAAAgB,iBACfC,KAAAjB,GAAAkB,uBAAAA,wBAAwBD,OAAA,SAAA,OAAIA;AAEpB,MAAAE,gBAAcC,0BAAWC,mBAAmB,EAAC;AACrD,MAAMC,iBAAaC,sBAAO,IAAI;AAC9B,MAAMC,mBAAeD,sBAAO,IAAI;AAChC,MAAME,eAAeC,kBAAiB;AAEtC,MAAMC,mBAA4BC,cAAc1B,OAAsB;AACtE,MAAM2B,mBAA6B,EAAC1B,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS2B,gBAAeF,cAAc1B,OAAsB,KAAK6B,cAAc7B,OAAO,KAAKG;AAC/H,MAAM2B,qBAA+BC,gBAAgB/B,OAAO,MAAKA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASgC,iBAAgB7B;AAC1F,MAAM8B,qBAA8B,EAAChC,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS2B,gBAAe,CAACM,iBAAiBlC,OAAO,KAAKG;AAC3F,MAAMgC,4BAAqCnB,0BAA0B;AAKrE,MAAMoB,qBAAqB,CAACL,gBAAgB/B,OAAO,KAC9C,CAACkC,iBAAiBlC,OAAO,OACxB,KAAAC,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASoC,oBAAkB,QAAAC,OAAA,SAAA,SAAAA,GAAAC,KAAAtC,OAAA,MAC5B,EAACA,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS2B,kBAET3B,YAAwB,QAAxBA,YAAA,SAAA,SAAAA,QAA0BuC,iBAAevC,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASwC,YAAWC,KAAKC,YACjE,EAAE1C,YAAwB,QAAxBA,YAAO,SAAA,SAAPA,QAA0BuC;AAEnC,MAAMI,oBAAoBR,sBAAsB9B,cAAc;AAC9D,MAAMuC,qBAAqBT,sBAAsB9B,cAAc,YAAY,EAACN,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS8C,oBAAmBhC;AAExG,MAAI,EAAEW,oBACDmB,qBACAC,sBACAV,6BACAR,oBACAG,sBACAG,qBACF;AACD,WAAO;EACR;AACD,SACEc,cAAAA,QAAAC,cAAA,OAAA;IACEjD,WAAWkD,aAAa,CAAClD,WAAW,4BAA4B,CAAC;IACjEmD,KAAK5B;EAAa,GAElByB,cAAAA,QAAAC,cAACG,aAAW;IACVC,aAAa,SAACC,gBAA6C;AAAA,aACzDN,cAAAA,QAAAC,cAACM,YAAU;QACTvD,WAAU;QACVmD,KAAK9B;QACLmC,OAAM;QACNC,QAAO;QACPC,SAAS,WAAA;AACPJ,yBAAc;AACdxC,2BAAiB,IAAI;;QAEvB6C,QAAQ,WAAA;AACN7C,2BAAiB,KAAK;QACxB;MAAE,GAEFkC,cAAAA,QAAAC,cAACW,MAAI;QACH5D,WAAU;QACV6D,MAAMC,UAAUC;QAChBC,WAAWC,WAAWC;QACtBV,OAAM;QACNC,QAAO;MAAM,CAEjB,CAAY;;IAEdU,WAAW,SAACC,OAAiB;;AAC3B,UAAMC,gBAAgB,WAAA;AACpBD,cAAK;AACLtD,yBAAiB,KAAK;;AAExB,aACEkC,cAAAA,QAAAC,cAACqB,WAAS;QACRtE,WAAU;QACVuE,WAAWlD;QACXmD,kBAAkBjD;QAClB8C;QACAI,UAAUrE;MAAO,GAEhBsB,oBACCsB,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACPiB,0BAAiB1E,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAyBA,OAAO;AACjDoE,wBAAa;;QAEfO,UAAS;SAER1D,UAAU2D,kBACH,GAEXhC,qBACCG,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACP7C,0BAAgBZ,OAAO;AACvBoE,wBAAa;;QAEfS,UAAS7E,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS8C,mBAAkB;QACpC6B,UAAS;SAER1D,UAAU6D,mBACH,GAEXjC,sBACCE,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACP3C,8BAAe,QAAfA,oBAAe,SAAA,SAAfA,gBAAkB;YAAEd;UAAS,CAAA;AAC7BoE,wBAAa;;QAEfO,UAAS;SAER1D,UAAU8D,oBACH,GAEX5C,6BACCY,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACPzC,oCAAA,QAAAA,0BAAA,SAAA,SAAAA,sBAAqB;AACrBoD,wBAAa;;QAEfO,UAAS;SAER1D,UAAU+D,6BACH,GAEXrD,oBACCoB,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACP,cAAI,CAACpD,UAAU;AACbI,qBAAS,IAAI;AACb2D,0BAAa;UACd;;QAEHO,UAAS;SAER1D,UAAUgE,kBACH,GAEXnD,sBACCiB,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;AACP,cAAI,CAACpD,UAAU;AACbM,0BAAcX,OAAO;AACrBoE,0BAAa;UACd;;QAEHO,UAAS;SAER1D,UAAUiE,oBACH,GAEXjD,sBACCc,cAAAA,QAAAC,cAACyB,UAAQ;QACP1E,WAAU;QACV0D,SAAS,WAAA;;AACP,cAAI1B,gBAAgB/B,OAAO,GAAG;AAC5B,aAAAF,MAAAyB,iBAAA,QAAAA,iBAAA,SAAA,SAAAA,aAAc4D,mBAAa,QAAArF,QAAA,SAAA,SAAAA,IAAAyC,KAAAhB,cAAGvB,OAAO;UACtC,WAAU,CAACK,UAAU;AACpBK,uBAAW,IAAI;AACf0D,0BAAa;UACd;;QAEHS,SACE,OAAOrE,yBAAyB,YAC5BA,yBACAV,MAAAE,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASoF,gBAAY,QAAAtF,QAAA,SAAA,SAAAA,IAAAuF,cAAa;QAExCV,UAAS;MAA6B,GAErC1D,UAAUqE,oBACH,CAEH;IAEf;EAAE,CAEN,CAAK;AAET;;;;;;;ACrNMC,IAAAA,iBAAiBC,cAAAA,QAAMC,WAAW,SAACC,OAA4BC,KAAiC;AAElG,MAAAC,YAOEF,MAPOE,WACTC,QAMEH,MANGG,OACLC,SAKEJ,MAAK,QAJPK,WAIEL,MAAKK,UAHPC,KAGEN,MAHWO,UAAbA,WAAQD,OAAA,SAAG,KAAEA,IACbE,UAEER,MAFKQ,SACPC,WACET,MAAK;AAET,MAAMU,iBAAiBC,aAAa;IAClCC,aAAaC;IACbL;KACC;IACDM,sBAAsB;IACtBC,uBAAuB;EACxB,CAAA;AAED,SACEjB,cAAAA,QAAAkB,cAAA,OAAAC,SAAA;IACEf,WAAWgB,cAAAA,cAAA,CAAA,GACLC,MAAMC,QAAQlB,SAAS,IAAIA,YAAY,CAACA,SAAS,GAAE,IAAA,GAAA,CACvD,2BAA2BmB,OAAAhB,WAAW,eAAe,EAAE,CAAE,GACzD,KAAA,EAAAiB,KAAK,GAAG;IACVrB;IACAsB,MAAK;IACLC,OAAO;MAAErB;MAAOC;IAAQ;EAAC,GACrBM,gBAAc;IAClBe,UAAU;IACV,cAAYlB;GAEZT,GAAAA,cAAAA,QAAAkB,cAAA,OAAA;IAAKd,WAAU;KACZO,QACE,CACF;AAET,CAAC;;;;;ACtCuB,SAAAiB,wBAAwBC,IAQxC;AAPN,MAAAC,YAASD,GAAAC,WACTC,UAAOF,GAAAE,SACPC,SAAMH,GAAAG,QACNC,KAAiCJ,GAAAK,kBAAjCA,mBAAgBD,OAAA,SAAG;IAAEE,GAAG;IAAGC,GAAG;EAAC,IAAEH,IACjCI,iBAAcR,GAAAQ,gBACdC,iBAAcT,GAAAS,gBACdC,mBAAgBV,GAAAU;AAEhB,MAAMC,iBAAaC,uBAAO,IAAI;AAC9B,MAAMC,mBAAeD,uBAAO,IAAI;AAEhC,MAAIE,iBAAiBZ,OAAO,KAAKa,gBAAgBb,OAAO,GAAG;AACzD,WAAO;EACR;AAED,SACEc,eAAAA,QAAAC,cAAA,OAAA;IACEhB,WAAWiB,aAAa,CAACjB,WAAW,qCAAqC,CAAC;IAC1EkB,KAAKN;EAAa,GAElBG,eAAAA,QAAAC,cAACG,aAAW;IACVC,aAAa,SAACC,gBAA6C;AAAA,aACzDN,eAAAA,QAAAC,cAACM,YAAU;QACTtB,WAAU;QACVkB,KAAKR;QACLa,OAAM;QACNC,QAAO;QACPC,SAAS,WAAA;AACPJ,yBAAc;AACdZ,2BAAiB,IAAI;;QAEvBiB,QAAQ,WAAA;AACNjB,2BAAiB,KAAK;QACxB;MAAE,GAEFM,eAAAA,QAAAC,cAACW,MAAI;QACH3B,WAAU;QACV4B,MAAMC,UAAUC;QAChBC,WAAWC,WAAWC;QACtBV,OAAM;QACNC,QAAO;MAAM,CAEjB,CAAY;;IAEdU,WAAW,SAACC,OAAiB;AAC3B,UAAMC,gBAAgB,WAAA;AACpBD,cAAK;AACL1B,yBAAiB,KAAK;;AAExB,aACEM,eAAAA,QAAAC,cAACqB,gBAAc;QACbC,WAAW5B;QACX6B,kBAAkB3B;QAClBwB;QACAhC;SAECoC,gBAAgBjC,cAAc,EAAEkC,IAAI,SAACC,OAAY;;AAChD,YAAMC,aAAqBC,MAAAzC,OAAAJ,MAAAE,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS4C,eAAS,QAAA9C,QAAA,SAAA,SAAAA,IACzC+C,OAAO,SAACC,UAAuB;AAAA,iBAAAA,SAASC,QAAQN,MAAMM;QAAvB,CAA0B,EAAE,CAAC,OAAC,QAAA7C,QAAA,SAAA,SAAAA,IAAE8C,aAC/D,QAAAL,OAAA,SAAA,SAAAA,GAAAM,KAAK,SAACC,WAAiB;AAAK,iBAAAA,cAAcjD;QAAd,CAAoB;AACpD,eACEa,eAAAA,QAAAC,cAACoC,gBAAc;UACbJ,KAAKN,MAAMM;UACXzB,OAAM;UACNC,QAAO;UACP6B,UAAUV;UACVlB,SAAS,WAAA;AACPW,0BAAa;AACb5B,2BAAeP,SAASyC,MAAMM,KAAKL,SAAS;;UAE9CW,UAAU,2BAA2BC,OAAAb,MAAMM,GAAG;QAAG,GAEjDjC,eAAAA,QAAAC,cAACwC,eAAa;UACZC,KAAKf,MAAMe;UACXlC,OAAM;UACNC,QAAO;UACPkC,aAAa,SAACC,OAAK;AAAK,mBACtB5C,eAAAA,QAAAC,cAAA,OAAA;cAAK2C;YAAa,GAChB5C,eAAAA,QAAAC,cAACW,MAAI;cACHC,MAAMC,UAAU+B;cAChB7B,WAAWC,WAAW6B;cACtBtC,OAAM;cACNC,QAAO;YAAM,CAEjB,CAAK;UARiB;QAStB,CAEN,CAAgB;MAEpB,CAAC,CACa;IAEpB;EAAE,CAEN,CAAK;AAET;;;;;;;;AClGMsC,IAAAA,gBAAgBC,eAAAA,QAAMC,WAAW,SAACC,OAA2BC,KAA8B;AAE7F,MAAAC,KAMEF,MANYG,WAAdA,YAAYD,OAAA,SAAA,KAAEA,IACdE,WAKEJ,MALMI,UACRC,KAIEL,MAJQM,OAAVA,QAAQD,OAAA,SAAA,KAAEA,IACVE,KAGEP,MAAK,OAHPQ,QAAK,OAAA,SAAG,QAAKD,IACbE,KAEET,MAFcU,UAAhBA,WAAQD,OAAA,SAAG,QAAKA,IAChBE,KACEX,MAD4BY,SAA9BA,UAAUD,OAAA,SAAA,WAAA;EAAA,IAAoBA;AAGhC,MAAME,mBAAmB,WAAA;AACvB,QAAIH,YAAY,CAACF,OAAO;AACtB,aAAO;IACR;AACD,QAAIA,OAAO;AACT,aAAO;IACR;AACD,WAAO;;AAGT,SACEV,eAAAA,QAAAgB,cAAA,OAAA;IACEX,WAAWY,cAAAA,cAAA,CAAA,GACLC,MAAMC,QAAQd,SAAS,IAAIA,YAAY,CAACA,SAAS,GAAE,IAAA,GAAA,CACvD,0BAA0Be,OAAAL,iBAAgB,CAAE,CAAE,GAC9C,KAAA,EAAAM,KAAK,GAAG;IACVC,MAAK;IACLnB;IACAW;IACAS,WAAWT;IACXU,YAAYV;IACZW,UAAU;KAEVzB,eAAAA,QAAAgB,cAAA,OAAA;IAAKX,WAAU;KACbL,eAAAA,QAAAgB,cAAA,OAAA;IAAKX,WAAU;EAAsC,GAClDC,QACE,GACLN,eAAAA,QAAAgB,cAACU,OAAK;IACJrB,WAAYC,YAAYE,SAAU;IAClCmB,MAAMC,gBAAgBC;IACtBC,OAAOC,YAAYC;KAElBxB,KACI,CACJ,CACF;AAET,CAAC;;;;;;ACzDD,IAAMyB,cAAyD,SAACC,OAAuB;AAEnF,MAAAC,KAGED,MAAKE,WAHPA,YAASD,OAAA,SAAG,KAAEA,IACdE,WAEEH,MAFMG,UACRC,kBACEJ,MAAK;AAGT,MAAMK,iBAAaC,uBAAM;AACzBD,aAAWE,UAAUC,SAASC,eAAeC,UAAU;AACvD,MAAI,CAACL,WAAWE,SAAS;AACvBF,eAAWE,UAAUC,SAASG,cAAc,KAAK;AACjDN,eAAWE,QAAQK,aAAa,MAAMF,UAAU;AAChDF,aAASK,KAAKC,YAAYT,WAAWE,OAAO;EAC7C;AACD,aAAOQ,gCACLC,eAAAA,QAAAL,cAAA,OAAA;IACET,WAAW,GAAGe,OAAAf,WAAgC,uBAAA;KAE9Cc,eAAAA,QAAAL,cAAA,OAAA;IACET,WAAW;IACXgB,MAAK;IACL,cAAW;IACX,iBAAc;EAAM,GAEnBf,QACE,GACLa,eAAAA,QAAAL,cAAA,OAAA;IACET,WAAW;IAGXiB,SAAS,SAACC,GAAC;AACTA,YAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,gBAAe;AAClBjB,sBAAe;IACjB;EAAE,CAEN,CAAK,GACLC,WAAWE,OAAO;AACtB;;;;;ACxCwB,SAAAe,QAAQC,IAGjB;MAFbC,KAAcD,GAAAE,WAAdA,YAASD,OAAA,SAAG,KAAEA,IACdE,KAAAH,GAAAI,UAAAA,WAAWD,OAAA,SAAA,KAAEA;AAEb,SACEE,eAAAA,QAAAC,cAAA,OAAA;IACEJ,WAAWK,cAAAA,cAAA,CAAA,GACLC,MAAMC,QAAQP,SAAS,IAAIA,YAAY,CAACA,SAAS,GAAE,IAAA,GAAA,CACvD,kBAAkB,GAClB,KAAA,EAAAQ,KAAK,GAAG;EAAE,GAEZL,eAAAA,QAAAC,cAACK,OAAK;IACJT,WAAU;IACVU,MAAMC,gBAAgBC;IACtBC,OAAOC,YAAYC;KAElBb,QACI,CACJ;AAET;;;;AC1BA,IAAMc,qBAAqB;AAOH,SAAAC,eAAeC,IAKjB;MAJpBC,KAAcD,GAAAE,WAAdA,YAASD,OAAA,SAAG,KAAEA,IACdE,WAAQH,GAAAG,UACRC,eAAYJ,GAAAI;AAGN,MAAAC,SAA0CC,yBAAS,KAAK,GAAvDC,mBAAgBF,GAAA,CAAA,GAAEG,sBAAmBH,GAAA,CAAA;AAC5C,MAAMI,kBAAcC,uBAAO,IAAI;AAE/B,SACEC,eAAAA,QAAAC,cAAA,OAAA;IACEV,WAAWW,cAAAA,cAAA,CAAA,GACLC,MAAMC,QAAQb,SAAS,IAAIA,YAAY,CAACA,SAAS,GAAE,IAAA,GAAA,CACvD,0BAA0B,GAAA,KAAA,EAC1Bc,KAAK,GAAG;IACVC,aAAa,WAAA;AAAQT,0BAAoB,IAAI;;IAC7CU,SAAS,WAAA;AAAQV,0BAAoB,IAAI;;IACzCW,YAAY,WAAA;AAAQX,0BAAoB,KAAK;;IAC7CY,QAAQ,WAAA;AAAQZ,0BAAoB,KAAK;IAAG;KAE5CG,eAAAA,QAAAC,cAAA,OAAA;IACEV,WAAU;IACVmB,KAAKZ;EAAY,GAEhBN,QACE,GAEHI,oBACEI,eAAAA,QAAAC,cAAA,OAAA;IACEV,WAAU;IACVoB,OAAO;MAAEC,QAAQ,eAAA,OAAezB,oBAAkB,KAAA;IAAO;KAEzDa,eAAAA,QAAAC,cAAA,OAAA;IAAKV,WAAU;KACbS,eAAAA,QAAAC,cAAA,OAAA;IACEV,WAAU;IACVoB,OAAO;MAAEE,MAAMf,YAAYgB,WAAW,QAAAC,OAAQjB,YAAYgB,QAAQE,cAAc,GAAC,WAAA;IAAa;EAAC,GAE9FvB,YACE,CACF,CACF,CAGN;AAET;;;;AC1CA,IAAMwB,eAAe;EACnBC,SAAS,CAAA;EACTC,QAAQ;;AAGV,IAAMC,iBAAiBC,eAAAA,QAAMC,cAAwCL,YAAY;AAEjF,IAAMM,kBAAkD,SAACC,OAAK;AAE1D,MAAAC,WAGED,MAAK,UAFPN,UAEEM,MAAKN,SADPQ,KACEF,MADYL,QAAdA,SAASO,OAAA,SAAA,QAAK;AAGhB,SACEL,eAAAA,QAAAM,cAACP,eAAeQ,UAAQ;IAACC,OAAO;MAC9BX;MACAC;IACD;EAAC,GACCM,QACsB;AAE7B;AAEA,IAAMK,oBAAoB,WAAA;AACxB,MAAMD,QAAQR,eAAAA,QAAMU,WAAWX,cAAc;AAC7C,MAAIS,UAAUG,QAAW;AACvB,UAAM,IAAIC,MAAM,yDAAyD;EAC1E;AACD,SAAOJ;AACT;;;;;ACrBO,IAAMK,4BAA4B,SAACC,IAOT;;AAN/B,MAAAC,UAAO,GAAA,SACPC,UAAO,GAAA,SACPC,KAAAH,GAAAI,UAAAA,WAAQD,OAAA,SAAG,KAAEA,IACbE,WAAQL,GAAAK,UACRC,iBAAcN,GAAAM,gBACdC,4BAAyBP,GAAAO;AAEjB,MAAAC,KAAiBN,QAALO,SAAZA,UAAUD,OAAA,SAAA,CAAA,IAAE;AACd,MAAAE,SAAoCC,yBAASP,QAAQ,GAApDQ,gBAAaF,GAAA,CAAA,GAAEG,mBAAgBH,GAAA,CAAA;AAEtC,WAASI,6BAA0B;AACjC,QAAIP,6BAA6BN,SAAS;AACxC,UAAMc,SAAUd,YAA+B,QAA/BA,YAAA,SAAA,SAAAA,QAAiCc;AACjDR,gCAA0BQ,MAAM;IACjC;EACH;AAEA,SACEC,eAAAA,QAAAC,cAACC,aAAW;IAACC,iBAAiBd;KAC5BW,eAAAA,QAAAC,cAAA,OAAA;IAAKG,WAAU;KACbJ,eAAAA,QAAAC,cAAA,OAAA;IAAKG,WAAU;MACZC,KAAApB,QAAQqB,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEC,IAAI,SAACC,UAAkB;AACzC,QAAMC,WAAWC,YAAYpB,gBAAgBkB,SAASG,GAAG;AACzD,WACEX,eAAAA,QAAAC,cAAA,OAAA;MACEU,KAAKH,SAASG;MACdP,WAAW,+FAEPQ,OAAAhB,kBAAkBY,SAASG,MAAM,mEAAmE,IACvG,oBAAA;MACDE,SAAS,WAAA;AACPhB,yBAAiBW,SAASG,GAAG;MAC/B;IAAE,GAEFX,eAAAA,QAAAC,cAACa,eAAa;MACZC,KAAKN;MACLO,OAAM;MACNC,QAAO;MACPC,aAAa,SAACC,OAAK;AAAK,eACtBnB,eAAAA,QAAAC,cAAA,OAAA;UAAKkB;QAAa,GAChBnB,eAAAA,QAAAC,cAACmB,MAAI;UACHC,MAAMC,UAAUC;UAChBC,WAAWC,WAAWC;UACtBV,OAAM;UACNC,QAAO;QAAM,CAEjB,CAAK;MARiB;IAStB,CAEJ,GAAAjB,eAAAA,QAAAC,cAAC0B,OAAK;MACJN,MAAMO,gBAAgBC;MACtBC,OAAOlC,kBAAkBY,SAASG,MAAMoB,YAAYC,UAAUD,YAAYE;IAAe,GAExFzB,SAAS0B,QAAQC,MACb,CACJ;EAET,CAAC,CACE,GACLnC,eAAAA,QAAAC;IAAA;IAAA;MAAKG,WAAU;IAA6C;;MAGtDgC,MAAAC,KAAApD,QAAQqB,eAAS,QAAA+B,OAAA,SAAA,SAAAA,GAAEC,KAAK,SAAA9B,UAAY;AAAA,aAAAA,SAASG,QAAQf;KAAa,OAC9D,QAAAwC,OAAA,SAAA,SAAAA,GAAAF,QAAQ3B,IAAI,SAACgC,QAAM;AAAK,aAAA9C,QAAQ6C,KAAK,SAACE,QAAM;AAAK,eAAAA,OAAOD,WAAWA;MAAlB,CAAwB;IAAjD,CAAkD,EAC3EE,OAAO,SAACD,QAAW;AAAA,aAAAA,WAAWE;IAAX,CAAoB,GAEzCnC,IAAI,SAACiC,QAAM;AAAK,aACfxC,eAAAA,QAAAC,cAAC0C,cAAY;QACXhC,KAAK6B,OAAOD;QACZnC,WAAU;QACVwC,MAAMJ;QACNK,YAAW;QACXhC,SAASf;MAA2B,CAAA;KAEvC;EAEF,CACF,CACM;AAEjB;AC1EwB,SAAAgD,aAAa9D,IAO7B;;AANN,MAAAwB,WAAQxB,GAAAwB,UACRuC,qBAAkB/D,GAAA+D,oBAClBC,cAAWhE,GAAAgE,aACXC,iBAAc,GAAA,gBACdC,YAASlE,GAAAkE,WACThE,UAAOF,GAAAE;AAEP,MAAMiE,QAAQC,wBAAuB;AAC7B,MAAAC,WAAaC,qBAAoB,EAAE;AAC3C,MAAMC,eAAeC,kBAAiB;AACtC,MAAMvE,UAAUsE,iBAAY,QAAZA,iBAAA,SAAA,SAAAA,aAActE;AACtB,MAAAwE,gBAAcC,2BAAWC,mBAAmB,EAAC;AAErD,MAAMpB,SAASY,MAAMS,OAAOrB;AAC5B,MAAMsB,cAAcC,YAAYvB,QAAQ/B,QAAQ;AAChD,MAAMuD,mBAAoBvD,SAAS0B,QAAQC,SAAS,MAC9CjD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS8E,eAAc,MAAM,CAAC9E,QAAQ+E;AAE5C,MAAMC,gBAAgB,WAAA;AACpBlB,gBAAY,EAAE;AACdC,uBAAA,QAAAA,mBAAA,SAAA,SAAAA,eAAkBhE,SAAUuB,SAASG,KAAKkD,WAAW;;AAEvD,MAAMM,YAAYC,aAAa;IAC7BC,aAAa,WAAA;AACXrB,kBAAYxC,SAASG,GAAG;;IAE1BE,SAASqD;KACR;IACDI,sBAAsB;IACtBC,uBAAuB;EACxB,CAAA;AAED,SACEvE,eAAAA,QAAAC,cAACuE,gBAAc;IACbpE,WAAU;IACVqE,cAAcV,mBACZ/D,eAAAA,QAAAC,cAACyE,SACEC,MAAAA,sBAAsBnE,UAAU+B,QAAQQ,oBAAoBU,SAAS,CAC/D,IACPzD,eAAAA,QAAAC,cAAAD,eAAAA,QAAA4E,UAAK,IAAA;EAAC,GAEV5E,eAAAA,QAAAC,cAAA,OAEIoD,WACIc,YACA;IAAEtD,SAASqD;EAAe,GAGhClE,eAAAA,QAAAC,cAAC4E,eAAa;IACZC,OAAOtE,SAAS0B,QAAQC;IACxB4C,UAAUlB;EAAY,GAEtB7D,eAAAA,QAAAC,cAACa,eAAa;IACZkE,QAAM;IACNjE,OAAKV,KAAA6C,UAAU+B,IAAIzE,aAAA,QAAAA,aAAA,SAAA,SAAAA,SAAUG,GAAG,OAAC,QAAAN,OAAA,SAAA,SAAAA,GAAEU,QAAO;IAC1CC,OAAM;IACNC,QAAO;IACPiE,kBACElF,eAAAA,QAAAC,cAACmB,MAAI;MAACJ,OAAM;MAAOC,QAAO;MAAOI,MAAMC,UAAUC;KAAS;GAGhE,CAAe,CACZ,CACS;AAEpB;ACnFO,IAAM4D,uBAAuB,SAACnG,IAET;AAD1B,MAAA6B,UAAO7B,GAAA6B;AAEP,MAAMuE,YAAYhB,aAAa;IAC7BC,aAAa,WAAA;IAAA;IACbxD;KACC;IACDyD,sBAAsB;IACtBC,uBAAuB;EACxB,CAAA;AAED,SACEvE,eAAAA,QAAAC,cAAA,OAAAoF,SAAA;IACEjF,WAAU;EAA8C,GACpDgF,SAAS,GAEbpF,eAAAA,QAAAC,cAAC4E,eAAa;IACZS,OAAK;EAAA,GAELtF,eAAAA,QAAAC,cAACmB,MAAI;IACHC,MAAMC,UAAUiE;IAChB/D,WAAWC,WAAWC;IACtBV,OAAM;IACNC,QAAO;GAEX,CAAe,CACZ;AAET;ACvBO,IAAMuE,0BAA0B,SAACxG,IAMT;AAL7B,MAAAuD,SAAMvD,GAAAuD,QACNtD,UAAOD,GAAAC,SACPK,iBAAcN,GAAAM,gBACdD,WAAQL,GAAAK,UACR4D,iBAAcjE,GAAAiE;AAEd,MAAMwC,mBAAeC,wBAAQ,WAAA;AAC3B,WAAOC,gBAAgBrG,cAAc;EACvC,GAAG,CAACA,cAAc,CAAC;AACnB,SACEU,eAAAA,QAAAC,cAACC,aAAW;IAACC,iBAAiBd;KAC5BW,eAAAA,QAAAC,cAAA,OAAA;IAAKG,WAAU;EAAoE,GAChFqF,aAAalF,IAAI,SAACqF,OAAK;;AACtB,QAAMC,aAAqBzD,MAAC,MAAA/B,MAAArB,MAAAC,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASqB,eAAS,QAAAtB,QAAA,SAAA,SAAAA,IAC1CsD,KAAK,SAAC9B,UAAkB;AAAc,aAAAA,SAASG,QAAQiF,MAAMjF;IAAvB,CAA0B,OAAG,QAAAN,OAAA,SAAA,SAAAA,GAAA6B,aACnE,QAAAG,OAAA,SAAA,SAAAA,GAAAyD,KAAK,SAACC,WAA+B;AAAA,aAAAA,cAAcxD;KAAM,OAAM,QAAAH,OAAA,SAAAA,KAAA;AACnE,WACEpC,eAAAA,QAAAC,cAAC+F,gBAAc;MACbrF,KAAKiF,MAAMjF;MACXK,OAAM;MACNC,QAAO;MACP8D,UAAUc;MACVhF,SAAS,SAACoF,GAAC;AACTA,cAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,gBAAe;AAClBjD,2BAAA,QAAAA,mBAAA,SAAA,SAAAA,eAAiBhE,SAAS2G,MAAMjF,KAAKkF,SAAS;AAC9CxG,iBAAQ;;MAEV8G,UAAU,kCAAkCvF,OAAAgF,MAAMjF,GAAG;IAAG,GAExDX,eAAAA,QAAAC,cAACa,eAAa;MACZC,KAAK6E,MAAM7E;MACXC,OAAM;MACNC,QAAO;MACPC,aAAa,SAACC,OAA8B;AAAmB,eAC7DnB,eAAAA,QAAAC,cAAA,OAAA;UAAKkB;QAAa,GAChBnB,eAAAA,QAAAC,cAACmB,MAAI;UACHC,MAAMC,UAAUC;UAChBC,WAAWC,WAAWC;UACtBV,OAAM;UACNC,QAAO;QAAM,CAEjB,CAAK;MARwD;IAS7D,CAEN,CAAgB;GAEnB,CACE,CACM;AAEjB;ACnCA,IAAMmF,iBAAiB,SAACpH,IAWhB;;MAVNU,KAAcV,GAAAoB,WAAdA,YAAYV,OAAA,SAAA,KAAE,IACd6C,SAAM,GAAA,QACNtD,UAAO,GAAA,SACPC,UAAO,GAAA,SACPI,iBAAc,GAAA,gBACdyD,qBAAkB/D,GAAA+D,oBAClBsD,KAAiCrH,GAAAsH,kBAAjCA,mBAAmBD,OAAA,SAAA;IAAEE,GAAG;IAAGC,GAAG;EAAC,IAAEH,IACjCI,KAAAA,GAAAA,QAAAC,SAAM,OAAA,SAAG,QAAKD,IACdxD,iBAAcjE,GAAAiE,gBACd0D,qBAAkB3H,GAAA2H;AAEV,MAAAtD,WAAaC,qBAAoB,EAAE;AAC3C,MAAMsD,qBAAiBC,uBAAO,IAAI;AAC5B,MAAAC,SAAoCnH,yBAAS,KAAK,GAAjDoH,gBAAaD,GAAA,CAAA,GAAEE,mBAAgBF,GAAA,CAAA;AAChC,MAAAG,SAA0CtH,yBAAS,EAAE,GAApDuH,mBAAgBD,GAAA,CAAA,GAAEE,sBAAmBF,GAAA,CAAA;AAE5C,MAAM/D,YAAYkE,eAAe9H,cAAc;AAC/C,MAAM+H,yBAAwBhF,MAAAhC,KAAApB,QAAQqB,eAAW,QAAAD,OAAA,SAAA,SAAAA,GAAA8B,YAAM,QAAA,OAAA,SAAA,KAAI,KAAKe,UAAUoE;AAE1E,SACEtH,eAAAA,QAAAC,cAAA,OAAA;IAAKG,WAAWmH,aAAa,CAC3BnH,WAAW,4BACXsG,SAAS,aAAa,UAAU,CACjC;EAAE,KACEvH,MAAAiD,KAAAnD,QAAQqB,eAAS,QAAA8B,OAAA,SAAA,SAAAA,GAAED,YAAM,QAAAhD,OAAA,SAAAA,KAAI,KAAK,OACnCK,KAAAP,QAAQqB,eAAW,QAAAd,OAAA,SAAA,SAAAA,GAAAe,IAAI,SAACC,UAAkB;AACxC,WACER,eAAAA,QAAAC,cAAC6C,cAAY;MACXnC,KAAKH,aAAA,QAAAA,aAAA,SAAA,SAAAA,SAAUG;MACfH;MACAuC;MACAC,aAAamE;MACblE;MACAC;MACAhE;IAAiB,CACjB;EAEN,CAAC,IAED,CAACmE,YAAYgE,wBACbrH,eAAAA,QAAAC,cAACuH,aAAW;IACVC,aAAa,SAACC,gBAA0B;AAAmB,aACzD1H,eAAAA,QAAAC,cAAC4E,eAAa;QACZzE,WAAU;QACVuH,KAAKf;QACLtB,OAAK;QACLzE,SAAS,SAACoF,GAAC;;AACTyB,yBAAc;AACd,WAAA1I,MAAAiH,MAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,qBAAe,QAAAlH,QAAA,SAAA,SAAAA,IAAA,KAAA,CAAA;QACpB;MAAE,GAEFgB,eAAAA,QAAAC,cAACmB,MAAI;QACHC,MAAMC,UAAUiE;QAChB/D,WAAWC,WAAWC;QACtBV,OAAM;QACNC,QAAO;MAAM,CAEjB,CAAe;;IAEjB2G,WAAW,SAACC,eAA4C;AAAA,aACtD7H,eAAAA,QAAAC,cAAC6H,gBAAc;QACbC,WAAWnB;QACXoB,kBAAkBpB;QAClBiB;QACAvB;SAECX,gBAAgBrG,cAAc,EAAEiB,IAAI,SAACqF,OAAY;;AAChD,YAAMC,cAAsBxD,OAAAhC,OAAArB,MAAAC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASqB,eAAS,QAAAtB,QAAA,SAAA,SAAAA,IAC1CsD,KAAK,SAAC9B,UAAgC;AAAA,iBAAAA,SAASG,QAAQiF,MAAMjF;QAAvB,CAA0B,OAAC,QAAAN,QAAA,SAAA,SAAAA,IAAE6B,aAAO,QAAAG,QAAA,SAAA,SAAAA,IAC1EyD,KAAK,SAACC,WAAiB;AAAc,iBAAAA,cAAcxD;SAAM,MAAM;AACnE,eACEvC,eAAAA,QAAAC,cAAC+F,gBAAc;UACbrF,KAAKiF,MAAMjF;UACXK,OAAM;UACNC,QAAO;UACP8D,UAAUc;UACVhF,SAAS,SAACoF,GAAC;AACT4B,0BAAa;AACb5E,+BAAA,QAAAA,mBAAA,SAAA,SAAAA,eAAiBhE,SAAS2G,MAAMjF,KAAKkF,SAAS;AAC9CI,kBAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,gBAAe;;UAEpBC,UAAU,2BAA2BvF,OAAAgF,MAAMjF,GAAG;QAAG,GAEjDX,eAAAA,QAAAC,cAACa,eAAa;UACZC,MAAK6E,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAO7E,QAAO;UACnBC,OAAM;UACNC,QAAO;UACPC,aAAa,SAACC,OAA8B;AAAmB,mBAC7DnB,eAAAA,QAAAC,cAAA,OAAA;cAAKkB;YAAa,GAChBnB,eAAAA,QAAAC,cAACmB,MAAI;cACHC,MAAMC,UAAUC;cAChBC,WAAWC,WAAWC;cACtBV,OAAM;cACNC,QAAO;YAAM,CAEjB,CAAK;UARwD;QAS7D,CAEN,CAAgB;MAEpB,CAAC,CACa;IA1CsC;GA2CtD,GAGJoC,YAAYgE,wBACZrH,eAAAA,QAAAC,cAACkF,sBAAoB;IACnBtE,SAAS,WAAA;AACPmG,uBAAiB,IAAI;IACvB;GACA,GAEF3D,YAAY0D,iBACZ/G,eAAAA,QAAAC,cAACuF,yBAAuB;IACtBjD;IACAtD;IACAK;IACAD,UAAU,WAAA;AACR2H,uBAAiB,KAAK;;IAExB/D;EAA+B,CAC/B,GAEFI,YAAY6D,oBAAoBhI,YAAY,QAC5Cc,eAAAA,QAAAC,cAAClB,2BAAyB;IACxBE;IACAC;IACAE,UAAU8H;IACV7H,UAAU,WAAA;AACR8H,0BAAoB,EAAE;;IAExB7H;IACAC,2BAA2BoH;EAAmB,CAAA,CAG/C;AAET;;;;;ACjKwB,SAAAsB,aAAaC,IAGjB;;AAFlB,MAAAC,KAAAD,GAAAE,WAAAA,YAASD,OAAA,SAAG,KAAEA,IACdE,UAAOH,GAAAG;AAEP,MAAI,GAAEA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASC,oBAAkBD,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASE,iBAAgB,GAACC,KAAAH,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASC,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,OAAA,OAAQD,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASE,iBAAgB,SAAS;AAC1H,WAAO;EACR;AACD,SACEE,eAAAA,QAAAC,cAAA,OAAA;IACEN,WAAWO,cAAAA,cAAA,CAAA,GACLC,MAAMC,QAAQT,SAAS,IAAIA,YAAY,CAACA,SAAS,GAAE,IAAA,GAAA,CACvD,wBAAwB,GACxB,KAAA,EAAAU,KAAK,GAAG;EAAE,GAEZL,eAAAA,QAAAC,cAACK,OAAK;IACJX,WAAU;IACVY,MAAMC,gBAAgBC;IACtBC,OAAOC,YAAYC;EAAe,GAEjChB,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASA,OACL,CACJ;AAET;;;;;;;;;;;;ACZwB,SAAAiB,aAAaC,OAAwB;;AAEzD,MAAAC,kBAIED,MAAK,iBAHPE,kBAGEF,MAAKE,iBAFPC,wBAEEH,MAFmBG,uBACrBC,SACEJ,MAAK;AAET,MAAMK,iBAAaC,uBAAM;AAEzB,MAAMC,gBAAgBC,wBAAuB;AAC7C,MAAMC,UAASC,KAAAH,kBAAA,QAAAA,kBAAA,SAAA,SAAAA,cAAeI,YAAQ,QAAAD,OAAA,SAAA,SAAAA,GAAAD;AACtC,MAAMG,OAAMC,MAAAC,KAAAP,kBAAA,QAAAA,kBAAA,SAAA,SAAAA,cAAeQ,YAAM,QAAAD,OAAA,SAAA,SAAAA,GAAEE,cAAQ,QAAAH,OAAA,SAAA,SAAAA,GAAED;AAC7C,MAAMK,oBAAoBR,WAAWP;AAC/B,MAAAgB,SAAkBC,yBAAQ,GAAzBC,OAAIF,GAAA,CAAA,GAAEG,UAAOH,GAAA,CAAA;AACpB,MAAMI,gBAAYC,4BAChB,SAACC,gBAAc;AACb,QAAIJ,QAAQ,EAACR,QAAG,QAAHA,QAAG,SAAA,SAAHA,IAAKa,iCAAgC;AAChDD,qBAAc;AACd;IACD;AACD,QAAME,QAAQd,QAAG,QAAHA,QAAA,SAAA,SAAAA,IAAKa,+BAA+B;MAChDE,eAAe,CAACzB,eAAe;IAChC,CAAA;AACDwB,UAAME,KAAI,EAAGC,KAAK,SAACC,SAAO;AACxB,WAAIA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASC,UAAS,GAAG;AACvBV,gBAAQS,QAAQ,CAAC,CAAC;MACnB;AACDN,qBAAc;IAChB,CAAC;EACH,GACA,CAACZ,KAAKV,eAAe,CAAC;AAExB,SACE8B,eAAAA,QAAAC,cAACC,aAAW;IACVC,aAAa,SAACX,gBAA0B;AAAmB,aACzDQ,eAAAA,QAAAC,cAAA,KAAA;QACEG,WAAW,qDAAAC,OAEPpB,oBAAoB,+BAA+B,IACtD,cAAA;QACDqB,SAAS,WAAA;AAAM,iBAAAhB,UAAUE,cAAc;;QACvCe,KAAKlC;QACL,eAAaH;QACb,iBAAeC;QACf,mBAAiB;MAAK,GAEtB6B,eAAAA,QAAAC,cAACO,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOxC,SAASyC,YAAYC,cAAcD,YAAYE;MAAe,GAEpE,GAAGV,OAAApC,eAAe,EAAGoC,OAAAlC,qBAAqB,CACtC,CACN;;IAEL6C,WAAW,SAACC,eAAyB;AAAmB,aACtDjB,eAAAA,QAAAC;QAACiB;QACC;UAIAC,WAAW9C;UACX+C,kBAAkB/C;UAClB4C;UACAI,OAAO;YAAEC,YAAY;YAAOC,eAAe;UAAK;QAAG;QAEnDvB,eAAAA,QAAAC,cAACuB,aAAW;UACVpC;UACAqC,WAAWR;UACXS,eAAejD;QAAO,CAE1B;MAAW;IAhB2C;EAiBtD,CAAA;AAGR;;;;;AC1FA,IAAMkD,OAAO;AAEE,SAASC,UAASC,MAM9B;AAAA,MAN+B;IAChCC;IACAC;IACAC;IACAC;IACAC;EACF,IAACL;AACC,QAAMM,MAAOR,KAAKS,KAAKL,GAAG,IAAKA,MAAO,UAASA,GAAI;AAEnD,SACEM,eAAAA,QAAAC,cAAA,KAAA;IACER,WAAW,CACT,GAAIS,MAAMC,QAAQV,SAAS,IAAIA,YAAY,CAACA,SAAS,GACrD,uBACAG,QAAQQ,uBAAuBR,KAAK,IAAI,EAAE,EAC1CS,KAAK,GAAG;IACVC,MAAMR;IACNS,QAAO;IACPC,KAAI;IAEJC,YAAaC,OAAM;AACjBA,QAAEC,eAAc;AAChBD,QAAEE,YAAYC,yBAAwB;AACtCC,aAAOC,KAAKjB,KAAK,UAAU,qBAAqB;IAClD;EAAE,GAEFE,eAAAA,QAAAC,cAACe,OAAK;IACJvB,WAAU;IACVE;IACAC;KAECC,QACI,CACN;AAEP;AAEAN,UAAU0B,YAAY;EACpBxB,WAAWyB,oBAAAA,QAAUC,UAAU,CAC7BD,oBAAAA,QAAUE,QACVF,oBAAAA,QAAUG,QAAQH,oBAAAA,QAAUE,MAAM,CAAC,CACpC;EACD1B,KAAKwB,oBAAAA,QAAUE,OAAOE;EACtB3B,MAAMuB,oBAAAA,QAAUE;EAChBxB,OAAOsB,oBAAAA,QAAUE;EACjBvB,UAAUqB,oBAAAA,QAAUC,UAAU,CAC5BD,oBAAAA,QAAUE,QACVF,oBAAAA,QAAUK,SACVL,oBAAAA,QAAUG,QAAQH,oBAAAA,QAAUE,MAAM,GAClCF,oBAAAA,QAAUG,QAAQH,oBAAAA,QAAUK,OAAO,CAAC,CACrC,EAAED;AACL;AAEA/B,UAAUiC,eAAe;EACvB/B,WAAW;EACXE,MAAM;EACNC,OAAO;AACT;;;SC/DgB6B,aACdC,WACAC,kBACAC,OAAa;AAEb,SAAO,UAAA,OAAUF,WAAS,GAAA,EAAAG,OAAIF,kBAAoB,GAAA,EAAAE,OAAAD,KAAK;AACzD;ACQwB,SAAAE,aAAaC,IAEjB;AADlB,MAAAC,SAAMD,GAAAC;AAEN,MAAMC,eAAeC,kBAAiB;AAEtC,MAAMC,UAAUF,iBAAY,QAAZA,iBAAA,SAAA,SAAAA,aAAcE;AAC9B,MAAMC,SAASH,iBAAY,QAAZA,iBAAA,SAAA,SAAAA,aAAcG;AACrB,MAAAC,YAAyBF,QAAOE,WAArBX,YAAcS,QAAOT;AAExC,SACEY,eAAAA,QAAAC,cAAAD,eAAAA,QAAAE,UAAA,MACGR,WAAA,QAAAA,WAAA,SAAA,SAAAA,OAAQS,IAAI,SAACC,OAAOC,KAAG;AACtB,QAAMC,MAAMnB,aAAaC,WAAWW,WAAWM,GAAG;AAClD,WAAOE,EAAMH,MAAMI,IAAI,EACpBC,KAAKC,YAAYC,SAAS,WAAM;AAAA,aAC/BX,eAAAA,QAAAC,cAAA,QAAA;QAAMW,WAAU;QAAgBN;MAAS,GACvCN,eAAAA,QAAAC,cAACY,cAAY;QACXC,iBAAiBC;QACjBC,iBAAiBZ,MAAMa;QACvBC,uBAAuBd,MAAMe;QAC7BrB;MAAe,CAEnB,CAAM;KACP,EACAW,KAAKC,YAAYU,KAAK,WAAM;AAAA,aAC3BpB,eAAAA,QAAAC,cAAA,QAAA;QAAMW,WAAU;QAAgBN;MAAS,GACvCN,eAAAA,QAAAC,cAACoB,WAAS;QACRT,WAAU;QACVU,KAAKlB,MAAMe;QACXX,MAAMe,gBAAgBC;MAAO,GAE5BpB,MAAMe,KACE,CACP;IATqB,CAU5B,EACAM,UAAU,WAAA;AAAM,aAAAzB,eAAAA,QAAAC,cAACD,eAAAA,QAAME,UAAQ;QAACI;MAAS,GAAEoB,2BAA2BtB,MAAMe,KAAK,CAAkB;IAAnF,CAAoF;EACzG,CAAC,CACH;AAEJ;;;;;ACpCwB,SAAAQ,oBAAoBC,IAOpC;;AANN,MAAAC,KAAAD,GAAAE,WAAAA,YAAYD,OAAA,SAAA,KAAE,IACdE,UAAOH,GAAAG,SACPC,KAAAA,GAAAA,QAAAC,SAASD,OAAA,SAAA,QAAK,IACdE,KAAAN,GAAAO,YAAAA,aAAU,OAAA,SAAG,QAAKD,IAClBE,KAAAR,GAAAS,kBAAAA,mBAAgBD,OAAA,SAAG,QAAKA,IACxBE,KAAyBV,GAAAW,mBAAzBA,oBAAiBD,OAAA,SAAG,QAAKA;AAEjB,MAAAE,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,MAAMC,qBAAqBN,sBACtBO,KAAAb,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASc,8BAAwB,QAAAD,OAAA,SAAA,SAAAA,GAAEE,UAAS,OAC5CC,KAAAhB,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASiB,oBAAgB,QAAAD,OAAA,SAAA,SAAAA,GAAAD,UAAS;AACvC,MAAMG,aAASC,wBAAQ,WAAA;AACrB,QAAIP,oBAAoB;AACtB,aAAOQ,gBAAgB;QACrBH,gBAAgBjB,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASiB;QACzBI,aAAarB,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASc;MACvB,CAAA;IACF;AACD,WAAOM,gBAAgB;MACrBC,aAAarB,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASA;IACvB,CAAA;EACH,GAAG,CAACA,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASsB,SAAS,CAAC;AACvB,SACEC,eAAAA,QAAAC,cAACC,OAAK;IACJC,MAAMC,gBAAgBC;IACtBC,OAAO3B,SAAS4B,YAAYC,cAAcD,YAAYE;KAEtDT,eAAAA,QAAAC,cAAA,OAAA;IAAKzB,WAAWkC,aAAa,CAC3BlC,WACAmC,6BACAhC,SAAS,aAAa,YACtBE,aAAa,gBAAgB,IAC5BI,uBAAqB2B,KAAAnC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASoC,eAAS,QAAA,OAAA,SAAA,SAAA,GAAErB,UAAS,IAAK,cAAc,EAAE,CACzE;EAAE,GACDQ,eAAAA,QAAAC,cAACa,cAAY;IAACnB;GACd,GACEoB,gBAAgBtC,OAAO,KACrBuB,eAAAA,QAAAC,cAACC,OAAK;IACJ1B,WAAU;IACV2B,MAAMC,gBAAgBC;IACtBC,OAAO3B,SAAS4B,YAAYS,cAAcT,YAAYU;EAAe,GAEpE,IAAIC,OAAAhC,UAAUiC,gBAAc,GAAA,CACxB,CAGR,CACA;AAEX;;;;;AClDwB,SAAAC,oBAAoBC,IAOpC;;AANN,MAAAC,YAASD,GAAAC,WACTC,UAAOF,GAAAE,SACPC,KAAAH,GAAAI,QAAAA,SAASD,OAAA,SAAA,QAAKA,IACdE,KAAAA,GAAAA,YAAAC,aAAaD,OAAA,SAAA,QAAKA,IAClBE,KAAyBP,GAAAQ,mBAAzBA,oBAAoBD,OAAA,SAAA,QAAKA,IACzBE,KAAoBT,GAAAU,eAApBA,gBAAaD,OAAA,SAAG,OAAIA;AAEZ,MAAAE,WAAaC,qBAAoB,EAAE;AAC3C,MAAMC,iBAAiBH,kBAAkBC,WAAW,KAAK;AACzD,SACEG,eAAAA,QAAAC,cAAA,OAAA;IAAKd,WAAWe,aAAa,CAC3Bf,WACA,mCACAG,SAAS,aAAa,YACtBE,aAAa,gBAAgB,IAC5BE,uBAAqBS,KAAAf,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASgB,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEC,UAAS,IAAK,cAAc,EAAE,CACzE;KACCL,eAAAA,QAAAC,cAAA,OAAA;IAAKd,WAAU;EAA4C,GACzDa,eAAAA,QAAAC,cAACK,MAAI;IACHnB,WAAU;IACVoB,MAAM;MACJC,OAAOC,UAAUC;MACjBC,OAAOF,UAAUG;MACjBC,OAAOJ,UAAUK;MACjBC,KAAKN,UAAUM;MACfC,QAAQP,UAAUQ;IACnB,EAACC,iBAAiB9B,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASmB,IAAI,CAAC;IACjCY,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEjB,CAAK,GACLvB,eAAAA,QAAAC,cAACuB,YAAU;IACTrC,WAAU;IACVsC,SAAS,WAAA;AAAQC,aAAOC,KAAKvC,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASwC,GAAG;;IACzCC,OAAOvC,SAASwC,OAAOC,cAAcD,OAAOE;EAAe,GAE3DhC,eAAAA,QAAAC,cAACgC,OAAK;IACJ9C,WAAU;IACVoB,MAAM2B,gBAAgBC;IACtBN,OAAOvC,SAAS8C,YAAYL,cAAcK,YAAYJ;EAAe,GAEpEK,gBAAejD,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASkD,UAAQlD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASwC,MAAK7B,cAAc,CACxD,CACG,CACT;AAET;;;;;;AC/DM,SAAUwC,wBAAwBC,SAAwB;AAC9D,SAAOC,EAAMD,OAAO,EACjBE,KAAKC,eAAe,WAAA;;AACnB,YAAOC,KAACJ,YAAuB,QAAvBA,YAAO,SAAA,SAAPA,QAAyBK,UAAQ,QAAAD,OAAA,SAAAA,KAAA;EAC3C,CAAC,EACAF,KAAKI,wBAAwB,WAAA;;AAC5B,YAAOC,MAAAH,KAAAI,iBAAiBR,OAA+B,OAAG,QAAAI,OAAA,SAAA,SAAAA,GAAAK,cAAY,QAAAF,OAAA,SAAAA,KAAA;EACxE,CAAC,EACAG,UAAU,WAAA;AACT,WAAO;EACT,CAAC;AACL;AAEA,SAASF,iBAAiBR,SAA6B;AACrD,MAAMW,eAAmCX,QAAQW;AACjD,SAAOA,aAAaC,SAAS,IAAID,aAAa,CAAC,IAAI;AACrD;AAEM,SAAUE,wBAAwBb,SAAwB;AAC9D,SAAOC,EAAMD,OAAO,EACjBE,KAAKC,eAAe,WAAA;;AACnB,YAAOC,KAACJ,YAAuB,QAAvBA,YAAO,SAAA,SAAPA,QAAyBc,UAAQ,QAAAV,OAAA,SAAAA,KAAA;EAC3C,CAAC,EACAF,KAAKI,wBAAwB,WAAA;;AAC5B,YAAOC,MAAAH,KAAAI,iBAAiBR,OAA+B,OAAG,QAAAI,OAAA,SAAA,SAAAA,GAAAW,cAAY,QAAAR,OAAA,SAAAA,KAAA;EACxE,CAAC,EACAG,UAAU,WAAA;AACT,WAAO;EACT,CAAC;AACL;AAEM,SAAUM,uBAAuBhB,SAAwB;AAC7D,SAAOC,EAAMD,OAAO,EACjBE,KAAKC,eAAe,WAAA;;AACnB,YAAOC,KAACJ,YAAuB,QAAvBA,YAAO,SAAA,SAAPA,QAAyBiB,SAAO,QAAAb,OAAA,SAAAA,KAAA;EAC1C,CAAC,EACAF,KAAKI,wBAAwB,WAAA;;AAC5B,YAAOC,MAAAH,KAAAI,iBAAiBR,OAA+B,OAAG,QAAAI,OAAA,SAAA,SAAAA,GAAAa,SAAO,QAAAV,OAAA,SAAAA,KAAA;EACnE,CAAC,EACAG,UAAU,WAAA;AACT,WAAO;EACT,CAAC;AACL;AAEM,SAAUQ,8BAA8BlB,SAAwB;AACpE,SAAOC,EAAMD,OAAO,EACjBE,KAAKC,eAAe,WAAA;AACnB,WAAQH,QAAwBmB;EAClC,CAAC,EACAjB,KAAKI,wBAAwB,WAAA;;AAC5B,YAAOC,MAAAH,KAAAI,iBAAiBR,OAA+B,OAAG,QAAAI,OAAA,SAAA,SAAAA,GAAAe,gBAAc,QAAAZ,OAAA,SAAAA,KAAA,CAAA;EAC1E,CAAC,EACAG,UAAU,WAAA;AACT,WAAO,CAAA;EACT,CAAC;AACL;AAEM,SAAUU,gCAAgCpB,SAAwB;AACtE,MAAMmB,aAA0BD,8BAA8BlB,OAAO;AACrE,SAAQmB,cAAcA,WAAWP,SAAS,IAAKO,WAAW,CAAC,EAAEF,MAAM;AACrE;;;;AC3CwB,SAAAI,yBAAyBC,IAQzC;;AAPN,MAAAC,KAAAD,GAAAE,WAAAA,YAASD,OAAA,SAAG,KAAEA,IACdE,UAAOH,GAAAG,SACPC,KAAAA,GAAAA,QAAAC,SAAM,OAAA,SAAG,QAAKD,IACdE,KAAkBN,GAAAO,YAAlBA,aAAaD,OAAA,SAAA,QAAKA,IAClBE,KAAAA,GAAAA,mBAAAC,oBAAiB,OAAA,SAAG,QAAKD,IACzBE,KAAqBV,GAAAW,gBAArBA,iBAAiBD,OAAA,SAAAE,OAAI,IACrBC,KAAAb,GAAAc,OAAAA,QAAKD,OAAA,SAAG,CAAA,IAAEA;AAEV,MAAME,eAAuBC,gCAAgCb,OAAO;AAC9D,MAAAc,SAAoCC,yBAAS,KAAK,GAAjDC,gBAAaF,GAAA,CAAA,GAAEG,mBAAgBH,GAAA,CAAA;AAEtC,MAAMI,iBAAiBC,aAAa;IAClCC,aAAaX;IACbY,SAAS,WAAA;AACP,UAAIC,cAActB,OAAO,GAAG;AAC1BQ,2BAAc,QAAdA,mBAAc,SAAA,SAAdA,eAAiB,IAAI;MACtB;IACH;EACD,CAAA;AAED,SACEe,eAAAA,QAAAC,cAAA,OAAAC,SAAA;IACE1B,WAAW2B,aAAa,CACtB3B,WACA,wCACAG,SAAS,aAAa,YACtBE,aAAa,gBAAgB,IAC5BE,uBAAsBqB,MAAA,KAAA3B,QAAQ4B,eAAS,QAAAC,OAAA,SAAA,SAAAA,GAAEC,YAAM,QAAAH,OAAA,SAAAA,KAAI,KAAK,IAAK,cAAc,EAAE,CAC/E;EAAE,GACCT,cAAc,GAElBK,eAAAA,QAAAC,cAACO,eAAa;IACZhC,WAAU;IACViC,KAAKpB,gBAAgBqB,uBAAuBjC,OAAO;IACnDkC,KAAKC,wBAAwBnC,OAAO;IACpCoC,QAAOzB,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOyB,UAAS;IACvBC,SAAQ1B,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAO0B,WAAU;IACzBC,QAAQ,WAAA;AAAQrB,uBAAiB,IAAI;;IACrCsB,aAAa,SAACC,QAA2B;AAAK,aAC5CjB,eAAAA,QAAAC,cAAA,OAAA;QACEzB,WAAU;QACVY,OAAO6B;MAAO,CAAA;IAH4B;EAK5C,CAEJ,GACGC,eAAezC,OAAO,KAAK,CAACY,gBAAiB,CAACI,iBAC7CO,eAAAA,QAAAC,cAAA,SAAA;IAAOzB,WAAU;KACfwB,eAAAA,QAAAC,cAAA,UAAA;IAAQkB,KAAKT,uBAAuBjC,OAAO;IAAG2C,MAAMR,wBAAwBnC,OAAO;EAAE,CACvF,CAAO,GAGXuB,eAAAA,QAAAC,cAAA,OAAA;IAAKzB,WAAU;EAAmD,CAClE,IACG0C,eAAezC,OAAO,KAAK4C,aAAa5C,OAAO,MAC9CuB,eAAAA,QAAAC,cAAA,OAAA;IAAKzB,WAAU;KACbwB,eAAAA,QAAAC,cAAA,OAAA;IAAKzB,WAAU;EAA0D,GACvEwB,eAAAA,QAAAC,cAACqB,MAAI;IACHF,MAAMF,eAAezC,OAAO,IAAI8C,UAAUC,OAAOD,UAAUE;IAC3DC,WAAWC,WAAWC;IACtBf,OAAM;IACNC,QAAO;GAEX,CAAK,CACF,CAGN;AAET;;;;;;AChEwB,SAAAe,kBAAkBC,IAQlC;;AAPN,MAAAC,YAAS,GAAA,WACTC,UAAOF,GAAAE,SACPC,KAAAA,GAAAA,QAAAC,SAASD,OAAA,SAAA,QAAK,IACdE,KAAAL,GAAAM,YAAAA,aAAUD,OAAA,SAAG,QAAKA,IAClBE,KAAwBP,GAAAQ,kBAAxBA,mBAAmBD,OAAA,SAAA,QAAK,IACxBE,KAAAT,GAAAU,mBAAAA,oBAAiBD,OAAA,SAAG,QAAKA,IACzBE,KAA4CX,GAAAY,uBAA5CA,wBAAwBD,OAAA,SAAA,WAAA;EAAA,IAAoBA;AAE5C,MAAME,eAAWC,uBAAuB,IAAI;AACpC,MAAAC,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,MAAMC,YAAY,WAAA;;AAChB,SAAIlB,MAAAE,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASiB,gBAAU,QAAAnB,QAAA,SAAA,SAAAA,IAAEoB;AAAKC,aAAOC,MAAKC,MAAArB,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASiB,gBAAY,QAAAI,QAAA,SAAA,SAAAA,IAAAH,GAAG;;AAEpE,MAAMI,qBAAqBhB,sBAAoBe,KAAArB,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASuB,8BAA0B,QAAAF,OAAA,SAAA,SAAAA,GAAAG,UAAS,OAAKC,KAAAzB,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS0B,oBAAc,QAAAD,OAAA,SAAA,SAAAA,GAAED,UAAS;AAClI,MAAMG,aAASC,wBAAQ,WAAA;AACrB,QAAIN,oBAAoB;AACtB,aAAOO,gBAAgB;QACrBH,gBAAgB1B,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS0B;QACzBI,aAAa9B,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASuB;MACvB,CAAA;IACF;AACD,WAAOM,gBAAgB;MACrBC,aAAa9B,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASA;IACvB,CAAA;EACH,GAAG,CAACA,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS+B,SAAS,CAAC;AACvB,SACEC,eAAAA,QAAAC,cAAA,OAAA;IAAKlC,WAAWmC,aAAa,CAC3BnC,WACA,iCACAG,SAAS,aAAa,YACtBE,aAAa,gBAAgB,IAC5BI,uBAAqB2B,KAAAnC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASoC,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEZ,UAAS,IAAK,cAAc,EAAE,CACzE;EAAE,GACDQ,eAAAA,QAAAC,cAACI,OAAK;IACJC,MAAMC,gBAAgBC;IACtBC,OAAOvC,SAASwC,YAAYC,cAAcD,YAAYE;KAEtDZ,eAAAA,QAAAC,cAAA,OAAA;IAAKlC,WAAW8C;EAA0B,GACxCb,eAAAA,QAAAC,cAACa,cAAY;IAACnB;GACd,GACEoB,gBAAgB/C,OAAO,KACrBgC,eAAAA,QAAAC,cAACI,OAAK;IACJtC,WAAU;IACVuC,MAAMC,gBAAgBC;IACtBC,OAAOvC,SAASwC,YAAYM,cAAcN,YAAYO;EAAe,GAEpE,IAAIC,OAAArC,UAAUsC,gBAAc,GAAA,CACxB,CAGR,CACA,GACPnB,eAAAA,QAAAC,cAAA,OAAA;IACEmB,KAAKzC;IACLZ,WAAW,0DAAAmD,SACPG,MAAAC,KAAAtD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASiB,gBAAU,QAAAqC,OAAA,SAAA,SAAAA,GAAEC,kBAAc,QAAAF,OAAA,SAAA,SAAAA,GAAAnC,OAAM,KAAK,sDAAoD,YAAA;IAEtGsC,SAASxC;EAAU,GAEnBgB,eAAAA,QAAAC,cAACwB,eAAa;IACZC,QAAQhD;IACRiD,SAAS,WAAA;;AACP,UAAI;AACF,SAAAtC,OAAAvB,MAAAa,aAAA,QAAAA,aAAQ,SAAA,SAARA,SAAUiD,aAAO,QAAA9D,QAAA,SAAA,SAAAA,IAAE+D,eAAW,QAAAxC,QAAA,SAAA,SAAAA,IAAAyC,IAAI,oDAAoD;eAC/EC,OAAO;MACd;;IAGJhE,WAAU;IACVmB,OAAK8C,MAAAC,KAAAjE,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASiB,gBAAY,QAAAgD,OAAA,SAAA,SAAAA,GAAAV,kBAAY,QAAA,OAAA,SAAA,SAAA,GAAErC,QAAO;IAC/CgD,MAAK,MAAAC,KAAAnE,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASiB,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAEsC,kBAAY,QAAAa,OAAA,SAAA,SAAAA,GAAEF;IAExCG,kBACErC,eAAAA,QAAAC,cAAA,OAAA;MAAKlC,WAAU;IAA2D,GACxEiC,eAAAA,QAAAC,cAACqC,MAAI;MACHvE,WAAU;MACVuC,MAAMiC,UAAUC;MAChBC,OAAM;MACNC,QAAO;IAAM,CAEjB,CAAK;EACL,CAEN,CAAK,GACL1C,eAAAA,QAAAC,cAAA,OAAA;IACElC,WAAU;IACVyD,SAASxC;EAAU,KAElB2D,KAAA3E,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASiB,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAE2D,UACpB5C,eAAAA,QAAAC,cAACI,OAAK;IACJtC,WAAU;IACVuC,MAAMC,gBAAgBsC;IACtBpC,OAAOC,YAAYE;KAElB5C,QAAQiB,WAAW2D,KACf,KAERE,KAAA9E,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASiB,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAE8D,gBACpB/C,eAAAA,QAAAC,cAACI,OAAK;IACJtC,WAAU;IACVuC,MAAMC,gBAAgByC;IACtBvC,OAAOC,YAAYE;KAElB5C,QAAQiB,WAAW8D,WACf,KAERE,KAAAjF,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASiB,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAEC,QACpBc,eAAAA,QAAAC,cAACI,OAAK;IACJtC,WAAU;IACVuC,MAAMC,gBAAgB2C;IACtBzC,OAAOC,YAAYO;KAElBjD,QAAQiB,WAAWC,GACf,CAEN,GACLc,eAAAA,QAAAC,cAAA,OAAA;IAAKlC,WAAU;EAAsC,CACvD,CAAK;AAET;;;;;ACpIwB,SAAAoF,uBAAuBC,IAMvC;;MALNC,YAASD,GAAAC,WACTC,UAAOF,GAAAE,SACPC,KAAAA,GAAAA,QAAAC,SAASD,OAAA,SAAA,QAAKA,IACdE,KAAAA,GAAAA,YAAAC,aAAaD,OAAA,SAAA,QAAKA,IAClBE,KAAAA,GAAAA,mBAAAC,oBAAoBD,OAAA,SAAA,QAAKA;AAEjB,MAAAE,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,SACEC,eAAAA,QAAAC,cAAA,OAAA;IAAKZ,WAAWa,aAAa,CAC3Bb,WACA,sCACAG,SAAS,aAAa,YACtBE,aAAa,gBAAgB,IAC5BE,uBAAqBO,KAAAb,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASc,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEC,UAAS,IAAK,cAAc,EAAE,CACzE;EAAE,GACDL,eAAAA,QAAAC,cAACK,OAAK;IACJjB,WAAU;IACVkB,MAAMC,gBAAgBC;IACtBC,OAAOlB,SAASmB,YAAYC,cAAcD,YAAYE;KAErDhB,UAAUiB,6BACN,GACPd,eAAAA,QAAAC,cAACK,OAAK;IACJjB,WAAU;IACVkB,MAAMC,gBAAgBC;IACtBC,OAAOlB,SAASmB,YAAYI,cAAcJ,YAAYK;EAAe,GAEpEnB,UAAUoB,4BACN,CACJ;AAET;;;;;ACbwB,SAAAC,aAAaC,IAO7B;;;AANN,MAAAC,UAAOD,GAAAC,SACPC,KAAWF,GAAAG,QAAXA,SAAMD,OAAA,SAAG,KAAEA,IACXE,KAAAJ,GAAAK,QAAAA,SAAM,OAAA,SAAG,QAAKD,IACdE,KAAAN,GAAAO,WAAAA,YAAYD,OAAA,SAAA,KAAE,IACdE,KAAAR,GAAAS,eAAAA,gBAAgBD,OAAA,SAAA,QAAKA,IACrBE,UAAOV,GAAAU;AAEC,MAAAC,gBAAcC,2BAAWC,mBAAmB,EAAC;AAE7C,MAAAC,gBAAkBb,QAAOa;AACjC,MAAMC,sBAAuBD,kBAAqC,QAArCA,kBAAA,SAAA,SAAAA,cAAuCE;AACpE,MAAMC,8BAA+Bd,YAAWY,wBAAA,QAAAA,wBAAA,SAAA,SAAAA,oBAAqBZ,UAAUQ,UAAUO,+BAA+BH,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqBI;AAC7I,MAAMC,mBAAmBC,uBAAuBP,aAAgC;AAChF,MAAMQ,oBAAoBC,wBAAwBT,aAAgC;AAClF,MAAMU,+BAAgCrB,aAAW,KAAAF,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASe,YAAQ,QAAAS,OAAA,SAAA,SAAAA,GAAAtB,UAAUQ,UAAUO,gCAA+BQ,KAAAzB,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASe,YAAM,QAAAU,OAAA,SAAA,SAAAA,GAAEP;AAEhI,MAAAQ,SAA0CC,yBAAS,KAAK,GAAvDC,oBAAiBF,GAAA,CAAA,GAAEG,qBAAkBH,GAAA,CAAA;AAC5C,MAAMI,iBAAiBC,kBAAiB;AACxC,MAAMC,iBAAgBC,MAAAC,KAAAC,wBAAwBtB,aAAgC,OAAG,QAAAqB,OAAA,SAAA,SAAAA,GAAAE,MAAM,GAAG,OAAC,QAAA,OAAA,SAAA,KAAIjB,iBAAiBiB,MAAM,GAAG;AAEzH,SACEC,eAAAA,QAAAC,cAAA,OAAA;IACEhC,WAAWiC,aAAa,CAACjC,WAAW,0BAA0BF,SAAS,aAAa,YAAYI,gBAAgB,gBAAgB,EAAE,CAAC;IACnIgC,KAAK3B,kBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAe4B;IACpBhC,SAAS,WAAA;AACP,UAAI,CAACD,iBAAiBC,SAAS;AAC7BA,gBAAO;MACR;;IAEHiC,YAAY,WAAA;AACV,UAAI,CAAClC,iBAAiBC,SAAS;AAC7BA,gBAAO;MACR;IACH;KAEA4B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAoC,GACjD+B,eAAAA,QAAAC,cAACK,MAAI;IACHrC,WAAU;IACVsC,MAAMC,UAAUC;IAChBC,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAAd,eAAAA,QAAAC,cAACc,OAAK;IACJ9C,WAAU;IACVsC,MAAMS,gBAAgBC;IACtBC,OAAOC,YAAYC;KAEnBpB,eAAAA,QAAAC,cAAA,QAAA;IAAMhC,WAAU;EAAoD,GAAEiB,4BAAmC,GACzGc,eAAAA,QAAAC,cAAA,QAAA;IAAMhC,WAAU;EAAgD,GAAEI,UAAUgD,0BAAiC,GAC7GrB,eAAAA,QAAAC,cAAA,QAAA;IAAMhC,WAAU;EAAoD,GAAEU,2BAAkC,CACnG,CACJ,GACLqB,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAyC,GACrDE,iBACC6B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAuD,GACpE+B,eAAAA,QAAAC,cAACc,OAAK;IACJ9C,WAAU;IACVsC,MAAMS,gBAAgBM;IACtBJ,OAAOC,YAAYI;KAElBlD,UAAUmD,2BACN,CACJ,GAGJC,cAAcjD,aAA4B,OAAKkD,KAAClD,kBAA6B,QAA7BA,kBAAa,SAAA,SAAbA,cAA+Bb,aAAS,QAAA+D,OAAA,SAAA,SAAAA,GAAAC,UAAS,KAAM,CAACxD,iBACzG6B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAuD,GACpE+B,eAAAA,QAAAC,cAACc,OAAK;IACJ9C,WAAU;IACVsC,MAAMS,gBAAgBM;IACtBJ,OAAOC,YAAYI;EAAe,GAEhC/C,kBAAA,QAAAA,kBAAa,SAAA,SAAbA,cAA+Bb,OAC5B,CACJ,GAGLiE,eAAepD,aAA4B,KAAKM,oBAAoB,CAACX,iBACrE6B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAuD,GACpE+B,eAAAA,QAAAC,cAACc,OAAK;IACJ9C,WAAU;IACVsC,MAAMS,gBAAgBM;IACtBJ,OAAOC,YAAYI;KAElBlD,UAAUwD,aACN,CACJ,IAKHC,mBAAmBtD,aAA4B,KAC5CuD,uBAAuBvD,aAAgC,MAEzDM,oBACA,CAACX,iBAEJ6B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAA4D,GACzE+B,eAAAA,QAAAC,cAAC+B,eAAa;IACZ/D,WAAU;IACVgE,KAAKnD;IACLoD,KAAKlD;IACL6B,OAAM;IACNC,QAAO;IACPqB,QAAQ,WAAA;AAAM,aAAA3C,mBAAmB,IAAI;;IACrC4C,kBACEpC,eAAAA,QAAAC,cAAA,OAAA;MAAKhC,WAAU;OACb+B,eAAAA,QAAAC,cAAA,OAAA;MAAKhC,WAAU;IAA+E,GAC5F+B,eAAAA,QAAAC,cAACK,MAAI;MACHC,MAAM8B,QAAQrD,iBAAiB,IAAIwB,UAAU8B,OAAO9B,UAAU+B;MAC9D7B,WAAWC,WAAW6B;MACtB3B,OAAM;MACNC,QAAO;IAAM,CAEjB,CAAK,CACF;GAGT,GAAEuB,QAAQrD,iBAAiB,KAAK,IAAEyD,KAACjE,kBAA6B,QAA7BA,kBAAA,SAAA,SAAAA,cAA+BkE,gBAAY,QAAAD,OAAA,SAAA,SAAAA,GAAAd,UAAS,MACrF3B,eAAAA,QAAAC,cAAAD,eAAAA,QAAA2C,UAAA,MACE3C,eAAAA,QAAAC,cAAA,SAAA;IAAOhC,WAAU;KACf+B,eAAAA,QAAAC,cAAA,UAAA;IAAQ2C,KAAK9D;IAAkByB,MAAMvB;EAAkB,CACzD,CAAO,GACPgB,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;KACb+B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAyE,GACtF+B,eAAAA,QAAAC,cAACK,MAAI;IACHC,MAAMC,UAAU8B;IAChB5B,WAAWC,WAAW6B;IACtB3B,OAAM;IACNC,QAAO;EAAM,CAEjB,CAAK,CACF,CACP,GAEAvB,qBAAqBsD,MAAM7D,iBAAiB,KAC5CgB,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;KACb+B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAyE,GACtF+B,eAAAA,QAAAC,cAACK,MAAI;IACHC,MAAMC,UAAUsC;IAChBpC,WAAWC,WAAWoC;IACtBlC,OAAM;IACNC,QAAO;GAEX,CAAK,CACF,CAEJ,GAGLkC,oBAAoBxE,aAA4B,MAAMyE,kBAAkBC,QAAQpE,oBAAoB,CAACX,iBACrG6B,eAAAA,QAAAC,cAAA,OAAA;IAAKhC,WAAU;EAAuD,GACpE+B,eAAAA,QAAAC,cAACK,MAAI;IACHrC,WAAU;IACVsC,OAAM4C,KAAA,CAAA,GACJA,GAAC1D,eAAe2D,KAAK,IAAG5C,UAAU+B,OAClCY,GAAC1D,eAAe4D,KAAK,IAAG7C,UAAU8B,MAClCa,GAAC1D,eAAe6D,KAAK,IAAG9C,UAAU+C,YAClCJ,GAAC1D,eAAeqD,GAAG,IAAGtC,UAAUsC,KAChCK,GAAC1D,eAAe+D,MAAM,IAAGhD,UAAUiD,eAAa,IAChDC,iBAAiB1E,iBAAiB,CAAC;IACrC0B,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAAd,eAAAA,QAAAC,cAACc,OAAK;IACJ9C,WAAU;IACVsC,MAAMS,gBAAgBM;IACtBJ,OAAOC,YAAYC;EAAe,GAEjCuC,eAAehE,cAAcA,cAAcgC,SAAS,CAAC,CAAC,CAClD,CACJ,CAEJ,CACF;AAET;;;;ACjMA,IAAMiC,oBAA4D,SAACC,OAAoB;;AAEnF,MAAAC,WAcED,MAAKC,UAbPC,UAaEF,MAAKE,SAZPC,UAYEH,MAAKG,SAXPC,YAWEJ,MAAKI,WAVPC,SAUEL,MAAK,QATPM,gBASEN,MAAK,eARPO,WAQEP,MAAK,UAPPQ,aAOER,MAPQQ,YACVC,kBAMET,MANaS,iBACfC,gBAKEV,MALWU,eACbC,kBAIEX,MAJaW,iBACfC,YAGEZ,MAHOY,WACTC,kBAEEb,MAFaa,iBACfC,KACEd,MAAK,oBADPe,qBAAqBD,OAAA,SAAA,QAAK;AAE5B,MAAME,WAASC,KAAAd,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASe,YAAM,QAAAD,OAAA,SAAA,SAAAA,GAAEZ,YAAWA;AACnC,MAAAc,YAAcC,gBAAe,EAAE;AACvC,MAAMC,mBAA4BC,cAAcnB,OAAsB;AACtE,MAAMoB,mBAA6BD,cAAcnB,OAAsB,KAAKqB,cAAcrB,OAAO,KAAKa;AACtG,MAAMS,qBAA+BC,gBAAgBvB,OAAO,MAAKA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASwB,iBAAgBX;AAE1F,MAAMY,qBAA8B,CAACC,iBAAiB1B,OAAO,KAAKa;AAClE,MAAMc,4BAA4Bd,WAAWP,oBAAoBsB,UAAatB,oBAAoB;AAClG,MAAMuB,0BAA0BF,6BAA6BF;AAE7D,MAAMK,gBACHxB,oBAAoBsB,UAAatB,oBAAoB,eAClD,MAAAyB,KAAA/B,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASgC,gBAAU,QAAAD,OAAA,SAAA,SAAAA,GAAEE,gBAAc,QAAAC,OAAA,SAAAA,KAAA,KAAK;AAG9C,MAAMC,uBAAgC,CAACT,iBAAiB1B,OAAO,KAAKoC,cAAcpC,OAAO,KACpF,EAAEqC,eAAerC,OAAO,OAAOD,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAA0BuC,aAAYvC,YAAwB,QAAxBA,YAAO,SAAA,SAAPA,QAA0BwC;AACpG,MAAMC,oBAA8BvC,cAAc,iBAC7C,CAACsB,gBAAgBvB,OAAO,KACxB,CAAC0B,iBAAiB1B,OAAO,MACzBD,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS0C,eAAc;AAC5B,MAAMC,qBAA+BzC,cAAc,YAAa,CAACW,sBAC5D,CAACW,gBAAgBvB,OAAO,KACxB,CAAC0B,iBAAiB1B,OAAO,KACzB,CAAC2C,gBAAgB3C,OAAO,MACxBD,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS0C,eAAc;AAE5B,MAAMG,cAAc5C;AACpB,SACE6C,eAAAA,QAAAC,cAACC,aAAW;IACVC,QAAM;IACNC,WAAW,WAAA;;AAAM,aACfJ,eAAAA,QAAAC,cAACI,WAAS;QACRC,WAAU;QACV1C;QACA2C,kBAAkB3C;QAClB4C,eAAevD;MAAS,GAEvBoB,oBACC2B,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;AACR0D,0BAAiBxD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAyBA,OAAO;;QAEnDyD,UAAS;MAAkC,GAE3CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOC,YAAYC;SAElBhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWiD,kBACP,GACPpB,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUC;QAChBC,WAAWC,WAAWC;QACtBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEXjC,qBACCK,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;AACRU,0BAAgBR,OAAO;;QAEzB0E,WAAU5D,MAAAd,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS2E,qBAAe,QAAA7D,QAAA,SAAAA,MAAI,KAAK;QAC3C2C,UAAS;MAAmC,GAE5CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,SACG/B,MAAA/B,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS2E,qBAAmB,QAAA5C,QAAA,SAAAA,MAAA,KAAK,IAC9BgC,YAAYa,iBACZb,YAAYC;SAGjBhD,UAAU6D,mBACN,GACPhC,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUW;QAChBT,aACGnC,MAAAlC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS2E,qBAAmB,QAAAzC,QAAA,SAAAA,MAAA,KAAK,IAC9BoC,WAAWS,kBACXT,WAAWC;QAEjBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEX/B,sBACCG,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;AACRY,8BAAe,QAAfA,oBAAe,SAAA,SAAfA,gBAAkB;YAAEV;UAAS,CAAA;;QAE/ByD,UAAS;MAAoC,GAE7CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOC,YAAYC;SAElBhD,UAAUgE,oBACN,GACPnC,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUc;QAChBZ,WAAWC,WAAWC;QACtBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEXrD,oBACCyB,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;AACRM,mBAAS,IAAI;;QAEfqD,UAAS;MAAkC,GAE3CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOC,YAAYC;SAElBhD,UAAUkE,kBACN,GACPrC,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUgB;QAChBd,WAAWC,WAAWC;QACtBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEXnD,sBACCuB,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;AACRK,wBAAcH,OAAO;;QAEvByD,UAAS;MAAoC,GAE7CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOC,YAAYC;SAElBhD,UAAUoE,oBACN,GACPvC,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUkB;QAChBhB,WAAWC,WAAWC;QACtBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEX5C,2BACCgB,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACP,cAAIhC,gBAAgBvB,OAAO,GAAG;AAC5BF,qBAAQ;AACRS,8BAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAgBP,OAAO;UACxB,WAAU,CAAC8B,eAAe;AACzBhC,qBAAQ;AACRO,2BAAU,QAAVA,eAAU,SAAA,SAAVA,WAAa,IAAI;UAClB;;QAEHqE,SAAS5C;QACT2B,UAAS;MAAoC,GAE7CZ,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OACEhC,gBACIiC,YAAYa,iBACZb,YAAYC;SAGjBhD,UAAUsE,oBACN,GACPzC,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUoB;QAChBlB,WACEvC,gBACIwC,WAAWS,kBACXT,WAAWC;QAEjBC,OAAM;QACNC,QAAO;OAEX,CAAU,GAEXtC,wBACCU,eAAAA,QAAAC,cAACQ,UAAQ;QACPH,WAAU;QACVI,SAAS,WAAA;AACPzD,mBAAQ;;QAEV2D,UAAS;SAETZ,eAAAA,QAAAC,cAAA,KAAA;QACEK,WAAU;QACVqC,KAAI;QACJC,MAAM7C,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAa8C;QACnBC,QAAO;MAAQ,GAEf9C,eAAAA,QAAAC,cAACY,OAAK;QACJC,MAAMC,gBAAgBC;QACtBC,OAAOC,YAAYC;SAElBhD,UAAU4E,kBACN,GACP/C,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAU0B;QAChBxB,WAAWC,WAAWC;QACtBC,OAAM;QACNC,QAAO;OAEX,CAAG,CACK,CAEH;;EACX,CAAA;AAGR;ACpPA,IAAMqB,aAAa;AAEnB,IAAMC,oBAAqE,SAAClG,OAA6B;;AAErG,MAAAC,WAgBED,MAhBMC,UACRC,UAeEF,MAfKE,SACPiG,iBAcEnG,MAAK,gBAbPG,UAaEH,MAAKG,SAZPC,YAYEJ,MAAKI,WAXPC,SAWEL,MAXIK,QACNC,gBAUEN,MAVWM,eACbI,gBASEV,MAAK,eARPoG,iBAQEpG,MAAK,gBAPPqG,oBAOErG,MAAKqG,mBANP9F,WAMEP,MAAKO,UALPC,aAKER,MALQQ,YACVC,kBAIET,MAJaS,iBACfE,kBAGEX,MAAK,iBAFPa,kBAEEb,MAAKa,iBADPC,KACEd,MADwBe,oBAA1BA,qBAAqBD,OAAA,SAAA,QAAK;AAE5B,MAAME,WAASC,KAAAd,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASe,YAAM,QAAAD,OAAA,SAAA,SAAAA,GAAEZ,YAAWA;AACnC,MAAAc,YAAcC,gBAAe,EAAE;AACvC,MAAMkF,cAAcC,wBAAuB;AAEzC,MAAAC,WACEF,YAAYG,OAAM;AACtB,MAAMpF,mBAA4BC,cAAcnB,OAAsB;AACtE,MAAMoB,mBAA6BD,cAAcnB,OAAsB,KAAKqB,cAAcrB,OAAO,KAAKa;AACtG,MAAMS,qBAA+B+E,YAAY9E,gBAAgBvB,OAAO,MAAKA,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASwB,iBAAgBX;AAEtG,MAAMY,qBAA8B,CAACC,iBAAiB1B,OAAO,KAAKa;AAClE,MAAMc,4BAA4Bd,WAAWP,oBAAoBsB,UAAatB,oBAAoB;AAClG,MAAMuB,0BAA0BF,6BAA6BF;AAE7D,MAAMK,gBACHxB,oBAAoBsB,UAAatB,oBAAoB,eAClD,MAAAyB,KAAA/B,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASgC,gBAAU,QAAAD,OAAA,SAAA,SAAAA,GAAEE,gBAAc,QAAAC,OAAA,SAAAA,KAAA,KAAK;AAG9C,MAAMC,uBAAgCd,cAAcrB,OAAO,KAAKoC,cAAcpC,OAAO,KAAK,CAACqC,eAAerC,OAAO;AACjH,MAAMuG,eAAwB,CAAChF,gBAAgBvB,OAAO,KAAK,CAAC0B,iBAAiB1B,OAAO,KAAKkG;AACzF,MAAM1D,oBAA8BvC,cAAc,iBAC7C,CAACsB,gBAAgBvB,OAAO,KACxB,CAAC0B,iBAAiB1B,OAAO,MACxBD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS0C,eAAc,MAAM,EAAE1C,YAAwB,QAAxBA,YAAO,SAAA,SAAPA,QAA0BwC;AAC/D,MAAMG,qBAA+BzC,cAAc,YAAa,CAACW,sBAC5D,CAACW,gBAAgBvB,OAAO,KACxB,CAAC0B,iBAAiB1B,OAAO,KACzB,CAAC2C,gBAAgB3C,OAAO,MACvBD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS0C,eAAc,MAAM,EAAE1C,YAAwB,QAAxBA,YAAO,SAAA,SAAPA,QAA0BwC;AAC/D,MAAMiE,mBAAkBxG,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS2E,mBAAkB;AAEnD,MAAM/B,cAAc5C;AACpB,MAAMyG,kBAAkBC,KAAKC,MAAMC,OAAOC,aAAaf,UAAU,IAAI;AAC/D,MAAAgB,SAAsCC,yBAAkB,KAAK,GAA5DC,iBAAcF,GAAA,CAAA,GAAEG,oBAAiBH,GAAA,CAAA;AACxC,MAAMI,SAASC,gBAAgBnB,cAAc;AAE7C,MAAMoB,gBAAgBJ,iBAClBE,SACAA,WAAA,QAAAA,WAAA,SAAA,SAAAA,OAAQG,MAAM,GAAGZ,eAAe;AACpC,MAAMa,oBAAoBJ,OAAOK,SAASd;AAC1C,SACE5D,eAAAA,QAAAC,cAAC0E,aAAW;IAACC,iBAAiB3H;KAC5B+C,eAAAA,QAAAC,cAAA,OAAA;IAAKK,WAAU;EAA+B,GAE1CoD,gBACE1D,eAAAA,QAAAC,cAAA,OAAA;IAAKK,WAAU;KACbN,eAAAA,QAAAC,cAAA,MAAA;IACEK,WAAU;KAEVN,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAW,8FAAA,OAEP6D,iBAAiB,oDAAoD,IAAE,sBAAA;EACzE,GAEDI,cAAcM,IAAI,SAACC,OAAY;;AAC9B,QAAMC,aAAqB1F,OAAAH,OAAAjB,MAAAd,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS6H,eAAS,QAAA/G,QAAA,SAAA,SAAAA,IACzCgH,OAAO,SAACC,UAAgC;AAAA,aAAAA,SAASC,QAAQL,MAAMK;IAAvB,CAA0B,EAAE,CAAC,OAAC,QAAAjG,QAAA,SAAA,SAAAA,IACtEkG,aACA,QAAA/F,QAAA,SAAA,SAAAA,IAAAgG,KAAK,SAACC,WAAiB;AAAc,aAAAA,cAAcjI;IAAd,CAAoB;AAC7D,WACE2C,eAAAA,QAAAC,cAACsF,gBAAc;MACbJ,KAAKL,MAAMK;MACXxD,OAAO,GAAA,OAAGsB,YAAU,IAAA;MACpBrB,QAAQ,GAAG4D,OAAAvC,YAAU,IAAA;MACrBwC,UAAUV;MACVrE,SAAS,WAAA;AACPzD,iBAAQ;AACRmG,uBAAejG,SAAS2H,MAAMK,KAAKJ,SAAS;;MAE9CnE,UAAU,kCAAkC4E,OAAAV,MAAMK,GAAG;IAAG,GAExDnF,eAAAA,QAAAC,cAACyF,eAAa;MACZ7C,MAAKiC,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOjC,QAAO;MACnBlB,OAAM;MACNC,QAAO;MACP+D,aAAa,SAACC,OAA8B;AAAmB,eAC7D5F,eAAAA,QAAAC,cAAA,OAAA;UAAK2F;QAAa,GAChB5F,eAAAA,QAAAC,cAACoB,MAAI;UACHP,MAAMQ,UAAUuE;UAChBrE,WAAWC,WAAWqE;UACtBnE,OAAM;UACNC,QAAO;QAAM,CAEjB,CAAK;MARwD;IAS7D,CAEN,CAAgB;GAEnB,GAEC6C,qBAAqB,CAACN,kBACpBnE,eAAAA,QAAAC,cAACsF,gBAAc;IACbJ,KAAI;IACJxD,OAAM;IACNC,QAAO;IACPlB,SAAS,WAAA;AACP0D,wBAAkB,IAAI;;IAExBxD,UAAS;EAAyC,GAElDZ,eAAAA,QAAAC,cAACyF,eAAa;IACZ7C,KAAK;IACLlB,OAAM;IACNC,QAAO;IACP+D,aAAa,SAACC,OAA8B;AAAyB,aACnE5F,eAAAA,QAAAC,cAAA,OAAA;QAAK2F;MAAa,GAChB5F,eAAAA,QAAAC,cAACoB,MAAI;QACHP,MAAMQ,UAAUyE;QAChBvE,WAAWC,WAAWqE;QACtBnE,OAAM;QACNC,QAAO;MAAM,CAEjB,CAAK;IAR8D;GAWzE,CAAgB,CAGjB,CACH,CACD,GAIP,CAACuC,kBACCnE,eAAAA,QAAAC,cAAA,OAAA;IAAKK,WAAU;EAAwC,GACpDjC,oBACC2B,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACPzD,eAAQ;AACR0D,sBAAiBxD,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAyBA,OAAO;IACnD;EAAE,GAEF6C,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUC;IAChBC,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IAACC,MAAMC,gBAAgBC;IAAYC,OAAOC,YAAYC;KACzDhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWiD,kBACP,CACJ,GAGL7C,oBACEyB,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACPzD,eAAQ;AACRM,eAAS,IAAI;IACf;EAAE,GAEFyC,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUgB;IAChBd,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IAACC,MAAMC,gBAAgBC;IAAYC,OAAOC,YAAYC;KACzDhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWkE,kBACP,CACJ,GAIP5D,sBACEuB,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACPzD,eAAQ;AACRK,oBAAcH,OAAO;IACvB;EAAE,GAEF6C,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUkB;IAChBhB,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IAACC,MAAMC,gBAAgBC;IAAYC,OAAOC,YAAYC;KACzDhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWoE,oBACP,CACJ,GAIP5C,qBACEK,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAW,gEAAA,OACPqD,kBAAkB,mDAAmD,IACxE,wBAAA;IACDqC,MAAK;IACL,iBAAerC,kBAAkB,OAAO;IACxCjD,SAAS,WAAA;AACP,UAAI,CAACiD,iBAAiB;AACpB1G,iBAAQ;AACRU,wBAAgBR,OAAO;MACxB;IACH;EAAE,GAEF6C,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUW;IAChBT,WAAWmC,kBACPlC,WAAWqE,kBACXrE,WAAWC;IAEfC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IACJC,MAAMC,gBAAgBC;IACtBC,OAAO0C,kBAAkBzC,YAAYa,iBAAiBb,YAAYC;KAEjEhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAW6D,mBACP,CACJ,GAGRnC,sBACCG,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACPzD,eAAQ;AACRY,0BAAe,QAAfA,oBAAe,SAAA,SAAfA,gBAAkB;QAAEV;MAAS,CAAA;IAC/B;EAAE,GAEF6C,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUc;IAChBZ,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IAACC,MAAMC,gBAAgBC;IAAYC,OAAOC,YAAYC;KACzDhD,UAAUgE,oBACN,CACJ,GAGLnD,2BACEgB,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACP,UAAIhC,gBAAgBvB,OAAO,GAAG;AAC5BF,iBAAQ;AACRS,0BAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAgBP,OAAO;MACxB,WAAU,CAAC8B,eAAe;AACzBhC,iBAAQ;AACRO,uBAAU,QAAVA,eAAU,SAAA,SAAVA,WAAa,IAAI;MAClB;IACH;EAAE,GAEFwC,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAUoB;IAChBlB,WACEvC,gBACIwC,WAAWS,kBACXT,WAAWC;IAEjBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IACJC,MAAMC,gBAAgBC;IACtBC,OACEhC,gBACIiC,YAAYa,iBACZb,YAAYC;KAGjBhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAWsE,oBACP,CACJ,GAIPnD,wBACEU,eAAAA,QAAAC,cAAA,OAAA;IACEK,WAAU;IACVI,SAAS,WAAA;AACPzD,eAAQ;IACV;KAEA+C,eAAAA,QAAAC,cAAA,KAAA;IACEK,WAAU;IACVqC,KAAI;IACJC,MAAM7C,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAa8C;IACnBC,QAAO;EAAQ,GAEf9C,eAAAA,QAAAC,cAACoB,MAAI;IACHP,MAAMQ,UAAU0B;IAChBxB,WAAWC,WAAWC;IACtBC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAA5B,eAAAA,QAAAC,cAACY,OAAK;IAACC,MAAMC,gBAAgBC;IAAYC,OAAOC,YAAYC;KACzDhD,cAAA,QAAAA,cAAS,SAAA,SAATA,UAAW4E,kBACP,CACN,CACA,CAGN,CAGN,CACM;AAEjB;AC/VA,IAAMkD,aAA+C,SAACjJ,OAA6B;AAE/E,MAAAG,UAmBEH,MAAKG,SAlBPF,WAkBED,MAlBMC,UACRI,SAiBEL,MAAK,QAhBPE,UAgBEF,MAAKE,SAfPe,KAeEjB,MAAKqG,mBAfPA,oBAAiBpF,OAAA,SAAG,QAAKA,IACzBD,SAcEhB,MAdIgB,QACNZ,YAaEJ,MAbOI,WACT8I,WAYElJ,MAAK,UAXPS,kBAWET,MAXaS,iBACfD,aAUER,MAAK,YATPO,WASEP,MAAKO,UARPD,gBAQEN,MARWM,eACbI,gBAOEV,MAAK,eANPW,kBAMEX,MANaW,iBACfwF,iBAKEnG,MAAK,gBAJPoG,iBAIEpG,MAAKoG,gBAHPxF,YAGEZ,MAAK,WAFPa,kBAEEb,MAAKa,iBADPE,qBACEf,MAAKe;AACT,SACEiC,eAAAA,QAAAC,cAAAD,eAAAA,QAAAmG,UAEI9C,MAAAA,oBAEIrD,eAAAA,QAAAC,cAACiD,mBAAiB;IAChBhG;IACAC;IACAF;IACAe;IACAX;IACAD;IACA8I;IACA1I;IACAD;IACAE;IACAH;IACAI;IACAC;IACAwF;IACAC;IACAC;IACAxF;IACAE;EAAuC,CAAA,IAGzCiC,eAAAA,QAAAC,cAAClD,mBAAiB;IAChBG;IACAG;IACAF;IACAF;IACAe;IACAT;IACAH;IACA8I;IACAzI;IACAD;IACAF;IACAI;IACAC;IACAC;IACAC;IACAE;EAAuC,CACvC,CAGV;AAEJ;;;;;AC7DwB,SAAAqI,cAAcC,IAIjB;;AAHnB,MAAAC,YAAS,GAAA,WACTC,aAAUF,GAAAE,YACVC,UAAOH,GAAAG;AAGL,MAAAC,KAEEF,WAFmBG,kBAArBA,mBAAgBD,OAAA,SAAG,CAAA,IAAEA,IACrBE,aACEJ,WAAU;AACN,MAAAK,YAAcC,gBAAe,EAAE;AACvC,SACEC,eAAAA,QAAAC,cAAA,OAAA;IACET,WAAW,8BAAA,OAA8BA,SAAS;IAClDU,MAAK;IACLR,SAAS,SAACS,GAAC;AACTT,cAAQS,CAAC;AACTA,YAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,gBAAe;;IAEpBC,WAAW,SAACF,GAAC;AACXT,cAAQS,CAAC;AACTA,YAAC,QAADA,MAAC,SAAA,SAADA,EAAGC,gBAAe;IACpB;KAEAJ,eAAAA,QAAAC,cAAA,OAAA;IAAKT,WAAU;EAA2C,GACvDI,iBAAiBU,MAAM,GAAG,CAAC,EAAEC,IAAI,SAACC,MAAI;AACrC,WACER,eAAAA,QAAAC,cAACQ,UAAM;MACLC,KAAKC,OAAM;MACXnB,WAAU;MACVoB,KAAKJ,SAAI,QAAJA,SAAI,SAAA,SAAJA,KAAMK;MACXC,KAAI;MACJC,OAAM;MACNC,QAAO;IAAM,CAAA;GAGlB,IACApB,qBAAgB,QAAhBA,qBAAA,SAAA,SAAAA,iBAAkBqB,WAAU,KAC3BjB,eAAAA,QAAAC,cAAA,OAAA;IAAKT,WAAU;EAAmD,GAChEQ,eAAAA,QAAAC,cAACQ,UAAM;IACLjB,WAAU;IACVoB,MAAKM,KAAAtB,qBAAA,QAAAA,qBAAgB,SAAA,SAAhBA,iBAAmB,CAAC,OAAG,QAAAsB,OAAA,SAAA,SAAAA,GAAAL;IAC5BC,KAAI;IACJC,OAAM;IACNC,QAAO;EAAM,CAEf,GAAAhB,eAAAA,QAAAC,cAAA,OAAA;IAAKT,WAAU;EAA0D,CACzE,GAAAQ,eAAAA,QAAAC,cAAA,OAAA;IAAKT,WAAU;EAAyD,GACtEQ,eAAAA,QAAAC,cAACkB,MAAI;IACHC,MAAMC,UAAUC;IAChBC,WAAWC,WAAWC;IACtBV,OAAM;IACNC,QAAO;GAEX,CAAK,CACF,CAEJ,GACLhB,eAAAA,QAAAC,cAACyB,OAAK;IACJlC,WAAU;IACV4B,MAAMO,gBAAgBC;IACtBC,OAAOC,YAAYC;KAGjBlC,eAAe,IACX,GAAGmC,OAAAnC,YAAU,GAAA,EAAA,OAAIC,UAAUmC,qBAAqB,IAChD,GAAA,OAAGpC,aAAa,KAAKC,UAAUoC,2BAA2BrC,YAAU,GAAA,EAAAmC,OAAIlC,UAAUqC,uBAAuB,CAE1G,GACPnC,eAAAA,QAAAC,cAACkB,MAAI;IACH3B,WAAU;IACV4B,MAAMC,UAAUe;IAChBb,WAAWC,WAAWO;IACtBhB,OAAM;IACNC,QAAO;EAAM,CAEjB,CAAK;AAET;;;;;;;ACzFO,IAAMqB,wBAAwB;EACnCC,SAAS;EACTC,MAAM;;IAYKC,cAAc,SAACC,IAMT;AALjB,MAAAC,KAAAD,GAAAE,WAAAA,YAAYD,OAAA,SAAA,KAAEA,IACdE,KAAgBH,GAAAI,UAAhBA,WAAQD,OAAA,SAAG,QAAKA,IAChBE,UAAOL,GAAAK,SACPC,KAAAN,GAAAO,aAAAA,cAAcD,OAAA,SAAA,IAACA,IACfE,KAAyCR,GAAAS,WAAzCA,YAASD,OAAA,SAAGZ,sBAAsBC,UAAOW;AAEzC,MAAME,YAAQC,wBAAQ,WAAA;AACpB,WAAO,GAAA,OAAGJ,cAAcF,UAAU,KAAG,GAAA;EACvC,GAAG,CAACE,aAAaF,OAAO,CAAC;AACzB,SACEO,eAAAA,QAAAC,cAAA,OAAA;IAAKX,WAAW,yBAAyBY,OAAAZ,WAAa,GAAA,EAAAY,OAAAL,WAAS,GAAA,EAAA,OAAIL,WAAW,2BAA2B,EAAE;KACzGQ,eAAAA,QAAAC,cAAA,OAAA;IAAKX,WAAU;IAA8Ba,OAAO;MAAEL;IAAK;EAAG,CAChE,CAAK;AAET;;;;;;AChCO,IAAMM,mBAAmB,SAACC,YAAiBC,KAAQ;AAAzB,MAAAD,eAAA,QAAA;AAAAA,iBAAe;EAAA;AAAE,MAAAC,QAAA,QAAA;AAAAA,UAAQ;EAAA;AAAe,SAAC,GAAGC,OAAAF,YAAc,GAAA,EAAAE,OAAAD,GAAG;AAArB;ICuB5DE,iBAAiB,SAACC,IAKT;;MAJpBC,KAAQD,GAAAH,KAARA,MAAGI,OAAA,SAAG,KAAEA,IACRC,KAAeF,GAAAJ,YAAfA,aAAUM,OAAA,SAAG,KAAEA,IACfC,KAAgBH,GAAAI,WAAhBA,YAASD,OAAA,SAAG,OAAIA,IAChBE,KAAAL,GAAAM,cAAAA,eAAeD,OAAA,SAAA,KAAEA;AAEV,MAAAE,eAAYC,yBAAiBb,iBAAiBC,YAAYC,GAAG,CAAC,EAAC,CAAA;AAChE,MAAAY,KAKFC,sBAAqB,GAJvBC,OAAIF,GAAAE,MACJC,QAAKH,GAAAG,OACLC,OAAIJ,GAAAI,MACJC,mBAAgB,GAAA;AAEV,MAAAC,eAAiBC,wBAAuB,EAAE;AAClD,MAAMC,qBAAmBC,KAAAJ,qBAAgB,QAAhBA,qBAAgB,SAAA,SAAhBA,iBAAkBK,kBAAe,QAAAD,OAAA,SAAA,SAAAA,GAAAX,QAAQ,MAAKa,sBAAqB;AAE5F,MAAMC,kBAAkB,WAAA;AACtB,QAAI,CAACN,cAAc;AACjBJ,eAAA,QAAAA,SAAA,SAAA,SAAAA,KAAO;QACLJ;QACAH;QACAE;MACD,CAAA;IACF;;AAGH,MAAMgB,mBAAmB,WAAA;AACvBV,cAAK,QAALA,UAAK,SAAA,SAALA,MAAQL,QAAQ;;AAGlB,MAAMgB,kBAAkB,SAACC,OAAS;AAAT,QAAAA,UAAA,QAAA;AAAAA,MAAAA,QAAS;IAAA;AAChCX,aAAI,QAAJA,SAAI,SAAA,SAAJA,KAAOW,KAAI;;AAGbC,gCAAU,WAAA;AACR,WAAO,WAAA;;AACL,UAAIrB,aAAaE,cAAc;AAE7B,YAAMoB,0BAA0BC,SAASC,eAAeC,qBAAqB;AAC7E,SAAC7B,MAAA0B,4BAA4C,QAA5CA,4BAAuB,SAAA,SAAvBA,wBAA8Cd,WAAK,QAAAZ,QAAA,SAAA,SAAAA,IAAA,KAAA,uBAAA;MACrD;;KAEF,CAAA,CAAE;AAEL,SAAQ;IACNW,MAAMU;IACNT,OAAOU;IACPT,MAAMU;IACNO,cAAcb,iBAAiBa,eAAe;IAC9CC,UAAUd,iBAAiBc,WAAW;;IAEtCC,eAAef,iBAAiBe;;AAEpC;;;;;IClEaC,eAAe,SAACC,IAKT;MAJlBC,YAASD,GAAAC,WACTC,KAAAF,GAAAG,MAAAA,OAAI,OAAA,SAAG,IAACD,IACRE,KAAAJ,GAAAK,WAAAA,YAAS,OAAA,SAAGC,gBAAgBC,YAASH,IACrCI,KAAAR,GAAAS,YAAAA,aAAaD,OAAA,SAAAE,YAAYC,cAAWH;AAEpC,MAAMI,cAAcT,OAAO,IAAI,IAAIA;AAEnC,MAAMU,OAAOC,KAAKC,MAAMH,cAAc,IAAO;AAC7C,MAAMI,MAAMF,KAAKC,MAAMH,cAAc,OAAU,GAAK;AACpD,MAAMK,MAAMH,KAAKC,MAAOH,cAAc,OAAU,MAAS,GAAI;AAC7D,SACEM,eAAAA,QAAAC,cAAA,OAAA;IAAKlB,WAAW,yBAAyBmB,OAAAnB,SAAS;EAAG,GACnDiB,eAAAA,QAAAC,cAACE,OAAK;IACJC,MAAMjB;IACNkB,OAAOd;KAEN,GAAAW,OAAGP,OAAOA,OAAO,MAAM,EAAE,EAAGO,OAAAJ,MAAM,KAAK,MAAM,EAAE,EAAA,OAAGA,MAAMA,MAAM,KAAG,GAAA,EAAAI,OAAIH,MAAM,KAAK,MAAM,EAAE,EAAAG,OAAGH,GAAG,CAC1F,CACJ;AAET;;;;;ICXaO,uBAAuB,SAACC,IAMT;;MAL1BC,YAASD,GAAAC,WACTC,UAAOF,GAAAE,SACPC,aAAUH,GAAAG,YACVC,KAAcJ,GAAAK,QAAdA,SAASD,OAAA,SAAA,QAAK,IACdE,KAAAN,GAAAO,mBAAAA,oBAAiBD,OAAA,SAAG,QAAKA;AAEnB,MAAAE,SAAoCC,yBAAS,KAAK,GAAjDC,gBAAaF,GAAA,CAAA,GAAEG,mBAAgBH,GAAA,CAAA;AAChC,MAAAI,KASFC,eAAe;IACjBV;IACAW,KAAK,GAAA,OAAGZ,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASa,SAAS;IAC1BC,cAAcd,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASe;GACxB,GAZCC,OAAIN,GAAAM,MAIJC,QAAKP,GAAAO,OACLC,KAAgBR,GAAAS,cAAhBA,eAAeD,OAAA,SAAA,IAAC,IAChBE,WAAQ,GAAA,UACRC,KAAAX,GAAAY,eAAAA,gBAAaD,OAAA,SAAGE,oBAAoBC,OAAI;AAO1CC,gCAAU,WAAA;;AACR,QAAIpB,uBAAqBP,MAAAE,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS0B,eAAS,QAAA5B,QAAA,SAAA,SAAAA,IAAE6B,UAAS,GAAG;AACvDlB,uBAAiB,IAAI;IACtB,OAAM;AACLA,uBAAiB,KAAK;IACvB;EACH,GAAG,CAACJ,oBAAmBuB,KAAA5B,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS0B,eAAS,QAAAE,OAAA,SAAA,SAAAA,GAAED,MAAM,CAAC;AAClD,MAAME,wBAAoBC,wBAAQ,WAAA;;AAChC,QAAI9B,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS+B,YAAY;AACvB,UAAMC,cAAWlC,MAAAE,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS+B,WAAWE,KAAK,SAACC,WAAc;AAAA,eAAAA,UAAUtB,QAAQ;MAAlB,CAA8C,OAAG,QAAAd,QAAA,SAAA,SAAAA,IAAAqC,MAAM,CAAC;AACjH,aAAOH,cAAYI,SAASJ,UAAQ;IACrC;AACD,WAAO;EACT,GAAG,CAAChC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS+B,UAAU,CAAC;AAExB,SACEM,eAAAA,QAAAC,cAAA,OAAA;IAAKvC,WAAW,oCAAA,OAAoCA,WAAS,GAAA,EAAAwC,OAAI/B,gBAAgB,2BAA2B,EAAE;EAAG,GAC/G6B,eAAAA,QAAAC,cAACE,aAAW;IACVzC,WAAU;IACV0C,SAASrB,YAAYS;IACrBa,aAAavB;IACbwB,WAAWxC,SAASyC,sBAAsBC,UAAUD,sBAAsBE;EAAK,CAEjF,GAAAT,eAAAA,QAAAC,cAAA,OAAA;IAAKvC,WAAU;EAAiD,IAC5DuB,kBAAkBC,oBAAoBC,QAAQF,kBAAkBC,oBAAoBwB,WACpFV,eAAAA,QAAAC,cAAA,OAAA;IACEvC,WAAU;IACViD,SAAShC;EAAK,GAEdqB,eAAAA,QAAAC,cAACW,MAAI;IACHC,OAAM;IACNC,QAAO;IACPC,MAAMC,UAAUC;IAChBC,WAAWC,WAAWX;EAAQ,CAElC,CAAK,GAENvB,kBAAkBC,oBAAoBkC,aACrCpB,eAAAA,QAAAC,cAACoB,QAAM;IAACR,OAAM;IAASC,QAAO;EAAQ,GACpCd,eAAAA,QAAAC,cAACW,MAAI;IACHC,OAAM;IACNC,QAAO;IACPC,MAAMC,UAAUM;IAChBJ,WAAWC,WAAWI;GAE1B,CAAQ,GAETtC,kBAAkBC,oBAAoBsC,WACrCxB,eAAAA,QAAAC,cAAA,OAAA;IACEvC,WAAU;IACViD,SAAS,WAAQ;AAAA/B,YAAK;IAAI;KAE1BoB,eAAAA,QAAAC,cAAA,OAAA;IAAKvC,WAAU;KACbsC,eAAAA,QAAAC,cAAA,OAAA;IAAKvC,WAAU;EAAuE,CACtF,GAAAsC,eAAAA,QAAAC,cAAA,OAAA;IAAKvC,WAAU;GACjB,CAAK,CACF,CAEJ,GACLsC,eAAAA,QAAAC,cAACwB,cAAY;IACX/D,WAAU;IACVgE,MAAMlC,oBAAoBV;IAC1B6C,WAAWC,gBAAgBC;IAC3BC,YAAYhE,SAASiE,YAAYC,cAAcD,YAAYE;EAAe,CAE9E,CAAK;AAET;;;;;;;;ACxGA,IAAMC,kBAAkB;EACtBC,OAAO,CACL,cACA,aACA,aACA,aACA,iBACA,YAAY;EAEdC,OAAO,CACL,cACA,aACA,cACA,WAAW;;AAcfC,SAAA,CAAA,GAAoBC,eAAe;AAE5B,IAAMC,cAAc;EACzBC,QAAQ;EACRC,OAAO;;AClCH,SAAUC,WAAWC,IAG1B;MAH4BC,QAAKD,GAAAC,OAAEC,MAAGF,GAAAE;AAM7B,MAAAC,UAAYF,MAAKE;AACzB,MAAIC,cAAcC;AAClB,MAAIC,eAAeD;AACnB,MAAIJ,MAAMM,eAAeX,YAAYE,OAAO;AAC1CM,kBAAcH,MAAMG;AACpBE,mBAAeL,MAAMK;EACtB;AAEDE,sCAAgB,WAAA;;AACd,KAAAR,MAAAE,IAAIO,aAAS,QAAAT,QAAA,SAAA,SAAAA,IAAAU,MAAK;EACpB,GAAG,CAACR,IAAIO,OAAO,CAAC;AAIhB,MAAME,gBAAwDC,4BAAY,SAACC,OAAK;AAC9E,YAAQA,MAAMC,KAAG;MACf,KAAK;AAEHX,gBAAQU,KAAK;AACb;MACF,KAAK;AACHT,oBAAW;AACX;MACF,KAAK;AACHE,qBAAY;AACZ;IAGH;AACDO,UAAME,gBAAe;KACpB,CAACZ,SAASC,aAAaE,YAAY,CAAC;AAEvC,SAAO;IACLK;;AAEJ;AC3CM,SAAUK,4BAA4BhB,IAE3C;AAF6C,MAAAC,QAAKD,GAAAC;AAGjD,MAAIA,MAAMM,eAAeX,YAAYE,OAAO;AACpC,QAAAmB,KAAiChB,OAA/BiB,eAAY,GAAA,cAAEC,eAAY,GAAA;AAClC,WAAOD,aAAaC,YAAY;EACjC;AACD,MAAMC,WAAqBnB;AAC3B,SAAO;IACLoB,MAAMD,SAASC;IACfC,MAAMF,SAASE;IACfC,KAAKH,SAASG;;AAElB;ACXM,SAAUC,aAAavB,OAAwD;AACnF,MAAIA,MAAMM,eAAeX,YAAYE,OAAO;AAClC,QAAA2B,aAA+CxB,MAAK,UAA1CyB,SAAqCzB,MAAKyB,QAAlCC,kBAA6B1B,MAAhB2B,eAAEC,YAAc5B,MAAK;AAC5D,WAAQyB,SAEJI,eAAAA,QAAAC,cAAA,OAAA;MAAKF,WAAW,uDAAuDG,OAAAH,SAAS;IAAG,GACjFC,eAAAA,QAAAC,cAACE,MAAI;MACHJ,WAAWF,kBAAgB,aAAa;MACxCL,MAAMY,UAAUC;MAChBC,WAAWT,kBAAgBU,WAAWC,OAAOD,WAAWE;MACxDC,QAAO;MACPC,OAAM;MACNC,SAAS,SAACC,GAAQ;AAAA,YAAI,CAAChB,iBAAe;AAAEF,yBAAQ,QAARA,eAAQ,SAAA,SAARA,WAAWkB,CAAC;;MAAK;KAE7D,CAAK,IAELb,eAAAA,QAAAC,cAAAD,eAAAA,QAAAc,UAAA,IAAE;EACP;AACD,SAAOd,eAAAA,QAAAC,cAAAD,eAAAA,QAAAc,UAAA,IAAA;AACT;ACjBM,SAAUC,OAAO5C,OAA+B;AACpD,MAAIA,MAAMM,eAAeX,YAAYE,OAAO;AAClC,QAAAgD,gBAA8B7C,MAAKG,aAAtB2C,iBAAiB9C,MAAKK;AAC3C,WACEwB,eAAAA,QAAAC,cAAA,OAAA;MAAKF,WAAU;OACbC,eAAAA,QAAAC,cAAA,OAAA;MAAKF,WAAU;IAAkC,GAC/CC,eAAAA,QAAAC,cAACE,MAAI;MACHX,MAAMY,UAAUc;MAChBZ,WAAWC,WAAWE;MACtBC,QAAQS;MACRR,OAAOQ;MACPP,SAAS,SAACC,GAAC;AACTG,0BAAA,QAAAA,kBAAA,SAAA,SAAAA,cAAW;AACXH,UAAE5B,gBAAe;MACnB;IAAE,CAEN,CAAK,GACLe,eAAAA,QAAAC,cAAA,OAAA;MAAKF,WAAU;IAAmC,GAChDC,eAAAA,QAAAC,cAACE,MAAI;MACHX,MAAMY,UAAUc;MAChBZ,WAAWC,WAAWE;MACtBC,QAAQS;MACRR,OAAOQ;MACPP,SAAS,SAACC,GAAC;AACTA,UAAE5B,gBAAe;AACjBgC,2BAAA,QAAAA,mBAAA,SAAA,SAAAA,eAAY;MACd;KAEJ,CAAK,CACF;EAER;AAED,SAAOjB,eAAAA,QAAAC,cAAAD,eAAAA,QAAAc,UAAA,IAAA;AACT;ICrBaM,sBAAsB,SAACjD,OAA+B;AACjE,MAAMC,UAAMiD,uBAAuB,IAAI;AAC/B,MAAAC,aAAkCnD,MAAKmD,YAA3BC,WAAsBpD,MAAKoD,UAAjBlD,UAAYF,MAAK;AACvC,MAAAU,YAAcZ,WAAW;IAAEE;IAAOC;GAAK,EAAC;AAC1C,MAAAF,KAAsBgB,4BAA4B;IAAEf;EAAO,CAAA,GAAzDoB,OAAI,GAAA,MAAEC,OAAI,GAAA,MAAEC,MAAG,GAAA;AACf,MAAA+B,gBAAcC,2BAAWC,mBAAmB,EAAC;AAErD,SACE1B,eAAAA,QAAAC,cAAA,OAAA;IACEF,WAAU;IACVlB;IAEA8C,UAAU;IACVvD;KAEA4B,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;KACbC,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;KACbC,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;EAA2C,GACxDC,eAAAA,QAAAC,cAAC2B,UAAM;IAAClB,QAAO;IAAOC,OAAM;IAAOkB,KAAKP;EAAW,CACrD,CAAK,GACLtB,eAAAA,QAAAC,cAAC6B,OAAK;IACJ/B,WAAU;IACVP,MAAMuC,gBAAgBC;IACtBC,OAAOC,YAAYC;EAAe,GAEjC5C,IACI,GACPS,eAAAA,QAAAC,cAAC6B,OAAK;IACJ/B,WAAU;IACVP,MAAMuC,gBAAgBK;IACtBH,OAAOC,YAAYG;EAAe,GAEjCd,QACI,CACJ,GACLvB,eAAAA,QAAAC,cAAA,OAAA;IACEF,WAAU;EAAoC,GAG5CuC,oBAAoB9C,IAAI,KACtBQ,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;KACbC,eAAAA,QAAAC,cAAA,KAAA;IACEF,WAAU;IACVwC,KAAI;IACJC,MAAM/C;IACNgD,QAAO;EAAQ,GAEfzC,eAAAA,QAAAC,cAACE,MAAI;IACHX,MAAMY,UAAUsC;IAChBpC,WAAWC,WAAWE;IACtBC,QAAO;IACPC,OAAM;GAEV,CAAG,GACHX,eAAAA,QAAAC,cAACP,cAAYiD,SAAA;IACX5C,WAAU;EAAqD,GAC3D5B,KAAK,CAEb,CAAK,GAGT6B,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;EAAoD,GACjEC,eAAAA,QAAAC,cAACE,MAAI;IACHX,MAAMY,UAAUwC;IAChBtC,WAAWC,WAAWE;IACtBC,QAAO;IACPC,OAAM;IACNC,SAAS,SAACC,GAAC;AAAK,aAAAxC,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAUwC,CAAC;IAAX;EAAa,CAEjC,CAAK,CACF,CACF,GACLb,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;EAA8B,GAC1C8C,QAAQrD,IAAI,KACXQ,eAAAA,QAAAC,cAAA,SAAA;IACE6C,UAAQ;IACR/C,WAAU;KAEVC,eAAAA,QAAAC,cAAA,UAAA;IAAQ4B,KAAKpC;IAAKD;GACpB,CAAO,GAGPuD,QAAQvD,IAAI,KACVQ,eAAAA,QAAAC,cAAA,OAAA;IACE4B,KAAKpC;IACLuD,KAAKzD;IACLQ,WACE5B,MAAMM,eAAeX,YAAYE,QAC7B,6CACA;GACL,GAKL,CAACsE,oBAAoB9C,IAAI,KACvBQ,eAAAA,QAAAC,cAAA,OAAA;IAAKF,WAAU;EAA2C,GACxDC,eAAAA,QAAAC,cAAC6B,OAAK;IAACtC,MAAMuC,gBAAgBkB;IAAKhB,OAAOC,YAAYC;EAAe,IACjEX,cAAS,QAATA,cAAS,SAAA,SAATA,UAAW0B,+BAA8B,qBACrC,CACJ,GAGTlD,eAAAA,QAAAC,cAACc,QAAW5C,KACd,CAAK,CACF;AAET;AAawB,SAAAgF,WAAWjF,IASjB;;AARhB,MAAAkF,UAAOlF,GAAAkF,SACPC,KAAyBnF,GAAAoF,sBAAzBA,uBAAoBD,OAAA,SAAG,CAAA,IAAEA,IACzBhF,UAAOH,GAAAG,SACPkF,KAAcrF,GAAA0B,QAAdA,SAAM2D,OAAA,SAAG,QAAKA,IACdC,WAAQtF,GAAAsF,UACRnE,eAAYnB,GAAAmB,cACZf,cAAWJ,GAAAI,aACXE,eAAYN,GAAAM;AAEZ,MAAIiF,uBAAuBL,OAAO,GAAG;AACnC,QAAMM,gBAAgBN;AACtB,WACEpD,eAAAA,QAAAC,cAACmB,qBAAmB;MAClBE,YAAYoC,cAAcC,OAAOrC;MACjCC,UAAUmC,cAAcC,OAAOpC;MAC/B9C,YAAYX,YAAYE;MACxBoB,cACEkE,qBAAqBM,OAAO,SAACtE,UAA0B;AACrD,eAAOA,SAASG;MAClB,CAAC,EAAEoE,IAAI,SAACvE,UAA0B;AAChC,eAAO;UACLC,MAAMD,SAASwE,YAAY;UAC3BtE,MAAMF,SAASyE,YAAY;UAC3BtE,KAAKH,SAASG;;MAElB,CAAC;MAEHJ,cAAcA,gBAAgB;MAC9Bf,aAAaA,eAAeC;MAC5BC,cAAcA,gBAAgBD;MAC9BF;IAAiB,CAAA;EAGtB,WAAU2F,cAAcZ,OAAO,GAAG;AACjC,QAAMM,gBAAgBN;AACtB,eAAOa,iCAEHjE,eAAAA,QAAAC,cAACmB,qBAAmB;MAClBE,aAAYnC,KAAAuE,cAAcC,YAAM,QAAAxE,OAAA,SAAA,SAAAA,GAAEmC;MAClCC,WAAU2C,KAAAR,cAAcC,YAAM,QAAA,OAAA,SAAA,SAAA,GAAEpC;MAChChC,MAAMmE,cAAcnE;MACpBC,MAAMkE,cAAclE;MACpBC,KAAKiE,kBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAejE;MACpBG;MACAE,kBAAgBqE,KAAAT,cAAcU,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAEC,eAAc,KAAK;MAC7DhG;MACAmF,UAAUA,YAAYjF;KAAK,GAG9B+F,SAASC,eAAeC,UAAU,CAAiB;EAEvD;AACD,SAAOxE,eAAAA,QAAAC,cAAAD,eAAAA,QAAAc,UAAA,IAAA;AACT;;;ACrLwB,SAAA2D,UAAUC,IAKjB;;MAJfC,WAAQD,GAAAC,UACRC,YAASF,GAAAE,WACTC,UAAOH,GAAAG,SACPC,oBAAiBJ,GAAAI;AAEjB,SACEC,eAAAA,QAAAC,cAAA,OAAA;IAAKJ,WAAU;KACbG,eAAAA,QAAAC,cAAA,OAAA;IAAKJ,WAAWK,aAAa,CAC3BL,WACA,uBACCE,uBAAqBI,KAAAL,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASM,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEC,UAAS,IAAK,cAAc,EAAE,CACzE;KACGT,QACC,CACF;AAET;AC7BA,IAAMU,sBAAsB;AAC5B,IAAMC,oBAAoB;AAC1B,IAAMC,WAAW;AACjB,IAAMC,sCAAsC;AAC5C,IAAMC,sBAAsB;AAE5B,IAAMC,2BAA2B;AAEjC,IAAMC,sBAAsB;AAC5B,IAAMC,6BAA6B;AACnC,IAAMC,iCAAiC;AAEvC,IAAMC,qBAAqB;AAC3B,IAAMC,4BAA4B;AAClC,IAAMC,mCAAmC;AACzC,IAAMC,0DAA0D;AAEzD,IAAMC,mCAAmC;EAC9CC,UAAU,QAAAC,OAAQf,sBAAsB,GAAC,OAAA,EAAAe,QAASd,oBAAoBC,YAAY,GAAM,KAAA;EACxFc,aAAa,eAAAD,QAAgBV,2BAA2BD,sBAAsBD,sCAAsCF,oBAAoBC,YAAY,GAAM,KAAA;EAC1Je,mBAAmB,QAAQF,QAACT,uBAAuBC,6BAA6BH,sBAAsBI,iCAAiCN,aAAa,GAAM,KAAA;EAC1JgB,sBAAsB,eAAAH,QAAgBR,6BAA6BH,sBAAsBI,iCAAiCN,YAAY,GAAM,KAAA;EAC5IiB,kBAAkB,QAAQJ,QAACN,qBAAqBC,4BAA4BR,YAAY,GAAM,KAAA;EAC9FkB,qBAAqB,eAAAL,QAAgBJ,mCAAmCP,sBAAsBQ,0DAA0DX,oBAAoBC,YAAY,GAAM,KAAA;;AAEzL,IAAMmB,qCAAqC;EAChDP,UAAU;EACVE,aAAa;EACbC,mBAAmB;EACnBC,sBAAsB;EACtBC,kBAAkB;EAClBC,qBAAqB;;AAEhB,IAAME,6CAA6C;ACjBnD,IAAMC,oBAAoB;EAC/BC,QAAQ;EACRC,OAAO;;AAgBe,SAAAC,6BAA6BrC,IAM7C;MALNE,YAASF,GAAAE,WACTC,UAAOH,GAAAG,SACPK,KAAyBR,GAAAI,mBAAzBA,oBAAoBI,OAAA,SAAA,QAAK,IACzB8B,uBAAoB,GAAA,sBACpBC,KAAAvC,GAAAwC,sBAAAA,uBAAoBD,OAAA,SAAG,CAAA,IAAEA;AAEnB,MAAAE,SAAsDC,yBAAS,EAAE,GAAhEC,yBAAsBF,GAAA,CAAA,GAAEG,4BAAyBH,GAAA,CAAA;AAExD,WAASI,UAAO;AACdD,8BAA0B,EAAE;EAC9B;AAEA,WAASE,cAAW;AAClBF,8BACED,2BAA2B,IACvBH,qBAAqB9B,SAAS,IAC9BiC,yBAAyB,CAAC;EAElC;AAEA,WAASI,eAAY;AACnBH,8BACED,2BAA2BH,qBAAqB9B,SAAS,IACrD,IACAiC,yBAAyB,CAAC;EAElC;AAEA,SAAOL,wBACLjC,eAAAA,QAAAC,cAAAD,eAAAA,QAAA2C,UAAA,MAEIL,yBAAyB,MACvBtC,eAAAA,QAAAC,cAAC2C,YAAU;IACT9C;IACAqC;IACAU,cAAcP;IACdG;IACAC;IACAF;EAAiB,CACjB,GAGNxC,eAAAA,QAAAC,cAACP,WAAS;IACRG;IACAC;IACAC;KAGEoC,qBAAqBW,IAAI,SAACC,UAA4BC,OAAa;AACjE,QAAMC,aAAaC,MAAMH,SAASI,QAAQ;AAC1C,WAAOnD,eAAAA,QAAAC,cAAA,OAAA;MACLJ,WAAU;MACVuD,SACEtD,QAAQuD,kBAAkBC,EAAcC,YACpC,WAAA;AAAM,eAAAhB,0BAA0BS,KAAK;MAA/B,IACNQ;MAENC,KAAK,0CAA0CpC,OAAA2B,OAAK,GAAA,EAAA,OAAID,SAASW,GAAG;IAAG,GAEvE1D,eAAAA,QAAAC,cAAC0D,eAAa;MACZD,KAAKX,SAASW;MACdE,WAAW;MACXC,OAAO1C,iCAAiCc,oBAAoB;MAC5D6B,eAAe3C,iCAAiCC;MAChD2C,QAAQ5C,iCAAiCc,oBAAoB;MAC7D+B,cAAcC,wCACZtC,mCAAmCM,oBAAoB,GACvDe,OACAb,qBAAqB9B,MAAM;MAE7B6D,cAAc;MACdC,YAAY,CAAC,CAACpB,SAASoB;MACvBC,aACE,SAACC,QAA2B;AAAK,eAC/BrE,eAAAA,QAAAC,cAAA,OAAA;UACEJ,WAAU;UACVyE,OAAOD;QAAO,GAGZpB,aACIjD,eAAAA,QAAAC,cAAA,OAAA;UAAKJ,WAAU;QAAsE,GACrFG,eAAAA,QAAAC,cAACsE,MAAI;UACHC,MAAMC,UAAUC;UAChBC,WAAWC,WAAWC;UACtBhB,OAAOjC;UACPmC,QAAQnC;QAA2C,CAEvD,CAAK,IACH5B,eAAAA,QAAAC,cAACsE,MAAI;UACLC,MAAMC,UAAUK;UAChBH,WAAWC,WAAWG;UACtBlB,OAAOjC;UACPmC,QAAQnC;QAA2C,CAAA,CAGtD;;MAGToD,kBACEhF,eAAAA,QAAAC,cAAA,OAAA;QAAKJ,WAAU;MAAgE,GAE3EG,eAAAA,QAAAC,cAACsE,MAAI;QACHC,MAAMC,UAAUQ;QAChBN,WAAWC,WAAWG;QACtBlB,OAAOjC;QACPmC,QAAQnC;MAA2C,CAAA,CAGpD;IACN,CAEL,CAAK;GACN,CAEM,CACb;AAEJ;AC/IM,SAAUsD,gCAAgCvF,IAGvB;MAFvBwF,oBAAiBxF,GAAAwF,mBACjBC,WAAQzF,GAAAyF;AAER,MAAMnD,2BAAuBoD,wBAAQ,WAAA;AACnC,WAAOC,EAAMH,iBAAiB,EAC3BI,KAAK1D,kBAAkBC,QAAQ,WAAM;AAAA,aAACsD,WACnC,yBACA;KACH,EACAG,KAAK1D,kBAAkBE,OAAO,WAAM;AAAA,aAACqD,WAClC,wBACA;IAFiC,CAGpC,EACAI,UAAU,WAAA;AAAM,aAACJ,WACd,gBACA;IAFa,CAGhB;EACL,GAAG,CAACA,UAAUD,iBAAiB,CAAC;AAChC,SAAOlD;AACT;ACjBgB,SAAAwD,2BAA2B3F,SAA+B4F,yBAA2C;;AACnH,MAAI,CAAC5F;AAAS,WAAO;AAGrB,MAAIA,QAAQuD,kBAAkBC,EAAcC,WAAW;AACrD,WAAOzD,QAAQ6F,aAAa7C,IAAI,SAACC,UAA0B;AACzD,aAAO;QACL6C,UAAU7C,SAAS6C;QACnBC,UAAU9C,SAAS8C;QACnB1C,UAAUJ,SAASI;QACnB2C,YAAY/C,SAAS+C;QACrBpC,KAAKX,SAASW;QACdS,YAAY;;IAEhB,CAAC;EACF;AAED,MAAI,CAAC4B,MAAMC,SAAQrG,KAAAG,QAAQmG,mBAAe,QAAAtG,OAAA,SAAA,SAAAA,GAAAgG,YAAY;AAAG,WAAO;AAChE,SAAO7F,QAAQmG,cAAcN,aAC1B7C,IAAI,SAACC,UAA8BC,OAAa;;AAAuB,WAAC;MACvE4C,UAAU7C,SAAS6C;MACnBC,UAAU9C,SAAS8C;MACnB1C,UAAUJ,SAASI;;;;;;;;;MASnBO,MAAK,MAAAvD,MAAAR,MAAA+F,wBAAwB1C,KAAK,OAAG,QAAArD,QAAA,SAAA,SAAAA,IAAA+D,SAAG,QAAA,OAAA,SAAA,KAAIX,SAASmD,aAAW,QAAAhE,OAAA,SAAAA,KAC9Da,SAASoD,gBAAgBC,OACrBC,IAAIC,gBAAgBvD,SAASoD,IAAI,IACjC3C;;;;;;MAONW,YAAY,CAACpB,SAASoD,QAAQ,OAAOpD,SAASmD,YAAY,YAAYnD,SAASmD,QAAQ7F,SAAS;;EAChG,CAAA;AACN;IClDakG,0BAA0B,SAACzG,SAAwB;;AACxD,MAAAsC,SAAkDC,yBAA6B,CAAA,CAAE,GAAhFF,uBAAoBC,GAAA,CAAA,GAAEoE,0BAAuBpE,GAAA,CAAA;AAEpDqE,gCAAU,WAAA;AACR,QAAIC,uBAAuB5G,OAAO,GAAG;AACnC,UAAM6G,0BAA8ClB,2BAClD3F,SACAqC,oBAAoB;AAEtBqE,8BAAwBG,uBAAuB;IAChD;EACH,GAAG;;KAEDhH,KAACG,QAAiC6F,kBAAY,QAAAhG,OAAA,SAAA,SAAAA,GAAEU;;;;;;;KAOhD6B,MAAA/B,KAACL,QAAiCmG,mBAAa,QAAA,OAAA,SAAA,SAAA,GAAEN,kBAAY,QAAAzD,OAAA,SAAA,SAAAA,GACzDY,IAAI,SAACC,UAA4B;AAAK,aAAAA,SAASmD;IAAT,CAAgB,EAAEU,KAAK,GAAG;EAAC,CACtE;AACD,SAAOzE;AACT;;;;;ACuDwB,SAAA0E,eAAeC,IAyB/B;;AAxBN,MAAAC,YAAS,GAAA,WACTC,SAAM,GAAA,QACNC,UAAO,GAAA,SACPC,UAAO,GAAA,SACPC,KAAAL,GAAAM,UAAAA,WAAQD,OAAA,SAAG,QAAKA,IAChBE,KAAAA,GAAAA,UAAAC,WAAWD,OAAA,SAAA,QAAK,IAChBE,KAAAT,GAAAU,aAAAA,cAAWD,OAAA,SAAG,QAAKA,IACnBE,KAAAA,GAAAA,mBAAAC,oBAAiB,OAAA,SAAG,QAAKD,IACzBE,KAA2Bb,GAAAc,qBAA3BA,sBAAsBD,OAAA,SAAA,QAAKA,IAC3BE,YAASf,GAAAe,WACTC,wBAAqBhB,GAAAgB,uBACrBC,eAAYjB,GAAAiB,cACZC,iBAAclB,GAAAkB,gBACdC,kBAAenB,GAAAmB,iBACfC,WAAQpB,GAAAoB,UACRC,aAAUrB,GAAAqB,YACVC,iBAActB,GAAAsB,gBACdC,gBAAavB,GAAAuB,eACbC,gBAAaxB,GAAAwB,eACbC,iBAAczB,GAAAyB,gBACdC,kBAAe1B,GAAA0B,iBACfC,kBAAe3B,GAAA2B,iBACfC,sBAAmB5B,GAAA4B,qBACnBC,wBAAqB7B,GAAA6B;AAErB,MAAMC,eAAeC,qBAAoB;AACjC,MAAAC,aAAeC,gBAAe,EAAE;AAClC,MAAAC,MAA4BC,4BAAA,QAAAA,4BAAuB,SAAA,SAAvBA,wBAAuB,MAAQ,CAAA,GAAzDC,SAAMF,GAAAE,QAAEC,gBAAa,GAAA;AAC7B,MAAMC,6BAA4BC,KAAAF,kBAAA,QAAAA,kBAAA,SAAA,SAAAA,cAAeG,cAAU,QAAAD,OAAA,SAAA,SAAAA,GAAAE;AACrD,MAAAC,SAA4CC,2BAAWC,kBAAkB,GAAvEC,qBAAkBH,GAAAG,oBAAEC,oBAAiBJ,GAAAI;AAC7C,MAAMC,gBAAYC,uBAAO,IAAI;AAC7B,MAAMC,iBAAaD,uBAAO,IAAI;AACtB,MAAAE,WAAaC,qBAAoB,EAAE;AACrC,MAAAC,SAA0BC,yBAAS,KAAK,GAAvCC,WAAQF,GAAA,CAAA,GAAEG,cAAWH,GAAA,CAAA;AACtB,MAAAI,SAA8BH,yBAAS,KAAK,GAA3CI,aAAUD,GAAA,CAAA,GAAEE,gBAAaF,GAAA,CAAA;AAC1B,MAAAG,SAAoCN,yBAAS,KAAK,GAAjDO,gBAAaD,GAAA,CAAA,GAAEE,mBAAgBF,GAAA,CAAA;AAEtC,MAAMG,SAAU5D,aAAW,KAACE,YAA+B,QAA/BA,YAAO,SAAA,SAAPA,QAAiC2D,YAAQ,QAAAC,OAAA,SAAA,SAAAA,GAAA9D,YAC9DE,YAA+B,QAA/BA,YAAO,SAAA,SAAPA,QAAiC6D,mBAAkB,cACnD7D,YAA+B,QAA/BA,YAAO,SAAA,SAAPA,QAAiC6D,mBAAkB;AAC1D,MAAMC,kBAAkBJ,SAAS,aAAa;AAC9C,MAAMK,oBAAoB3D,WAAW,cAAc;AACnD,MAAM4D,6BAA6BxD,qBAAqB,EAACT,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASkE;AAClE,MAAMC,6BAA6BF,6BAA6B,kBAAkB;AAClF,MAAMG,yBAAyBX,gBAAgB,yBAAyB;AACxE,MAAMY,cAAc,CAAC,GAAGzD,cAAc,iBAAiBA,cAAc,cAChEX,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASqE,qBAAmBrE,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASsE,kBACrC,CAAC5D;AAEN,MAAM6D,uBAAuBH,cAAc,cAAc;AAEzD,MAAMI,oCAAmCzE,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS0E,eAAc,MAAMzC,OAAO0C,aAAaC;AAG1F,MAAMC,yBAAuB,KAAA5E,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS6E,gBAAU,QAAAC,OAAA,SAAA,SAAAA,GAAEC,cAAa,KAAKpE,cAAc;AAOlF,MAAMqE,YAAYC,aAAa;IAC7BC,aAAa,WAAA;AACX,UAAIpC,UAAU;AACZK,oBAAY,IAAI;MACjB;;IAEHgC,SAASC;KACR;IACDC,OAAO;IACPC,sBAAsB;EACvB,CAAA;AAED,MAAMC,uBAAuBC,gCAAgC;IAC3D1C;EACD,CAAA;AAED,MAAM2C,uBAAuBC,wBAAwB1F,OAAO;AAE5D,QAAI,KAAAA,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS2F,oBAAc,QAAAC,OAAA,SAAA,SAAAA,GAAAC,KAAA7F,OAAA,OAAQA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS8F,iBAAgB,SAAS;AACnE,WAAQC,eAAAA,QAAAC,cAACC,cAAkB;MAACjG;IAAiC,CAAG;EACjE;AAED,SACE+F,eAAAA,QAAAC,cAAA,OAAA;IACEnG,WAAWqG,aAAa,CAACrG,WAAW,4BAA4BiE,eAAe,CAAC;IAChFqC,aAAa,WAAA;AAAM,aAAA7C,cAAc,IAAI;;IACrC8C,cAAc,WAAM;AAAA,aAAA9C,cAAc,KAAK;IAAnB;KAGpByC,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,kCAAkChC,4BAA4BJ,iBAAiBS,oBAAoB,CAAC;KAC9H,CAACb,UAAU,CAACpD,eAAe+F,kBAAkBrG,OAAO;EAEpD+F,eAAAA,QAAAC,cAACM,aAAW;IACVC,aAAa,SAACC,gBAA0B;;AAAmB,aACzDT,eAAAA,QAAAC,cAACS,UAAM;QACL5G,WAAW,0CAA0C6G,OAAA9B,uBAAuB,uBAAuB,EAAE;QAErG+B,OAAKxE,OAAAvC,MAAAG,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS6G,aAAO,QAAAhH,QAAA,SAAA,SAAAA,IAAEiH,KAAK,SAACC,QAAW;AAAA,kBAAAA,WAAA,QAAAA,WAAM,SAAA,SAANA,OAAQhH,YAAWE,QAAQ2D,OAAO7D;SAAM,OAAG,QAAAqC,QAAA,SAAA,SAAAA,IAAA4E,eAAc/G,QAAQ2D,OAAOoD,cAAc;QAE9HC,KAAKrE;QACLsE,OAAM;QACNC,QAAO;QACP/B,SAAS,WAAc;AAAA,cAAI,CAAC1C;AAAoB+D,2BAAc;QAAI;MAAE,CAAA;;IAGxEW,WAAW,SAACC,eAA4C;AAAA,aACtDrB,eAAAA,QAAAC;QAACqB;QACC;UAIAC,WAAW3E;UACX4E,kBAAkB5E;UAClByE;UACAI,OAAO;YAAEC,YAAY;YAAOC,eAAe;UAAK;;QAE/ChF,oBACGA,kBAAkB;UAAEiF,MAAM3H,QAAQ2D;UAAQiE,OAAOR;UAAeS,eAAe/H;SAAQ,IACtFiG,eAAAA,QAAAC,cAAC8B,aAAW;UAACH,MAAM3H,QAAQ2D;UAAQoE,WAAWX;QAAc,CAAA;MAExD;IAf2C;GAgBtD,GAIL1D,UAAU,CAACZ,YACViD,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,iCAAiChC,4BAA4BC,wBAAwBL,eAAe,CAAC;EAAE,GACnIiC,eAAAA,QAAAC,cAACgC,iBAAe;IACdnI,WAAU;IACVE;IACAC;IACA0D;IACA/C;IACAT;IACAc;IACAC;IACAE;IACAG;IACAmC;IACAlC,iBAAiB,SAAC3B,KAAW;;AAAT,UAAAI,WAAOJ,IAAAI;AACzB,UAAIY,0BAA0BqH,sBAAsBC,QAAQ;AAC1D3G,wBAAgB;UAAEvB,SAAOA;QAAA,CAAE;MAC5B,WAAUY,0BAA0BqH,sBAAsBE,QAAQ;AACjEpH,yBAAgBoB,MAAAnC,SAAQsE,mBAAa,QAAAnC,QAAA,SAAA,SAAAA,IAAEiG,WAAWpI,SAAQqE,eAAe;MAC1E;IACH;GAEF,GAACL,8BACC+B,eAAAA,QAAAC,cAACqC,yBAAuB;IACtBxI,WAAU;IACVG;IACAF;IACAgB;IACAO;IACAoC;GAAmC,CAGpC,CAEJ,GAELsC,eAAAA,QAAAC,cAAA,OAAAsC,SAAA;IACEzI,WAAW;KACNiD,WAAgByF,SAAA,CAAA,GAAAvD,SAAS,IAAK,CAAA,GAAE;IACrCgC,KAAKnE;EAAW,CAAA,GAEd,CAACa,UAAU,CAACtD,YAAY,CAACgE,eACzB2B,eAAAA,QAAAC;IAACwC;IAAK;MACJ3I,WAAU;MACV4I,MAAMC,gBAAgBC;MACtBC,OAAOC,YAAYC;IAAe;;MAIhC,MAAAC,KAAAhJ,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS6G,aAAS,QAAAmC,OAAA,SAAA,SAAAA,GAAAlC,KAAK,SAACC,QAAM;;AAAK,cAAAA,WAAA,QAAAA,WAAA,SAAA,SAAAA,OAAQhH,cAAWF,MAAAI,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS2D,YAAM,QAAA/D,QAAA,SAAA,SAAAA,IAAEE;IAAM,CAAA,OAAC,QAAA,OAAA,SAAA,SAAA,GAAEkJ,aAC7EC,cAAcjJ,OAA8B;;EAG5C,GAGPoE,cACA2B,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,mDAAmDxC,SAAS,aAAa,YAAYa,oBAAoB,CAAC;EAAE,GACxIwB,eAAAA,QAAAC,cAACkD,cAAY;IACXrJ,WAAU;IACVG;IACAF;IACA4D;IACAyF,iBAAgBC,KAAArJ,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASsJ,4BAA0B,QAAAD,OAAA,SAAAA,KAAA,OAAME,MAAA,KAAAtJ,QAAQsE,mBAAa,QAAAiF,OAAA,SAAA,SAAAA,GAAEnB,eAAS,QAAAkB,OAAA,SAAAA,KAAI;IAC7FnE,SAAS,WAAA;;AACP,UAAIxE,cAAc,YAAYC,0BAA0BqH,sBAAsBC,QAAQ;AACpF1G,gCAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAsB;UAAExB;QAAyC,CAAA;MAClE;AACD,WACGW,cAAc,iBAAkBA,cAAc,YAAYC,0BAA0BqH,sBAAsBE,aACxGvI,MAAAI,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASsE,mBAAe,QAAA1E,QAAA,SAAA,SAAAA,IAAAwI,eAAapI,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASqE,kBACjD;AACAtD,wBAAgBf,QAAQsE,cAAc8D,WAAWpI,QAAQqE,eAAe;MACzE;IACH;EAAE,CAEN,CAAK,IACH,MAEJ0B,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,kDAAkD,CAAC;EAAE,GAE/ExC,UAAU,CAACpD,eACXyF,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,gEAAgE,QAAQ/B,sBAAsB,CAAC;KAC3H4B,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAU;EAAmF,GAChGkG,eAAAA,QAAAC,cAACwD,eAAa;IACZxJ;IACAD;EAAiB,CAErB,CAAK,CACF,GAGNyE,oCAAoCiF,YAAYzJ,OAAsB,IACrE+F,eAAAA,QAAAC,cAAC0D,mBAAiB;IAChB7J,WAAU;IACVG;IACA0D;IACAL;IACAsG,mBAAkB3H,WAAM,QAANA,WAAM,SAAA,SAANA,OAAQ2H,qBAAoB;IAC9CnJ,mBAAmBwD;IACnBvC;GAA6C,IAE7CmI,cAAc5J,OAAsB,KACtC+F,eAAAA,QAAAC,cAAC6D,qBAAmB;IAClBhK,WAAU;IACVG;IACA0D;IACAL;IACAsG,mBAAkB3H,WAAM,QAANA,WAAM,SAAA,SAANA,OAAQ2H,qBAAoB;IAC9CnJ,mBAAmBwD;EAA2B,CAC9C,GAEF8F,oBAAqB9J,OAA2B,MAAM0B,aAAaqI,QACnEhE,eAAAA,QAAAC,cAACgE,qBAAmB;IAClBnK,WAAU;IACVG;IACA0D;IACAL;IACA7C,mBAAmBwD;GAA2B,GAGjDiG,uBAAuBjK,OAA0B,KAChD+F,eAAAA,QAAAC,cAACkE,8BAA4B;IAC3BrK,WAAU;IACVG;IACA0D;IACAL;IACA7C,mBAAmBwD;IACnBuB;IACAE;GACA,GAEH0E,eAAenK,OAAsB,KACpC+F,eAAAA,QAAAC,cAACoE,sBAAoB;IACnBvK,WAAU;IACVG;IACAqK,aAAYC,KAAAvK,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAASwK,SAAO,QAAAD,OAAA,SAAAA,KAAA;IAC5B5G;IACAlD,mBAAmBwD;GACnB,GAEFwG,mBAAmBxK,OAAsB,KACzC+F,eAAAA,QAAAC,cAACyE,0BAAwB;IACvB5K,WAAU;IACVG;IACA0D;IACAL;IACA7C,mBAAmBwD;IACnB9C;IACAsG,OAAO1E,WAAW;MAAEmE,OAAO;IAAM,IAAK,CAAA;EAAG,CAAA,GAG3C6C,oBAAqB9J,OAA2B,MAAM0B,aAAagJ,WACnE3E,eAAAA,QAAAC,cAAC2E,wBAAsB;IACrB9K,WAAU;IACVG;IACA0D;IACAL;IACA7C,mBAAmBwD;EAA2B,CAAA,GAIhDA,gCAA8B4G,KAAA5K,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS6K,eAAS,QAAAD,OAAA,SAAA,SAAAA,GAAEE,UAAS,KAC3D/E,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAC3B,sCACA+D,uBAAuBjK,OAA0B,IAC7C,eACC,CAAC0D,UAAU8G,mBAAmBxK,OAAsB,KAAKyJ,YAAYzJ,OAAsB,IAC1F,KAAK,WACXqD,aAAa,gBAAgB,EAAE,CAChC;EAAE,GACD0C,eAAAA,QAAAC,cAAC+E,gBAAc;IACbjL;IACAE;IACAD;IACA2D;IACA5C;IACAkK,oBAAoBnK;IACpBQ;IACAgB,oBAAoBH;EAA0B,CAElD,CAAK,GAEL,CAACwB,UAAU,CAACpD,eACZyF,eAAAA,QAAAC,cAACwC,OAAK;IACJ3I,WAAWqG,aAAa,CAAC,gEAAgE,SAAS/B,sBAAsB,CAAC;IACzHsE,MAAMC,gBAAgBuC;IACtBrC,OAAOC,YAAYC;KAElBoC,QAAOlL,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASoI,cAAa,GAAG,KAAK;IACpC+C,QAAQvJ;GACT,CACI,CAEN,GAEJgD,wBACCmB,eAAAA,QAAAC,cAACoF,eAAa;IACZvL,WAAU;IACVgF,YAAY7E,YAAA,QAAAA,YAAO,SAAA,SAAPA,QAAS6E;IACrBM,SAAS,WAAA;AAAM,aAAA5D,oBAAe,QAAfA,oBAAe,SAAA,SAAfA,gBAAkB;QAAEvB;OAAyC;IAA7D;EAA+D,CAAA,CAG/E,GAEL+F,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,mCAAmCnC,mBAAmBG,4BAA4BK,oBAAoB,CAAC;KAElI,CAACb,UAAU,CAACZ,YACXiD,eAAAA,QAAAC,cAAA,OAAA;IAAKnG,WAAWqG,aAAa,CAAC,iCAAiCnC,mBAAmBI,wBAAwBL,eAAe,CAAC;EAAE,GACzHE,8BACC+B,eAAAA,QAAAC,cAACqC,yBAAuB;IACtBxI,WAAU;IACVG;IACAF;IACAgB;IACAO;IACAoC;EAAmC,CAAA,GAGvCsC,eAAAA,QAAAC,cAACgC,iBAAe;IACdnI,WAAU;IACVE;IACAC;IACA0D;IACA/C;IACAT;IACAe;IACAE;IACAG;IACAmC;IACAlC,iBAAiB,SAAC3B,KAAW;;AAAT,UAAAI,WAAOJ,IAAAI;AACzB,UAAIY,0BAA0BqH,sBAAsBC,QAAQ;AAC1D3G,wBAAgB;UAAEvB,SAAOA;QAAA,CAAE;MAC5B,WAAUY,0BAA0BqH,sBAAsBE,QAAQ;AACjEpH,yBAAgBoB,MAAAnC,SAAQsE,mBAAa,QAAAnC,QAAA,SAAA,SAAAA,IAAEiG,WAAWpI,SAAQqE,eAAe;MAC1E;IACH;GAEJ,CAAK,CAEJ,GAEHnB,eACE,KAAAlD,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASqL,mBAAiB,QAAAC,OAAA,SAAA,SAAAA,GAAAzF,KAAA7F,OAAA,QAAI,KAAAA,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASuL,mBAAa,QAAAC,OAAA,SAAA,SAAAA,GAAA3F,KAAA7F,OAAA,QAAQyL,KAAAzL,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASiK,4BAAsB,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,OAAA,OAE3FlE,eAAAA,QAAAC,cAAC0F,YAAU;IACTpE,WAAWzE;IACX9C;IACA4L,UAAU,WAAA;AAAQxI,kBAAY,KAAK;;IACnCnD;IACAQ,mBAAmBwD;IACnBN;IACA5D;IACAa;IACAT;IACAe;IACAH;IACAK;IACAC;IACAE;IACAD;IACAL;IACAO,iBAAiB,SAAC3B,KAAW;;AAAT,UAAAI,WAAOJ,IAAAI;AACzB,UAAIY,0BAA0BqH,sBAAsBC,QAAQ;AAC1D3G,4BAAe,QAAfA,oBAAe,SAAA,SAAfA,gBAAkB;UAAEvB,SAAOA;QAAE,CAAA;MAC9B,WAAUY,0BAA0BqH,sBAAsBE,QAAQ;AACjEpH,4BAAA,QAAAA,oBAAA,SAAA,SAAAA,kBAAkBoB,MAAAnC,aAAA,QAAAA,aAAA,SAAA,SAAAA,SAASsE,mBAAa,QAAAnC,QAAA,SAAA,SAAAA,IAAEiG,cAAa,IAAGpI,aAAA,QAAAA,aAAA,SAAA,SAAAA,SAASqE,oBAAmB,CAAC;MACxF;IACH;EAAE,CACF,CAGH;AAET;;;;;;ICxcauH,uBAAmD,SAACC,IAa7C;MAXlBC,aAAUD,GAAAC,YACVC,WAAQF,GAAAE,UAERC,OAAI,GAAA,MACJC,OAAIJ,GAAAI,MACJC,MAAGL,GAAAK,KAEHC,SAAMN,GAAAM,QACNC,WAAQP,GAAAO,UACRC,WAAQR,GAAAQ,UACRC,gBAAaT,GAAAS;AACU,SACvBC,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAA2C,GACxDF,eAAAA,QAAAC,cAACE,UAAM;IAACC,QAAO;IAAOC,OAAM;IAAOC,KAAKf;EAAW,CACrD,CAAK,GACLS,eAAAA,QAAAC,cAACM,OAAK;IACJL,WAAU;IACVR,MAAMc,gBAAgBC;IACtBC,OAAOC,YAAYC;EAAe,GAEjCnB,IACI,GACPO,eAAAA,QAAAC,cAACM,OAAK;IACJL,WAAU;IACVR,MAAMc,gBAAgBK;IACtBH,OAAOC,YAAYG;EAAe,GAEjCtB,QACI,CACJ,GACLQ,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAoC,GAE/Ca,oBAAoBrB,IAAI,KACtBM,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,KAAA;IACEC,WAAU;IACVc,KAAI;IACJC,MAAMtB;IACNuB,QAAO;EAAQ,GAEflB,eAAAA,QAAAC,cAACkB,MAAI;IACHzB,MAAM0B,UAAUC;IAChBC,WAAWC,WAAWC;IACtBpB,QAAO;IACPC,OAAM;GAEV,CAAG,GAEDP,YAAYF,UACVI,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAqD,GAClEF,eAAAA,QAAAC,cAACkB,MAAI;IACHjB,WAAWH,gBAAgB,aAAa;IACxCL,MAAM0B,UAAUK;IAChBH,WAAWvB,gBAAgBwB,WAAWG,OAAOH,WAAWC;IACxDpB,QAAO;IACPC,OAAM;IACNsB,SAAS,WAAQ;AAAA,UAAI,CAAC5B,eAAe;AAAED,iBAAQ;;IAAM;EAAE,CAE3D,CAAK,CAGN,GAGTE,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAoD,GACjEF,eAAAA,QAAAC,cAACkB,MAAI;IACHzB,MAAM0B,UAAUQ;IAChBN,WAAWC,WAAWC;IACtBpB,QAAO;IACPC,OAAM;IACNsB,SAAS9B;EAAS,CAEtB,CAAK,CACF,CACF,GACLG,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAA8B,GAC1C2B,QAAQnC,IAAI,KACXM,eAAAA,QAAAC,cAAA,SAAA;IAAO6B,UAAQ;IAAC5B,WAAU;KACxBF,eAAAA,QAAAC,cAAA,UAAA;IAAQK,KAAKX;IAAKD;GACpB,CAAO,GAGPqC,QAAQrC,IAAI,KACVM,eAAAA,QAAAC,cAAA,OAAA;IACEK,KAAKX;IACLqC,KAAKvC;IACLS,WAAU;GACV,GAIJ,CAACa,oBAAoBrB,IAAI,KACvBM,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAA2C,GACxDF,eAAAA,QAAAC,cAACM,OAAK;IAACb,MAAMc,gBAAgByB;IAAKvB,OAAOC,YAAYC;EAAe,GAClE,qBACK,CACJ,CAGN,CACF;AA5FkB;AAoGzB,IAAMsB,cAAwC,SAAC5C,IAAsC;;MAApCO,WAAQP,GAAAO,UAAEsC,UAAO7C,GAAA6C;AACxD,MAAAC,gBAAkBC,kBAAiB,EAAE;AAE3C,MAAAC,SAKEH,QAAOG,QAJT5C,OAIEyC,QAJEzC,MACJC,MAGEwC,QAAOxC,KAFT4C,KAEEJ,QAAO1C,MAFTA,OAAO8C,OAAA,SAAA,KAAEA,IACTC,aACEL,QAAOK;AACX,MAAMC,QAAOC,MAAAC,KAAAC,wBAAuB,OAAI,QAAAD,OAAA,SAAA,SAAAA,GAAAE,YAAQ,QAAAH,OAAA,SAAA,SAAAA,GAAAI;AAChD,MAAMlD,SAAS6C,WAAS,KAAAN,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASG,YAAQ,QAAAS,OAAA,SAAA,SAAAA,GAAAD;AACzC,MAAM/C,iBAAgByC,eAAA,QAAAA,eAAA,SAAA,SAAAA,WAAYQ,cAAa;AACvC,MAAAzD,aAA8B+C,OAAM/C,YAAxB0D,KAAkBX,OAAM9C,UAAxBA,WAAWyD,OAAA,SAAA,KAAE;AACjC,aAAOC,iCAEHlD,eAAAA,QAAAC,cAACZ,sBAAmB;IAClBE;IACAC;IACAE;IACAC;IACAF;IACAI;IACAC,UAAU,WAAA;AACRsC,oBAAcD,OAAuB,EAAEgB,KAAK,WAAA;AAC1CtD,iBAAQ;MACV,CAAC;;IAEHD;IACAG;GAA6B,GAGjCqD,SAASC,eAAeC,UAAU,CAAC;AAEvC;;;;;;AC3KgB,SAAAC,2BAA2BC,WAAmCC,SAAwB;AACpG,SAAOC,EAAMD,OAAO,EACjBE,KAAKC,wBAAwB,WAAA;AAC5B,QAAMC,aAAsBJ,QAAiCK,aAAaC;AAC1E,WAAO,6BAAAC,OAA6BH,YAAU,UAAA;EAChD,CAAC,EACAI,UAAU,WAAA;AACT,WAAOT,UAAUU;EACnB,CAAC;AACL;;;;;ACEA,IAAMC,gBAA8C,SAACC,OAAyB;;AAE1E,MAAAC,KAGED,MAAKE,UAHPA,WAAQD,OAAA,SAAG,WAAA;EAAA,IAAoBA,IAC/BE,WAEEH,MAFMG,UACRC,UACEJ,MAAK;AACD,MAAAK,gBAAcC,2BAAWC,mBAAmB,EAAC;AAEnD,MAAAC,gBACEC,kBAAiB,EAAE;AACvB,SACEC,eAAAA,QAAAC,cAACC,OAAK;IACJC,MAAMC,YAAYC;IAClBC,YAAU,KAAAZ,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAASa,gBAAY,QAAAC,OAAA,SAAA,SAAAA,GAAAC,cAAa;IAC5ChB;IACAD,UAAU,WAAA;AACRM,oBAAcJ,OAAO,EAAEgB,KAAK,WAAA;AAG1BlB,iBAAQ;AACRC,iBAAQ;MACV,CAAC;;IAEHkB,YAAYhB,UAAUiB;IACtBC,WAAWC,2BAA2BnB,WAAWD,OAAO;EAAE,CAC1D;AAEN;;;;ACxCgB,SAAAqB,YAA+CC,UAAaC,OAAa;AACvF,MAAMC,iBAAaC,uBAA6C,IAAI;AAEpEC,gCAAU,WAAA;AAER,WAAO,WAAA;AACL,UAAIF,WAAWG,SAAS;AACtBC,qBAAaJ,WAAWG,OAAO;MAChC;;KAEF,CAAA,CAAE;AAEL,WAASE,mBAAgB;AAAC,QAAsBC,OAAA,CAAA;aAAAC,KAAA,GAAtBA,KAAsBC,UAAAC,QAAtBF,MAAsB;AAAtBD,WAAsBC,EAAA,IAAAC,UAAAD,EAAA;;AAC9C,QAAIP,WAAWG,SAAS;AACtBC,mBAAaJ,WAAWG,OAAO;IAChC;AAEDH,eAAWG,UAAUO,WAAW,WAAA;AAC9BZ,eAAQa,MAAA,QAAIL,IAAI;OACfP,KAAK;EACV;AAEA,SAAOM;AACT;ACrBA,IAAMO,QAAQ;AAWE,SAAAC,iBAAiBC,cAAsBC,WAAiB;AACtE,SAAOD,eAAeC;AACxB;AAEM,SAAUC,0BAA0BC,IAMT;AAL/B,MAAAC,UAAOD,GAAAC,SACPC,UAAOF,GAAAE,SACPC,WAAQH,GAAAG,UACRC,YAASJ,GAAAI,WACTC,0BAAuBL,GAAAK;AAEvB,MAAMC,eAAWC,4BAAY,WAAA;AAC3B,QAAMC,UAAUJ,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWlB;AAC3B,QAAIsB,WAAW,MAAM;AACnB;IACD;AAGC,QAAAV,YAGEU,QAAOV,WAFTD,eAEEW,QAAOX,cADTY,eACED,QAAO;AAIX,QAAME,eAAed,iBAAiBC,cAAcC,SAAS;AAG7D,QAAI,OAAOO,4BAA4B,YAAY;AACjDA,8BAAwBR,eAAeC,YAAYW,eAAe,CAAC;IACpE;AACD,QAAIR,WAAWH,YAAYa,eAAe;AACxCR,eAAS,WAAA;AAEPK,gBAAQV,YAAYU,QAAQX,eAAea;MAC7C,CAAC;IACF;AACD,QAAIR,SAAS;AACXC,eAAS,WAAA;AAEPK,gBAAQV,YAAYA,aAAaD,eAAeW,QAAQX;MAC1D,CAAC;IACF;KACA,CACDQ,yBACAJ,SACAE,UACAC,SAAS,CACV;AAED,SAAOxB,YAAY0B,UAAUX,KAAK;AACpC;;;;AClEM,SAAUiB,gBAAgBC,MAAiB;AAC/C,MAAIA,MAAM;AACR,QAAMC,WAAWD,KAAKE,iBAAiB,0BAA4B;AACnE,QAAMC,gBAAgBC,MAAMC,KAAKJ,QAAQ;AACzC,WAAOE;EACR;AACD,SAAO,CAAA;AACT;ACUgB,SAAAG,oBAAoBC,IAElBC,IAEH;AAHb,MAAAC,MAAGF,GAAAE;AAEH,MAAAC,SAAMF,GAAAE;AAGN,MAAMC,aAAaF,IAAIG;AACjB,MAAAC,SAAkCC,yBAAoB,CAAA,CAAE,GAAvDC,eAAYF,GAAA,CAAA,GAAEG,kBAAeH,GAAA,CAAA;AAGpCI,sCAAgB,WAAA;AACd,QAAIN,YAAY;AACd,UAAMV,WAAWF,gBAAgBY,UAAU;AAC3CK,sBAAgBf,QAAQ;IACzB;EACH,GAAG,CAACU,UAAU,CAAC;AAEfO,gCAAU,WAAA;AAER,QAAMC,SAAS;MAAEC,WAAW;MAAMC,SAAS;;AAG3C,QAAMC,WAAW,SAACC,cAA8B;AAC9C,UAAMC,cAAcD,aAAaE,SAAS;AAC1C,UAAID,aAAa;AACfR,wBAAgBjB,gBAAgBY,UAAU,CAAC;MAC5C;;AAIH,QAAMe,WAAW,IAAIC,iBAAiBL,QAAQ;AAE9C,QAAIX,YAAY;AAEde,eAASE,QAAQjB,YAAYQ,MAAM;AACnCT,aAAOmB,KAAK,yCAAyC;QAAEH;QAAUP;MAAM,CAAE;IAC1E;AAED,WAAO,WAAA;AACL,UAAI;AACFO,iBAASI,WAAU;AACnBpB,eAAOmB,KAAK,8CAA8C;UAAEH;QAAU,CAAA;eAC/DK,OAAO;AACdrB,eAAOqB,MAAM,mDAAmD;UAAEL;QAAU,CAAA;MAC7E;;EAEL,GAAG,CAACf,UAAU,CAAC;AACf,SAAOI;AACT;;;;;AC/DA,IAAMiB,oBAAoB,SAACC,MAAkBC,MAAoB;AACzD,MAAAC,SAA0BC,yBAAS,KAAK,GAAvCC,WAAQF,GAAA,CAAA,GAAEG,cAAWH,GAAA,CAAA;AAC5BI,gCAAU,WAAA;AACR,QAAIF,UAAU;AACZJ,WAAI;IACL,OAAM;AACLK,kBAAY,IAAI;IACjB;KACAJ,IAAI;AACT;ACiCA,IAAMM,UAAU,SAACL,IAUA;;MATfM,UAAON,GAAAM,SACPC,eAAYP,GAAAO,cACZC,WAAQR,GAAAQ,UACRC,cAAWT,GAAAS,aACXC,eAAY,GAAA,cACZC,wBAAqBX,GAAAW,uBACrBC,kBAAeZ,GAAAY,iBACfC,gBAAab,GAAAa,eACbC,uBAAoBd,GAAAc;AAEZ,MAAAC,aAAeC,gBAAe,EAAE;AACxC,MAAMC,cAAcC,wBAAuB;AAErC,MAAAC,KAMFF,YAAYG,QALdC,SAAM,GAAA,QACNC,WAAQ,GAAA,UACRC,mBAAgB,GAAA,kBAChBC,cAAW,GAAA,aACXC,SAAM,GAAA;AAER,MAAMC,uBAAsBF,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaG,oBAAmBC;AAC5D,MAAMC,0BAAyBL,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaM,uBAAsBC;AAE5D,MAAAC,KAyBFC,kBAAiB,GAxBnBC,cAAWF,GAAAE,aACXC,sBAAmBH,GAAAG,qBACnBC,uBAAoBJ,GAAAI,sBACpBC,0BAAuB,GAAA,yBACvBC,oBAAiBN,GAAAM,mBACjBC,uBAAoBP,GAAAO,sBACpBC,gBAAaR,GAAAQ,eACbC,kBAAeT,GAAAS,iBACfC,YAAS,GAAA,WACTC,wBAAqBX,GAAAW,uBACrBC,oBAAiBZ,GAAAY,mBACjBC,iBAAcb,GAAAa,gBACdC,iBAAcd,GAAAc,gBACdC,eAAY,GAAA,cACZC,kBAAehB,GAAAgB,iBACfC,gBAAajB,GAAAiB,eACbC,gBAAalB,GAAAkB,eACbC,wBAAqBnB,GAAAmB,uBACrBC,kBAAe,GAAA,iBACfC,sBAAmBrB,GAAAqB,qBACnBC,oBAAiBtB,GAAAsB,mBACjBC,uBAAoBvB,GAAAuB,sBACpBC,mBAAgBxB,GAAAwB,kBAChBC,gBAAa,GAAA;AAET,MAAAC,SAA0BzD,yBAAS,KAAK,GAAvC0D,WAAQD,GAAA,CAAA,GAAEE,cAAWF,GAAA,CAAA;AACtB,MAAAG,SAA8B5D,yBAAS,KAAK,GAA3C6D,aAAUD,GAAA,CAAA,GAAEE,gBAAaF,GAAA,CAAA;AAC1B,MAAAG,SAAsC/D,yBAAS,KAAK,GAAnDgE,iBAAcD,GAAA,CAAA,GAAEE,oBAAiBF,GAAA,CAAA;AAClC,MAAAG,SAA8BlE,yBAAS,KAAK,GAA3CmE,aAAUD,GAAA,CAAA,GAAEE,gBAAaF,GAAA,CAAA;AAC1B,MAAAG,SAAoCrE,yBAAS,KAAK,GAAjDsE,gBAAaD,GAAA,CAAA,GAAEE,mBAAgBF,GAAA,CAAA;AAChC,MAAAG,SAAwCxE,yBAAS,EAAE,GAAlDyE,kBAAeD,GAAA,CAAA,GAAEE,qBAAkBF,GAAA,CAAA;AACpC,MAAAG,SAAsC3E,yBAAS,CAAA,CAAE,GAAhD4E,iBAAcD,GAAA,CAAA,GAAEE,oBAAiBF,GAAA,CAAA;AAClC,MAAAG,SAA0C9E,yBAAS,CAAA,CAAE,GAApD+E,mBAAgBD,GAAA,CAAA,GAAEE,sBAAmBF,GAAA,CAAA;AACtC,MAAAG,SAA4CjF,yBAAS,IAAI,GAAxDkF,oBAAiBD,GAAA,CAAA,GAAEE,uBAAoBF,GAAA,CAAA;AACxC,MAAAG,SAAkCpF,yBAAS,IAAI,GAA9CqF,eAAYD,GAAA,CAAA,GAAEE,kBAAeF,GAAA,CAAA;AAC9B,MAAAG,SAAoDvF,yBAAS,CAAA,CAAE,GAA9DwF,wBAAqBD,GAAA,CAAA,GAAEE,2BAAwBF,GAAA,CAAA;AACtD,MAAMG,0BAAsBC,uBAAO,IAAI;AACvC,MAAMC,uBAAmBD,uBAAO,IAAI;AACpC,MAAME,8BAA8BxE,YAC/BC,oBACAmD,gBAAgBqB,SAAS,KACzB,CAACC,wBAAwB7D,mBAAmB,KAC5C,CAAC8D,uBAAuB9D,mBAAmB;AAChD,MAAM+D,WAAW,CAAChE,eACb8D,wBAAwB7D,mBAAmB,KAC3C8D,uBAAuB9D,mBAAmB,KAC1C,CAACb;AAEN,MAAM6E,iBAAiBC,0BAA0B;IAC/CC,SAAS;IACTC,UAAU9C;IACV+C,WAAWV;IACXpC;EACD,CAAA;AAED,MAAM+C,eAAeC,oBAAoB;IAAEC,KAAKf;EAAmB,GAAI;IAAElE;EAAM,CAAE;AACjF,MAAMkF,eAAcH,iBAAA,QAAAA,iBAAA,SAAA,SAAAA,aAAcT,UAASrE;AAE3CtB,gCAAU,WAAA;AACR0E,sBAAkBD,eAAe+B,OAAO,SAAC5G,KAAU;AAAR,UAAAqB,UAAMrB,IAAAqB;AAC/C,UAAMwF,IAAI7B,iBAAiB8B,QAAQzF,OAAM;AACzC,UAAIwF,IAAI,GAAG;AACT,eAAO;MACR,OAAM;AACL7B,yBAAiB+B,OAAOF,GAAG,CAAC;AAC5B,eAAO;MACR;IACH,CAAC,CAAC;EACJ,GAAG,CAAC7B,gBAAgB,CAAC;AAErBgC,sCAAgB,WAAA;AAEdtG,qBAAA,QAAAA,iBAAA,SAAA,SAAAA,aAAY;KACX,CAAA,CAAE;AAKLb,oBAAkB,WAAA;AAChBa,qBAAA,QAAAA,iBAAA,SAAA,SAAAA,aAAY;EACd,GAAG,CAACiD,WAAUsD,KAAA3G,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS4G,eAAS,QAAAD,OAAA,SAAA,SAAAA,GAAElB,MAAM,CAAC;AACzClG,oBAAkB,WAAA;AAChBa,qBAAY,QAAZA,iBAAY,SAAA,SAAZA,aAAe,IAAI;EACrB,GAAG,CAACJ,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS6G,SAAS,CAAC;AAEvBH,sCAAgB,WAAA;AACd,QAAII,mBAAmB;AACvB,QAAIC,4BAA4B;AAChC,QAAIjF,yBAAyB9B,QAAQgH,cAAazB,qBAAA,QAAAA,qBAAA,SAAA,SAAAA,iBAAkB0B,UAAS;AAC3EpB,qBAAc;AACd9B,oBAAc,KAAK;AACnB+C,yBAAmBI,WAAW,WAAA;AAC5BhD,yBAAiB,IAAI;SACpB,GAAG;AACN6C,kCAA4BG,WAAW,WAAA;AACrCnF,gCAAwB,CAAC;AACzBkB,iCAAA,QAAAA,yBAAA,SAAA,SAAAA,qBAAoB;SACnB,IAAI;IACR,OAAM;AACLiB,uBAAiB,KAAK;IACvB;AACD,WAAO,WAAA;AACLiD,mBAAaL,gBAAgB;AAC7BK,mBAAaJ,yBAAyB;;EAE1C,GAAG,CAACjF,sBAAsByD,iBAAiB0B,SAASjH,QAAQgH,SAAS,CAAC;AAEtEN,sCAAgB,WAAA;AACd,QAAII,mBAAmB;AACvB,QAAIM,yBAAyB;AAC7B,QAAIpF,sBAAsBhC,QAAQgH,cAAazB,qBAAA,QAAAA,qBAAA,SAAA,SAAAA,iBAAkB0B,UAAS;AACxEpB,qBAAc;AACd3B,uBAAiB,KAAK;AACtB4C,yBAAmBI,WAAW,WAAA;AAC5BnD,sBAAc,IAAI;SACjB,GAAG;AACNqD,+BAAyBF,WAAW,WAAA;AAClCjF,6BAAqB,CAAC;AACtBe,8BAAA,QAAAA,sBAAA,SAAA,SAAAA,kBAAiB;SAChB,IAAI;IACR,OAAM;AACLe,oBAAc,KAAK;IACpB;AACD,WAAO,WAAA;AACLoD,mBAAaL,gBAAgB;AAC7BK,mBAAaC,sBAAsB;;EAEvC,GAAG,CAACpF,mBAAmBuD,iBAAiB0B,SAASjH,QAAQgH,WAAWhE,iBAAiB,CAAC;AACtF,MAAMqE,sBAAkBC,wBAAQ,WAAA;AAC9B,WAAO/G,kBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAgB;MACrBP;MACAE;MACAC;IACD,CAAA;EACH,GAAG,CAACH,SAASO,aAAa,CAAC;AAC3B,MAAMgH,8BAA0BD,wBAAQ,WAAA;AACtC,QAAIjH,uBAAuB;AACzB,aAAOA,0BAAqB,QAArBA,0BAAqB,SAAA,SAArBA,sBAAwB;QAAEL;MAAkB,CAAA;IACpD;AACD,WAAO;EACT,GAAG,CAACA,SAASK,qBAAqB,CAAC;AAEnC,MAAIgH,iBAAiB;AACnB,WACEG,eAAAA,QAAAC;MAAA;MAAA;;;QAGE,sBAAoBzH,QAAQgH;QAC5B,sBAAoBhH,QAAQ0H;QAC5BtB,KAAKb;QACLoC,WAAWC,aAAa,CACtB,6CACA9D,aAAa,+BAA+B,IAC5CG,gBAAgB,kCAAkC,EAAE,CACrD;MAAE;;MAKDhE,iBAAiBsH,2BACfC,eAAAA,QAAAC,cAACI,eACCL,MAAAA,eAAAA,QAAAC,cAACK,OAAK;QAACC,MAAMC,gBAAgBC;QAAWC,OAAOC,YAAYC;MAAe,GACvEC,OAAOrI,QAAQ0H,WAAW,iBAAiB;QAC1CY,QAAQ7H;MACT,CAAA,CACI,CACM;MAGlB4G;IACE;EAER;AAED,MAAIhE,cAAYkF,KAAAvI,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASwI,mBAAiB,QAAAD,OAAA,SAAA,SAAAA,GAAAE,KAAAzI,OAAA,IAAE;AAC1C,YAAOM,oBAAA,QAAAA,oBAAe,SAAA,SAAfA,gBAAe,MACpBkH,eAAAA,QAAAC,cAAAD,eAAAA,QAAAkB,UAEIlD,MAAAA,+BACEgC,eAAAA,QAAAC,cAACkB,sBAAoB;MACnBC,gBAAgBxE;MAChByE,YAAYhE;MACZhC;MACAiG,iBAAiB,SAACC,MAAI;AACpB,YAAIA,MAAM;AACRvE,4BAAsBwE,cAAAA,cAAA,CAAA,GAAAzE,gBAAgB,IAAA,GAAA,CAAAwE,IAAI,GAAA,KAAA,CAAA;QAC3C;AACD1E,2BAAmB,EAAE;AACrBY,wBAAgB8D,IAAI;AACpBjE,6BAAqB,IAAI;;MAE3BmE,mBAAmB,WAAA;AACjBnE,6BAAqB,IAAI;;MAE3BoE,cAAc,SAACC,OAAK;AAClB/D,iCAAyB+D,KAAK;;MAEhCC,gBAAgB/C;MAChBhF,iBAAiBD;MACjBI,oBAAoBD;IAAuB,CAC3C,GAGNiG,eAAAA,QAAAC,cAAC4B,cAAY;MACXC,QAAM;MACNC,SAAS1H;MACT+D;MACAQ,KAAKf;MACLmE,qBAAqBxE;MACrB/D;MACAjB;MACAyJ,eAAe,WAAA;;AACb,SAAA/J,MAAAmC,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqB6H,iBAAW,QAAAhK,QAAA,SAAA,SAAAA,IAAA,KAAA,mBAAA;;MAElCiK,iBAAiB,SAACjK,KAAuC;;AAArC,YAAAsH,YAAStH,IAAA,WAAEM,WAAON,IAAAM,SAAE4J,kBAAelK,IAAAkK;AACrD1H,sBAAc;UACZ8E;UACAhH,SAAOA;UACPuE;UACAqF;QACD,CAAA;AACDtG,oBAAY,KAAK;AACjB,SAAAqD,MAAA9E,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqBgI,eAAS,QAAAlD,QAAA,SAAA,SAAAA,IAAA,KAAA,mBAAA;;MAEhCmD,cAAc,WAAA;;AACZzF,2BAAmB,EAAE;AACrBG,0BAAkB,CAAA,CAAE;AACpBG,4BAAoB,CAAA,CAAE;AACtBS,iCAAyB,CAAA,CAAE;AAC3B9B,oBAAY,KAAK;AACjB,SAAA5D,MAAAmC,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqBgI,eAAS,QAAAnK,QAAA,SAAA,SAAAA,IAAA,KAAA,mBAAA;;MAEhCqK,iBAAiB,SAAChB,MAAI;AACpB,aAAI/D,iBAAY,QAAZA,iBAAY,SAAA,SAAZA,aAAcjE,aAAWgI,SAAI,QAAJA,SAAI,SAAA,SAAJA,KAAMhI,SAAQ;AACzCkE,0BAAgB,IAAI;AACpBZ,6BAAmB,EAAE;QACtB;;MAEH2F,uBAAuB,SAACC,aAAW;AACjC5F,2BAAmB4F,WAAW;;MAEhCC,2BAA2B,SAACC,SAAO;AACjCxF,4BAAoBwF,OAAO;;MAE7BC,WAAW,SAACC,GAAC;AACX,YAAI7E,gCAA+BL,0BAAqB,QAArBA,0BAAqB,SAAA,SAArBA,sBAAuBM,UAAS,MAC5D4E,EAAEC,QAAQC,iBAAiBC,SAASnE,eAAgBgE,EAAEC,QAAQC,iBAAiBE,WAAWJ,EAAEC,QAAQC,iBAAiBG,YAC1H;AACA5F,+BAAqBuF,CAAC;AACtB,iBAAO;QACR;AACD,eAAO;MACT;IAAE,CAEN,CAAA;EAEH;AAED,SACE7C,eAAAA,QAAAC,cAAA,OAAA;IACEE,WAAWC,aAAa,CACtB,6CACA9D,aAAa,+BAA+B,IAC5CG,gBAAgB,kCAAkC,EAAE,CACrD;IACD0G,OAAO;MAAEC,cAAc;;IACvB,sBAAoB5K,QAAQgH;IAC5B,sBAAoBhH,QAAQ0H;IAC5BtB,KAAKb;EAAiB,GAIpBtF,iBAAiBsH,2BACfC,eAAAA,QAAAC,cAACI,eACCL,MAAAA,eAAAA,QAAAC,cAACK,OAAK;IAACC,MAAMC,gBAAgBC;IAAWC,OAAOC,YAAYC;EAAe,GACvEC,OAAOrI,QAAQ0H,WAAW,iBAAiB;IAC1CY,QAAQ7H;GACT,CACI,CACM,KAKjBD,yBAAA,QAAAA,yBAAoB,SAAA,SAApBA,qBAAoB,MAClBgH,eAAAA,QAAAC,cAACoD,gBAAc;IACblD,WAAU;IACV5G;IACAoB;IACAoH,SAAS1H;IACT7B;IACA4F,UAAU,CAAC5E;IACXd;IACAC;IACAmC;IACAF;IACAC;IACAI;IACAD;IACAa,UAAUC;IACVE,YAAYC;IACZE,gBAAgBC;IAChBjB;IACAC;IACAL;IACAG;IACAI;IACAC;IACA+H,uBAAuB1K;GAAa,GAMxCoD,cACEgE,eAAAA,QAAAC,cAACsD,eAAkB;IACjB/K;IACAgL,UAAU,WAAA;AAAM,aAAAvH,cAAc,KAAK;IAAnB;GAChB,GAIJE,kBACE6D,eAAAA,QAAAC,cAACwD,aAAU;IACTjL;IACAgL,UAAU,WAAA;AAAM,aAAApH,kBAAkB,KAAK;IAAvB;EAAyB,CACzC,CAGH;AAET;;;ACtYasH,IAAAA,6BAA6B,SACxCC,aACAC,aACAC,aACAC,gBACAC,WAAoB;AAKpB,MAAIA,cAAc,aAAYH,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAaI,aAAY;AACrD,WAAO,CAAC,OAAO,KAAK;EACrB;AACD,MAAMC,iBAAiBL,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAA6BK,kBAAiB;AACrE,MAAMC,eAAeD,kBAAkB,aAAaA,kBAAkB;AACtE,SAAO,CACLE,YAAYR,aAAaC,aAAaE,cAAc,KAAKI,cACzDC,YAAYP,aAAaC,aAAaC,cAAc,KAAKI,YAAY;AAEzE;;;ICJaE,sBAAsB,SAACC,IAOT;AANzB,MAAAC,KAAAD,GAAAE,aAAAA,cAAWD,OAAA,SAAG,CAAA,IAAEA,IAChBE,KAA+BH,GAAAI,0BAA/BA,2BAAwBD,OAAA,SAAG,OAAIA,IAC/BE,KAAAA,GAAAA,cAAAC,eAAY,OAAA,SAAG,IAACD,IAChBE,KAAAP,GAAAQ,gBAAAA,iBAAcD,OAAA,SAAG,OAAIA,IACrBE,KAAAA,GAAAA,gBAAAC,iBAAiBD,OAAA,SAAA,OAAI,IACrBE,KAAAX,GAAAY,WAAAA,YAASD,OAAA,SAAG,KAAEA;AAEd,MAAME,kBAAkBX,YAAYI,eAAe,CAAC;AACpD,MAAMQ,cAAcZ,YAAYI,eAAe,CAAC;AAC1C,MAAAS,KAA0BX,2BAC5BY,2BAA2BH,iBAAiBL,gBAAgBM,aAAaJ,gBAAiBE,SAAuB,IACjH,CAAC,OAAO,KAAK,GAFVK,WAAQF,GAAA,CAAA,GAAEG,cAAWH,GAAA,CAAA;AAG5B,MAAMI,2BAA2BN,oBAAe,QAAfA,oBAAA,SAAA,SAAAA,gBAAiBO;AAClD,MAAMC,mBAAmBb,eAAeY;AAExC,MAAME,eAAe,EAAEH,4BACrBI,UAAUF,kBAAkBF,wBAAwB;AAEtD,SAAO;IACLF;IACAC;IACAI;;AAEJ;;;;;ACnCA,IAAME,cAA0C,SAACC,IAK9B;;MAJjBC,KAAcD,GAAAE,WAAdA,YAAYD,OAAA,SAAA,KAAE,IACdE,KAAAH,GAAAI,OAAAA,QAAKD,OAAA,SAAG,IAACA,IACTE,KAAAA,GAAAA,MAAAC,OAAI,OAAA,SAAG,KAAED,IACTE,UAAOP,GAAAO;AAEC,MAAAC,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,MAAMC,cAAYC,MAAA,KAAAN,SAAI,QAAJA,SAAA,SAAA,SAAAA,KAAMO,cAAQ,QAAAC,OAAA,SAAA,SAAAA,GAAAC,KAAAT,IAAA,OAAI,QAAA,OAAA,SAAA,SAAA,GAAEU,MAAM,GAAG,MAAK,CAAA;AACpDL,gBAAS,QAATA,cAAS,SAAA,SAATA,UAAWM,OAAO,IAAI,GAAGT,UAAUU,uCAAuC;AAE1E,SACEC,eAAAA,QAAAC,cAAA,OAAA;IACElB,WAAW,wBAAAmB,OAAwBjB,QAAQ,IAAI,WAAW,IAAE,GAAA,EAAAiB,OAAInB,SAAS;IACzEK;EAAiB,GAEjBY,eAAAA,QAAAC,cAACE,OAAK;IAACpB,WAAU;IAA8BqB,OAAOC,YAAYC;IAAaC,MAAMC,gBAAgBC;EAAU,GAC5G,GAAAP,OAAGjB,OAAK,GAAA,GACRI,UAAUqB,kDACV,IAAAR,OAAIV,UAAUmB,KAAK,GAAG,CAAC,CACnB,GACPX,eAAAA,QAAAC,cAACW,MAAI;IACHC,OAAM;IACNC,QAAO;IACPP,MAAMQ,UAAUC;IAChBC,WAAWC,WAAWC;EAAQ,CAElC,CAAK;AAET;;;;;AC/BA,IAAMC,qBAAqB,SAACC,IAEF;AADxB,MAAAC,KAAAD,GAAAE,WAAAA,YAAYD,OAAA,SAAA,KAAEA;AAEN,MAAAE,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,SACEC,eAAAA,QAAAC,cAAA,OAAA;IAAKL,WAAW,uDAAuDM,OAAAN,SAAS;EAAG,GACjFI,eAAAA,QAAAC,cAACE,OAAK;IACJP,WAAU;IACVQ,MAAMC,gBAAgBC;EAAU,GAE/BT,UAAUU,cACN,CACJ;AAET;;;;;ACtBA,IAAMC,SAAQ;AAER,SAAUC,qBAAqBC,IAIpC;AAHC,MAAAC,UAAOD,GAAAC;AAOD,MAAAC,SAAkCC,yBAAS,CAAC,GAA3CC,eAAYF,GAAA,CAAA,GAAEG,kBAAeH,GAAA,CAAA;AACpCI,gCAAU,WAAA;AACR,QAAIL,SAAS;AACXI,sBAAgB,CAAC;IAClB;EACH,GAAG,CAACJ,OAAO,CAAC;AACZ,MAAMM,WAAW,SAACC,GAAyC;AACzD,QAAMC,UAAUD,EAAEE;AAClB,QAAI;AACFL,sBAAgBI,QAAQE,eAAeF,QAAQG,YAAYH,QAAQI,YAAY;aACzEb,KAAA;IACN;;AAGJ,SAAO;IACLI;IACAU,uBAAuBC,YAAYR,UAAUT,MAAK;;AAEtD;SC5BgBkB,oBAAiB;AACzB,MAAAhB,KAGFiB,kBAAiB,GAFnBC,YAASlB,GAAAkB,WACThB,KAAAF,GAAAmB,gBAAAA,iBAAiBjB,OAAA,SAAA,SAAM;AAGzBI,gCAAU,WAAA;AACR,QAAIY,UAAUE,SAAS;AACrBF,gBAAUE,QAAQC,MAAMF,iBAAiBA;IAC1C;EACH,GAAG,CAACD,UAAUE,OAAO,CAAC;AAEtB,SAAO;AACT;ACMA,IAAME,wBAAwB;AAU9B,IAAMC,cAA0C,SAACvB,IAMhD;AALC,MAAAE,KAAAF,GAAAwB,WAAAA,YAAStB,OAAA,SAAG,KAAEA,IACduB,gBAAazB,GAAAyB,eACbC,yBAAsB,GAAA,wBACtBC,wBAAqB3B,GAAA2B,uBACrBC,0BAAuB5B,GAAA4B;AAEjB,MAAAC,KAqBFZ,kBAAiB,GApBnBa,cAAWD,GAAAC,aACXC,gBAAaF,GAAAE,eACbC,cAAWH,GAAAG,aACXC,cAAWJ,GAAAI,aACXC,sBAAmBL,GAAAK,qBACnBC,uBAAoBN,GAAAM,sBACpBC,0BAAuBP,GAAAO,yBACvBC,2BAAwBR,GAAAQ,0BACxBnB,YAASW,GAAAX,WACToB,mBAAgBT,GAAAS,kBAChBC,uBAAoBV,GAAAU,sBACpBC,qBAAkBX,GAAAW,oBAClBC,qBAAkBZ,GAAAY,oBAClBC,sBAAmBb,GAAAa,qBACnBC,oBAAiBd,GAAAc,mBACjBC,oBAAiBf,GAAAe,mBACjBC,YAAShB,GAAAgB,WACT5C,UAAO4B,GAAA5B,SACP6C,aAAUjB,GAAAiB,YACVC,cAAW,GAAA;AAGb,MAAMC,QAAQC,wBAAuB;AACrC,MAAMC,sBAAuB,OAAON,sBAAsB,aACtDd,YAAYqB,OAAQP,iBAAwD,IAC5Ed;AACJ,MAAMsB,sBAAsBJ,MAAMK,OAAOD;AAEzCpC,oBAAiB;AAEjB,MAAMsC,WAAW,WAAA;AACf,QAAM7C,UAAUS,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWE;AAC3B,QAAIX,WAAW,MAAM;AACnB;IACD;AAGC,QAAAG,YAGEH,QAAOG,WAFT2C,eAEE9C,QAAO8C,cADT5C,eACEF,QAAO;AAEX,QAAI+C,YAAY5C,WAAW,GAAG6C,aAAa,GAAG;AAC5CnB,uBAAgB;IACjB;AAED,QAAIkB,YAAYD,eAAe3C,WAAWD,cAAc8C,aAAa,KAAKxB,aAAa;AACrFM,2BAAqB,SAACvC,KAAU;AAAT,YAAA0D,WAAQ1D,IAAA,CAAA;AAC7B,YAAI0D,UAAU;AACZ,cAAI;AACFC;cAAW,WAAA;AAAM,uBAAAC,eAAqB,GAAG1C,SAAS;;;;;;cAKhD;YAAI;mBAIC2C,OAAO;UACd;QAEH;MACH,CAAC;IACF;AAED,QAAI,CAAClB,qBACAa,YAAYD,eAAe3C,WAAWD,cAAc8C,aAAa,KACjE,CAAC,CAACf,qBACL;AACAF,yBAAmB;QACjBsB,MAAMrB,mBAAmBsB;QACzBC,SAAS;UAAEC,SAASvB;QAAqB;MAC1C,CAAA;AACDU,0BAAoBc,KAAKxB,mBAAmB;IAC7C;;AAGH,MAAMyB,mBAAmB,WAAA;;AACvBjC,4BAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAsB,IAAI;AAC1BC,6BAAoB,QAApBA,yBAAoB,SAAA,SAApBA,qBAAuB,IAAI;AAC3BC,gCAAuB,QAAvBA,4BAAuB,SAAA,SAAvBA,wBAA0B,IAAI;AAC9B,UAAIpC,MAAAkB,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWE,aAAS,QAAApB,QAAA,SAAA,SAAAA,IAAAY,aAAY,IAAI;AACtCM,gBAAUE,QAAQR,cAAaiB,OAAA3B,MAAAgB,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWE,aAAO,QAAAlB,QAAA,SAAA,SAAAA,IAAES,kBAAY,QAAAkB,QAAA,SAAAA,MAAI,OAAMuC,MAAAC,MAAAnD,cAAS,QAATA,cAAS,SAAA,SAATA,UAAWE,aAAS,QAAAiD,QAAA,SAAA,SAAAA,IAAAxD,kBAAgB,QAAAuD,OAAA,SAAAA,KAAA;IAC9G;;AAQH,MAAME,aAAa,SAACC,yBAA+B;AAA/B,QAAAA,4BAAA,QAAA;AAAAA,gCAA+B;IAAA;AACjD,QAAMnD,UAAUF,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWE;AAC3B,QAAIA,SAAS;AACX,UAAMoD,SAASpD,QAAQT,eAAeS,QAAQR,YAAYQ,QAAQP;AAClE,UAAIT,eAAeoE,WACb,CAACD,2BAA2BnE,eAAeqD,gBAAgB;AAE/DrC,gBAAQR,aAAa4D,SAASpE;MAC/B;IACF;;AAGH,MAAMqE,iBAAiBC,0BAA0B;IAC/CC,SAAS3C;IACT4C,SAAS3C;IACTqB;IACApC;EACD,CAAA;AAEK,MAAAmD,KAA0CtE,qBAAqB;IAAEE;EAAO,CAAE,GAAxEa,wBAAqBuD,GAAAvD,uBAAEV,eAAY,GAAA;AAE3C,MAAIH,SAAS;AACX,WAAQ,OAAO2B,4BAA4B,aACvCA,wBAAuB,IACvBiD,eAAAA,QAAAC,cAACC,aAAW;MAACjB,MAAMkB,iBAAiBC;IAAQ,CAAA;EACjD;AACD,MAAI/B,oBAAoBgC,SAAS,GAAG;AAClC,QAAIxD,0BAA0B,OAAOA,2BAA2B,YAAY;AAC1E,aAAOA,uBAAsB;IAC9B;AACD,WAAOmD,eAAAA,QAAAC,cAACC,aAAW;MAACvD,WAAU;MAAqCsC,MAAMkB,iBAAiBG;IAAY,CAAA;EACvG;AAED,SACEN,eAAAA,QAAAC,cAAAD,eAAAA,QAAAO,UAEI,MAAA,CAACtC,cAAc+B,eAAAA,QAAAC,cAACC,aAAW;IAACjB,MAAMkB,iBAAiBC;EAAQ,CAAA,GAE7DJ,eAAAA,QAAAC;IAAA;IAAA;MAAKtD,WAAW,mCAAmC6D,OAAA7D,SAAS;;IAC1DqD,eAAAA,QAAAC,cAAA,OAAA;MAAKtD,WAAU;OACbqD,eAAAA,QAAAC,cAAA,OAAA;MAAKtD,WAAU;IAAgC,CAC/C,GAAAqD,eAAAA,QAAAC,cAAA,OAAA;MACEtD,WAAU;MACV8D,KAAKpE;MACLoC,UAAU,SAAC9C,GAAC;AACViE,uBAAc;AACd3D,8BAAsBN,CAAC;MACzB;OAGE0C,oBAAoBqC,IAAI,SAACC,GAAGC,KAAG;;AACvB,UAAA5D,MAIF6D,oBAAoB;QACtB5D,aAAaoB;QACbL;QACAR;QACAsD,cAAcF;QACdG,gBAAgBJ;QAChBK,gBAAgBnD;OACjB,GAVCoD,WAAQjE,IAAAiE,UACRC,cAAWlE,IAAAkE,aACXC,eAAYnE,IAAAmE;AASd,UAAMC,WAAUjG,MAAAwF,MAAiB,QAAjBA,MAAC,SAAA,SAADA,EAAmBU,YAAM,QAAAlG,QAAA,SAAA,SAAAA,IAAEmG,cAAWjG,MAAA8C,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOK,YAAM,QAAAnD,QAAA,SAAA,SAAAA,IAAEiG;AACrE,aACEtB,eAAAA,QAAAC,cAACsB,iBAAe;QAACC,SAASb;QAAGc,KAAKd,MAAC,QAADA,MAAC,SAAA,SAADA,EAAGe;QAAWN;MAAe,GAC7DpB,eAAAA,QAAAC,cAAC0B,SAAO;QACNC,cAAcnC;QACd7C;QACA4E,SAASb;QACTQ;QACAF;QACAC;QACApE;MAA6C,CAEjD,CAAiB;KAEpB,GAGDI,cAAcwD,IAAI,SAACC,GAAGC,KAAG;;AACjB,UAAA5D,MAGF6D,oBAAoB;QACtB5D,aAAaoB;QACbL;QACAR;QACAsD,cAAcF;QACdG,gBAAgBJ;QAChBK,gBAAgBnD;MACjB,CAAA,GATCoD,WAAQjE,IAAAiE,UACRC,cAAWlE,IAAA;AASb,UAAMoE,WAAUjG,MAAAwF,MAAiB,QAAjBA,MAAC,SAAA,SAADA,EAAmBU,YAAM,QAAAlG,QAAA,SAAA,SAAAA,IAAEmG,cAAWjG,MAAA8C,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOK,YAAM,QAAAnD,QAAA,SAAA,SAAAA,IAAEiG;AACrE,aACEtB,eAAAA,QAAAC,cAACsB,iBAAe;QAACC,SAASb;QAAGc,KAAKd,MAAC,QAADA,MAAC,SAAA,SAADA,EAAGe;QAAWN;MAAe,GAC7DpB,eAAAA,QAAAC,cAAC0B,SAAO;QACNC,cAAcnC;QACd7C;QACA4E,SAASb;QACTM;QACAC;QACApE;MAA6C,CAEjD,CAAiB;KAEpB,CAIA,CACF;KACJe,wBAAmB,QAAnBA,wBAAA,SAAA,SAAAA,oBAAqBgE,aACpB7B,eAAAA,QAAAC,cAAC6B,oBAAkB;MAACnF,WAAU;KAA+C;IAE9EuB,eACC8B,eAAAA,QAAAC,cAAC8B,aAAW;MACVpF,WAAU;MACVqF,OAAOnE,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAqBoE;MAC5BC,MAAMhE;MACNiE,SAAS,WAAA;;AACP,aAAIhH,MAAAkB,cAAS,QAATA,cAAS,SAAA,SAATA,UAAWE,aAAS,QAAApB,QAAA,SAAA,SAAAA,IAAAY,WAAW;AACjCM,oBAAUE,QAAQR,cAAaiB,OAAA3B,MAAAgB,cAAS,QAATA,cAAA,SAAA,SAAAA,UAAWE,aAAO,QAAAlB,QAAA,SAAA,SAAAA,IAAES,kBAAY,QAAAkB,QAAA,SAAAA,MAAI,OAAMuC,MAAAC,MAAAnD,cAAS,QAATA,cAAS,SAAA,SAATA,UAAWE,aAAS,QAAAiD,QAAA,SAAA,SAAAA,IAAAxD,kBAAgB,QAAAuD,OAAA,SAAAA,KAAA;QAC9G;AACD,YAAI,CAACzB,qBAAqB,CAAC,CAACD,qBAAqB;AAC/CU,8BAAoBc,KAAKxB,mBAAmB;AAC5CF,6BAAmB;YACjBsB,MAAMrB,mBAAmBsB;YACzBC,SAAS;cAAEC,SAASvB;YAAqB;UAC1C,CAAA;QACF;AACDR,4BAAoB,IAAI;AACxBC,6BAAqB,IAAI;AACzBC,gCAAwB,IAAI;MAC9B;IAAE,CACF;;IAIFhC,eAAekB,yBACbuD,eAAAA,QAAAC,cAAA,OAAA;MACEtD,WAAU;MACVwF,SAAS7C;MACT8C,WAAW9C;MACX+C,UAAU;MACVC,MAAK;IAAQ,GAEbtC,eAAAA,QAAAC,cAACsC,MAAI;MACHC,OAAM;MACNC,QAAO;MACPxD,MAAMyD,UAAUC;MAChBC,WAAWC,WAAWC;KAE1B,CAAK;EAGN,CACP;AAEJ;;;;;;;;AC7QA,IAAMC,qBAAqB;AAEH,SAAAC,sBAAsBC,IAAkB;;AAAhB,MAAAC,UAAOD,GAAAC;AACrD,MAAI,CAACC,cAAcD,OAAO,KAAK,CAACE,uBAAuBF,OAAO,KAAKG,eAAeH,OAAsB,GAAG;AACzG,WAAO;EACR;AACD,MAAII,eAAeC,gCAAgCL,OAAO;AAC1D,MAAI,CAACI,cAAc;AACjB,UACEE,KAAAN,QAAQC,mBAAiB,QAAAK,OAAA,SAAA,SAAAA,GAAAC,KAAAP,OAAA,OAEvBQ,eAAeR,OAAO,KACnBS,eAAeT,OAAO,IAE3B;AACAI,qBAAeM,uBAAuBV,OAAO;iBAE7CW,KAAAX,QAAQE,4BAA0B,QAAAS,OAAA,SAAA,SAAAA,GAAAJ,KAAAP,OAAA,MAEhCA,QAAQY,aAAaC,SAAS,KAC3BC,gBAAiBd,QAASY,aAAa,CAAC,CAAC,GAE9C;AACAR,qBAAeJ,QAAQY,aAAa,CAAC,EAAEG;IACxC;EACF;AACD,MAAIN,eAAeT,OAAsB,KAAKI,cAAc;AAC1D,WACEY,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAWrB;OACdmB,eAAAA,QAAAC,cAAA,SAAA;MACEE,OAAO;QACLC,OAAO;QACPC,QAAQ;;MAEVC,KAAKlB;IAAa,CAEtB,CAAK;EAER,YAAWmB,mBAAmBvB,OAAO,KAAKE,uBAAuBF,OAAO,MAAMI,cAAc;AAC3F,WACEY,eAAAA,QAAAC,cAACO,eAAa;MACZN,WAAWrB;MACXkB,KAAKX;MACLqB,KAAKC,wBAAwB1B,OAAO;MACpCoB,OAAM;MACNC,QAAO;MACPM,WAAS;IAAA,CAAA;EAGd,WAAUC,eAAe5B,OAAsB,GAAG;AACjD,WACEgB,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAWrB;IAAmB,GACjCmB,eAAAA,QAAAC,cAACY,MAAI;MACHC,MAAMC,UAAUC;MAChBC,WAAWC,WAAWC;MACtBf,OAAM;MACNC,QAAO;IAAM,CAEjB,CAAK;EAER,OAAM;AACL,WACEL,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAWrB;IAAmB,GACjCmB,eAAAA,QAAAC,cAACY,MAAI;MACHC,MAAMC,UAAUK;MAChBH,WAAWC,WAAWC;MACtBf,OAAM;MACNC,QAAO;IAAM,CAEjB,CAAK;EAER;AACH;AC7DwB,SAAAgB,kBAAkBtC,IAIlC;AAHN,MAAAmB,YAAS,GAAA,WACToB,kBAAevC,GAAAuC,iBACfC,UAAOxC,GAAAwC;AAEC,MAAAC,gBAAcC,2BAAWC,mBAAmB,EAAC;AACrD,MAAMC,cAAcL;AACpB,MAAMM,SAAUN,oBAAuC,QAAvCA,oBAAA,SAAA,SAAAA,gBAAyCM;AACzD,MAAMC,mBAAmB5C,cAAcqC,eAAe,KAAKpC,uBAAuBoC,eAAe,MAC5F,CAACnC,eAAemC,eAA8B;AAEnD,SACEtB,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAW4B,aAAa,CAAC,gCAAgC5B,SAAS,CAAC;EAAE,GAEtE2B,mBACE7B,eAAAA,QAAAC,cAACnB,uBAAqB;IAACE,SAAS2C;EAAY,CAAA,GAGhD3B,eAAAA,QAAAC,cAAA,OAAA;IACEC,WAAU;IACVC,OAAO;MACLC,OAAO,eAAe2B,OAAAF,kBAAkB,UAAU,SAAU,GAAA;MAC5DG,MAAMH,kBAAkB,SAAS;IAClC;EAAC,GAEF7B,eAAAA,QAAAC,cAACgC,OAAK;IACJ/B,WAAU;IACVY,MAAMoB,gBAAgBC;IACtBC,OAAOC,YAAYC;EAAe,GAEjC,GAAAP,OAAGP,UAAUe,+BAA6B,GAAA,EAAAR,OAAKH,UAAUA,OAAOY,WAAYZ,OAAOY,WAAWhB,UAAUiB,OAAO,CAC3G,GACPzC,eAAAA,QAAAC,cAACgC,OAAK;IACJ/B,WAAU;IACVY,MAAMoB,gBAAgBQ;IACtBN,OAAOC,YAAYM;EAAe,GAEjCnD,eAAemC,WAAW,KAAK,CAACiB,aAAajB,WAAW,KAAKH,UAAUqB,sCACvEpD,eAAekC,WAAW,KAAKH,UAAUsB,uCACzCF,aAAajB,WAAW,KAAKH,UAAUuB,oCACvCC,cAAc1B,eAA8B,KAAMA,gBAAgCtC,SAClFiE,oBAAoB3B,eAAe,MAAM4B,kBAAkBC,QAAQC,wBAAwBzB,WAAW,GAErGzC,uBAAuBoC,eAAkC,KACtD,GAAAS,OAAIJ,YAAqC/B,aAAaC,QAAM,SAAA,GAChEV,eAAemC,eAA8B,KAAKE,UAAU6B,aACxD,CACJ,GACLrD,eAAAA,QAAAC,cAACY,MAAI;IACHX,WAAU;IACVY,MAAMC,UAAUuC;IAChBrC,WAAWC,WAAWC;IACtBf,OAAM;IACNC,QAAO;IACPkD,SAAS,WAAM;AAAA,aAAAhC,QAAQD,eAAe;IAAvB;EAAyB,CAE5C,CAAK;AAET;;;;;;;;;AC/EO,IAAMkC,sBAAsB;EACjCC,WAAW;EACXC,iBAAiB;EACjBC,WAAW;EACXC,WAAW;;AAab,IAAMC,QAAO,WAAmB;AAAA;IAEnBC,mBAAmB,SAACC,IAGL;MAF1BC,KAAyBD,GAAAE,oBAAzBA,qBAAkBD,OAAA,SAAGH,QAAIG,IACzBE,KAAAH,GAAAI,kBAAAA,mBAAmBD,OAAA,SAAAL,QAAIK;AAEf,MAAAE,SAAWC,wBAAuB,EAAE;AACpC,MAAAC,cAAgBF,OAAME;AACtB,MAAAC,mBAAqBD,YAAWC;AACxC,MAAMC,gBAAgBC,wBAAuB;AACrC,MAAAC,eAAiBF,cAAaE;AAEhC,MAAAC,SAAkCC,yBAAe,IAAI,GAApDC,eAAYF,GAAA,CAAA,GAAEG,kBAAeH,GAAA,CAAA;AAC9B,MAAAI,SAAwCH,yBAA8BpB,oBAAoBC,SAAS,GAAlGuB,kBAAeD,GAAA,CAAA,GAAEE,qBAAkB,GAAA,CAAA;AAC1CC,gCAAU,WAAA;AACR,QAAIR,gBAAgBM,oBAAoBxB,oBAAoBC,WAAW;AACrEwB,yBAAmBzB,oBAAoBE,eAAe;IACvD;EACH,GAAG,CAACgB,YAAY,CAAC;AAEjB,MAAMS,YAAQC,4BAAY,WAAA;AACxBZ,sBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAeW,MAAM;MACnBlB,oBAAoB,WAAA;AAClBgB,2BAAmBzB,oBAAoBG,SAAS;AAChDM,2BAAkB;AAClBoB,mBAAU;;MAEZlB,kBAAkB,SAACmB,WAAS;AAC1BL,2BAAmBzB,oBAAoBI,SAAS;AAChDO,yBAAiBmB,SAAS;AAC1BR,wBAAgBQ,SAAS;AACzBC,kBAAS;MACX;IACD,CAAA;EACH,GAAG,CAACtB,oBAAoBE,gBAAgB,CAAC;AACzC,MAAMqB,WAAOJ,4BAAY,WAAA;AACvBZ,sBAAa,QAAbA,kBAAa,SAAA,SAAbA,cAAegB,KAAI;AACnBD,cAAS;EACX,GAAG,CAACf,aAAa,CAAC;AAClB,MAAMiB,aAASL,4BAAY,WAAA;AACzBI,SAAI;AACJV,oBAAgB,IAAI;EACtB,GAAG,CAACN,aAAa,CAAC;AAGZ,MAAAkB,SAAoCd,yBAAiB,CAAC,GAArDe,gBAAaD,GAAA,CAAA,GAAEE,mBAAgBF,GAAA,CAAA;AACtC,MAAIG,QAAwC;AAC5C,WAASR,aAAU;AACjBE,cAAS;AACTK,qBAAiB,CAAC;AAClB,QAAME,WAAWC,YAAY,WAAA;AAC3BH,uBAAiB,SAAAI,UAAQ;AACvB,YAAMC,UAAUD,WAAW;AAC3B,YAAIC,UAAU1B,kBAAkB;AAC9BgB,oBAAS;QACV;AACD,eAAOU;MACT,CAAC;OACA,GAAG;AACNJ,YAAQC;EACV;AACA,WAASP,YAAS;AAChBW,kBAAcL,KAAK;AACnBA,YAAQ;EACV;AACAX,gCAAU,WAAA;AACR,QAAIS,gBAAgBpB,kBAAkB;AACpCiB,WAAI;IACL;KACA,CAACG,eAAepB,kBAAkBiB,IAAI,CAAC;AAE1C,SAAQ;IACNL;IACAK;IACAC;IACAT;IACAW;IACAd;IACAsB,gBAAgB5B;;AAEpB;;;;AC3GO,IAAM6B,0BAA0B;EACrCC,iBAAiB;EACjBC,WAAW;EACXC,eAAe;EACfC,SAAS;;ACIJ,IAAMC,gBAAgB,SAACC,IAET;AADnB,MAAAC,aAAUD,GAAAC;AAEV,UAAQA,YAAU;IAChB,KAAKP,wBAAwBC,iBAAiB;AAC5C,aACEO,eAAAA,QAAAC,cAAA,OAAA;QAAKC,WAAU;MAAqC,CAAG;IAE1D;IACD,KAAKV,wBAAwBE,WAAW;AACtC,aACEM,eAAAA,QAAAC,cAAA,OAAA;QAAKC,WAAU;MAAmC,CAAG;IAExD;IACD,KAAKV,wBAAwBG,eAAe;AAC1C,aACEK,eAAAA,QAAAC,cAACE,MAAI;QACHD,WAAU;QACVE,OAAM;QACNC,QAAO;QACPC,MAAMC,UAAUC;QAChBC,WAAWC,WAAWC;MAAgB,CAAA;IAG3C;IACD,KAAKnB,wBAAwBI,SAAS;AACpC,aACEI,eAAAA,QAAAC,cAAA,OAAA;QAAKC,WAAU;SACbF,eAAAA,QAAAC,cAAA,OAAA;QAAKC,WAAU;MAA0C,CACzD,GAAAF,eAAAA,QAAAC,cAAA,OAAA;QAAKC,WAAU;MAA0C,CAC3D,CAAK;IAER;IACD;AACE,aAAO;EACV;AACH;ICnBaU,oBAAoB,SAACd,IAWT;AAVvB,MAAAe,KAAAf,GAAAgB,eAAAA,gBAAgBD,OAAA,SAAAE,6BAA0B,IAC1CC,eAAYlB,GAAAkB,cACZC,KAAAA,GAAAA,cAAAC,eAAeD,OAAA,SAAA,IAAC,IAChBE,cAAWrB,GAAAqB,aACXC,gBAAatB,GAAAsB,eACbC,iBAAcvB,GAAAuB,gBACdC,gBAAaxB,GAAAwB,eACbC,qBAAkB,GAAA,oBAClBC,sBAAmB1B,GAAA0B,qBACnBC,qBAAkB3B,GAAA2B;AAEZ,MAAAC,SAAoCC,yBAAiB,CAAC,GAArDC,gBAAaF,GAAA,CAAA,GAAEG,mBAAgBH,GAAA,CAAA;AACtC,MAAMI,sBAAkBC,wBAAQ,WAAM;AAAA,WAAAZ,gBAAgB3B,wBAAwBC;EAAxC,GAAyD,CAAC0B,WAAW,CAAC;AAC5G,MAAMa,kBAAcD,wBAAQ,WAAM;AAAA,WAAAZ,gBAAgB3B,wBAAwBE;EAAxC,GAAmD,CAACyB,WAAW,CAAC;AAClG,MAAMc,2BAAuBF,wBAAQ,WAAA;AACnC,QAAIZ,gBAAgB3B,wBAAwBC,mBACvC0B,gBAAgB3B,wBAAwBE,WAC3C;AACA,aAAOoB,gBAAgBI;IACxB;AACD,WAAO;KACN,CAACC,aAAaL,eAAeI,YAAY,CAAC;AAC7C,MAAMgB,iBAAaH,wBAAQ,WAAA;AACzB,WACEZ,gBAAgB3B,wBAAwBG,iBACrCwB,gBAAgB3B,wBAAwBI;EAE/C,GAAG,CAACuB,WAAW,CAAC;AACR,MAAAgB,YAAcC,gBAAe,EAAE;AAEvC,MAAMC,sBAAsB,WAAA;AAC1B,QAAMC,cAAcC,KAAKC,IAAG;AAC5B,QAAIF,cAAcV,gBAAgBa,kCAAkC;AAClErB,oBAAa;AACbS,uBAAiBS,WAAW;IAC7B;;AAEH,MAAMI,2BAAuBC,4BAAY,WAAA;AACvC,QAAML,cAAcC,KAAKC,IAAG;AAC5B,QAAIF,cAAcV,gBAAgBa,kCAAkC;AAClEpB,qBAAeF,WAAW;AAC1BU,uBAAiBS,WAAW;IAC7B;EACH,GAAG,CAACnB,WAAW,CAAC;AAChB,MAAMyB,sBAAsB,WAAA;AAC1B,QAAMN,cAAcC,KAAKC,IAAG;AAC5B,QAAIF,cAAcV,gBAAgBa,kCAAkC;AAClE,UAAI,CAACR,sBAAsB;AACzBX,sBAAa;MACd;AACDO,uBAAiBS,WAAW;IAC7B;;AAGH,SACEtC,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;KACbF,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAuD,GACpEF,eAAAA,QAAAC,cAAC4C,aAAW;IACV3C,WAAU;IACV4C,UAAUhB;IACViB,SAAS/B;IACTgC,aAAa9B;EAAa,CAE9B,CAAK,GACHc,cAAgBhC,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;GAAoD,IAAI,MACzFF,eAAAA,QAAAC,cAACgD,cAAY;IACX/C,WAAU;IACVgD,MAAMhB,aAAalB,eAAeE,eAAeA;IACjDiC,YAAYrB,kBAAkBsB,YAAYC,iBAAiBD,YAAYE;EAAY,CAEvF,CAAK,GACLtD,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;MAEXqB,uBAAA,QAAAA,uBAAkB,SAAA,SAAlBA,mBAAkB,MAChBvB,eAAAA,QAAAC,cAACsD,YAAU;IACTrD,WAAU;IACVsD,SAASnB;IACToB,kBAAgB;EAAA,GAEhBzD,eAAAA,QAAAC,cAACyD,OAAK;IACJpD,MAAMqD,gBAAgBC;IACtBC,OAAOT,YAAYU;KAElB3B,UAAU4B,cACN,CACG,IAIdvC,wBAAA,QAAAA,wBAAmB,SAAA,SAAnBA,oBAAsBL,WAAW,MAC/BnB,eAAAA,QAAAC,cAAA,OAAA;IACEC,WAAU;IACVsD,SAASd;EAAqB,GAE9B1C,eAAAA,QAAAC,cAACJ,eAAa;IAACE,YAAYoB;GAC7B,CAAK,IAIPM,uBAAA,QAAAA,uBAAkB,SAAA,SAAlBA,mBAAkB,MAChBzB,eAAAA,QAAAC,cAAA,OAAA;IACEC,WAAW,mDAAA8D,OAAmD/B,uBAAuB,4BAA4B,EAAE;IACnHuB,SAASZ;EAAoB,GAE7B5C,eAAAA,QAAAC,cAACE,MAAI;IACHC,OAAM;IACNC,QAAO;IACPC,MAAMC,UAAU0D;IAChBxD,WAAWwB,uBAAuBvB,WAAWwD,kBAAkBxD,WAAWyD;GAE9E,CAAK,CAGN,CACF;AAET;;;ICxHaC,2BAA2B,SAACC,IAIT;;AAH9B,MAAAC,UAAO,GAAA,SACPC,gBAAaF,GAAAE,eACbC,gBAAaH,GAAAG;AAEb,MAAMC,WAAOC,uBAAeC,OAAM,CAAE,EAAEC;AAChC,MAAAC,SAA4BC,yBAAe,IAAI,GAA9CC,YAASF,GAAA,CAAA,GAAEG,eAAYH,GAAA,CAAA;AACxB,MAAAI,SAAwCH,yBAAkCI,wBAAwBC,eAAe,GAAhHC,kBAAeH,GAAA,CAAA,GAAEI,qBAAkB,GAAA,CAAA;AACpC,MAAAC,SAA2BR,yBAAS,KAAK,GAAxCS,cAAWD,GAAA,CAAA,GAAEE,YAASF,GAAA,CAAA;AACvB,MAAAG,SAA4BX,yBAAS,KAAK,GAAzCY,aAAUD,GAAA,CAAA,GAAEE,cAAWF,GAAA,CAAA;AACxB,MAAAG,SAA4Bd,yBAAS,KAAK,GAAzCe,YAASD,GAAA,CAAA,GAAEE,eAAYF,GAAA,CAAA;AACtB,MAAAG,YAAcC,gBAAe,EAAE;AAC/B,MAAAC,SAAWC,wBAAuB,EAAE;AAC5C,MAAMC,qBAAmBC,KAAAH,WAAA,QAAAA,WAAA,SAAA,SAAAA,OAAQI,iBAAW,QAAAD,OAAA,SAAA,SAAAA,GAAED,qBAAoBG;AAC5D,MAAAC,KAOFC,iBAAiB;IACnBC,oBAAoB,WAAA;AAClBpB,yBAAmBH,wBAAwBwB,SAAS;;IAEtDC,kBAAkB,SAAC5B,YAAS;AAC1BC,mBAAaD,UAAS;IACxB;EACD,CAAA,GAbC6B,QAAKL,GAAAK,OACLC,OAAIN,GAAAM,MACJC,SAAMP,GAAAO,QACNC,gBAAa,GAAA,eACbC,kBAAe,GAAA,iBACfC,iBAAc,GAAA;AAShB,MAAMC,cAAcC,eAAe;IACjCC,YAAY9C,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAAS+C;IACrBC,KAAK7C;IACLM;EACD,CAAA;AAEC,MAAAwC,OAIEL,YAAW,MAHbM,QAGEN,YAAWM,OAFbC,eAEEP,YAFUO,cACZC,gBACER,YAAW;AACf,MAAMS,kBAAkBT,YAAYL;AAGpCe,gCAAU,WAAA;AACR,QAAIC,wBAAwBvD,OAAO,KAAKwD,uBAAuBxD,OAAO,GAAG;AACvEqB,kBAAY,IAAI;IACjB,OAAM;AACLA,kBAAY,KAAK;IAClB;KACA,CAACrB,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAASyD,QAAQzD,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS0D,UAAU1D,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS2D,YAAY,CAAC;AAG9DL,gCAAU,WAAA;AACR,QAAIrC,eAAeR,WAAW;AAC5BP,oBAAcO,WAAWgC,aAAa;AACtCvB,gBAAU,KAAK;AACfR,mBAAa,IAAI;IAClB;KACA,CAACO,aAAaR,WAAWgC,aAAa,CAAC;AAE1Ca,gCAAU,WAAA;AACR,QAAI7C,WAAW;AACb,UAAIgC,gBAAgBZ,kBAAkB;AACpCd,2BAAmBH,wBAAwBC,eAAe;AAC1DH,qBAAa,IAAI;MAClB,WAAU0C,kBAAkBQ,oBAAoBC,SAAS;AACxD9C,2BAAmBH,wBAAwBiD,OAAO;MACnD,OAAM;AACL9C,2BAAmBH,wBAAwBkD,aAAa;MACzD;IACF;KACA,CAACrD,WAAWgC,eAAeW,aAAa,CAAC;AAE5C,SACEW,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAsC,GACnDF,eAAAA,QAAAC,cAACE,mBAAiB;IAChBC,cAAczB,oBAAoB0B,oBAAoBC,YAAYlB,eAAeV;IACjF6B,cAAc5B,oBAAoB0B,oBAAoBC,YAAY5B,gBAAgBE;IAClF4B,aAAazD;IACbb,eAAe,WAAA;AACbA,oBAAa;AACbuC,aAAM;AACNa,sBAAe;;IAEjBnD,eAAe,WAAA;AACb,UAAIkB,YAAY;AACdI,qBAAa,IAAI;AACjBT,2BAAmBH,wBAAwBC,eAAe;MAC3D,OAAM;AACL0B,aAAI;AACJW,cAAK;AACLhC,kBAAU,IAAI;MACf;;IAEHsD,gBAAgB,SAACC,MAAI;AACnB,cAAQA,MAAI;QACV,KAAK7D,wBAAwBC,iBAAiB;AAC5CwC,0BAAe;AACff,gBAAK;AACL;QACD;QACD,KAAK1B,wBAAwBwB,WAAW;AACtC,cAAIK,iBAAiBZ,oBAAoB,CAACT,YAAY;AACpDmB,iBAAI;qBACKnB,YAAY;AACrBoB,mBAAM;AACNhB,yBAAa,IAAI;AACjBT,+BAAmBH,wBAAwBC,eAAe;UAC3D,OAAM;AACL2B,mBAAM;AACNzB,+BAAmBH,wBAAwBC,eAAe;UAC3D;AACD;QACD;QACD,KAAKD,wBAAwBkD,eAAe;AAC1Cb,eAAI;AACJ;QACD;QACD,KAAKrC,wBAAwBiD,SAAS;AACpCX,gBAAK;AACL;QACD;MACF;IACH;GAEF,GACE3B,aACEwC,eAAAA,QAAAC,cAACU,OAAK;IACJT,WAAU;IACVU,WAAWnB,uBAAuBxD,OAAO,IACrCyB,UAAUmD,mDACVnD,UAAUoD;IAEdC,YAAU;IACVC,uBAAqB;IACrBC,UAAU,WAAA;AACRxD,mBAAa,KAAK;AAClBvB,oBAAa;IACf;KAEA8D,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAkD,GAC/DF,eAAAA,QAAAC,cAACiB,QAAM;IACLhB,WAAU;IACVQ,MAAMS,YAAYC;IAClBC,MAAMC,YAAYC;IAClBC,SAAS,WAAA;AACP/D,mBAAa,KAAK;AAClBvB,oBAAa;IACf;EAAE,GAEDwB,UAAU+D,UACL,CACL,CACA,CAGR;AAET;ACzJO,IAAMC,uBAAuB,SAAC1F,IAIA+B,IAEH;AALhC,MAAA4D,kBAAe,GAAA,iBACfC,2BAAwB5F,GAAA4F,0BACxBC,eAAY7F,GAAA6F;AAEZ,MAAAC,SAAM/D,GAAA+D;AAEE,MAAApE,YAAcC,gBAAe,EAAE;AAC/B,MAAAC,SAAWC,wBAAuB,EAAE;AAC5C,MAAMkE,uBAAuBnE,WAAM,QAANA,WAAA,SAAA,SAAAA,OAAQmE;AACrC,MAAMC,iCAAiCpE,WAAM,QAANA,WAAA,SAAA,SAAAA,OAAQoE;AACvC,MAAAC,YAAcC,sBAAqB,EAAE;AAE7C,MAAMC,wBAAoBC,4BAAY,SAACC,UAAkB;AACvD,QAAMC,QAAgBC,MAAMC,KAAKH,QAAQ;AAGzC,QAAI,CAACV,mBAAmB,CAACC,0BAA0B;AACjDE,aAAOW,QAAQ,kEAAkE;QAAEd;QAAiBC;MAAwB,CAAE;AAC9H;IACD;AACD,QAAIU,MAAMI,WAAW,GAAG;AACtBZ,aAAOW,QAAQ,2DAA2D;QAAEH;MAAO,CAAA;AACnF;IACD;AACD,QAAIA,MAAMI,SAASV,gCAAgC;AACjDF,aAAOa,KAAK,+DAAA,OAA+DX,8BAA8B,CAAE;AAC3GC,gBAAU;QACRW,YAAY;UACVhC,WAAW,SAASiC,OAAAb,gCAAuD,yBAAA;UAC3EjB,YAAY;;QAEd+B,cAAc,SAAC9G,KAAc;AAAZ,cAAA+G,aAAU/G,IAAA+G;AAAO,iBAChC/C,eAAAA,QAAAC,cAAC+C,aAAW;YACVtC,MAAMS,YAAYC;YAClB6B,YAAYvF,UAAU+D;YACtByB,kBAAgB;YAChBjC,UAAU8B;YACVI,UAAUJ;UAAW,CAAA;QANS;MASnC,CAAA;AACD;IACD;AACD,QAAIT,MAAMc,KAAK,SAACC,OAAe;AAAA,aAAAA,MAAKhC,OAAOU;IAAZ,CAAgC,GAAG;AAEhED,aAAOa,KAAK,mEAAA,OAAmEZ,oBAAoB,CAAE;AACrG,UAAMuB,UAAU,OAAO;AACvBrB,gBAAU;QACRW,YAAY;UACVhC,WAAW,gCAAgCiC,OAAAU,KAAKC,MAAMzB,uBAAuBuB,OAAO,GAAO,MAAA;UAC3FvC,YAAY;;QAEd+B,cAAc,SAAC9G,KAAc;AAAZ,cAAA+G,aAAU/G,IAAA+G;AAAO,iBAChC/C,eAAAA,QAAAC,cAAC+C,aAAW;YACVtC,MAAMS,YAAYC;YAClB6B,YAAYvF,UAAU+D;YACtByB,kBAAgB;YAChBjC,UAAU8B;YACVI,UAAUJ;UAAW,CAAA;QANS;MASnC,CAAA;AACD;IACD;AAED,QAAIT,MAAMI,WAAW,GAAG;AACtBZ,aAAOa,KAAK,iDAAiD;AACtD,UAAAU,OAAQf,MAAK,CAAA;AACpBX,sBAAgB0B,MAAMxB,YAAY;IACnC,WAAUS,MAAMI,SAAS,GAAG;AAC3BZ,aAAOa,KAAK,uDAAuD;AACnE,UAAMc,eAA0B,CAAA;AAChC,UAAMC,eAA0B,CAAA;AAChCpB,YAAMqB,QAAQ,SAACN,OAAU;AACvB,YAAIO,QAAQP,MAAK3C,IAAI,GAAG;AACtB+C,uBAAWI,KAAKR,KAAI;QACrB,OAAM;AACLK,uBAAWG,KAAKR,KAAI;QACrB;MACH,CAAC;AAED,aAAOK,aAAWI,OAAO,SACvBC,iBACAC,MAAU;AAEV,eAAOD,gBAAgBE,KAAK,WAAA;AAC1B,iBAAOtC,gBAAgBqC,MAAcnC,YAAY;QACnD,CAAC;MACH,GAAI,WAAA;AACF,YAAI4B,aAAWf,WAAW,GAAG;AAC3B,iBAAOwB,QAAQC,QAAO;QACvB,WAAUV,aAAWf,WAAW,GAAG;AAClC,iBAAOf,gBAAgB8B,aAAW,CAAC,GAAG5B,YAAY;QACnD,OAAM;AACL,iBAAOD,yBAAyB6B,cAAY5B,YAAY;QACzD;QACF,CAAG;IACL;KACA,CACDF,iBACAC,0BACAC,YAAY,CACb;AAED,SAAO,CAACM,iBAAiB;AAC3B;;;;;AC7GA,IAAMiC,sBAAsB,SAC1BC,OACAC,KAAgC;;AAG9B,MAAAC,QAIEF,MAAK,OAHPG,uBAGEH,MAAKG,sBAFPC,yBAEEJ,MAFoBI,wBACtBC,wBACEL,MAAK;AACT,MAAMM,eAAeN,MAAMO;AAC3B,MAAMC,iBAAiBC,kBAAiB;AAEtC,MAAAC,sBAUEF,eAAcE,qBAThBC,cASEH,eAAcG,aARhBC,eAQEJ,eAAcI,cAPhBC,cAOEL,eAPSK,aACXC,kBAMEN,eAAcM,iBALhBC,mBAKEP,eALcO,kBAChBC,2BAIER,eAJsBQ,0BACxBC,kBAGET,eAHaS,iBACfC,kBAEEV,eAAcU,iBADhBC,wBACEX,eAAcW;AAClB,MAAMC,cAAcC,wBAAuB;AACnC,MAAAC,WAAaC,qBAAoB,EAAE;AAC3C,MAAMC,UAAUd;AAEV,MAAAe,KAMFL,YAAYM,QALdC,WAAQ,GAAA,UACRC,mBAAgB,GAAA,kBAChBC,cAAW,GAAA,aACXC,wBAAqB,GAAA,uBACrBC,SAAM,GAAA;AAER,MAAMC,iCACJC,KAAAzB,eAAewB,mCACZ,QAAAC,OAAA,SAAAA,KAAAb,YAAYM,OAAOM;AAExB,MAAME,uBAAsBL,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaM,oBAAmB;AAC5D,MAAMC,0BAAyBP,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaQ,uBAAsB;AAE1D,MAAAC,gBAAcC,2BAAWC,mBAAmB,EAAC;AAC/C,MAAAC,SAAwCC,yBAAS,EAAE,GAAlDC,kBAAeF,GAAA,CAAA,GAAEG,qBAAkBH,GAAA,CAAA;AAEpC,MAAAI,SAAsCH,yBAAS,CAAA,CAAE,GAAhDI,iBAAcD,GAAA,CAAA,GAAEE,oBAAiBF,GAAA,CAAA;AAClC,MAAAG,SAA0CN,yBAAS,CAAA,CAAE,GAApDO,mBAAgBD,GAAA,CAAA,GAAEE,sBAAmBF,GAAA,CAAA;AACtC,MAAAG,SAAkCT,yBAAS,IAAI,GAA9CU,eAAYD,GAAA,CAAA,GAAEE,kBAAeF,GAAA,CAAA;AAC9B,MAAAG,SAAoDZ,yBAAS,CAAA,CAAE,GAA9Da,wBAAqBD,GAAA,CAAA,GAAEE,2BAAwBF,GAAA,CAAA;AAChD,MAAAG,SAA4Cf,yBAAS,IAAI,GAAxDgB,oBAAiBD,GAAA,CAAA,GAAEE,uBAAoBF,GAAA,CAAA;AACxC,MAAAG,SAAoDlB,yBAAS,KAAK,GAAjEmB,wBAAqBD,GAAA,CAAA,GAAEE,2BAAwBF,GAAA,CAAA;AACtD,MAAMrD,WAAWD,gBACZ,CAACK,eACDoD,wBAA8BvC,OAAO,KACrCuC,uBAA6BvC,OAAO,KACpC,CAACG;AACN,MAAMqC,eAAaD,WAAiBvC,OAAO;AAC3C,MAAMyC,cAAczC,YAAO,QAAPA,YAAA,SAAA,SAAAA,QAASyC;AAE7B,MAAMC,8BAA8BvC,YAC/BC,oBACAe,gBAAgBwB,SAAS,KACzB,CAACJ,wBAA8BvC,OAAO,KACtC,CAACuC,uBAA6BvC,OAAO,KACrC,CAACyC;AAGNG,gCAAU,WAAA;AACRxB,uBAAmB,EAAE;AACrBG,sBAAkB,CAAA,CAAE;AACpBG,wBAAoB,CAAA,CAAE;AACtBG,oBAAgB,IAAI;AACpBG,6BAAyB,CAAA,CAAE;AAC3BG,yBAAqB,IAAI;AACzBG,6BAAyB,KAAK;EAChC,GAAG,CAACtC,YAAA,QAAAA,YAAA,SAAA,SAAAA,QAAS6C,GAAG,CAAC;AAEjB,MAAMC,eAAeC,oBAAoB;IAAEtE,KAAKA,OAAOiB;KAAmB;IAAEa;EAAM,CAAE;AACpF,MAAMyC,eAAcF,iBAAA,QAAAA,iBAAA,SAAA,SAAAA,aAAcH,UAASjC;AAE3CkC,gCAAU,WAAA;AACRrB,sBAAkBD,eAAe2B,OAAO,SAACxC,KAAU;AAAR,UAAAyC,SAAMzC,IAAAyC;AAC/C,UAAMC,IAAI1B,iBAAiB2B,QAAQF,MAAM;AACzC,UAAIC,IAAI,GAAG;AACT,eAAO;MACR,OAAM;AACL1B,yBAAiB4B,OAAOF,GAAG,CAAC;AAC5B,eAAO;MACR;IACH,CAAC,CAAC;EACJ,GAAG,CAAC1B,gBAAgB,CAAC;AAGd,MAAA6B,oBAAqBC,qBAAqB;IAC/CjE;IACAE;IACAJ;KACC;IACDmB;GACD,EAAC,CAAA;AAGF,MAAIkC,eAAe,CAACD,cAAY;AAC9B,WAAO;EACR;AAED,SACEgB,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAW,iCAAiCC,OAAAtB,wBAAwB,oBAAoB,EAAE;EAAG,GAE9FK,+BACEc,eAAAA,QAAAC,cAACG,sBAAoB;IACnBC,gBAAgB1C;IAChB2C,YAAY5B;IACZvC;IACAoE,iBAAiB,SAACC,MAAI;AACpB,UAAIA,MAAM;AACRzC,0BAAsB0C,cAAAA,cAAA,CAAA,GAAA3C,gBAAgB,IAAA,GAAA,CAAA0C,IAAI,GAAA,KAAA,CAAA;MAC3C;AACD5C,yBAAmB,EAAE;AACrBS,sBAAgBmC,IAAI;AACpB7B,2BAAqB,IAAI;;IAE3B+B,mBAAmB,WAAA;AACjB/B,2BAAqB,IAAI;;IAE3BgC,cAAc,SAACC,OAAK;AAClBpC,+BAAyBoC,KAAK;;IAEhCC,gBAAgBrB;IAChBrC,iBAAiBD;IACjBG,oBAAoBD;EAAuB,CAC3C,GAGLxB,gBACCoE,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAqD,GAClEF,eAAAA,QAAAC,cAACa,mBAAiB;IAChBC,iBAAiBnF;IACjBoF,SAAS,WAAM;AAAA,aAAA/E,gBAAgB,IAAI;IAApB;GAEnB,CAAK,GAGL4C,wBAEImB,eAAAA,QAAAC,cAACgB,0BAAwB;IACvBzE;IACA0E,eAAe,SAACC,cAAcC,UAAQ;AACpCrF,uBAAiBoF,cAAcC,UAAUxF,YAAY;AACrDK,sBAAgB,IAAI;AACpB6C,+BAAyB,KAAK;;IAEhCuC,eAAe,WAAA;AACbvC,+BAAyB,KAAK;IAChC;EAAE,CAAA,IAIJkB,eAAAA,QAAAC,cAACqB,cAAY;IACXpB,WAAU;IACVhF;IACAqG,YAAY/E,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS6C;IACrBmC,qBAAqBpD;IACrBxB;IACAE;IACA2E,iCAAiCzE;IACjC0E,yBAAyB,WAAA;AACvB5C,+BAAyB,IAAI;;IAE/Bf;IACAvB;IACAmF,aACG/F,gBAAgB0B,UAAUsE,4CACvB7C,wBAA8BvC,OAAO,KAAKc,UAAUuE,yCACpD9C,uBAA6BvC,OAAO,MACtCF,WAAWgB,UAAUwE,2CAA2CxE,UAAUyE;IAG9E9G,KAAKA,OAAOiB;IACZX;IACAJ;IACAE;IACAD;IACA4G,eAAe,WAAA;AACbxF,kBAAO,QAAPA,YAAO,SAAA,SAAPA,QAASyF,YAAW;;IAEtBC,eAAe,SAACjF,KAA4B;;UAA1BkF,UAAOlF,IAAAkF,SAAEC,kBAAenF,IAAAmF;AACxCvG,kBAAY;QACVsG;QACAvG;QACAkC;QACAsE;MACD,CAAA;AACDxE,yBAAmB,EAAE;AACrBG,wBAAkB,CAAA,CAAE;AACpB9B,sBAAgB,IAAI;AACpB,OAAAQ,MAAAD,YAAO,QAAPA,YAAO,SAAA,SAAPA,QAAS6F,eAAS,QAAA5F,QAAA,SAAA,SAAAA,IAAA,KAAA,OAAA;;IAEpB6F,cAAc,SAACC,UAAkB;AAC/BzC,wBAAkByC,QAAQ;AAC1BtG,sBAAgB,IAAI;;IAEtBuG,iBAAiB,SAAChC,MAAI;AACpB,WAAIpC,iBAAY,QAAZA,iBAAY,SAAA,SAAZA,aAAcsB,aAAWc,SAAI,QAAJA,SAAI,SAAA,SAAJA,KAAMd,SAAQ;AACzCrB,wBAAgB,IAAI;AACpBT,2BAAmB,EAAE;MACtB;;IAEH6E,uBAAuB,SAACC,aAAW;AACjC9E,yBAAmB8E,WAAW;;IAEhCC,2BAA2B,SAACC,SAAO;AACjC1E,0BAAoB0E,OAAO;;IAE7BC,WAAW,SAACC,GAAC;AACX,UAAI5D,gCAA+BX,0BAAqB,QAArBA,0BAAqB,SAAA,SAArBA,sBAAuBY,UAAS,MAC5D2D,EAAEC,QAAQC,iBAAiBC,SAASzD,eAAgBsD,EAAEC,QAAQC,iBAAiBE,WAAWJ,EAAEC,QAAQC,iBAAiBG,YAC1H;AACAxE,6BAAqBmE,CAAC;AACtB,eAAO;MACR;AACD,aAAO;IACT;EAAE,CACF,CAGL;AAET;AAEA,IAAA,wBAAe9C,eAAAA,QAAMoD,WAAWrI,mBAAmB;;;;;ACnOnD,IAAMsI,YAAsC,SAACC,IAa5B;;AAZf,MAAAC,YAASD,GAAAC,WACTC,0BAAuBF,GAAAE,yBACvBC,2BAAwBH,GAAAG,0BACxBC,yBAAsBJ,GAAAI,wBACtBC,sBAAmBL,GAAAK,qBACnBC,gBAAaN,GAAAM,eACbC,qBAAkBP,GAAAO,oBAClBC,wBAAqBR,GAAAQ,uBACrBC,wBAAqBT,GAAAS,uBACrBC,uBAAoB,GAAA,sBACpBC,yBAAsBX,GAAAW,wBACtBC,wBAAqBZ,GAAAY;AAEf,MAAAC,KAGFC,kBAAiB,GAFnBC,aAAUF,GAAAE,YACVC,YAASH,GAAAG;AAGX,MAAMC,cAAcC,wBAAuB;AAC3C,MAAMC,YAAWC,MAAAC,KAAAJ,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaK,YAAM,QAAAD,OAAA,SAAA,SAAAA,GAAEE,cAAQ,QAAAH,OAAA,SAAA,SAAAA,GAAEI;AAChD,MAAMC,UAASC,KAAAT,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaU,YAAQ,QAAAD,OAAA,SAAA,SAAAA,GAAAD;AACpC,MAAMG,YAAWC,KAAAZ,gBAAA,QAAAA,gBAAA,SAAA,SAAAA,YAAaU,YAAQ,QAAAE,OAAA,SAAA,SAAAA,GAAAD;AAEtC,MAAI3B,WAAW;AACb,WAAQ6B,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAU;QAEnB9B,4BAAA,QAAAA,4BAAuB,SAAA,SAAvBA,wBAAuB,MACrB4B,eAAAA,QAAAC,cAACE,aAAW;MAACC,MAAMC,iBAAiBC;IAAQ,CAAG,CAGhD;EACN;AAED,MAAI,CAACrB,YAAY;AACf,WAAQe,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAU;QAEnB7B,6BAAA,QAAAA,6BAAwB,SAAA,SAAxBA,yBAAwB,MACtB2B,eAAAA,QAAAC,cAACE,aAAW;MAACC,MAAMC,iBAAiBE;IAAY,CAAG,CAGpD;EACN;AACD,MAAIrB,WAAW;AACb,WACEc,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAU;QAEX7B,6BAAA,QAAAA,6BAAwB,SAAA,SAAxBA,yBAAwB,MACtB2B,eAAAA,QAAAC,cAACE,aAAW;MAACC,MAAMC,iBAAiBG;IAAM,CAAG,CAG9C;EAER;AACD,MAAInB,UAAU;AACZ,WACEW,eAAAA,QAAAC,cAAA,OAAA;MAAKC,WAAU;QAEX7B,6BAAA,QAAAA,6BAAwB,SAAA,SAAxBA,yBAAwB,MACtB2B,eAAAA,QAAAC,cAACE,aAAW;MACVC,MAAMC,iBAAiBG;MACvBC,gBAAgB,WAAA;AACdd,eAAOe,KAAK,uBAAuB;MAErC;IAAE,CACF,CAGH;EAER;AACD,SACEV,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;MACZ3B,wBAAmB,QAAnBA,wBAAmB,SAAA,SAAnBA,oBAAmB,MAClByB,eAAAA,QAAAC,cAACU,eAAa;IAACT,WAAU;EAAuC,CAAA,GAElEF,eAAAA,QAAAC,cAACW,aAAW;IACVV,WAAU;IACV1B;IACAF;IACAK;IACAP;EAAiD,CAEnD,GAAA4B,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;MAEXzB,uBAAA,QAAAA,uBAAA,SAAA,SAAAA,mBAAkB,MAChBuB,eAAAA,QAAAC,cAACY,uBAAmB;IAClBjC;IACAC;IACAC;EAA6C,CAAA,GAInDkB,eAAAA,QAAAC,cAAA,OAAA;IAAKC,WAAU;EAAiD,IAE5DxB,0BAAqB,QAArBA,0BAAqB,SAAA,SAArBA,sBAAqB,QAChBoC,MAAA,KAAA3B,gBAAW,QAAXA,gBAAA,SAAA,SAAAA,YAAaU,YAAM,QAAAkB,OAAA,SAAA,SAAAA,GAAEC,kBAAc,QAAAF,OAAA,SAAA,SAAAA,GAAAG,0BACpCjB,eAAAA,QAAAC,cAACiB,iBAAkB,IAAA,GAIvB,CAACpB,YACCE,eAAAA,QAAAC,cAACkB,kBAAgB,IAAG,CAGrB,CACF,CACF;AAET;;;;;AC/HA,IAAMC,UAAkC,SAACC,OAAmB;AAC1D,SACEC,eAAAA,QAAAC,cAACC,iBAAe;IACdC,YAAYJ,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOI;IACnBC,mBAAmBL,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOK;IAC1BC,0BAA0BN,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOM;IACjCC,+BAA+BP,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOO;IACtCC,gBAAgBR,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOQ;IACvBC,iBAAiBT,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOS;IACxBC,oBAAoBV,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOU;IAC3BC,eAAeX,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOW;IACtBC,yBAAyBZ,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOY;IAChCC,yBAAyBb,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOa;IAChCC,2BAA2Bd,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOc;IAClCC,0BAA0Bf,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOe;IACjCC,kCAAkChB,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOgB;IACzCC,yBAAyBjB,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOiB;IAChCC,eAAelB,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOkB;IACtBC,aAAanB,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOmB;IACpBC,WAAWpB,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOoB;IAClBC,uBAAuBrB,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOqB;IAC9BC,SAAStB,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOsB;IAChBC,mBAAmBvB,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOuB;IAC1BC,mBAAmBxB,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAOwB;IAC1BC,oBAAoBzB,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOyB;IAC3BC,mBAAmB1B,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAO0B;IAC1BC,iBAAiB3B,UAAK,QAALA,UAAK,SAAA,SAALA,MAAO2B;IACxBC,qBAAqB5B,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAO4B;IAC5BC,mBAAmB7B,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAO6B;IAC1BC,sBAAsB9B,UAAK,QAALA,UAAK,SAAA,SAALA,MAAO8B;IAC7BC,gBAAgB/B,MAAM+B;IACtBC,iBAAiBhC,MAAMgC;EAAgB,GAEvC/B,eAAAA,QAAAC,cAAC+B,WAAS;IACRC,WAAWlC,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOkC;IAClBC,yBAAyBnC,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOmC;IAChCC,0BAA0BpC,UAAA,QAAAA,UAAK,SAAA,SAALA,MAAOoC;IACjCC,wBAAwBrC,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOqC;IAC/BC,qBAAqBtC,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOsC;IAC5BC,eAAevC,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOuC;IACtBC,oBAAoBxC,UAAK,QAALA,UAAK,SAAA,SAALA,MAAOwC;IAC3BC,uBAAuBzC,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAOyC;IAC9BC,uBAAuB1C,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAO0C;IAC9BC,sBAAsB3C,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAO2C;IAC7BC,wBAAwB5C,UAAA,QAAAA,UAAA,SAAA,SAAAA,MAAO4C;IAC/BC,uBAAuB7C,UAAK,QAALA,UAAA,SAAA,SAAAA,MAAO6C;EAAsB,CAExD,CAAiB;AAErB;",
  "names": ["ConnectionStatus", "stringSet", "useContext", "LocalizationContext", "React", "createElement", "className", "Label", "type", "LabelTypography", "BODY_2", "color", "LabelColors", "ONBACKGROUND_2", "TRYING_TO_CONNECT", "Icon", "IconTypes", "DISCONNECTED", "fillColor", "IconColors", "SENT", "width", "height", "getChannelTitle", "channel", "currentUserId", "stringSet", "LABEL_STRING_SET", "LabelStringSet", "name", "members", "NO_TITLE", "_a", "length", "NO_MEMBERS", "filter", "userId", "map", "nickname", "NO_NAME", "join", "ChannelHeader", "_a", "_e", "className", "globalStore", "useSendbirdStateContext", "userId", "_b", "config", "theme", "_c", "channelStore", "useChannelContext", "isMobile", "useMediaQueryContext", "currentGroupChannel", "showSearchIcon", "onSearchClick", "onChatHeaderActionClick", "_f", "onBackClick", "noop", "subTitle", "members", "_d", "length", "isMuted", "myMutedState", "stringSet", "useContext", "LocalizationContext", "React", "createElement", "concat", "Icon", "onClick", "fillColor", "IconColors", "PRIMARY", "width", "height", "type", "IconTypes", "ARROW_LEFT", "ChannelAvatar", "channel", "Label", "LabelTypography", "H_2", "color", "LabelColors", "ONBACKGROUND_1", "utils", "BODY_1", "ONBACKGROUND_2", "NOTIFICATIONS_OFF_FILLED", "ON_BACKGROUND_2", "isEphemeral", "IconButton", "SEARCH", "INFO", "MessageInputKeys", "Enter", "ArrowUp", "ArrowDown", "Backspace", "NodeTypes", "ElementNode", "TextNode", "NodeNames", "Span", "Br", "Div", "ChannelStateTypes", "ParentMessageStateTypes", "ThreadListStateTypes", "ThreadContextActionTypes", "initialState", "currentChannel", "allThreadMessages", "localThreadMessages", "parentMessage", "channelState", "ChannelStateTypes", "NIL", "parentMessageState", "ParentMessageStateTypes", "threadListState", "ThreadListStateTypes", "hasMorePrev", "hasMoreNext", "emojiContainer", "isMuted", "isChannelFrozen", "currentUserId", "ThreadContext", "React", "createContext", "useThreadContext", "React", "useContext", "ThreadContext", "SuggestedUserMentionItem", "props", "member", "_a", "isFocused", "parentScrollRef", "onClick", "onMouseOver", "onMouseMove", "renderUserMentionItem", "scrollRef", "useRef", "_b", "useContext", "LocalizationContext", "stringSet", "useEffect", "current", "scrollTop", "offsetTop", "clientHeight", "scrollIntoView", "block", "inline", "customMentionItem", "useMemo", "React", "createElement", "className", "event", "itemRef", "key", "userId", "uuidv4", "ref", "user", "concat", "Avatar", "src", "profileUrl", "alt", "width", "height", "Label", "type", "LabelTypography", "SUBTITLE_2", "color", "nickname", "LabelColors", "ONBACKGROUND_1", "ONBACKGROUND_3", "MENTION_NAME__NO_NAME", "ONBACKGROUND_2", "DEBOUNCING_TIME", "SuggestedMentionList", "_f", "targetNickname", "onUserItemClick", "onFocusItemChange", "onFetchUsers", "inputEvent", "_g", "ableAddMention", "_h", "maxMentionCount", "MAX_USER_MENTION_COUNT", "_j", "maxSuggestionCount", "MAX_USER_SUGGESTION_COUNT", "currentGroupChannel", "useChannelContext", "currentChannel", "useThreadContext", "channelInstance", "_k", "useSendbirdStateContext", "config", "stores", "logger", "currentUserId", "_e", "_c", "sdkStore", "sdk", "_d", "currentUser", "_l", "useState", "timer", "setTimer", "_m", "searchString", "setSearchString", "_o", "lastSearchString", "setLastSearchString", "_p", "setCurrentUser", "_q", "currentMemberList", "setCurrentMemberList", "clearTimeout", "setTimeout", "MessageInputKeys", "Enter", "length", "ArrowUp", "currentUserIndex", "findIndex", "ArrowDown", "createMemberListQuery", "warning", "indexOf", "query", "limit", "nicknameStartsWithFilter", "slice", "USER_MENTION_TEMP_CHAR", "next", "then", "memberList", "suggestingMembers", "filter", "info", "memberListQuery", "catch", "error", "url", "map", "Icon", "IconTypes", "INFO", "fillColor", "IconColors", "ON_BACKGROUND_2", "MENTION_COUNT__OVER_LIMIT", "replace", "DateSeparator", "_a", "_b", "children", "_c", "className", "_d", "separatorColor", "Colors", "ONBACKGROUND_4", "React", "createElement", "__spreadArray", "Array", "isArray", "join", "concat", "changeColorToClassName", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONBACKGROUND_2", "entries", "setPrototypeOf", "isFrozen", "getPrototypeOf", "getOwnPropertyDescriptor", "Object", "freeze", "seal", "create", "apply", "construct", "Reflect", "x", "fun", "thisValue", "args", "Func", "arrayForEach", "unapply", "Array", "prototype", "forEach", "arrayPop", "pop", "arrayPush", "push", "stringToLowerCase", "String", "toLowerCase", "stringToString", "toString", "stringMatch", "match", "stringReplace", "replace", "stringIndexOf", "indexOf", "stringTrim", "trim", "regExpTest", "RegExp", "test", "typeErrorCreate", "unconstruct", "TypeError", "func", "thisArg", "addToSet", "set", "array", "transformCaseFunc", "l", "length", "element", "lcElement", "clone", "object", "newObject", "property", "value", "undefined", "lookupGetter", "prop", "desc", "get", "fallbackValue", "console", "warn", "html", "svg", "svgFilters", "svgDisallowed", "mathMl", "mathMlDisallowed", "text", "xml", "MUSTACHE_EXPR", "ERB_EXPR", "TMPLIT_EXPR", "DATA_ATTR", "ARIA_ATTR", "IS_ALLOWED_URI", "IS_SCRIPT_OR_DATA", "ATTR_WHITESPACE", "DOCTYPE_NAME", "getGlobal", "window", "_createTrustedTypesPolicy", "trustedTypes", "purifyHostElement", "createPolicy", "suffix", "ATTR_NAME", "hasAttribute", "getAttribute", "policyName", "createHTML", "createScriptURL", "scriptUrl", "_", "createDOMPurify", "DOMPurify", "root", "version", "VERSION", "removed", "document", "nodeType", "isSupported", "originalDocument", "currentScript", "DocumentFragment", "HTMLTemplateElement", "Node", "Element", "NodeFilter", "NamedNodeMap", "MozNamedAttrMap", "HTMLFormElement", "DOMParser", "ElementPrototype", "cloneNode", "getNextSibling", "getChildNodes", "getParentNode", "template", "createElement", "content", "ownerDocument", "trustedTypesPolicy", "emptyHTML", "implementation", "createNodeIterator", "createDocumentFragment", "getElementsByTagName", "importNode", "hooks", "createHTMLDocument", "EXPRESSIONS", "ALLOWED_TAGS", "DEFAULT_ALLOWED_TAGS", "TAGS", "ALLOWED_ATTR", "DEFAULT_ALLOWED_ATTR", "ATTRS", "CUSTOM_ELEMENT_HANDLING", "tagNameCheck", "writable", "configurable", "enumerable", "attributeNameCheck", "allowCustomizedBuiltInElements", "FORBID_TAGS", "FORBID_ATTR", "ALLOW_ARIA_ATTR", "ALLOW_DATA_ATTR", "ALLOW_UNKNOWN_PROTOCOLS", "ALLOW_SELF_CLOSE_IN_ATTR", "SAFE_FOR_TEMPLATES", "WHOLE_DOCUMENT", "SET_CONFIG", "FORCE_BODY", "RETURN_DOM", "RETURN_DOM_FRAGMENT", "RETURN_TRUSTED_TYPE", "SANITIZE_DOM", "SANITIZE_NAMED_PROPS", "SANITIZE_NAMED_PROPS_PREFIX", "KEEP_CONTENT", "IN_PLACE", "USE_PROFILES", "FORBID_CONTENTS", "DEFAULT_FORBID_CONTENTS", "DATA_URI_TAGS", "DEFAULT_DATA_URI_TAGS", "URI_SAFE_ATTRIBUTES", "DEFAULT_URI_SAFE_ATTRIBUTES", "MATHML_NAMESPACE", "SVG_NAMESPACE", "HTML_NAMESPACE", "NAMESPACE", "IS_EMPTY_INPUT", "ALLOWED_NAMESPACES", "DEFAULT_ALLOWED_NAMESPACES", "PARSER_MEDIA_TYPE", "SUPPORTED_PARSER_MEDIA_TYPES", "DEFAULT_PARSER_MEDIA_TYPE", "CONFIG", "formElement", "isRegexOrFunction", "testValue", "Function", "_parseConfig", "cfg", "ADD_URI_SAFE_ATTR", "ADD_DATA_URI_TAGS", "ALLOWED_URI_REGEXP", "ADD_TAGS", "ADD_ATTR", "table", "tbody", "TRUSTED_TYPES_POLICY", "MATHML_TEXT_INTEGRATION_POINTS", "HTML_INTEGRATION_POINTS", "COMMON_SVG_AND_HTML_ELEMENTS", "ALL_SVG_TAGS", "ALL_MATHML_TAGS", "_checkValidNamespace", "parent", "tagName", "namespaceURI", "parentTagName", "Boolean", "_forceRemove", "node", "parentNode", "removeChild", "remove", "_removeAttribute", "name", "attribute", "getAttributeNode", "from", "removeAttribute", "setAttribute", "_initDocument", "dirty", "doc", "leadingWhitespace", "matches", "dirtyPayload", "parseFromString", "documentElement", "createDocument", "innerHTML", "body", "insertBefore", "createTextNode", "childNodes", "call", "_createNodeIterator", "SHOW_ELEMENT", "SHOW_COMMENT", "SHOW_TEXT", "_isClobbered", "elm", "nodeName", "textContent", "attributes", "hasChildNodes", "_isNode", "_executeHook", "entryPoint", "currentNode", "data", "hook", "_sanitizeElements", "allowedTags", "firstElementChild", "_isBasicCustomElement", "childCount", "i", "expr", "_isValidAttribute", "lcTag", "lcName", "_sanitizeAttributes", "hookEvent", "attrName", "attrValue", "keepAttr", "allowedAttributes", "attr", "forceKeepAttr", "getAttributeType", "setAttributeNS", "_sanitizeShadowDOM", "fragment", "shadowNode", "shadowIterator", "nextNode", "sanitize", "importedNode", "returnNode", "appendChild", "firstChild", "nodeIterator", "shadowroot", "shadowrootmode", "serializedHTML", "outerHTML", "doctype", "setConfig", "clearConfig", "isValidAttribute", "tag", "addHook", "hookFunction", "removeHook", "removeHooks", "removeAllHooks", "TEXT_MESSAGE_BODY_CLASSNAME", "OG_MESSAGE_BODY_CLASSNAME", "renderToString", "_a", "userId", "nickname", "el", "concat", "MENTION_USER_LABEL_CLASSNAME", "purifier", "DOMPurify", "window", "sanitized_", "sanitize", "token", "split", "spanTag", "rest", "slice", "sanitized", "__spreadArray", "join", "sanitizeString", "str", "replace", "i", "charCodeAt", "nodeListToArray", "childNodes", "Array", "from", "error", "isChannelTypeSupportsMultipleFilesMessage", "channel", "_channel$isGroupChann", "isGroupChannel", "call", "isBroadcast", "isSuper", "inserTemplateToDOM", "templateList", "nodes", "map", "template", "text", "renderMentionLabelToString", "document", "execCommand", "PASTE_NODE", "TEXT_MESSAGE_CLASS", "MENTION_CLASS", "MENTION_CLASS_IN_INPUT", "MENTION_CLASS_COMBINED_QUERY", "querySelectorIncludingSelf", "master", "selector", "result", "querySelectorAll", "find", "matches", "getLeafNodes", "ogMessage", "OG_MESSAGE_BODY_CLASSNAME", "textMessageBody", "TEXT_MESSAGE_BODY_CLASSNAME", "createPasteNode", "pasteNode", "body", "querySelector", "remove", "node", "createElement", "id", "style", "display", "hasMention", "parent", "extractTextFromNodes", "forEach", "textNodes", "length", "innerText", "domToMessageTemplate", "nodeArray", "templates", "reduce", "accumulator", "currentValue", "mentionNode", "Text", "textContent", "HTMLElement", "classList", "contains", "text_1", "dataset", "userid", "getUsersFromWords", "userMap", "users", "members", "mentionedMember", "user", "Object", "values", "usePaste", "ref", "setIsInput", "setHeight", "setMentionedUsers", "useCallback", "e", "preventDefault", "html", "clipboardData", "getData", "clean", "innerHTML", "children", "leafNodes", "words", "mentionedUsers", "USER_MENTION_PREFIX", "TOKEN_TYPES", "string", "mention", "url", "undetermined", "getUserMentionRegex", "mentionedUsers", "templatePrefix_", "templatePrefix", "RegExp", "concat", "map", "u", "userId", "replace", "join", "identifyMentions", "_a", "tokens", "_b", "_c", "length", "userMentionRegex", "results", "token", "type", "value", "parts", "split", "part", "match", "matchedUser", "find", "user", "nickname", "flat", "identifyUrlsAndStrings", "isUrl", "combineNearbyStrings", "reduce", "acc", "lastToken", "__spreadArray", "tokenizeMessage", "messageText", "partialResult", "partialWithMentions", "partialsWithUrlsAndMentions", "result", "getWhiteSpacePreservedText", "text", "NON_BREAKING_SPACE", "lines", "processedLines", "line", "leadingWhitespace", "trailingWhitespace", "convertedLeadingWhitespace", "convertedTrailingWhitespace", "trim", "ChannelType", "checkIfFileUploadEnabled", "_a", "channel", "config", "isEnabled", "match", "channelType", "with", "GROUP", "groupChannel", "enableDocument", "OPEN", "openChannel", "otherwise", "TEXT_FIELD_ID", "LINE_HEIGHT", "noop", "displayCaret", "element", "position", "range", "document", "createRange", "sel", "window", "getSelection", "setStart", "childNodes", "collapse", "removeAllRanges", "addRange", "focus", "resetInput", "ref", "current", "innerHTML", "_unused", "initialTargetStringInfo", "targetString", "startNodeIndex", "startOffsetIndex", "endNodeIndex", "endOffsetIndex", "MessageInput", "React", "forwardRef", "props", "_ref$current", "_ref$current$textCont", "_ref$current6", "className", "messageFieldId", "isEdit", "isMentionEnabled", "isVoiceMessageEnabled", "isSelectingMultipleFilesEnabled", "disabled", "message", "placeholder", "maxLength", "onFileUpload", "onSendMessage", "onUpdateMessage", "onCancelEdit", "onStartTyping", "channelUrl", "mentionSelectedUser", "onUserMentioned", "onMentionStringChange", "onMentionedUserIdsUpdated", "onVoiceMessageIconClick", "onKeyUp", "onKeyDown", "renderFileUploadIcon", "renderVoiceMessageIcon", "renderSendMessageIcon", "setMentionedUsers", "acceptableMimeTypes", "textFieldId", "stringSet", "useLocalization", "useSendbirdStateContext", "isFileUploadEnabled", "fileInputRef", "useRef", "isInput", "setIsInput", "useState", "mentionedUserIds", "setMentionedUserIds", "targetStringInfo", "setTargetStringInfo", "_objectSpread", "setHeight", "useMemo", "elem", "MAX_HEIGHT", "body", "offsetHeight", "scrollHeight", "style", "height", "error", "initialValue", "value", "useEffect", "_textField$textConten", "textField", "length", "_unused2", "textContent", "trim", "messageId", "_message$mentionedUse", "_message$mentionedMes", "_textField$textConten2", "mentionedUsers", "mentionedMessageTemplate", "tokens", "tokenizeMessage", "messageText", "map", "token", "type", "TOKEN_TYPES", "mention", "mentionedUser", "find", "user", "userId", "nickname", "USER_MENTION_PREFIX", "MENTION_NAME__NO_NAME", "renderMentionLabelToString", "sanitizeString", "join", "_unused3", "useMentionedLabelDetection", "useCallback", "_textField$textConten3", "newMentionedUserIds", "getElementsByClassName", "node", "_node$dataset", "dataset", "userid", "arrayEqual", "_document", "_childNodes$startNode", "_document2", "_childNodes$endNodeIn", "nodeListToArray", "frontTextNode", "createTextNode", "slice", "backTextNode", "mentionLabel", "USER_MENTION_TEMP_CHAR", "div", "createElement", "newNodes", "forEach", "newNode", "appendChild", "selection", "Range", "selectNodeContents", "setEnd", "useMentionInputDetection", "_window", "_window$getSelection", "_document3", "_document3$getSelecti", "call", "anchorNode", "focusNode", "anchorOffset", "focusOffset", "textStack", "index", "currentNode", "nodeType", "NodeTypes", "TextNode", "charLastIndex", "lastIndexOf", "i", "sendMessage", "mentionTemplate", "ElementNode", "nodeName", "NodeNames", "Span", "innerText", "Br", "Div", "params", "isEditDisabled", "editMessage", "onPaste", "usePaste", "getClassName", "id", "contentEditable", "role", "e", "preventEvent", "preventDefault", "_ref$current2", "_e$nativeEvent", "_ref$current3", "_ref$current4", "_ref$current$childNod", "shiftKey", "key", "MessageInputKeys", "Enter", "nativeEvent", "isComposing", "Backspace", "removeChild", "onClick", "onInput", "_ref$current5", "Label", "LabelTypography", "BODY_1", "color", "LabelColors", "ONBACKGROUND_4", "ONBACKGROUND_3", "MESSAGE_INPUT__PLACE_HOLDER", "IconButton", "width", "Icon", "IconTypes", "SEND", "fillColor", "IconColors", "ON_BACKGROUND_4", "PRIMARY", "_fileInputRef$current", "_fileInputRef$current2", "click", "ATTACH", "CONTENT_INVERSE", "onChange", "event", "files", "currentTarget", "target", "accept", "getMimeTypesUIKitAccepts", "multiple", "isChannelTypeSupportsMultipleFilesMessage", "AUDIO_ON_LINED", "Button", "ButtonTypes", "SECONDARY", "size", "ButtonSizes", "SMALL", "BUTTON__CANCEL", "BUTTON__SAVE", "propTypes", "PropTypes", "oneOfType", "string", "arrayOf", "bool", "number", "func", "shape", "isRequired", "defaultProps", "Role", "OPERATOR", "NONE", "MessageItemMenu", "_a", "className", "message", "channel", "_c", "isByMe", "_d", "disabled", "replyType", "_e", "disableDeleteMessage", "showEdit", "showRemove", "resendMessage", "setQuoteMessage", "setSupposedHover", "onReplyInThread", "_f", "onMoveToParentMessage", "stringSet", "useContext", "LocalizationContext", "triggerRef", "useRef", "containerRef", "channelStore", "useChannelContext", "showMenuItemCopy", "isUserMessage", "showMenuItemEdit", "isEphemeral", "isSentMessage", "showMenuItemResend", "isFailedMessage", "isResendable", "showMenuItemDelete", "isPendingMessage", "showMenuItemOpenInChannel", "isReplyTypeEnabled", "isGroupChannel", "_b", "call", "isBroadcast", "myRole", "Role", "OPERATOR", "showMenuItemReply", "showMenuItemThread", "parentMessageId", "React", "createElement", "getClassName", "ref", "ContextMenu", "menuTrigger", "toggleDropdown", "IconButton", "width", "height", "onClick", "onBlur", "Icon", "type", "IconTypes", "MORE", "fillColor", "IconColors", "CONTENT_INVERSE", "menuItems", "close", "closeDropdown", "MenuItems", "parentRef", "parentContainRef", "openLeft", "MenuItem", "copyToClipboard", "dataSbId", "MESSAGE_MENU__COPY", "disable", "MESSAGE_MENU__REPLY", "MESSAGE_MENU__THREAD", "MESSAGE_MENU__OPEN_IN_CHANNEL", "MESSAGE_MENU__EDIT", "MESSAGE_MENU__RESEND", "deleteMessage", "threadInfo", "replyCount", "MESSAGE_MENU__DELETE", "ReactionButton", "React", "forwardRef", "props", "ref", "className", "width", "height", "selected", "_a", "dataSbId", "onClick", "children", "onClickHandler", "useLongPress", "onLongPress", "noop", "shouldPreventDefault", "shouldStopPropagation", "createElement", "_extends", "__spreadArray", "Array", "isArray", "concat", "join", "role", "style", "tabIndex", "MessageItemReactionMenu", "_a", "className", "message", "userId", "_b", "spaceFromTrigger", "x", "y", "emojiContainer", "toggleReaction", "setSupposedHover", "triggerRef", "useRef", "containerRef", "isPendingMessage", "isFailedMessage", "React", "createElement", "getClassName", "ref", "ContextMenu", "menuTrigger", "toggleDropdown", "IconButton", "width", "height", "onClick", "onBlur", "Icon", "type", "IconTypes", "EMOJI_MORE", "fillColor", "IconColors", "CONTENT_INVERSE", "menuItems", "close", "closeDropdown", "EmojiListItems", "parentRef", "parentContainRef", "getEmojiListAll", "map", "emoji", "isReacted", "_c", "reactions", "filter", "reaction", "key", "userIds", "some", "reactorId", "ReactionButton", "selected", "dataSbId", "concat", "ImageRenderer", "url", "placeHolder", "style", "QUESTION", "ON_BACKGROUND_3", "ReactionBadge", "React", "forwardRef", "props", "ref", "_a", "className", "children", "_b", "count", "_c", "isAdd", "_d", "selected", "_e", "onClick", "getClassNameTail", "createElement", "__spreadArray", "Array", "isArray", "concat", "join", "role", "onKeyDown", "onTouchEnd", "tabIndex", "Label", "type", "LabelTypography", "CAPTION_3", "color", "LabelColors", "ONBACKGROUND_1", "BottomSheet", "props", "_a", "className", "children", "onBackdropClick", "portalRoot", "useRef", "current", "document", "getElementById", "MODAL_ROOT", "createElement", "setAttribute", "body", "appendChild", "createPortal", "React", "concat", "role", "onClick", "e", "stopPropagation", "Tooltip", "_a", "_b", "className", "_c", "children", "React", "createElement", "__spreadArray", "Array", "isArray", "join", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONCONTENT_1", "SPACE_FROM_TRIGGER", "TooltipWrapper", "_a", "_b", "className", "children", "hoverTooltip", "_c", "useState", "showHoverTooltip", "setShowHoverTooltip", "childrenRef", "useRef", "React", "createElement", "__spreadArray", "Array", "isArray", "join", "onMouseOver", "onFocus", "onMouseOut", "onBlur", "ref", "style", "bottom", "left", "current", "concat", "offsetWidth", "defaultValue", "message", "isByMe", "MessageContext", "React", "createContext", "MessageProvider", "props", "children", "_a", "createElement", "Provider", "value", "useMessageContext", "useContext", "undefined", "Error", "ReactedMembersBottomSheet", "_a", "message", "channel", "_e", "emojiKey", "hideMenu", "emojiContainer", "onPressUserProfileHandler", "_f", "members", "_g", "useState", "selectedEmoji", "setSelectedEmoji", "onPressUserProfileCallBack", "sender", "React", "createElement", "BottomSheet", "onBackdropClick", "className", "_b", "reactions", "map", "reaction", "emojiUrl", "getEmojiUrl", "key", "concat", "onClick", "ImageRenderer", "url", "width", "height", "placeHolder", "style", "Icon", "type", "IconTypes", "QUESTION", "fillColor", "IconColors", "ON_BACKGROUND_3", "Label", "LabelTypography", "BUTTON_2", "color", "LabelColors", "PRIMARY", "ONBACKGROUND_3", "userIds", "length", "_d", "_c", "find", "userId", "member", "filter", "undefined", "UserListItem", "user", "avatarSize", "ReactionItem", "memberNicknamesMap", "setEmojiKey", "toggleReaction", "emojisMap", "store", "useSendbirdStateContext", "isMobile", "useMediaQueryContext", "messageStore", "useMessageContext", "stringSet", "useContext", "LocalizationContext", "config", "reactedByMe", "isReactedBy", "showHoverTooltip", "isGroupChannel", "isSuper", "handleOnClick", "longPress", "useLongPress", "onLongPress", "shouldPreventDefault", "shouldStopPropagation", "TooltipWrapper", "hoverTooltip", "Tooltip", "getEmojiTooltipString", "Fragment", "ReactionBadge", "count", "selected", "circle", "get", "defaultComponent", "AddReactionBadgeItem", "onlyClick", "_extends", "isAdd", "EMOJI_MORE", "MobileEmojisBottomSheet", "emojiAllList", "useMemo", "getEmojiListAll", "emoji", "isReacted", "some", "reactorId", "ReactionButton", "e", "stopPropagation", "dataSbId", "EmojiReactions", "_h", "spaceFromTrigger", "x", "y", "_j", "isByMe", "onPressUserProfile", "addReactionRef", "useRef", "_k", "showEmojiList", "setShowEmojiList", "_l", "selectedEmojiKey", "setSelectedEmojiKey", "getEmojiMapAll", "showAddReactionBadge", "size", "getClassName", "ContextMenu", "menuTrigger", "toggleDropdown", "ref", "menuItems", "closeDropdown", "EmojiListItems", "parentRef", "parentContainRef", "AdminMessage", "_a", "_c", "className", "message", "isAdminMessage", "messageType", "_b", "React", "createElement", "__spreadArray", "Array", "isArray", "join", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONBACKGROUND_2", "MentionLabel", "props", "mentionTemplate", "mentionedUserId", "mentionedUserNickname", "isByMe", "mentionRef", "useRef", "sendbirdState", "useSendbirdStateContext", "userId", "_a", "config", "sdk", "_c", "_b", "stores", "sdkStore", "amIBeingMentioned", "_d", "useState", "user", "setUser", "fetchUser", "useCallback", "toggleDropdown", "createApplicationUserListQuery", "query", "userIdsFilter", "next", "then", "members", "length", "React", "createElement", "ContextMenu", "menuTrigger", "className", "concat", "onClick", "ref", "Label", "type", "LabelTypography", "CAPTION_1", "color", "LabelColors", "ONCONTENT_1", "ONBACKGROUND_1", "menuItems", "closeDropdown", "MenuItems", "parentRef", "parentContainRef", "style", "paddingTop", "paddingBottom", "UserProfile", "onSuccess", "currentUserId", "http", "LinkLabel", "_ref", "className", "src", "type", "color", "children", "url", "test", "React", "createElement", "Array", "isArray", "changeColorToClassName", "join", "href", "target", "rel", "onTouchEnd", "e", "preventDefault", "nativeEvent", "stopImmediatePropagation", "window", "open", "Label", "propTypes", "PropTypes", "oneOfType", "string", "arrayOf", "isRequired", "element", "defaultProps", "keyGenerator", "createdAt", "messageUpdatedAt", "index", "concat", "TextFragment", "_a", "tokens", "messageStore", "useMessageContext", "message", "isByMe", "updatedAt", "React", "createElement", "Fragment", "map", "token", "idx", "key", "match", "type", "with", "TOKEN_TYPES", "mention", "className", "MentionLabel", "mentionTemplate", "USER_MENTION_PREFIX", "mentionedUserId", "userId", "mentionedUserNickname", "value", "url", "LinkLabel", "src", "LabelTypography", "BODY_1", "otherwise", "getWhiteSpacePreservedText", "TextMessageItemBody", "_a", "_e", "className", "message", "_f", "isByMe", "_g", "mouseHover", "_h", "isMentionEnabled", "_j", "isReactionEnabled", "stringSet", "useContext", "LocalizationContext", "isMessageMentioned", "_b", "mentionedMessageTemplate", "length", "_c", "mentionedUsers", "tokens", "useMemo", "tokenizeMessage", "messageText", "updatedAt", "React", "createElement", "Label", "type", "LabelTypography", "BODY_1", "color", "LabelColors", "ONCONTENT_1", "ONBACKGROUND_1", "getClassName", "TEXT_MESSAGE_BODY_CLASSNAME", "_d", "reactions", "TextFragment", "isEditedMessage", "ONCONTENT_2", "ONBACKGROUND_2", "concat", "MESSAGE_EDITED", "FileMessageItemBody", "_a", "className", "message", "_c", "isByMe", "_d", "mouseHover", "_e", "isReactionEnabled", "_f", "truncateLimit", "isMobile", "useMediaQueryContext", "truncateMaxNum", "React", "createElement", "getClassName", "_b", "reactions", "length", "Icon", "type", "IMAGE", "IconTypes", "PHOTO", "VIDEO", "PLAY", "AUDIO", "FILE_AUDIO", "GIF", "OTHERS", "FILE_DOCUMENT", "getUIKitFileType", "fillColor", "IconColors", "PRIMARY", "width", "height", "TextButton", "onClick", "window", "open", "url", "color", "Colors", "ONCONTENT_1", "ONBACKGROUND_1", "Label", "LabelTypography", "BODY_1", "LabelColors", "truncateString", "name", "getMessageFirstFileType", "message", "match", "when", "isFileMessage", "_a", "type", "isMultipleFilesMessage", "_b", "getFirstFileInfo", "mimeType", "otherwise", "fileInfoList", "length", "getMessageFirstFileName", "name", "fileName", "getMessageFirstFileUrl", "url", "getMessageFirstFileThumbnails", "thumbnails", "getMessageFirstFileThumbnailUrl", "ThumbnailMessageItemBody", "_a", "_d", "className", "message", "_e", "isByMe", "_f", "mouseHover", "_g", "isReactionEnabled", "_h", "showFileViewer", "noop", "_j", "style", "thumbnailUrl", "getMessageFirstFileThumbnailUrl", "_k", "useState", "imageRendered", "setImageRendered", "onClickHandler", "useLongPress", "onLongPress", "onClick", "isSentMessage", "React", "createElement", "_extends", "getClassName", "_c", "reactions", "_b", "length", "ImageRenderer", "url", "getMessageFirstFileUrl", "alt", "getMessageFirstFileType", "width", "height", "onLoad", "placeHolder", "style_", "isVideoMessage", "src", "type", "isGifMessage", "Icon", "IconTypes", "PLAY", "GIF", "fillColor", "IconColors", "THUMBNAIL_ICON", "OGMessageItemBody", "_a", "className", "message", "_p", "isByMe", "_q", "mouseHover", "_r", "isMentionEnabled", "_s", "isReactionEnabled", "_t", "onMessageHeightChange", "imageRef", "useRef", "stringSet", "useContext", "LocalizationContext", "openOGUrl", "ogMetaData", "url", "window", "open", "_b", "isMessageMentioned", "mentionedMessageTemplate", "length", "_c", "mentionedUsers", "tokens", "useMemo", "tokenizeMessage", "messageText", "updatedAt", "React", "createElement", "getClassName", "_d", "reactions", "Label", "type", "LabelTypography", "BODY_1", "color", "LabelColors", "ONCONTENT_1", "ONBACKGROUND_1", "OG_MESSAGE_BODY_CLASSNAME", "TextFragment", "isEditedMessage", "ONCONTENT_2", "ONBACKGROUND_2", "concat", "MESSAGE_EDITED", "ref", "_f", "_e", "defaultImage", "onClick", "ImageRenderer", "onLoad", "onError", "current", "classList", "add", "error", "_h", "_g", "alt", "_j", "_k", "defaultComponent", "Icon", "IconTypes", "THUMBNAIL_NONE", "width", "height", "_l", "title", "SUBTITLE_2", "_m", "description", "BODY_2", "_o", "CAPTION_3", "UnknownMessageItemBody", "_a", "className", "message", "_c", "isByMe", "_d", "mouseHover", "_e", "isReactionEnabled", "stringSet", "useContext", "LocalizationContext", "React", "createElement", "getClassName", "_b", "reactions", "length", "Label", "type", "LabelTypography", "BODY_1", "color", "LabelColors", "ONCONTENT_1", "ONBACKGROUND_1", "UNKNOWN__UNKNOWN_MESSAGE_TYPE", "ONCONTENT_2", "ONBACKGROUND_2", "UNKNOWN__CANNOT_READ_MESSAGE", "QuoteMessage", "_a", "message", "_j", "userId", "_k", "isByMe", "_l", "className", "_m", "isUnavailable", "onClick", "stringSet", "useContext", "LocalizationContext", "parentMessage", "parentMessageSender", "sender", "parentMessageSenderNickname", "QUOTED_MESSAGE__CURRENT_USER", "nickname", "parentMessageUrl", "getMessageFirstFileUrl", "parentMessageType", "getMessageFirstFileType", "currentMessageSenderNickname", "_c", "_d", "_o", "useState", "isThumbnailLoaded", "setThumbnailLoaded", "uikitFileTypes", "getUIKitFileTypes", "splitFileName", "_f", "_e", "getMessageFirstFileName", "split", "React", "createElement", "getClassName", "key", "messageId", "onTouchEnd", "Icon", "type", "IconTypes", "REPLY", "fillColor", "IconColors", "ON_BACKGROUND_3", "width", "height", "Label", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONBACKGROUND_3", "QUOTED_MESSAGE__REPLIED_TO", "BODY_2", "ONBACKGROUND_1", "QUOTED_MESSAGE__UNAVAILABLE", "isUserMessage", "_g", "length", "isVoiceMessage", "VOICE_MESSAGE", "isThumbnailMessage", "isMultipleFilesMessage", "ImageRenderer", "url", "alt", "onLoad", "defaultComponent", "isVideo", "PLAY", "PHOTO", "ON_BACKGROUND_2", "_h", "thumbnails", "Fragment", "src", "isGif", "GIF", "THUMBNAIL_ICON", "getUIKitMessageType", "UIKitMessageTypes", "FILE", "_b", "IMAGE", "VIDEO", "AUDIO", "FILE_AUDIO", "OTHERS", "FILE_DOCUMENT", "getUIKitFileType", "truncateString", "MobileContextMenu", "props", "hideMenu", "channel", "message", "replyType", "userId", "resendMessage", "showEdit", "showRemove", "deleteMenuState", "deleteMessage", "setQuoteMessage", "parentRef", "onReplyInThread", "_d", "isOpenedFromThread", "isByMe", "_a", "sender", "stringSet", "useLocalization", "showMenuItemCopy", "isUserMessage", "showMenuItemEdit", "isSentMessage", "showMenuItemResend", "isFailedMessage", "isResendable", "showMenuItemDelete", "isPendingMessage", "showMenuItemDeleteByState", "undefined", "showMenuItemDeleteFinal", "disableDelete", "_b", "threadInfo", "replyCount", "_c", "showMenuItemDownload", "isFileMessage", "isVoiceMessage", "isSuper", "isBroadcast", "showMenuItemReply", "isGroupChannel", "showMenuItemThread", "isThreadMessage", "fileMessage", "React", "createElement", "ContextMenu", "isOpen", "menuItems", "MenuItems", "className", "parentContainRef", "closeDropdown", "MenuItem", "onClick", "copyToClipboard", "dataSbId", "Label", "type", "LabelTypography", "SUBTITLE_1", "color", "LabelColors", "ONBACKGROUND_1", "MESSAGE_MENU__COPY", "Icon", "IconTypes", "COPY", "fillColor", "IconColors", "PRIMARY", "width", "height", "disable", "parentMessageId", "ONBACKGROUND_4", "MESSAGE_MENU__REPLY", "REPLY", "ON_BACKGROUND_4", "MESSAGE_MENU__THREAD", "THREAD", "MESSAGE_MENU__EDIT", "EDIT", "MESSAGE_MENU__RESEND", "REFRESH", "MESSAGE_MENU__DELETE", "DELETE", "rel", "href", "url", "target", "MESSAGE_MENU__SAVE", "DOWNLOAD", "EMOJI_SIZE", "MobileBottomSheet", "emojiContainer", "toggleReaction", "isReactionEnabled", "globalStore", "useSendbirdStateContext", "isOnline", "config", "showReaction", "disableReaction", "maxEmojisPerRow", "Math", "floor", "window", "innerWidth", "_e", "useState", "showEmojisOnly", "setShowEmojisOnly", "emojis", "getEmojiListAll", "visibleEmojis", "slice", "canShowMoreEmojis", "length", "BottomSheet", "onBackdropClick", "map", "emoji", "isReacted", "reactions", "filter", "reaction", "key", "userIds", "some", "reactorId", "ReactionButton", "concat", "selected", "ImageRenderer", "placeHolder", "style", "QUESTION", "ON_BACKGROUND_3", "EMOJI_MORE", "role", "MobileMenu", "disabled", "Fragment", "ThreadReplies", "_a", "className", "threadInfo", "onClick", "_c", "mostRepliedUsers", "replyCount", "stringSet", "useLocalization", "React", "createElement", "role", "e", "stopPropagation", "onKeyDown", "slice", "map", "user", "Avatar", "key", "uuidv4", "src", "profileUrl", "alt", "width", "height", "length", "_b", "Icon", "type", "IconTypes", "PLUS", "fillColor", "IconColors", "WHITE", "Label", "LabelTypography", "CAPTION_2", "color", "LabelColors", "PRIMARY", "concat", "CHANNEL__THREAD_REPLY", "CHANNEL__THREAD_OVER_MAX", "CHANNEL__THREAD_REPLIES", "CHEVRON_RIGHT", "ProgressBarColorTypes", "PRIMARY", "GRAY", "ProgressBar", "_a", "_b", "className", "_c", "disabled", "maxSize", "_d", "currentSize", "_e", "colorType", "width", "useMemo", "React", "createElement", "concat", "style", "generateGroupKey", "channelUrl", "key", "concat", "useVoicePlayer", "_a", "_c", "_d", "_e", "audioFile", "_f", "audioFileUrl", "groupKey", "useState", "_g", "useVoicePlayerContext", "play", "pause", "stop", "voicePlayerStore", "isRecordable", "useVoiceRecorderContext", "currentAudioUnit", "_b", "audioStorage", "AudioUnitDefaultValue", "playVoicePlayer", "pauseVoicePlayer", "stopVoicePlayer", "text", "useEffect", "voiceAudioPlayerElement", "document", "getElementById", "VOICE_PLAYER_AUDIO_ID", "playbackTime", "duration", "playingStatus", "PlaybackTime", "_a", "className", "_b", "time", "_c", "labelType", "LabelTypography", "CAPTION_2", "_d", "labelColor", "LabelColors", "ONCONTENT_1", "naturalTime", "hour", "Math", "floor", "min", "sec", "React", "createElement", "concat", "Label", "type", "color", "VoiceMessageItemBody", "_a", "className", "message", "channelUrl", "_c", "isByMe", "_d", "isReactionEnabled", "_e", "useState", "usingReaction", "setUsingReaction", "_f", "useVoicePlayer", "key", "messageId", "audioFileUrl", "url", "play", "pause", "_g", "playbackTime", "duration", "_h", "playingStatus", "VOICE_PLAYER_STATUS", "IDLE", "useEffect", "reactions", "length", "_b", "progresBarMaxSize", "useMemo", "metaArrays", "duration_1", "find", "metaArray", "value", "parseInt", "React", "createElement", "concat", "ProgressBar", "maxSize", "currentSize", "colorType", "ProgressBarColorTypes", "PRIMARY", "GRAY", "PAUSED", "onClick", "Icon", "width", "height", "type", "IconTypes", "PLAY", "fillColor", "IconColors", "PREPARING", "Loader", "SPINNER", "PRIMARY_2", "PLAYING", "PlaybackTime", "time", "labelType", "LabelTypography", "BODY_1", "labelColor", "LabelColors", "ONCONTENT_1", "ONBACKGROUND_1", "SUPPORTED_MIMES", "IMAGE", "VIDEO", "__assign", "SUPPORTED_MIMES", "ViewerTypes", "SINGLE", "MULTI", "useKeyDown", "_a", "props", "ref", "onClose", "onClickLeft", "noop", "onClickRight", "viewerType", "useLayoutEffect", "current", "focus", "onKeyDown", "useCallback", "event", "key", "stopPropagation", "mapFileViewerComponentProps", "_b", "fileInfoList", "currentIndex", "fileInfo", "name", "type", "url", "DeleteButton", "onDelete_1", "isByMe", "disableDelete_1", "disableDelete", "className", "React", "createElement", "concat", "Icon", "IconTypes", "DELETE", "fillColor", "IconColors", "GRAY", "ON_BACKGROUND_1", "height", "width", "onClick", "e", "Fragment", "Slider", "onClickLeft_1", "onClickRight_1", "SLIDE_LEFT", "SLIDER_BUTTON_ICON_SIDE_LENGTH", "FileViewerComponent", "useRef", "profileUrl", "nickname", "stringSet", "useContext", "LocalizationContext", "tabIndex", "Avatar", "src", "Label", "LabelTypography", "H_2", "color", "LabelColors", "ONBACKGROUND_1", "BODY_1", "ONBACKGROUND_2", "isSupportedFileView", "rel", "href", "target", "DOWNLOAD", "_extends", "CLOSE", "isVideo", "controls", "isImage", "alt", "H_1", "UI__FILE_VIEWER__UNSUPPORT", "FileViewer", "message", "_e", "statefulFileInfoList", "_f", "onDelete", "isMultipleFilesMessage", "castedMessage", "sender", "filter", "map", "fileName", "mimeType", "isFileMessage", "createPortal", "_c", "_d", "threadInfo", "replyCount", "document", "getElementById", "MODAL_ROOT", "ImageGrid", "_a", "children", "className", "message", "isReactionEnabled", "React", "createElement", "getClassName", "_b", "reactions", "length", "GRID_WIDTH_CHAT_WEB", "GRID_SIDE_PADDING", "GRID_GAP", "TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN", "PROFILE_IMAGE_WIDTH", "CHAT_MOBILE_SIDE_PADDING", "THREAD_PARENT_WIDTH", "THREAD_PARENT_SIDE_PADDING", "THREAD_PARENT_GRID_MARGIN_LEFT", "THREAD_CHILD_WIDTH", "THREAD_CHILD_SIDE_PADDING", "THREAD_CHILD_MOBILE_SIDE_PADDING", "THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN", "MULTIPLE_FILES_IMAGE_SIDE_LENGTH", "CHAT_WEB", "concat", "CHAT_MOBILE", "THREAD_PARENT_WEB", "THREAD_PARENT_MOBILE", "THREAD_CHILD_WEB", "THREAD_CHILD_MOBILE", "MULTIPLE_FILES_IMAGE_BORDER_RADIUS", "MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH", "ThreadMessageKind", "PARENT", "CHILD", "MultipleFilesMessageItemBody", "threadMessageKindKey", "_c", "statefulFileInfoList", "_d", "useState", "currentFileViewerIndex", "setCurrentFileViewerIndex", "onClose", "onClickLeft", "onClickRight", "Fragment", "FileViewer", "currentIndex", "map", "fileInfo", "index", "isGifValue", "isGif", "mimeType", "onClick", "sendingStatus", "SendingStatus", "SUCCEEDED", "undefined", "key", "url", "ImageRenderer", "fixedSize", "width", "maxSideLength", "height", "borderRadius", "getBorderRadiusForMultipleImageRenderer", "shadeOnHover", "isUploaded", "placeHolder", "style_", "style", "Icon", "type", "IconTypes", "GIF", "fillColor", "IconColors", "THUMBNAIL_ICON", "PHOTO", "ON_BACKGROUND_2", "defaultComponent", "THUMBNAIL_NONE", "useThreadMessageKindKeySelector", "threadMessageKind", "isMobile", "useMemo", "match", "with", "otherwise", "createStatefulFileInfoList", "oldStatefulFileInfoList", "fileInfoList", "fileName", "fileSize", "thumbnails", "Array", "isArray", "messageParams", "fileUrl", "file", "Blob", "URL", "createObjectURL", "useStatefulFileInfoList", "setStatefulFileInfoList", "useEffect", "isMultipleFilesMessage", "newStatefulFileInfoList", "join", "MessageContent", "_a", "className", "userId", "channel", "message", "_r", "disabled", "_s", "chainTop", "_t", "chainBottom", "_u", "isReactionEnabled", "_v", "disableQuoteMessage", "replyType", "threadReplySelectType", "nicknamesMap", "emojiContainer", "scrollToMessage", "showEdit", "showRemove", "showFileViewer", "resendMessage", "deleteMessage", "toggleReaction", "setQuoteMessage", "onReplyInThread", "onQuoteMessageClick", "onMessageHeightChange", "messageTypes", "getUIKitMessageTypes", "dateLocale", "useLocalization", "_w", "useSendbirdStateContext", "config", "eventHandlers", "onPressUserProfileHandler", "_b", "reaction", "onPressUserProfile", "_x", "useContext", "UserProfileContext", "disableUserProfile", "renderUserProfile", "avatarRef", "useRef", "contentRef", "isMobile", "useMediaQueryContext", "_y", "useState", "showMenu", "setShowMenu", "_z", "mouseHover", "setMouseHover", "_0", "supposedHover", "setSupposedHover", "isByMe", "sender", "_c", "sendingStatus", "isByMeClassName", "chainTopClassName", "isReactionEnabledInChannel", "isEphemeral", "isReactionEnabledClassName", "supposedHoverClassName", "useReplying", "parentMessageId", "parentMessage", "useReplyingClassName", "isOgMessageEnabledInGroupChannel", "isGroupChannel", "groupChannel", "enableOgtag", "displayThreadReplies", "threadInfo", "_d", "replyCount", "longPress", "useLongPress", "onLongPress", "onClick", "noop", "delay", "shouldPreventDefault", "threadMessageKindKey", "useThreadMessageKindKeySelector", "statefulFileInfoList", "useStatefulFileInfoList", "isAdminMessage", "_e", "call", "messageType", "React", "createElement", "ClientAdminMessage", "getClassName", "onMouseOver", "onMouseLeave", "isSendableMessage", "ContextMenu", "menuTrigger", "toggleDropdown", "Avatar", "concat", "src", "members", "find", "member", "profileUrl", "ref", "width", "height", "menuItems", "closeDropdown", "MenuItems", "parentRef", "parentContainRef", "style", "paddingTop", "paddingBottom", "user", "close", "currentUserId", "UserProfile", "onSuccess", "MessageItemMenu", "ThreadReplySelectType", "THREAD", "PARENT", "createdAt", "MessageItemReactionMenu", "_extends", "__assign", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONBACKGROUND_2", "_f", "nickname", "getSenderName", "QuoteMessage", "isUnavailable", "_h", "messageOffsetTimestamp", "_k", "_j", "MessageStatus", "isOGMessage", "OGMessageItemBody", "isMentionEnabled", "isTextMessage", "TextMessageItemBody", "getUIKitMessageType", "FILE", "FileMessageItemBody", "isMultipleFilesMessage", "MultipleFilesMessageItemBody", "isVoiceMessage", "VoiceMessageItemBody", "channelUrl", "_l", "url", "isThumbnailMessage", "ThumbnailMessageItemBody", "UNKNOWN", "UnknownMessageItemBody", "_m", "reactions", "length", "EmojiReactions", "memberNicknamesMap", "CAPTION_3", "format", "locale", "ThreadReplies", "isUserMessage", "_o", "isFileMessage", "_p", "_q", "MobileMenu", "hideMenu", "FileViewerComponent", "_a", "profileUrl", "nickname", "name", "type", "url", "isByMe", "onCancel", "onDelete", "disableDelete", "React", "createElement", "className", "Avatar", "height", "width", "src", "Label", "LabelTypography", "H_2", "color", "LabelColors", "ONBACKGROUND_1", "BODY_1", "ONBACKGROUND_2", "isSupportedFileView", "rel", "href", "target", "Icon", "IconTypes", "DOWNLOAD", "fillColor", "IconColors", "ON_BACKGROUND_1", "DELETE", "GRAY", "onClick", "CLOSE", "isVideo", "controls", "isImage", "alt", "H_1", "FileViewer", "message", "deleteMessage", "useChannelContext", "sender", "_e", "threadInfo", "user", "_c", "_b", "useSendbirdStateContext", "config", "userId", "_d", "replyCount", "_f", "createPortal", "then", "document", "getElementById", "MODAL_ROOT", "getModalDeleteMessageTitle", "stringSet", "message", "match", "when", "isMultipleFilesMessage", "filesCount", "fileInfoList", "length", "concat", "otherwise", "MODAL__DELETE_MESSAGE__TITLE", "RemoveMessage", "props", "_b", "onSubmit", "onCancel", "message", "stringSet", "useContext", "LocalizationContext", "deleteMessage", "useChannelContext", "React", "createElement", "Modal", "type", "ButtonTypes", "DANGER", "disabled", "threadInfo", "_a", "replyCount", "then", "submitText", "MESSAGE_MENU__DELETE", "titleText", "getModalDeleteMessageTitle", "useDebounce", "callback", "delay", "timeoutRef", "useRef", "useEffect", "current", "clearTimeout", "debounceFunction", "args", "_i", "arguments", "length", "setTimeout", "apply", "DELAY", "calcScrollBottom", "scrollHeight", "scrollTop", "useHandleOnScrollCallback", "_a", "hasMore", "hasNext", "onScroll", "scrollRef", "setShowScrollDownButton", "scrollCb", "useCallback", "element", "clientHeight", "scrollBottom", "SCROLL_BUFFER", "getMentionNodes", "root", "mentions", "querySelectorAll", "mentionsArray", "Array", "from", "useDirtyGetMentions", "_a", "_b", "ref", "logger", "targetNode", "current", "_c", "useState", "mentionNodes", "setMentionNodes", "useLayoutEffect", "useEffect", "config", "childList", "subtree", "callback", "mutationList", "hasMutation", "length", "observer", "MutationObserver", "observe", "info", "disconnect", "error", "useDidMountEffect", "func", "deps", "_a", "useState", "didMount", "setDidmount", "useEffect", "Message", "message", "hasSeparator", "chainTop", "chainBottom", "handleScroll", "renderCustomSeparator", "renderEditInput", "renderMessage", "renderMessageContent", "dateLocale", "useLocalization", "globalStore", "useSendbirdStateContext", "_d", "config", "userId", "isOnline", "isMentionEnabled", "userMention", "logger", "maxUserMentionCount", "maxMentionCount", "MAX_USER_MENTION_COUNT", "maxUserSuggestionCount", "maxSuggestionCount", "MAX_USER_SUGGESTION_COUNT", "_e", "useChannelContext", "initialized", "currentGroupChannel", "highLightedMessageId", "setHighLightedMessageId", "animatedMessageId", "setAnimatedMessageId", "updateMessage", "scrollToMessage", "replyType", "threadReplySelectType", "isReactionEnabled", "toggleReaction", "emojiContainer", "nicknamesMap", "setQuoteMessage", "resendMessage", "deleteMessage", "renderUserMentionItem", "onReplyInThread", "onQuoteMessageClick", "onMessageAnimated", "onMessageHighlighted", "onScrollCallback", "setIsScrolled", "_f", "showEdit", "setShowEdit", "_g", "showRemove", "setShowRemove", "_h", "showFileViewer", "setShowFileViewer", "_j", "isAnimated", "setIsAnimated", "_k", "isHighlighted", "setIsHighlighted", "_l", "mentionNickname", "setMentionNickname", "_m", "mentionedUsers", "setMentionedUsers", "_o", "mentionedUserIds", "setMentionedUserIds", "_p", "messageInputEvent", "setMessageInputEvent", "_q", "selectedUser", "setSelectedUser", "_r", "mentionSuggestedUsers", "setMentionSuggestedUsers", "editMessageInputRef", "useRef", "messageScrollRef", "displaySuggestedMentionList", "length", "isDisabledBecauseFrozen", "isDisabledBecauseMuted", "disabled", "handleOnScroll", "useHandleOnScrollCallback", "hasMore", "onScroll", "scrollRef", "mentionNodes", "useDirtyGetMentions", "ref", "ableMention", "filter", "i", "indexOf", "splice", "useLayoutEffect", "_b", "reactions", "updatedAt", "animationTimeout", "messageHighlightedTimeout", "messageId", "current", "setTimeout", "clearTimeout", "messageAnimatedTimeout", "renderedMessage", "useMemo", "renderedCustomSeparator", "React", "createElement", "createdAt", "className", "getClassName", "DateSeparator", "Label", "type", "LabelTypography", "CAPTION_2", "color", "LabelColors", "ONBACKGROUND_2", "format", "locale", "_c", "isUserMessage", "call", "Fragment", "SuggestedMentionList", "targetNickname", "inputEvent", "onUserItemClick", "user", "__spreadArray", "onFocusItemChange", "onFetchUsers", "users", "ableAddMention", "MessageInput", "isEdit", "channel", "mentionSelectedUser", "onStartTyping", "startTyping", "onUpdateMessage", "mentionTemplate", "endTyping", "onCancelEdit", "onUserMentioned", "onMentionStringChange", "mentionText", "onMentionedUserIdsUpdated", "userIds", "onKeyDown", "e", "key", "MessageInputKeys", "Enter", "ArrowUp", "ArrowDown", "style", "marginBottom", "MessageContent", "onMessageHeightChange", "RemoveMessageModal", "onCancel", "FileViewer", "compareMessagesForGrouping", "prevMessage", "currMessage", "nextMessage", "currentChannel", "replyType", "threadInfo", "sendingStatus", "isAcceptable", "isSameGroup", "getMessagePartsInfo", "_a", "_b", "allMessages", "_c", "isMessageGroupingEnabled", "_d", "currentIndex", "_e", "currentMessage", "_f", "currentChannel", "_g", "replyType", "previousMessage", "nextMessage", "_h", "compareMessagesForGrouping", "chainTop", "chainBottom", "previousMessageCreatedAt", "createdAt", "currentCreatedAt", "hasSeparator", "isSameDay", "UnreadCount", "_a", "_d", "className", "_e", "count", "_f", "time", "onClick", "stringSet", "useContext", "LocalizationContext", "timeArray", "_c", "toString", "_b", "call", "split", "splice", "CHANNEL__MESSAGE_LIST__NOTIFICATION__ON", "React", "createElement", "concat", "Label", "color", "LabelColors", "ONCONTENT_1", "type", "LabelTypography", "CAPTION_2", "CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE", "join", "Icon", "width", "height", "IconTypes", "CHEVRON_DOWN", "fillColor", "IconColors", "CONTENT", "FrozenNotification", "_a", "_b", "className", "stringSet", "useContext", "LocalizationContext", "React", "createElement", "concat", "Label", "type", "LabelTypography", "CAPTION_2", "CHANNEL_FROZEN", "DELAY", "useSetScrollToBottom", "_a", "loading", "_b", "useState", "scrollBottom", "setScrollBottom", "useEffect", "scrollCb", "e", "element", "target", "scrollHeight", "scrollTop", "offsetHeight", "scrollToBottomHandler", "useDebounce", "useScrollBehavior", "useChannelContext", "scrollRef", "scrollBehavior", "current", "style", "SCROLL_BOTTOM_PADDING", "MessageList", "className", "renderMessage", "renderPlaceholderEmpty", "renderCustomSeparator", "renderPlaceholderLoader", "_c", "allMessages", "localMessages", "hasMorePrev", "hasMoreNext", "setInitialTimeStamp", "setAnimatedMessageId", "setHighLightedMessageId", "isMessageGroupingEnabled", "onScrollCallback", "onScrollDownCallback", "messagesDispatcher", "messageActionTypes", "currentGroupChannel", "disableMarkAsRead", "filterMessageList", "replyType", "isScrolled", "unreadSince", "store", "useSendbirdStateContext", "allMessagesFiltered", "filter", "markAsReadScheduler", "config", "onScroll", "clientHeight", "isAboutSame", "SCROLL_BUFFER", "messages", "setTimeout", "utils", "error", "type", "MARK_AS_READ", "payload", "channel", "push", "onClickScrollBot", "_e", "_d", "moveScroll", "isBottomMessageAffected", "bottom", "handleOnScroll", "useHandleOnScrollCallback", "hasMore", "hasNext", "React", "createElement", "PlaceHolder", "PlaceHolderTypes", "LOADING", "length", "NO_MESSAGES", "Fragment", "concat", "ref", "map", "m", "idx", "getMessagePartsInfo", "currentIndex", "currentMessage", "currentChannel", "chainTop", "chainBottom", "hasSeparator", "isByMe", "sender", "userId", "MessageProvider", "message", "key", "messageId", "Message", "handleScroll", "isFrozen", "FrozenNotification", "UnreadCount", "count", "unreadMessageCount", "time", "onClick", "onKeyDown", "tabIndex", "role", "Icon", "width", "height", "IconTypes", "CHEVRON_DOWN", "fillColor", "IconColors", "PRIMARY", "componentClassname", "QuoteMessageThumbnail", "_a", "message", "isFileMessage", "isMultipleFilesMessage", "isVoiceMessage", "thumbnailUrl", "getMessageFirstFileThumbnailUrl", "_b", "call", "isImageMessage", "isVideoMessage", "getMessageFirstFileUrl", "_c", "fileInfoList", "length", "isImageFileInfo", "url", "React", "createElement", "className", "style", "width", "height", "src", "isThumbnailMessage", "ImageRenderer", "alt", "getMessageFirstFileType", "fixedSize", "isAudioMessage", "Icon", "type", "IconTypes", "FILE_AUDIO", "fillColor", "IconColors", "ON_BACKGROUND_2", "FILE_DOCUMENT", "QuoteMessageInput", "replyingMessage", "onClose", "stringSet", "useContext", "LocalizationContext", "fileMessage", "sender", "displayFileIcon", "getClassName", "concat", "left", "Label", "LabelTypography", "CAPTION_1", "color", "LabelColors", "ONBACKGROUND_1", "QUOTE_MESSAGE_INPUT__REPLY_TO", "nickname", "NO_NAME", "BODY_2", "ONBACKGROUND_3", "isGifMessage", "QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE", "QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO", "QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF", "isUserMessage", "getUIKitMessageType", "UIKitMessageTypes", "FILE", "getMessageFirstFileName", "VOICE_MESSAGE", "CLOSE", "onClick", "VoiceRecorderStatus", "PREPARING", "READY_TO_RECORD", "RECORDING", "COMPLETED", "noop", "useVoiceRecorder", "_a", "_b", "onRecordingStarted", "_c", "onRecordingEnded", "config", "useSendbirdStateContext", "voiceRecord", "maxRecordingTime", "voiceRecorder", "useVoiceRecorderContext", "isRecordable", "_d", "useState", "recordedFile", "setRecordedFile", "_e", "recordingStatus", "setRecordingStatus", "useEffect", "start", "useCallback", "startTimer", "audioFile", "stopTimer", "stop", "cancel", "_f", "recordingTime", "setRecordingTime", "timer", "interval", "setInterval", "prevTime", "newTime", "clearInterval", "recordingLimit", "VoiceMessageInputStatus", "READY_TO_RECORD", "RECORDING", "READY_TO_PLAY", "PLAYING", "ControlerIcon", "_a", "inputState", "React", "createElement", "className", "Icon", "width", "height", "type", "IconTypes", "PLAY", "fillColor", "IconColors", "ON_BACKGROUND_1", "VoiceMessageInput", "_b", "minRecordTime", "VOICE_RECORDER_DEFAULT_MIN", "maximumValue", "_c", "currentValue", "currentType", "onCancelClick", "onControlClick", "onSubmitClick", "renderCancelButton", "renderControlButton", "renderSubmitButton", "_d", "useState", "lastClickTime", "setLastClickTime", "isReadyToRecord", "useMemo", "isRecording", "isSendButtonDisabled", "isPlayMode", "stringSet", "useLocalization", "handleOnCancelClick", "currentTime", "Date", "now", "VOICE_RECORDER_CLICK_BUFFER_TIME", "handleOnControlClick", "useCallback", "handleOnSubmitClick", "ProgressBar", "disabled", "maxSize", "currentSize", "PlaybackTime", "time", "labelColor", "LabelColors", "ONBACKGROUND_4", "ONCONTENT_1", "TextButton", "onClick", "disableUnderline", "Label", "LabelTypography", "BUTTON_1", "color", "PRIMARY", "BUTTON__CANCEL", "concat", "SEND", "ON_BACKGROUND_4", "CONTENT", "VoiceMessageInputWrapper", "_a", "channel", "onCancelClick", "onSubmitClick", "uuid", "useRef", "uuidv4", "current", "_c", "useState", "audioFile", "setAudioFile", "_d", "VoiceMessageInputStatus", "READY_TO_RECORD", "voiceInputState", "setVoiceInputState", "_e", "isSubmitted", "setSubmit", "_f", "isDisabled", "setDisabled", "_g", "showModal", "setShowModal", "stringSet", "useLocalization", "config", "useSendbirdStateContext", "minRecordingTime", "_b", "voiceRecord", "VOICE_RECORDER_DEFAULT_MIN", "_h", "useVoiceRecorder", "onRecordingStarted", "RECORDING", "onRecordingEnded", "start", "stop", "cancel", "recordingTime", "recordingStatus", "recordingLimit", "voicePlayer", "useVoicePlayer", "channelUrl", "url", "key", "play", "pause", "playbackTime", "playingStatus", "stopVoicePlayer", "useEffect", "isDisabledBecauseFrozen", "isDisabledBecauseMuted", "myRole", "isFrozen", "myMutedState", "VOICE_PLAYER_STATUS", "PLAYING", "READY_TO_PLAY", "React", "createElement", "className", "VoiceMessageInput", "currentValue", "VoiceRecorderStatus", "COMPLETED", "maximumValue", "currentType", "onControlClick", "type", "Modal", "titleText", "MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED", "MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN", "hideFooter", "isCloseOnClickOutside", "onCancel", "Button", "ButtonTypes", "PRIMARY", "size", "ButtonSizes", "BIG", "onClick", "BUTTON__OK", "useHandleUploadFiles", "sendFileMessage", "sendMultipleFilesMessage", "quoteMessage", "logger", "uikitUploadSizeLimit", "uikitMultipleFilesMessageLimit", "openModal", "useGlobalModalContext", "handleUploadFiles", "useCallback", "fileList", "files", "Array", "from", "warning", "length", "info", "modalProps", "concat", "childElement", "closeModal", "ModalFooter", "submitText", "hideCancelButton", "onSubmit", "some", "file", "ONE_MiB", "Math", "floor", "imageFiles_1", "otherFiles_1", "forEach", "isImage", "push", "reduce", "previousPromise", "item", "then", "Promise", "resolve", "MessageInputWrapper", "props", "ref", "value", "renderFileUploadIcon", "renderVoiceMessageIcon", "renderSendMessageIcon", "propDisabled", "disabled", "channelContext", "useChannelContext", "currentGroupChannel", "initialized", "quoteMessage", "sendMessage", "sendFileMessage", "sendVoiceMessage", "sendMultipleFilesMessage", "setQuoteMessage", "messageInputRef", "renderUserMentionItem", "globalStore", "useSendbirdStateContext", "isMobile", "useMediaQueryContext", "channel", "_b", "config", "isOnline", "isMentionEnabled", "userMention", "isVoiceMessageEnabled", "logger", "isMultipleFilesMessageEnabled", "_a", "maxUserMentionCount", "maxMentionCount", "maxUserSuggestionCount", "maxSuggestionCount", "stringSet", "useContext", "LocalizationContext", "_c", "useState", "mentionNickname", "setMentionNickname", "_d", "mentionedUsers", "setMentionedUsers", "_e", "mentionedUserIds", "setMentionedUserIds", "_f", "selectedUser", "setSelectedUser", "_g", "mentionSuggestedUsers", "setMentionSuggestedUsers", "_h", "messageInputEvent", "setMessageInputEvent", "_j", "showVoiceMessageInput", "setShowVoiceMessageInput", "utils", "isOperator", "isBroadcast", "displaySuggestedMentionList", "length", "useEffect", "url", "mentionNodes", "useDirtyGetMentions", "ableMention", "filter", "userId", "i", "indexOf", "splice", "handleUploadFiles", "useHandleUploadFiles", "React", "createElement", "className", "concat", "SuggestedMentionList", "targetNickname", "inputEvent", "onUserItemClick", "user", "__spreadArray", "onFocusItemChange", "onFetchUsers", "users", "ableAddMention", "QuoteMessageInput", "replyingMessage", "onClose", "VoiceMessageInputWrapper", "onSubmitClick", "recordedFile", "duration", "onCancelClick", "MessageInput", "channelUrl", "mentionSelectedUser", "isSelectingMultipleFilesEnabled", "onVoiceMessageIconClick", "placeholder", "MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER", "MESSAGE_INPUT__PLACE_HOLDER__DISABLED", "MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT", "MESSAGE_INPUT__PLACE_HOLDER__MUTED", "onStartTyping", "startTyping", "onSendMessage", "message", "mentionTemplate", "endTyping", "onFileUpload", "fileList", "onUserMentioned", "onMentionStringChange", "mentionText", "onMentionedUserIdsUpdated", "userIds", "onKeyDown", "e", "key", "MessageInputKeys", "Enter", "ArrowUp", "ArrowDown", "forwardRef", "ChannelUI", "_a", "isLoading", "renderPlaceholderLoader", "renderPlaceholderInvalid", "renderPlaceholderEmpty", "renderChannelHeader", "renderMessage", "renderMessageInput", "renderTypingIndicator", "renderCustomSeparator", "renderFileUploadIcon", "renderVoiceMessageIcon", "renderSendMessageIcon", "_h", "useChannelContext", "channelUrl", "isInvalid", "globalStore", "useSendbirdStateContext", "sdkError", "_c", "_b", "stores", "sdkStore", "error", "logger", "_d", "config", "isOnline", "_e", "React", "createElement", "className", "PlaceHolder", "type", "PlaceHolderTypes", "LOADING", "NO_CHANNELS", "WRONG", "retryToConnect", "info", "ChannelHeader", "MessageList", "MessageInputWrapper", "_g", "_f", "groupChannel", "enableTypingIndicator", "TypingIndicator", "ConnectionStatus", "Channel", "props", "React", "createElement", "ChannelProvider", "channelUrl", "isReactionEnabled", "isMessageGroupingEnabled", "isMultipleFilesMessageEnabled", "showSearchIcon", "animatedMessage", "highlightedMessage", "startingPoint", "onBeforeSendUserMessage", "onBeforeSendFileMessage", "onBeforeUpdateUserMessage", "onBeforeSendVoiceMessage", "onBeforeSendMultipleFilesMessage", "onChatHeaderActionClick", "onSearchClick", "onBackClick", "replyType", "threadReplySelectType", "queries", "renderUserProfile", "filterMessageList", "disableUserProfile", "disableMarkAsRead", "onReplyInThread", "onQuoteMessageClick", "onMessageAnimated", "onMessageHighlighted", "scrollBehavior", "reconnectOnIdle", "ChannelUI", "isLoading", "renderPlaceholderLoader", "renderPlaceholderInvalid", "renderPlaceholderEmpty", "renderChannelHeader", "renderMessage", "renderMessageInput", "renderTypingIndicator", "renderCustomSeparator", "renderFileUploadIcon", "renderVoiceMessageIcon", "renderSendMessageIcon"]
}
